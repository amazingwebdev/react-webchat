{"version":3,"sources":["webpack:///public/app.js","webpack:///webpack/bootstrap 46492f546c16be40c899","webpack:///./src/App.tsx","webpack:///external \"React\"","webpack:///external \"ReactDOM\"","webpack:///./~/@reactivex/rxjs/index.js","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Rx.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Subject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Observable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/root.ts","webpack:///(webpack)/buildin/module.js","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/toSubscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Subscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isFunction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Subscription.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isArray.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isObject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/tryCatch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/errorObject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/UnsubscriptionError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Observer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/symbol/rxSubscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/symbol/observable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/ObjectUnsubscribedError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/SubjectSubscription.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/bindCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/BoundCallbackObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/AsyncSubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindNodeCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/bindNodeCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/BoundNodeCallbackObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ScalarObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/EmptyObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/OuterSubscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/subscribeToResult.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/symbol/iterator.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/InnerSubscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/defer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/defer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/DeferObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/empty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/empty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/forkJoin.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/forkJoin.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ForkJoinObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/from.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/from.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/FromObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/PromiseObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/IteratorObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayLikeObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/observeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Notification.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEvent.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/fromEvent.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEventPattern.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/fromEventPattern.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventPatternObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/fromPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/generate.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/GenerateObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/if.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/if.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/IfObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/interval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/interval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/IntervalObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isNumeric.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/async.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsyncAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/Action.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsyncScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Scheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/race.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/race.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/never.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/never.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/NeverObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/noop.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/of.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/of.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/onErrorResumeNext.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/onErrorResumeNext.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/pairs.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/pairs.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/PairsObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/range.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/range.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/RangeObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/using.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/using.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/UsingObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/throw.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/throw.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ErrorObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/timer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/timer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/TimerObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isDate.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/ajax.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/ajax.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/AjaxObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/webSocket.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/webSocket.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/WebSocketSubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/ReplaySubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/queue.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/assign.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/buffer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/buffer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/cache.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/cache.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/catch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/catch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/combineAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concatAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concatMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concatMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/count.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/count.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/dematerialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/dematerialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/debounce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounceTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/debounceTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/defaultIfEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/defaultIfEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/delay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/delay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/delayWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/delayWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinct.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinct.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctKey.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinctKey.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilKeyChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilKeyChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/do.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/do.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaust.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/exhaust.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaustMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/exhaustMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/expand.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/expand.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/elementAt.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/elementAt.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/ArgumentOutOfRangeError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/filter.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/filter.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/finally.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/finally.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/find.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/find.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/findIndex.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/findIndex.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/first.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/first.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/EmptyError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/groupBy.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/groupBy.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/Map.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/MapPolyfill.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/FastMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/ignoreElements.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/ignoreElements.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/isEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/isEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/audit.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/audit.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/auditTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/auditTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/last.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/last.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/let.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/let.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/every.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/every.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/map.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/map.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/materialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/materialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/max.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/max.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/reduce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeScan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeScan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/min.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/min.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/multicast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/multicast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/MulticastObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ConnectableObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/observeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/onErrorResumeNext.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/pairwise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/pairwise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/partition.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/partition.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/not.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/pluck.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/pluck.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publish.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publish.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishBehavior.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publishBehavior.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/BehaviorSubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishReplay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publishReplay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publishLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/race.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/reduce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/repeat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/repeat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/retry.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/retry.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/retryWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/retryWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/sample.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/sample.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/sampleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/sampleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/scan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/scan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/share.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/share.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/single.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/single.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/skip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/skip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/skipUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/skipWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/startWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/startWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/subscribeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/subscribeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/SubscribeOnObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/asap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/Immediate.ts","webpack:///(webpack)/~/node-libs-browser/~/timers-browserify/main.js","webpack:///(webpack)/~/node-libs-browser/~/process/browser.js","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/switch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/switch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/switchMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/switchMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/take.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/take.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/takeLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/takeUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/takeWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/throttle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/throttleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeInterval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timeInterval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeout.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timeout.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeoutWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timeoutWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timestamp.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timestamp.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/toArray.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/toArray.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/toPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/toPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/window.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/window.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/withLatestFrom.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/withLatestFrom.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/zipAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/zipAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/TestScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/ColdObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLoggable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLog.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/applyMixins.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/HotObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/VirtualTimeScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/animationFrame.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/AnimationFrame.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameScheduler.ts","webpack:///./src/directLine.ts","webpack:///./src/History.tsx","webpack:///./src/Timestamp.tsx","webpack:///./src/HistoryMessage.tsx","webpack:///./src/ImageMessage.tsx","webpack:///./src/TextMessage.tsx","webpack:///./src/HeroCard.tsx","webpack:///./src/Console.tsx"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__extends","this","d","b","__","constructor","hasOwnProperty","prototype","Object","create","__assign","assign","t","s","i","n","arguments","length","React","ReactDOM","rxjs_1","directLine_1","History_tsx_1","Console_tsx_1","guid","s4","Math","floor","random","toString","substring","outgoing$","Subject","console$","consoleStart","text","enableSend","incoming$","conversation","userId","getMessages","filter","botmessage","from","messagegroup$","map","images","path","imageURL","timestamp","Date","parse","created","merge","scan","messagegroups","message","ms","mgs","latest","messages","slice","push","autoscroll$","state$","startWith","combineLatest","distinctUntilChanged","autoscroll","console","state","log","conversation$","startConversation","getQueryParams","params","location","search","split","forEach","pair","App","_super","_this","historyActions","buttonImBack","postMessage","retry","subscribe","next","now","error","buttonOpenUrl","buttonPostBack","setAutoscroll","consoleActions","updateMessage","sendMessage","sendFile","files","_loop_1","numFiles","file","postFile","window","URL","createObjectURL","queryParams","appSecret","flatMap","setState","render","createElement","className","History","actions","Console","Component","document","getElementById","Subject_1","Observable_1","Observable","Subscription_1","Subscription","Subscriber_1","Subscriber","AsyncSubject_1","AsyncSubject","ReplaySubject_1","ReplaySubject","BehaviorSubject_1","BehaviorSubject","MulticastObservable_1","MulticastObservable","ConnectableObservable_1","ConnectableObservable","Notification_1","Notification","EmptyError_1","EmptyError","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ObjectUnsubscribedError_1","ObjectUnsubscribedError","UnsubscriptionError_1","UnsubscriptionError","timeInterval_1","TimeInterval","timestamp_1","Timestamp","TestScheduler_1","TestScheduler","VirtualTimeScheduler_1","VirtualTimeScheduler","AjaxObservable_1","AjaxResponse","AjaxError","AjaxTimeoutError","asap_1","async_1","queue_1","animationFrame_1","rxSubscriber_1","iterator_1","observable_1","Scheduler","asap","queue","animationFrame","async","Symbol","rxSubscriber","$$rxSubscriber","observable","$$observable","iterator","$$iterator","SubjectSubscription_1","SubjectSubscriber","destination","observers","closed","isStopped","hasError","thrownError","lift","operator","subject","AnonymousSubject","value","len","copy","err","complete","unsubscribe","_subscribe","subscriber","EMPTY","SubjectSubscription","asObservable","source","root_1","toSubscriber_1","_isScalar","observerOrNext","sink","toSubscriber","add","syncErrorThrowable","syncErrorThrown","syncErrorValue","PromiseCtor","root","Rx","config","Promise","Error","resolve","reject","subscription","global","objectTypes","boolean","function","object","number","string","undefined","self","freeGlobal","nodeType","webpackPolyfill","deprecate","paths","children","nextOrObserver","isFunction_1","Observer_1","destinationOrNext","empty","SafeSubscriber","_next","_error","_complete","_parent","context","isFunction","bind","_context","__tryOrSetError","__tryOrUnsub","fn","parent","_unsubscribe","x","isArray_1","isObject_1","tryCatch_1","errorObject_1","errors","hasErrors","_a","_subscriptions","trial","tryCatch","errorObject","e","isArray","index","sub","isObject","concat","teardown","remove","subscriptions","subscriptionIndex","indexOf","splice","Array","tryCatcher","tryCatchTarget","apply","join","name","stack","getSymbolObservable","subscriberIndex","bindCallback_1","bindCallback","BoundCallbackObservable_1","BoundCallbackObservable","dispatchNext","arg","dispatchError","callbackFunc","selector","args","scheduler","func","_i","schedule","dispatch","handler","handlerFn","innerArgs","result_1","result","result_2","hasNext","hasCompleted","bindNodeCallback_1","bindNodeCallback","BoundNodeCallbackObservable_1","BoundNodeCallbackObservable","shift","combineLatest_1","observables","project","isScheduler_1","isScheduler","pop","ArrayObservable_1","ArrayObservable","CombineLatestOperator","ScalarObservable_1","EmptyObservable_1","array","of","ScalarObservable","EmptyObservable","count","done","unshift","OuterSubscriber_1","subscribeToResult_1","none","CombineLatestSubscriber","active","values","toRespond","subscribeToResult","notifyComplete","unused","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","oldVal","_tryProject","OuterSubscriber","notifyError","outerSubscriber","InnerSubscriber_1","InnerSubscriber","isPromise_1","isPromise","then","setTimeout","item","obs","TypeError","Set","Map","keys","getOwnPropertyNames","key","concat_1","concatStatic","mergeAll_1","MergeAllOperator","mergeAll","concurrent","Number","POSITIVE_INFINITY","observer","MergeAllSubscriber","buffer","defer_1","defer","DeferObservable_1","DeferObservable","observableFactory","DeferSubscriber","factory","tryDefer","_callFactory","empty_1","forkJoin_1","forkJoin","ForkJoinObservable_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","total","innerSubscription","_hasValue","from_1","FromObservable_1","FromObservable","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","isArrayLike","ish","PromiseObservable","IteratorObservable","ArrayLikeObservable","ObserveOnSubscriber","promise","getIterator","obj","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","abs","maxSafeInteger","isFinite","valueAsNumber","str","idx","charAt","arr","pow","arrayLike","observeOn","delay","ObserveOnOperator","notification","observe","scheduleMessage","ObserveOnMessage","createNext","createError","createComplete","kind","exception","hasValue","accept","toObservable","undefinedValueNotification","completeNotification","fromEvent_1","fromEvent","FromEventObservable_1","FromEventObservable","isNodeStyleEventEmmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","eventName","options","target","setupSubscription","source_1","source_2","source_3","fromEventPattern_1","fromEventPattern","FromEventPatternObservable_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","_callAddHandler","errorSubscriber","fromPromise_1","fromPromise","GenerateObservable_1","generate","GenerateObservable","selfSelector","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","if_1","_if","IfObservable_1","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","interval_1","interval","IntervalObservable_1","IntervalObservable","isNumeric_1","period","isNumeric","val","parseFloat","AsyncAction_1","AsyncScheduler_1","AsyncScheduler","AsyncAction","Action_1","work","pending","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","Action","Scheduler_1","scheduled","action","SchedulerAction","merge_1","mergeStatic","last","race_1","race","raceStatic","RaceOperator","RaceSubscriber","hasFirst","never_1","never","NeverObservable_1","NeverObservable","noop_1","noop","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairs_1","pairs","PairsObservable_1","PairsObservable","range_1","range","RangeObservable_1","RangeObservable","start","_count","using_1","using","UsingObservable_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","throw_1","_throw","ErrorObservable_1","ErrorObservable","timer_1","timer","TimerObservable_1","TimerObservable","isDate_1","dueTime","isDate","initialDelay","zip_1","zip","zipStatic","zipProto","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","ajax_1","ajax","AjaxObservable","getCORSRequest","XMLHttpRequest","xhr","withCredentials","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","url","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","timeout","prop","AjaxSubscriber","get","post","put","getJSON","FormData","serializeBody","send","_b","user","password","open","setHeaders","setupEvents","contentType","splitIndex","encodeURI","JSON","stringify","setRequestHeader","progressSubscriber","ontimeout","xhrTimeout","upload","onprogress","xhrProgress","onerror","xhrError","onreadystatechange","xhrReadyStateChange","readyState","status_1","status","responseText","abort","originalEvent","responseXML","webSocket_1","webSocket","WebSocketSubject_1","WebSocketSubject","assign_1","urlConfigOrSource","WebSocketCtor","WebSocket","_output","data","sock","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","socket","protocol","close","onopen","openObserver","closingObserver","code","reason","onclose","closeObserver","wasClean","onmessage","bufferSize","windowTime","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","time","max","QueueAction_1","QueueScheduler_1","QueueScheduler","QueueAction","output","buffer_1","closingNotifier","BufferOperator","BufferSubscriber","bufferCount_1","bufferCount","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","bufferTime_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","spliceIndex","bufferToggle_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferWhen_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","cache_1","cache","outerSub","refs","getSubject","catch_1","_catch","CatchOperator","caught","CatchSubscriber","combineAll_1","combineAll","concatAll_1","concatAll","concatMap_1","concatMap","mergeMap_1","MergeMapOperator","mergeMap","MergeMapSubscriber","_tryNext","_innerSub","_notifyResultSelector","concatMapTo_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","mergeMapTo","MergeMapToSubscriber","trySelectResult","count_1","predicate","CountOperator","CountSubscriber","_tryPredicate","dematerialize_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","debounce_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","durationSubscription","emitValue","duration","debounceTime_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","defaultIfEmpty_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","delay_1","absoluteDelay","delayFor","DelayOperator","DelaySubscriber","_schedule","scheduleNotification","DelayMessage","delayWhen_1","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","distinct_1","distinct","compare","flushes","DistinctOperator","DistinctSubscriber","found","y","distinctKey_1","distinctKey","distinctUntilChanged_1","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","Boolean","distinctUntilKeyChanged_1","distinctUntilKeyChanged","do_1","_do","DoOperator","DoSubscriber","safeSubscriber","exhaust_1","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaustMap_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","expand_1","expand","ExpandOperator","ExpandSubscriber","subscribeToProjection","elementAt_1","elementAt","ElementAtOperator","ElementAtSubscriber","filter_1","thisArg","FilterOperator","FilterSubscriber","finally_1","_finally","callback","FinallyOperator","FinallySubscriber","find_1","find","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex_1","findIndex","first_1","first","FirstOperator","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","groupBy_1","groupBy","elementSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap","element","group","set","groupedObservable","GroupedObservable","GroupDurationSubscriber","clear","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","MapPolyfill_1","MapPolyfill","size","_values","_keys","cb","ignoreElements_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","isEmpty_1","IsEmptyOperator","IsEmptySubscriber","audit_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","auditTime_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","last_1","LastOperator","LastSubscriber","let_1","letProto","letBind","every_1","every","EveryOperator","EverySubscriber","everyValueMatch","map_1","MapOperator","MapSubscriber","mapTo_1","mapTo","MapToOperator","MapToSubscriber","materialize_1","materialize","MaterializeOperator","MaterializeSubscriber","max_1","comparer","reduce_1","ReduceOperator","reduce","accumulator","seed","ReduceSubscriber","acc","hasSeed","_tryReduce","flatMapTo","mergeScan_1","mergeScan","MergeScanOperator","MergeScanSubscriber","min_1","min","multicast_1","multicast","subjectOrSubjectFactory","subjectFactory","connectable","connect","_refCount","_subject","connection","_connection","ConnectableSubscriber","refCount","RefCountOperator","refCounter","RefCountSubscriber","sharedConnection","pairwise_1","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","partition_1","partition","not_1","not","pred","notPred","pluck_1","pluck","properties","plucker","props","mapper","currentProp","publish_1","publish","publishBehavior_1","publishBehavior","_value","defineProperty","getValue","enumerable","configurable","publishReplay_1","publishReplay","publishLast_1","publishLast","repeat_1","repeat","RepeatOperator","RepeatSubscriber","retry_1","RetryOperator","RetrySubscriber","retryWhen_1","retryWhen","notifier","RetryWhenOperator","RetryWhenSubscriber","retries","retriesSubscription","sample_1","sample","SampleOperator","SampleSubscriber","sampleTime_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","scan_1","ScanOperator","ScanSubscriber","accumulatorSet","_seed","share_1","share","shareSubjectFactory","single_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","skip_1","skip","SkipOperator","SkipSubscriber","skipUntil_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipWhile_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","startWith_1","subscribeOn_1","subscribeOn","SubscribeOnObservable_1","SubscribeOnObservable","delayTime","AsapAction_1","AsapScheduler_1","AsapScheduler","AsapAction","Immediate_1","Immediate","setImmediate","clearImmediate","ImmediateDefinition","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Timeout","clearFn","_id","_clearFn","immediateIds","nextImmediateId","clearTimeout","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","_onTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","cachedSetTimeout","run","cachedClearTimeout","Item","fun","title","browser","env","argv","version","versions","once","removeAllListeners","emit","binding","cwd","chdir","dir","umask","switch_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switchMap_1","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMapTo_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","take_1","take","TakeOperator","TakeSubscriber","takeLast_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeUntil_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeWhile_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","throttle_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttleTime_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","timeInterval","TimeIntervalOperator","TimeIntervalSubscriber","lastTime","span","timeout_1","due","errorToSend","absoluteTimeout","waitFor","TimeoutOperator","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeoutWith_1","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","TimestampOperator","TimestampSubscriber","toArray_1","toArray","ToArrayOperator","ToArraySubscriber","toPromise_1","toPromise","window_1","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","windowCount_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","windowTime_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","dispatchWindowTimeSpanOnly","dispatchWindowCreation","timeSpanState","dispatchWindowClose","closeWindow","WindowTimeSubscriber","window_2","window_3","window_4","windowToggle_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowWhen_1","windowWhen","unsubscribeClosingNotification","closingNotification","withLatestFrom_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","zipAll_1","zipAll","ColdObservable_1","HotObservable_1","SubscriptionLog_1","assertDeepEqual","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","ColdObservable","createHotObservable","HotObservable","materializeInnerObservable","outerFrame","frame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","unsubscribedFrame","toBe","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","setup","readyFlushTests","test","SubscriptionLog","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","SubscriptionLoggable_1","applyMixins_1","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","applyMixins","SubscriptionLoggable","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","maxFrames","VirtualAction","sort","sortActions","a","AnimationFrameAction_1","AnimationFrameScheduler_1","AnimationFrameScheduler","AnimationFrameAction","AnimationFrame_1","AnimationFrame","requestAnimationFrame","cancelAnimationFrame","RequestAnimationFrameDefinition","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","domain","baseUrl","Accept","Authorization","error$","ajaxResponse","conversationId","Content-Type","token","formData","append","messagesGenerator","watermark","getMessageGroup","messageGroup","someMessages","Timestamp_tsx_1","HistoryMessage_tsx_1","componentDidUpdate","prevProps","prevState","scrollme","scrollTop","scrollHeight","onScroll","offsetHeight","messagegroup","HistoryMessage","timeStuff","milliseconds","minutes","hours","toLocaleDateString","nextRender","setNextRender","ts","forceUpdate","componentDidMount","componentWillUnmount","ImageMessage_tsx_1","TextMessage_tsx_1","HeroCard_tsx_1","inside","ImageMessage","includes","HeroCard","TextMessage","class","src","textify","line","content","alt","buttons","type","subtitle","buttonActions","imBack","openUrl","postBack","image","button","onClick","multiple","onChange","width","height","xmlns","autoFocus","onKeyPress","disabled","placeholder"],"mappings":"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","file":"./public/app.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar __assign = (this && this.__assign) || Object.assign || function(t) {\n\t    for (var s, i = 1, n = arguments.length; i < n; i++) {\n\t        s = arguments[i];\n\t        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n\t            t[p] = s[p];\n\t    }\n\t    return t;\n\t};\n\tvar React = __webpack_require__(2);\n\tvar ReactDOM = __webpack_require__(3);\n\tvar rxjs_1 = __webpack_require__(4);\n\tvar directLine_1 = __webpack_require__(347);\n\tvar History_tsx_1 = __webpack_require__(348);\n\tvar Console_tsx_1 = __webpack_require__(354);\n\tvar guid = function () {\n\t    var s4 = function () { return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1); };\n\t    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n\t};\n\tvar outgoing$ = new rxjs_1.Subject();\n\tvar console$ = new rxjs_1.Subject();\n\tvar consoleStart = { text: \"\", enableSend: true };\n\tvar incoming$ = function (conversation, userId) {\n\t    return directLine_1.getMessages(conversation)\n\t        .filter(function (botmessage) { return botmessage.from != userId; });\n\t};\n\tvar messagegroup$ = function (conversation, userId) {\n\t    return incoming$(conversation, userId)\n\t        .map(function (botmessage) { return ({\n\t        text: botmessage.text,\n\t        images: botmessage.images.map(function (path) { return directLine_1.imageURL(path); }),\n\t        from: \"bot\",\n\t        timestamp: Date.parse(botmessage.created)\n\t    }); })\n\t        .merge(outgoing$)\n\t        .scan(function (messagegroups, message) {\n\t        var ms;\n\t        var mgs;\n\t        if (messagegroups.length === 0) {\n\t            ms = [message];\n\t            mgs = [];\n\t        }\n\t        else {\n\t            var latest = messagegroups[messagegroups.length - 1];\n\t            if (message.timestamp - latest.timestamp < 60 * 1000) {\n\t                ms = latest.messages.slice();\n\t                ms.push(message);\n\t                mgs = messagegroups.slice(0, messagegroups.length - 1);\n\t            }\n\t            else {\n\t                ms = [message];\n\t                mgs = messagegroups.slice();\n\t            }\n\t        }\n\t        mgs.push({ messages: ms, timestamp: message.timestamp });\n\t        return mgs;\n\t    }, []);\n\t};\n\tvar autoscroll$ = new rxjs_1.Subject();\n\tvar state$ = function (conversation, userId) {\n\t    return messagegroup$(conversation, userId).startWith([])\n\t        .combineLatest(autoscroll$.distinctUntilChanged().startWith(true), console$.startWith(consoleStart), function (messagegroups, autoscroll, console) { return ({\n\t        conversation: conversation,\n\t        messagegroups: messagegroups,\n\t        autoscroll: autoscroll,\n\t        console: console\n\t    }); })\n\t        .do(function (state) { return console.log(\"state\", state); });\n\t};\n\tvar conversation$ = directLine_1.startConversation;\n\tvar getQueryParams = function () {\n\t    var params = {};\n\t    location.search.\n\t        substring(1).\n\t        split(\"&\").\n\t        forEach(function (pair) {\n\t        var p = pair.split(\"=\");\n\t        params[p[0]] = p[1];\n\t    });\n\t    return params;\n\t};\n\tvar App = (function (_super) {\n\t    __extends(App, _super);\n\t    function App() {\n\t        var _this = this;\n\t        _super.call(this);\n\t        this.historyActions = {\n\t            buttonImBack: function (text) {\n\t                directLine_1.postMessage(text, _this.state.conversation, _this.state.userId)\n\t                    .retry(2)\n\t                    .subscribe(function () {\n\t                    outgoing$.next({\n\t                        text: text,\n\t                        from: \"me\",\n\t                        timestamp: Date.now()\n\t                    });\n\t                }, function (error) {\n\t                    console.log(\"failed to post message\");\n\t                });\n\t            },\n\t            buttonOpenUrl: function (text) {\n\t                console.log(\"open URL\", text);\n\t            },\n\t            buttonPostBack: function (text) {\n\t                directLine_1.postMessage(text, _this.state.conversation, _this.state.userId)\n\t                    .retry(2)\n\t                    .subscribe(function () {\n\t                    console.log(\"quietly posted message to bot\", text);\n\t                }, function (error) {\n\t                    console.log(\"failed to post message\");\n\t                });\n\t            },\n\t            setAutoscroll: function (autoscroll) {\n\t                autoscroll$.next(autoscroll);\n\t            }\n\t        };\n\t        this.consoleActions = {\n\t            updateMessage: function (text) {\n\t                console$.next({ text: text, enableSend: _this.state.console.enableSend });\n\t            },\n\t            sendMessage: function () {\n\t                console$.next({ text: _this.state.console.text, enableSend: false });\n\t                directLine_1.postMessage(_this.state.console.text, _this.state.conversation, _this.state.userId)\n\t                    .retry(2)\n\t                    .subscribe(function () {\n\t                    outgoing$.next({\n\t                        text: _this.state.console.text,\n\t                        from: \"me\",\n\t                        timestamp: Date.now()\n\t                    });\n\t                    console$.next({\n\t                        text: \"\",\n\t                        enableSend: true\n\t                    });\n\t                    autoscroll$.next(true);\n\t                }, function (error) {\n\t                    console.log(\"failed to post message\");\n\t                    console$.next({ text: _this.state.console.text, enableSend: true });\n\t                });\n\t            },\n\t            sendFile: function (files) {\n\t                var _loop_1 = function(i, numFiles) {\n\t                    var file = files[i];\n\t                    directLine_1.postFile(file, _this.state.conversation)\n\t                        .retry(2)\n\t                        .subscribe(function () {\n\t                        outgoing$.next({\n\t                            images: [window.URL.createObjectURL(file)],\n\t                            from: \"me\",\n\t                            timestamp: Date.now()\n\t                        });\n\t                    }, function (error) {\n\t                        console.log(\"failed to post file\");\n\t                    });\n\t                };\n\t                for (var i = 0, numFiles = files.length; i < numFiles; i++) {\n\t                    _loop_1(i, numFiles);\n\t                }\n\t            }\n\t        };\n\t        this.state = {\n\t            userId: guid(),\n\t            conversation: null,\n\t            messagegroups: [],\n\t            autoscroll: true,\n\t            console: consoleStart\n\t        };\n\t        var queryParams = getQueryParams();\n\t        var appSecret = queryParams['s'];\n\t        conversation$(appSecret)\n\t            .flatMap(function (conversation) { return state$(conversation, _this.state.userId); })\n\t            .subscribe(function (state) { return _this.setState(state); }, function (error) { return console.log(\"errors\", error); });\n\t    }\n\t    App.prototype.render = function () {\n\t        return React.createElement(\"div\", {className: \"wc-app\"}, React.createElement(\"div\", {className: \"wc-header\"}, \"WebChat\"), React.createElement(History_tsx_1.History, {messagegroups: this.state.messagegroups, autoscroll: this.state.autoscroll, actions: this.historyActions}), React.createElement(Console_tsx_1.Console, __assign({actions: this.consoleActions}, this.state.console)));\n\t    };\n\t    return App;\n\t}(React.Component));\n\tReactDOM.render(React.createElement(App, null), document.getElementById(\"app\"));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = React;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = ReactDOM;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(5);\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/* tslint:disable:no-unused-variable */\n\t// Subject imported before Observable to bypass circular dependency issue since\n\t// Subject extends Observable and Observable references Subject in it's\n\t// definition\n\tvar Subject_1 = __webpack_require__(6);\n\texports.Subject = Subject_1.Subject;\n\t/* tslint:enable:no-unused-variable */\n\tvar Observable_1 = __webpack_require__(7);\n\texports.Observable = Observable_1.Observable;\n\t// statics\n\t/* tslint:disable:no-use-before-declare */\n\t__webpack_require__(24);\n\t__webpack_require__(28);\n\t__webpack_require__(31);\n\t__webpack_require__(43);\n\t__webpack_require__(47);\n\t__webpack_require__(50);\n\t__webpack_require__(52);\n\t__webpack_require__(55);\n\t__webpack_require__(63);\n\t__webpack_require__(66);\n\t__webpack_require__(69);\n\t__webpack_require__(71);\n\t__webpack_require__(73);\n\t__webpack_require__(76);\n\t__webpack_require__(85);\n\t__webpack_require__(88);\n\t__webpack_require__(90);\n\t__webpack_require__(94);\n\t__webpack_require__(96);\n\t__webpack_require__(98);\n\t__webpack_require__(101);\n\t__webpack_require__(104);\n\t__webpack_require__(107);\n\t__webpack_require__(110);\n\t__webpack_require__(114);\n\t//dom\n\t__webpack_require__(117);\n\t__webpack_require__(120);\n\t//operators\n\t__webpack_require__(128);\n\t__webpack_require__(130);\n\t__webpack_require__(132);\n\t__webpack_require__(134);\n\t__webpack_require__(136);\n\t__webpack_require__(138);\n\t__webpack_require__(140);\n\t__webpack_require__(142);\n\t__webpack_require__(144);\n\t__webpack_require__(145);\n\t__webpack_require__(146);\n\t__webpack_require__(148);\n\t__webpack_require__(151);\n\t__webpack_require__(154);\n\t__webpack_require__(156);\n\t__webpack_require__(158);\n\t__webpack_require__(160);\n\t__webpack_require__(162);\n\t__webpack_require__(164);\n\t__webpack_require__(166);\n\t__webpack_require__(168);\n\t__webpack_require__(170);\n\t__webpack_require__(172);\n\t__webpack_require__(174);\n\t__webpack_require__(176);\n\t__webpack_require__(178);\n\t__webpack_require__(180);\n\t__webpack_require__(182);\n\t__webpack_require__(184);\n\t__webpack_require__(187);\n\t__webpack_require__(189);\n\t__webpack_require__(191);\n\t__webpack_require__(193);\n\t__webpack_require__(195);\n\t__webpack_require__(198);\n\t__webpack_require__(203);\n\t__webpack_require__(205);\n\t__webpack_require__(207);\n\t__webpack_require__(209);\n\t__webpack_require__(211);\n\t__webpack_require__(213);\n\t__webpack_require__(215);\n\t__webpack_require__(217);\n\t__webpack_require__(219);\n\t__webpack_require__(221);\n\t__webpack_require__(223);\n\t__webpack_require__(226);\n\t__webpack_require__(227);\n\t__webpack_require__(228);\n\t__webpack_require__(229);\n\t__webpack_require__(230);\n\t__webpack_require__(232);\n\t__webpack_require__(234);\n\t__webpack_require__(238);\n\t__webpack_require__(239);\n\t__webpack_require__(240);\n\t__webpack_require__(242);\n\t__webpack_require__(245);\n\t__webpack_require__(247);\n\t__webpack_require__(249);\n\t__webpack_require__(252);\n\t__webpack_require__(254);\n\t__webpack_require__(256);\n\t__webpack_require__(257);\n\t__webpack_require__(258);\n\t__webpack_require__(260);\n\t__webpack_require__(262);\n\t__webpack_require__(264);\n\t__webpack_require__(266);\n\t__webpack_require__(268);\n\t__webpack_require__(270);\n\t__webpack_require__(272);\n\t__webpack_require__(274);\n\t__webpack_require__(276);\n\t__webpack_require__(278);\n\t__webpack_require__(280);\n\t__webpack_require__(282);\n\t__webpack_require__(291);\n\t__webpack_require__(293);\n\t__webpack_require__(295);\n\t__webpack_require__(297);\n\t__webpack_require__(299);\n\t__webpack_require__(301);\n\t__webpack_require__(303);\n\t__webpack_require__(305);\n\t__webpack_require__(307);\n\t__webpack_require__(309);\n\t__webpack_require__(311);\n\t__webpack_require__(313);\n\t__webpack_require__(315);\n\t__webpack_require__(317);\n\t__webpack_require__(319);\n\t__webpack_require__(321);\n\t__webpack_require__(323);\n\t__webpack_require__(325);\n\t__webpack_require__(327);\n\t__webpack_require__(329);\n\t__webpack_require__(331);\n\t__webpack_require__(333);\n\t__webpack_require__(334);\n\t/* tslint:disable:no-unused-variable */\n\tvar Subscription_1 = __webpack_require__(13);\n\texports.Subscription = Subscription_1.Subscription;\n\tvar Subscriber_1 = __webpack_require__(11);\n\texports.Subscriber = Subscriber_1.Subscriber;\n\tvar AsyncSubject_1 = __webpack_require__(27);\n\texports.AsyncSubject = AsyncSubject_1.AsyncSubject;\n\tvar ReplaySubject_1 = __webpack_require__(123);\n\texports.ReplaySubject = ReplaySubject_1.ReplaySubject;\n\tvar BehaviorSubject_1 = __webpack_require__(251);\n\texports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;\n\tvar MulticastObservable_1 = __webpack_require__(236);\n\texports.MulticastObservable = MulticastObservable_1.MulticastObservable;\n\tvar ConnectableObservable_1 = __webpack_require__(237);\n\texports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;\n\tvar Notification_1 = __webpack_require__(62);\n\texports.Notification = Notification_1.Notification;\n\tvar EmptyError_1 = __webpack_require__(197);\n\texports.EmptyError = EmptyError_1.EmptyError;\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(186);\n\texports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(22);\n\texports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;\n\tvar UnsubscriptionError_1 = __webpack_require__(18);\n\texports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;\n\tvar timeInterval_1 = __webpack_require__(310);\n\texports.TimeInterval = timeInterval_1.TimeInterval;\n\tvar timestamp_1 = __webpack_require__(316);\n\texports.Timestamp = timestamp_1.Timestamp;\n\tvar TestScheduler_1 = __webpack_require__(336);\n\texports.TestScheduler = TestScheduler_1.TestScheduler;\n\tvar VirtualTimeScheduler_1 = __webpack_require__(342);\n\texports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;\n\tvar AjaxObservable_1 = __webpack_require__(119);\n\texports.AjaxResponse = AjaxObservable_1.AjaxResponse;\n\texports.AjaxError = AjaxObservable_1.AjaxError;\n\texports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;\n\tvar asap_1 = __webpack_require__(285);\n\tvar async_1 = __webpack_require__(80);\n\tvar queue_1 = __webpack_require__(124);\n\tvar animationFrame_1 = __webpack_require__(343);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\tvar iterator_1 = __webpack_require__(41);\n\tvar observable_1 = __webpack_require__(21);\n\t/* tslint:enable:no-unused-variable */\n\t/**\n\t * @typedef {Object} Rx.Scheduler\n\t * @property {Scheduler} queue Schedules on a queue in the current event frame\n\t * (trampoline scheduler). Use this for iteration operations.\n\t * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n\t * fastest transport mechanism available, either Node.js' `process.nextTick()`\n\t * or Web Worker MessageChannel or setTimeout or others. Use this for\n\t * asynchronous conversions.\n\t * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n\t * time-based operations.\n\t * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n\t * Use this for synchronizing with the platform's painting\n\t */\n\tvar Scheduler = {\n\t    asap: asap_1.asap,\n\t    queue: queue_1.queue,\n\t    animationFrame: animationFrame_1.animationFrame,\n\t    async: async_1.async\n\t};\n\texports.Scheduler = Scheduler;\n\t/**\n\t * @typedef {Object} Rx.Symbol\n\t * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n\t * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n\t * an object that has all of the traits of an Rx Subscriber, including the\n\t * ability to add and remove subscriptions to the subscription chain and\n\t * guarantees involving event triggering (can't \"next\" after unsubscription,\n\t * etc).\n\t * @property {Symbol|string} observable A symbol to use as a property name to\n\t * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n\t * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n\t * to retrieve an iterator from an object.\n\t */\n\tvar Symbol = {\n\t    rxSubscriber: rxSubscriber_1.$$rxSubscriber,\n\t    observable: observable_1.$$observable,\n\t    iterator: iterator_1.$$iterator\n\t};\n\texports.Symbol = Symbol;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(22);\n\tvar SubjectSubscription_1 = __webpack_require__(23);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\t/**\n\t * @class SubjectSubscriber<T>\n\t */\n\tvar SubjectSubscriber = (function (_super) {\n\t    __extends(SubjectSubscriber, _super);\n\t    function SubjectSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t    }\n\t    return SubjectSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.SubjectSubscriber = SubjectSubscriber;\n\t/**\n\t * @class Subject<T>\n\t */\n\tvar Subject = (function (_super) {\n\t    __extends(Subject, _super);\n\t    function Subject() {\n\t        _super.call(this);\n\t        this.observers = [];\n\t        this.closed = false;\n\t        this.isStopped = false;\n\t        this.hasError = false;\n\t        this.thrownError = null;\n\t    }\n\t    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {\n\t        return new SubjectSubscriber(this);\n\t    };\n\t    Subject.prototype.lift = function (operator) {\n\t        var subject = new AnonymousSubject(this, this);\n\t        subject.operator = operator;\n\t        return subject;\n\t    };\n\t    Subject.prototype.next = function (value) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        if (!this.isStopped) {\n\t            var observers = this.observers;\n\t            var len = observers.length;\n\t            var copy = observers.slice();\n\t            for (var i = 0; i < len; i++) {\n\t                copy[i].next(value);\n\t            }\n\t        }\n\t    };\n\t    Subject.prototype.error = function (err) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.hasError = true;\n\t        this.thrownError = err;\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].error(err);\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.complete = function () {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].complete();\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.unsubscribe = function () {\n\t        this.isStopped = true;\n\t        this.closed = true;\n\t        this.observers = null;\n\t    };\n\t    Subject.prototype._subscribe = function (subscriber) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else if (this.hasError) {\n\t            subscriber.error(this.thrownError);\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else if (this.isStopped) {\n\t            subscriber.complete();\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else {\n\t            this.observers.push(subscriber);\n\t            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n\t        }\n\t    };\n\t    Subject.prototype.asObservable = function () {\n\t        var observable = new Observable_1.Observable();\n\t        observable.source = this;\n\t        return observable;\n\t    };\n\t    Subject.create = function (destination, source) {\n\t        return new AnonymousSubject(destination, source);\n\t    };\n\t    return Subject;\n\t}(Observable_1.Observable));\n\texports.Subject = Subject;\n\t/**\n\t * @class AnonymousSubject<T>\n\t */\n\tvar AnonymousSubject = (function (_super) {\n\t    __extends(AnonymousSubject, _super);\n\t    function AnonymousSubject(destination, source) {\n\t        _super.call(this);\n\t        this.destination = destination;\n\t        this.source = source;\n\t    }\n\t    AnonymousSubject.prototype.next = function (value) {\n\t        var destination = this.destination;\n\t        if (destination && destination.next) {\n\t            destination.next(value);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.error = function (err) {\n\t        var destination = this.destination;\n\t        if (destination && destination.error) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.complete = function () {\n\t        var destination = this.destination;\n\t        if (destination && destination.complete) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    AnonymousSubject.prototype._subscribe = function (subscriber) {\n\t        var source = this.source;\n\t        if (source) {\n\t            return this.source.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t    };\n\t    return AnonymousSubject;\n\t}(Subject));\n\texports.AnonymousSubject = AnonymousSubject;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar toSubscriber_1 = __webpack_require__(10);\n\tvar observable_1 = __webpack_require__(21);\n\t/**\n\t * A representation of any set of values over any amount of time. This the most basic building block\n\t * of RxJS.\n\t *\n\t * @class Observable<T>\n\t */\n\tvar Observable = (function () {\n\t    /**\n\t     * @constructor\n\t     * @param {Function} subscribe the function that is  called when the Observable is\n\t     * initially subscribed to. This function is given a Subscriber, to which new values\n\t     * can be `next`ed, or an `error` method can be called to raise an error, or\n\t     * `complete` can be called to notify of a successful completion.\n\t     */\n\t    function Observable(subscribe) {\n\t        this._isScalar = false;\n\t        if (subscribe) {\n\t            this._subscribe = subscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Creates a new Observable, with this Observable as the source, and the passed\n\t     * operator defined as the new observable's operator.\n\t     * @method lift\n\t     * @param {Operator} operator the operator defining the operation to take on the observable\n\t     * @return {Observable} a new observable with the Operator applied\n\t     */\n\t    Observable.prototype.lift = function (operator) {\n\t        var observable = new Observable();\n\t        observable.source = this;\n\t        observable.operator = operator;\n\t        return observable;\n\t    };\n\t    /**\n\t     * Registers handlers for handling emitted values, error and completions from the observable, and\n\t     *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n\t     * @method subscribe\n\t     * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n\t     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n\t     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n\t     *  the error will be thrown as unhandled\n\t     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n\t     * @return {ISubscription} a subscription reference to the registered handlers\n\t     */\n\t    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n\t        var operator = this.operator;\n\t        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n\t        if (operator) {\n\t            operator.call(sink, this);\n\t        }\n\t        else {\n\t            sink.add(this._subscribe(sink));\n\t        }\n\t        if (sink.syncErrorThrowable) {\n\t            sink.syncErrorThrowable = false;\n\t            if (sink.syncErrorThrown) {\n\t                throw sink.syncErrorValue;\n\t            }\n\t        }\n\t        return sink;\n\t    };\n\t    /**\n\t     * @method forEach\n\t     * @param {Function} next a handler for each value emitted by the observable\n\t     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n\t     * @return {Promise} a promise that either resolves on observable completion or\n\t     *  rejects with the handled error\n\t     */\n\t    Observable.prototype.forEach = function (next, PromiseCtor) {\n\t        var _this = this;\n\t        if (!PromiseCtor) {\n\t            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t                PromiseCtor = root_1.root.Rx.config.Promise;\n\t            }\n\t            else if (root_1.root.Promise) {\n\t                PromiseCtor = root_1.root.Promise;\n\t            }\n\t        }\n\t        if (!PromiseCtor) {\n\t            throw new Error('no Promise impl found');\n\t        }\n\t        return new PromiseCtor(function (resolve, reject) {\n\t            var subscription = _this.subscribe(function (value) {\n\t                if (subscription) {\n\t                    // if there is a subscription, then we can surmise\n\t                    // the next handling is asynchronous. Any errors thrown\n\t                    // need to be rejected explicitly and unsubscribe must be\n\t                    // called manually\n\t                    try {\n\t                        next(value);\n\t                    }\n\t                    catch (err) {\n\t                        reject(err);\n\t                        subscription.unsubscribe();\n\t                    }\n\t                }\n\t                else {\n\t                    // if there is NO subscription, then we're getting a nexted\n\t                    // value synchronously during subscription. We can just call it.\n\t                    // If it errors, Observable's `subscribe` will ensure the\n\t                    // unsubscription logic is called, then synchronously rethrow the error.\n\t                    // After that, Promise will trap the error and send it\n\t                    // down the rejection path.\n\t                    next(value);\n\t                }\n\t            }, reject, resolve);\n\t        });\n\t    };\n\t    Observable.prototype._subscribe = function (subscriber) {\n\t        return this.source.subscribe(subscriber);\n\t    };\n\t    /**\n\t     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n\t     * @method Symbol.observable\n\t     * @return {Observable} this instance of the observable\n\t     */\n\t    Observable.prototype[observable_1.$$observable] = function () {\n\t        return this;\n\t    };\n\t    // HACK: Since TypeScript inherits static properties too, we have to\n\t    // fight against TypeScript here so Subject can have a different static create signature\n\t    /**\n\t     * Creates a new cold Observable by calling the Observable constructor\n\t     * @static true\n\t     * @owner Observable\n\t     * @method create\n\t     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n\t     * @return {Observable} a new cold observable\n\t     */\n\t    Observable.create = function (subscribe) {\n\t        return new Observable(subscribe);\n\t    };\n\t    return Observable;\n\t}());\n\texports.Observable = Observable;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module, global) {\"use strict\";\n\tvar objectTypes = {\n\t    'boolean': false,\n\t    'function': true,\n\t    'object': true,\n\t    'number': false,\n\t    'string': false,\n\t    'undefined': false\n\t};\n\texports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n\t/* tslint:disable:no-unused-variable */\n\tvar freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\tvar freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\tvar freeGlobal = objectTypes[typeof global] && global;\n\tif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n\t    exports.root = freeGlobal;\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)(module), (function() { return this; }())))\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\tfunction toSubscriber(nextOrObserver, error, complete) {\n\t    if (nextOrObserver) {\n\t        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n\t            return nextOrObserver;\n\t        }\n\t        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {\n\t            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();\n\t        }\n\t    }\n\t    if (!nextOrObserver && !error && !complete) {\n\t        return new Subscriber_1.Subscriber();\n\t    }\n\t    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n\t}\n\texports.toSubscriber = toSubscriber;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isFunction_1 = __webpack_require__(12);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar Observer_1 = __webpack_require__(19);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\t/**\n\t * Implements the {@link Observer} interface and extends the\n\t * {@link Subscription} class. While the {@link Observer} is the public API for\n\t * consuming the values of an {@link Observable}, all Observers get converted to\n\t * a Subscriber, in order to provide Subscription-like capabilities such as\n\t * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n\t * implementing operators, but it is rarely used as a public API.\n\t *\n\t * @class Subscriber<T>\n\t */\n\tvar Subscriber = (function (_super) {\n\t    __extends(Subscriber, _super);\n\t    /**\n\t     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n\t     * defined Observer or a `next` callback function.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     */\n\t    function Subscriber(destinationOrNext, error, complete) {\n\t        _super.call(this);\n\t        this.syncErrorValue = null;\n\t        this.syncErrorThrown = false;\n\t        this.syncErrorThrowable = false;\n\t        this.isStopped = false;\n\t        switch (arguments.length) {\n\t            case 0:\n\t                this.destination = Observer_1.empty;\n\t                break;\n\t            case 1:\n\t                if (!destinationOrNext) {\n\t                    this.destination = Observer_1.empty;\n\t                    break;\n\t                }\n\t                if (typeof destinationOrNext === 'object') {\n\t                    if (destinationOrNext instanceof Subscriber) {\n\t                        this.destination = destinationOrNext;\n\t                        this.destination.add(this);\n\t                    }\n\t                    else {\n\t                        this.syncErrorThrowable = true;\n\t                        this.destination = new SafeSubscriber(this, destinationOrNext);\n\t                    }\n\t                    break;\n\t                }\n\t            default:\n\t                this.syncErrorThrowable = true;\n\t                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n\t                break;\n\t        }\n\t    }\n\t    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };\n\t    /**\n\t     * A static factory for a Subscriber, given a (potentially partial) definition\n\t     * of an Observer.\n\t     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n\t     * Observer represented by the given arguments.\n\t     */\n\t    Subscriber.create = function (next, error, complete) {\n\t        var subscriber = new Subscriber(next, error, complete);\n\t        subscriber.syncErrorThrowable = false;\n\t        return subscriber;\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `next` from\n\t     * the Observable, with a value. The Observable may call this method 0 or more\n\t     * times.\n\t     * @param {T} [value] The `next` value.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.next = function (value) {\n\t        if (!this.isStopped) {\n\t            this._next(value);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `error` from\n\t     * the Observable, with an attached {@link Error}. Notifies the Observer that\n\t     * the Observable has experienced an error condition.\n\t     * @param {any} [err] The `error` exception.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._error(err);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive a valueless notification of type\n\t     * `complete` from the Observable. Notifies the Observer that the Observable\n\t     * has finished sending push-based notifications.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._complete();\n\t        }\n\t    };\n\t    Subscriber.prototype.unsubscribe = function () {\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        this.isStopped = true;\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    Subscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t    };\n\t    Subscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this.unsubscribe();\n\t    };\n\t    Subscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this.unsubscribe();\n\t    };\n\t    return Subscriber;\n\t}(Subscription_1.Subscription));\n\texports.Subscriber = Subscriber;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SafeSubscriber = (function (_super) {\n\t    __extends(SafeSubscriber, _super);\n\t    function SafeSubscriber(_parent, observerOrNext, error, complete) {\n\t        _super.call(this);\n\t        this._parent = _parent;\n\t        var next;\n\t        var context = this;\n\t        if (isFunction_1.isFunction(observerOrNext)) {\n\t            next = observerOrNext;\n\t        }\n\t        else if (observerOrNext) {\n\t            context = observerOrNext;\n\t            next = observerOrNext.next;\n\t            error = observerOrNext.error;\n\t            complete = observerOrNext.complete;\n\t            if (isFunction_1.isFunction(context.unsubscribe)) {\n\t                this.add(context.unsubscribe.bind(context));\n\t            }\n\t            context.unsubscribe = this.unsubscribe.bind(this);\n\t        }\n\t        this._context = context;\n\t        this._next = next;\n\t        this._error = error;\n\t        this._complete = complete;\n\t    }\n\t    SafeSubscriber.prototype.next = function (value) {\n\t        if (!this.isStopped && this._next) {\n\t            var _parent = this._parent;\n\t            if (!_parent.syncErrorThrowable) {\n\t                this.__tryOrUnsub(this._next, value);\n\t            }\n\t            else if (this.__tryOrSetError(_parent, this._next, value)) {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var _parent = this._parent;\n\t            if (this._error) {\n\t                if (!_parent.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parent, this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else if (!_parent.syncErrorThrowable) {\n\t                this.unsubscribe();\n\t                throw err;\n\t            }\n\t            else {\n\t                _parent.syncErrorValue = err;\n\t                _parent.syncErrorThrown = true;\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            var _parent = this._parent;\n\t            if (this._complete) {\n\t                if (!_parent.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(this._complete);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parent, this._complete);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            this.unsubscribe();\n\t            throw err;\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            parent.syncErrorValue = err;\n\t            parent.syncErrorThrown = true;\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    SafeSubscriber.prototype._unsubscribe = function () {\n\t        var _parent = this._parent;\n\t        this._context = null;\n\t        this._parent = null;\n\t        _parent.unsubscribe();\n\t    };\n\t    return SafeSubscriber;\n\t}(Subscriber));\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isFunction(x) {\n\t    return typeof x === 'function';\n\t}\n\texports.isFunction = isFunction;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isArray_1 = __webpack_require__(14);\n\tvar isObject_1 = __webpack_require__(15);\n\tvar isFunction_1 = __webpack_require__(12);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar UnsubscriptionError_1 = __webpack_require__(18);\n\t/**\n\t * Represents a disposable resource, such as the execution of an Observable. A\n\t * Subscription has one important method, `unsubscribe`, that takes no argument\n\t * and just disposes the resource held by the subscription.\n\t *\n\t * Additionally, subscriptions may be grouped together through the `add()`\n\t * method, which will attach a child Subscription to the current Subscription.\n\t * When a Subscription is unsubscribed, all its children (and its grandchildren)\n\t * will be unsubscribed as well.\n\t *\n\t * @class Subscription\n\t */\n\tvar Subscription = (function () {\n\t    /**\n\t     * @param {function(): void} [unsubscribe] A function describing how to\n\t     * perform the disposal of resources when the `unsubscribe` method is called.\n\t     */\n\t    function Subscription(unsubscribe) {\n\t        /**\n\t         * A flag to indicate whether this Subscription has already been unsubscribed.\n\t         * @type {boolean}\n\t         */\n\t        this.closed = false;\n\t        if (unsubscribe) {\n\t            this._unsubscribe = unsubscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Disposes the resources held by the subscription. May, for instance, cancel\n\t     * an ongoing Observable execution or cancel any other type of work that\n\t     * started when the Subscription was created.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.unsubscribe = function () {\n\t        var hasErrors = false;\n\t        var errors;\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        this.closed = true;\n\t        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n\t        this._subscriptions = null;\n\t        if (isFunction_1.isFunction(_unsubscribe)) {\n\t            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n\t            if (trial === errorObject_1.errorObject) {\n\t                hasErrors = true;\n\t                (errors = errors || []).push(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        if (isArray_1.isArray(_subscriptions)) {\n\t            var index = -1;\n\t            var len = _subscriptions.length;\n\t            while (++index < len) {\n\t                var sub = _subscriptions[index];\n\t                if (isObject_1.isObject(sub)) {\n\t                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n\t                    if (trial === errorObject_1.errorObject) {\n\t                        hasErrors = true;\n\t                        errors = errors || [];\n\t                        var err = errorObject_1.errorObject.e;\n\t                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n\t                            errors = errors.concat(err.errors);\n\t                        }\n\t                        else {\n\t                            errors.push(err);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (hasErrors) {\n\t            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n\t        }\n\t    };\n\t    /**\n\t     * Adds a tear down to be called during the unsubscribe() of this\n\t     * Subscription.\n\t     *\n\t     * If the tear down being added is a subscription that is already\n\t     * unsubscribed, is the same reference `add` is being called on, or is\n\t     * `Subscription.EMPTY`, it will not be added.\n\t     *\n\t     * If this subscription is already in an `closed` state, the passed\n\t     * tear down logic will be executed immediately.\n\t     *\n\t     * @param {TeardownLogic} teardown The additional logic to execute on\n\t     * teardown.\n\t     * @return {Subscription} Returns the Subscription used or created to be\n\t     * added to the inner subscriptions list. This Subscription can be used with\n\t     * `remove()` to remove the passed teardown logic from the inner subscriptions\n\t     * list.\n\t     */\n\t    Subscription.prototype.add = function (teardown) {\n\t        if (!teardown || (teardown === Subscription.EMPTY)) {\n\t            return Subscription.EMPTY;\n\t        }\n\t        if (teardown === this) {\n\t            return this;\n\t        }\n\t        var sub = teardown;\n\t        switch (typeof teardown) {\n\t            case 'function':\n\t                sub = new Subscription(teardown);\n\t            case 'object':\n\t                if (sub.closed || typeof sub.unsubscribe !== 'function') {\n\t                    break;\n\t                }\n\t                else if (this.closed) {\n\t                    sub.unsubscribe();\n\t                }\n\t                else {\n\t                    (this._subscriptions || (this._subscriptions = [])).push(sub);\n\t                }\n\t                break;\n\t            default:\n\t                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n\t        }\n\t        return sub;\n\t    };\n\t    /**\n\t     * Removes a Subscription from the internal list of subscriptions that will\n\t     * unsubscribe during the unsubscribe process of this Subscription.\n\t     * @param {Subscription} subscription The subscription to remove.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.remove = function (subscription) {\n\t        // HACK: This might be redundant because of the logic in `add()`\n\t        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {\n\t            return;\n\t        }\n\t        var subscriptions = this._subscriptions;\n\t        if (subscriptions) {\n\t            var subscriptionIndex = subscriptions.indexOf(subscription);\n\t            if (subscriptionIndex !== -1) {\n\t                subscriptions.splice(subscriptionIndex, 1);\n\t            }\n\t        }\n\t    };\n\t    Subscription.EMPTY = (function (empty) {\n\t        empty.closed = true;\n\t        return empty;\n\t    }(new Subscription()));\n\t    return Subscription;\n\t}());\n\texports.Subscription = Subscription;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isObject(x) {\n\t    return x != null && typeof x === 'object';\n\t}\n\texports.isObject = isObject;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar tryCatchTarget;\n\tfunction tryCatcher() {\n\t    try {\n\t        return tryCatchTarget.apply(this, arguments);\n\t    }\n\t    catch (e) {\n\t        errorObject_1.errorObject.e = e;\n\t        return errorObject_1.errorObject;\n\t    }\n\t}\n\tfunction tryCatch(fn) {\n\t    tryCatchTarget = fn;\n\t    return tryCatcher;\n\t}\n\texports.tryCatch = tryCatch;\n\t;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// typeof any so that it we don't have to cast when comparing a result to the error object\n\texports.errorObject = { e: {} };\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when one or more errors have occurred during the\n\t * `unsubscribe` of a {@link Subscription}.\n\t */\n\tvar UnsubscriptionError = (function (_super) {\n\t    __extends(UnsubscriptionError, _super);\n\t    function UnsubscriptionError(errors) {\n\t        _super.call(this);\n\t        this.errors = errors;\n\t        var err = Error.call(this, errors ?\n\t            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n\t        this.name = err.name = 'UnsubscriptionError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return UnsubscriptionError;\n\t}(Error));\n\texports.UnsubscriptionError = UnsubscriptionError;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.empty = {\n\t    closed: true,\n\t    next: function (value) { },\n\t    error: function (err) { throw err; },\n\t    complete: function () { }\n\t};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar Symbol = root_1.root.Symbol;\n\texports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n\t    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tfunction getSymbolObservable(context) {\n\t    var $$observable;\n\t    var Symbol = context.Symbol;\n\t    if (typeof Symbol === 'function') {\n\t        if (Symbol.observable) {\n\t            $$observable = Symbol.observable;\n\t        }\n\t        else {\n\t            $$observable = Symbol('observable');\n\t            Symbol.observable = $$observable;\n\t        }\n\t    }\n\t    else {\n\t        $$observable = '@@observable';\n\t    }\n\t    return $$observable;\n\t}\n\texports.getSymbolObservable = getSymbolObservable;\n\texports.$$observable = getSymbolObservable(root_1.root);\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an action is invalid because the object has been\n\t * unsubscribed.\n\t *\n\t * @see {@link Subject}\n\t * @see {@link BehaviorSubject}\n\t *\n\t * @class ObjectUnsubscribedError\n\t */\n\tvar ObjectUnsubscribedError = (function (_super) {\n\t    __extends(ObjectUnsubscribedError, _super);\n\t    function ObjectUnsubscribedError() {\n\t        var err = _super.call(this, 'object unsubscribed');\n\t        this.name = err.name = 'ObjectUnsubscribedError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return ObjectUnsubscribedError;\n\t}(Error));\n\texports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubjectSubscription = (function (_super) {\n\t    __extends(SubjectSubscription, _super);\n\t    function SubjectSubscription(subject, subscriber) {\n\t        _super.call(this);\n\t        this.subject = subject;\n\t        this.subscriber = subscriber;\n\t        this.closed = false;\n\t    }\n\t    SubjectSubscription.prototype.unsubscribe = function () {\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        this.closed = true;\n\t        var subject = this.subject;\n\t        var observers = subject.observers;\n\t        this.subject = null;\n\t        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n\t            return;\n\t        }\n\t        var subscriberIndex = observers.indexOf(this.subscriber);\n\t        if (subscriberIndex !== -1) {\n\t            observers.splice(subscriberIndex, 1);\n\t        }\n\t    };\n\t    return SubjectSubscription;\n\t}(Subscription_1.Subscription));\n\texports.SubjectSubscription = SubjectSubscription;\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bindCallback_1 = __webpack_require__(25);\n\tObservable_1.Observable.bindCallback = bindCallback_1.bindCallback;\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar BoundCallbackObservable_1 = __webpack_require__(26);\n\texports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar AsyncSubject_1 = __webpack_require__(27);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar BoundCallbackObservable = (function (_super) {\n\t    __extends(BoundCallbackObservable, _super);\n\t    function BoundCallbackObservable(callbackFunc, selector, args, scheduler) {\n\t        _super.call(this);\n\t        this.callbackFunc = callbackFunc;\n\t        this.selector = selector;\n\t        this.args = args;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /* tslint:enable:max-line-length */\n\t    /**\n\t     * Converts a callback API to a function that returns an Observable.\n\t     *\n\t     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n\t     * it will return a function `g` that when called as `g(x)` will output an\n\t     * Observable.</span>\n\t     *\n\t     * `bindCallback` is not an operator because its input and output are not\n\t     * Observables. The input is a function `func` with some parameters, but the\n\t     * last parameter must be a callback function that `func` calls when it is\n\t     * done. The output of `bindCallback` is a function that takes the same\n\t     * parameters as `func`, except the last one (the callback). When the output\n\t     * function is called with arguments, it will return an Observable where the\n\t     * results will be delivered to.\n\t     *\n\t     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n\t     * // Suppose we have jQuery.getJSON('/my/url', callback)\n\t     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n\t     * var result = getJSONAsObservable('/my/url');\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link bindNodeCallback}\n\t     * @see {@link from}\n\t     * @see {@link fromPromise}\n\t     *\n\t     * @param {function} func Function with a callback as the last parameter.\n\t     * @param {function} selector A function which takes the arguments from the\n\t     * callback and maps those a value to emit on the output Observable.\n\t     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n\t     * callbacks.\n\t     * @return {function(...params: *): Observable} A function which returns the\n\t     * Observable that delivers the same values the callback would deliver.\n\t     * @static true\n\t     * @name bindCallback\n\t     * @owner Observable\n\t     */\n\t    BoundCallbackObservable.create = function (func, selector, scheduler) {\n\t        if (selector === void 0) { selector = undefined; }\n\t        return function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            return new BoundCallbackObservable(func, selector, args, scheduler);\n\t        };\n\t    };\n\t    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n\t        var callbackFunc = this.callbackFunc;\n\t        var args = this.args;\n\t        var scheduler = this.scheduler;\n\t        var subject = this.subject;\n\t        if (!scheduler) {\n\t            if (!subject) {\n\t                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n\t                var handler = function handlerFn() {\n\t                    var innerArgs = [];\n\t                    for (var _i = 0; _i < arguments.length; _i++) {\n\t                        innerArgs[_i - 0] = arguments[_i];\n\t                    }\n\t                    var source = handlerFn.source;\n\t                    var selector = source.selector, subject = source.subject;\n\t                    if (selector) {\n\t                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                        if (result_1 === errorObject_1.errorObject) {\n\t                            subject.error(errorObject_1.errorObject.e);\n\t                        }\n\t                        else {\n\t                            subject.next(result_1);\n\t                            subject.complete();\n\t                        }\n\t                    }\n\t                    else {\n\t                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n\t                        subject.complete();\n\t                    }\n\t                };\n\t                // use named function instance to avoid closure.\n\t                handler.source = this;\n\t                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t                if (result === errorObject_1.errorObject) {\n\t                    subject.error(errorObject_1.errorObject.e);\n\t                }\n\t            }\n\t            return subject.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber });\n\t        }\n\t    };\n\t    BoundCallbackObservable.dispatch = function (state) {\n\t        var self = this;\n\t        var source = state.source, subscriber = state.subscriber;\n\t        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n\t        var subject = source.subject;\n\t        if (!subject) {\n\t            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n\t            var handler = function handlerFn() {\n\t                var innerArgs = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    innerArgs[_i - 0] = arguments[_i];\n\t                }\n\t                var source = handlerFn.source;\n\t                var selector = source.selector, subject = source.subject;\n\t                if (selector) {\n\t                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                    if (result_2 === errorObject_1.errorObject) {\n\t                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n\t                    }\n\t                    else {\n\t                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n\t                    }\n\t                }\n\t                else {\n\t                    var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n\t                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n\t                }\n\t            };\n\t            // use named function to pass values in without closure\n\t            handler.source = source;\n\t            var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t            if (result === errorObject_1.errorObject) {\n\t                subject.error(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        self.add(subject.subscribe(subscriber));\n\t    };\n\t    return BoundCallbackObservable;\n\t}(Observable_1.Observable));\n\texports.BoundCallbackObservable = BoundCallbackObservable;\n\tfunction dispatchNext(arg) {\n\t    var value = arg.value, subject = arg.subject;\n\t    subject.next(value);\n\t    subject.complete();\n\t}\n\tfunction dispatchError(arg) {\n\t    var err = arg.err, subject = arg.subject;\n\t    subject.error(err);\n\t}\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * @class AsyncSubject<T>\n\t */\n\tvar AsyncSubject = (function (_super) {\n\t    __extends(AsyncSubject, _super);\n\t    function AsyncSubject() {\n\t        _super.apply(this, arguments);\n\t        this.value = null;\n\t        this.hasNext = false;\n\t        this.hasCompleted = false;\n\t    }\n\t    AsyncSubject.prototype._subscribe = function (subscriber) {\n\t        if (this.hasCompleted && this.hasNext) {\n\t            subscriber.next(this.value);\n\t            subscriber.complete();\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else if (this.hasError) {\n\t            subscriber.error(this.thrownError);\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        return _super.prototype._subscribe.call(this, subscriber);\n\t    };\n\t    AsyncSubject.prototype.next = function (value) {\n\t        if (!this.hasCompleted) {\n\t            this.value = value;\n\t            this.hasNext = true;\n\t        }\n\t    };\n\t    AsyncSubject.prototype.complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.hasNext) {\n\t            _super.prototype.next.call(this, this.value);\n\t        }\n\t        _super.prototype.complete.call(this);\n\t    };\n\t    return AsyncSubject;\n\t}(Subject_1.Subject));\n\texports.AsyncSubject = AsyncSubject;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bindNodeCallback_1 = __webpack_require__(29);\n\tObservable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar BoundNodeCallbackObservable_1 = __webpack_require__(30);\n\texports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar AsyncSubject_1 = __webpack_require__(27);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar BoundNodeCallbackObservable = (function (_super) {\n\t    __extends(BoundNodeCallbackObservable, _super);\n\t    function BoundNodeCallbackObservable(callbackFunc, selector, args, scheduler) {\n\t        _super.call(this);\n\t        this.callbackFunc = callbackFunc;\n\t        this.selector = selector;\n\t        this.args = args;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /* tslint:enable:max-line-length */\n\t    /**\n\t     * Converts a Node.js-style callback API to a function that returns an\n\t     * Observable.\n\t     *\n\t     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n\t     * callback is expected to be of type `callback(error, result)`.</span>\n\t     *\n\t     * `bindNodeCallback` is not an operator because its input and output are not\n\t     * Observables. The input is a function `func` with some parameters, but the\n\t     * last parameter must be a callback function that `func` calls when it is\n\t     * done. The callback function is expected to follow Node.js conventions,\n\t     * where the first argument to the callback is an error, while remaining\n\t     * arguments are the callback result. The output of `bindNodeCallback` is a\n\t     * function that takes the same parameters as `func`, except the last one (the\n\t     * callback). When the output function is called with arguments, it will\n\t     * return an Observable where the results will be delivered to.\n\t     *\n\t     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n\t     * import * as fs from 'fs';\n\t     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n\t     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link bindCallback}\n\t     * @see {@link from}\n\t     * @see {@link fromPromise}\n\t     *\n\t     * @param {function} func Function with a callback as the last parameter.\n\t     * @param {function} selector A function which takes the arguments from the\n\t     * callback and maps those a value to emit on the output Observable.\n\t     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n\t     * callbacks.\n\t     * @return {function(...params: *): Observable} A function which returns the\n\t     * Observable that delivers the same values the Node.js callback would\n\t     * deliver.\n\t     * @static true\n\t     * @name bindNodeCallback\n\t     * @owner Observable\n\t     */\n\t    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n\t        if (selector === void 0) { selector = undefined; }\n\t        return function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            return new BoundNodeCallbackObservable(func, selector, args, scheduler);\n\t        };\n\t    };\n\t    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n\t        var callbackFunc = this.callbackFunc;\n\t        var args = this.args;\n\t        var scheduler = this.scheduler;\n\t        var subject = this.subject;\n\t        if (!scheduler) {\n\t            if (!subject) {\n\t                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n\t                var handler = function handlerFn() {\n\t                    var innerArgs = [];\n\t                    for (var _i = 0; _i < arguments.length; _i++) {\n\t                        innerArgs[_i - 0] = arguments[_i];\n\t                    }\n\t                    var source = handlerFn.source;\n\t                    var selector = source.selector, subject = source.subject;\n\t                    var err = innerArgs.shift();\n\t                    if (err) {\n\t                        subject.error(err);\n\t                    }\n\t                    else if (selector) {\n\t                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                        if (result_1 === errorObject_1.errorObject) {\n\t                            subject.error(errorObject_1.errorObject.e);\n\t                        }\n\t                        else {\n\t                            subject.next(result_1);\n\t                            subject.complete();\n\t                        }\n\t                    }\n\t                    else {\n\t                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n\t                        subject.complete();\n\t                    }\n\t                };\n\t                // use named function instance to avoid closure.\n\t                handler.source = this;\n\t                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t                if (result === errorObject_1.errorObject) {\n\t                    subject.error(errorObject_1.errorObject.e);\n\t                }\n\t            }\n\t            return subject.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber });\n\t        }\n\t    };\n\t    return BoundNodeCallbackObservable;\n\t}(Observable_1.Observable));\n\texports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\n\tfunction dispatch(state) {\n\t    var self = this;\n\t    var source = state.source, subscriber = state.subscriber;\n\t    // XXX: cast to `any` to access to the private field in `source`.\n\t    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n\t    var subject = source.subject;\n\t    if (!subject) {\n\t        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n\t        var handler = function handlerFn() {\n\t            var innerArgs = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                innerArgs[_i - 0] = arguments[_i];\n\t            }\n\t            var source = handlerFn.source;\n\t            var selector = source.selector, subject = source.subject;\n\t            var err = innerArgs.shift();\n\t            if (err) {\n\t                subject.error(err);\n\t            }\n\t            else if (selector) {\n\t                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                if (result_2 === errorObject_1.errorObject) {\n\t                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n\t                }\n\t                else {\n\t                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n\t                }\n\t            }\n\t            else {\n\t                var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n\t                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n\t            }\n\t        };\n\t        // use named function to pass values in without closure\n\t        handler.source = source;\n\t        var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t        if (result === errorObject_1.errorObject) {\n\t            subject.error(errorObject_1.errorObject.e);\n\t        }\n\t    }\n\t    self.add(subject.subscribe(subscriber));\n\t}\n\tfunction dispatchNext(arg) {\n\t    var value = arg.value, subject = arg.subject;\n\t    subject.next(value);\n\t    subject.complete();\n\t}\n\tfunction dispatchError(arg) {\n\t    var err = arg.err, subject = arg.subject;\n\t    subject.error(err);\n\t}\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar combineLatest_1 = __webpack_require__(32);\n\tObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isScheduler_1 = __webpack_require__(33);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar ArrayObservable_1 = __webpack_require__(34);\n\tvar combineLatest_1 = __webpack_require__(37);\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Combines multiple Observables to create an Observable whose values are\n\t * calculated from the latest values of each of its input Observables.\n\t *\n\t * <span class=\"informal\">Whenever any input Observable emits a value, it\n\t * computes a formula using the latest values from all the inputs, then emits\n\t * the output of that formula.</span>\n\t *\n\t * <img src=\"./img/combineLatest.png\" width=\"100%\">\n\t *\n\t * `combineLatest` combines the values from all the Observables passed as\n\t * arguments. This is done by subscribing to each Observable, in order, and\n\t * collecting an array of each of the most recent values any time any of the\n\t * input Observables emits, then either taking that array and passing it as\n\t * arguments to an optional `project` function and emitting the return value of\n\t * that, or just emitting the array of recent values directly if there is no\n\t * `project` function.\n\t *\n\t * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n\t * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n\t * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n\t * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n\t * bmi.subscribe(x => console.log('BMI is ' + x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link merge}\n\t * @see {@link withLatestFrom}\n\t *\n\t * @param {Observable} observable1 An input Observable to combine with the\n\t * source Observable.\n\t * @param {Observable} observable2 An input Observable to combine with the\n\t * source Observable. More than one input Observables may be given as argument.\n\t * @param {function} [project] An optional function to project the values from\n\t * the combined latest values into a new value on the output Observable.\n\t * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n\t * each input Observable.\n\t * @return {Observable} An Observable of projected values from the most recent\n\t * values from each input Observable, or an array of the most recent values from\n\t * each input Observable.\n\t * @static true\n\t * @name combineLatest\n\t * @owner Observable\n\t */\n\tfunction combineLatest() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var project = null;\n\t    var scheduler = null;\n\t    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n\t        scheduler = observables.pop();\n\t    }\n\t    if (typeof observables[observables.length - 1] === 'function') {\n\t        project = observables.pop();\n\t    }\n\t    // if the first and only other argument besides the resultSelector is an array\n\t    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n\t    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n\t        observables = observables[0];\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n\t}\n\texports.combineLatest = combineLatest;\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isScheduler(value) {\n\t    return value && typeof value.schedule === 'function';\n\t}\n\texports.isScheduler = isScheduler;\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ScalarObservable_1 = __webpack_require__(35);\n\tvar EmptyObservable_1 = __webpack_require__(36);\n\tvar isScheduler_1 = __webpack_require__(33);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ArrayObservable = (function (_super) {\n\t    __extends(ArrayObservable, _super);\n\t    function ArrayObservable(array, scheduler) {\n\t        _super.call(this);\n\t        this.array = array;\n\t        this.scheduler = scheduler;\n\t        if (!scheduler && array.length === 1) {\n\t            this._isScalar = true;\n\t            this.value = array[0];\n\t        }\n\t    }\n\t    ArrayObservable.create = function (array, scheduler) {\n\t        return new ArrayObservable(array, scheduler);\n\t    };\n\t    /**\n\t     * Creates an Observable that emits some values you specify as arguments,\n\t     * immediately one after the other, and then emits a complete notification.\n\t     *\n\t     * <span class=\"informal\">Emits the arguments you provide, then completes.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/of.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that only\n\t     * emits the arguments given, and the complete notification thereafter. It can\n\t     * be used for composing with other Observables, such as with {@link concat}.\n\t     * By default, it uses a `null` Scheduler, which means the `next`\n\t     * notifications are sent synchronously, although with a different Scheduler\n\t     * it is possible to determine when those notifications will be delivered.\n\t     *\n\t     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n\t     * var numbers = Rx.Observable.of(10, 20, 30);\n\t     * var letters = Rx.Observable.of('a', 'b', 'c');\n\t     * var interval = Rx.Observable.interval(1000);\n\t     * var result = numbers.concat(letters).concat(interval);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link empty}\n\t     * @see {@link never}\n\t     * @see {@link throw}\n\t     *\n\t     * @param {...T} values Arguments that represent `next` values to be emitted.\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emissions of the `next` notifications.\n\t     * @return {Observable<T>} An Observable that emits each given input value.\n\t     * @static true\n\t     * @name of\n\t     * @owner Observable\n\t     */\n\t    ArrayObservable.of = function () {\n\t        var array = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            array[_i - 0] = arguments[_i];\n\t        }\n\t        var scheduler = array[array.length - 1];\n\t        if (isScheduler_1.isScheduler(scheduler)) {\n\t            array.pop();\n\t        }\n\t        else {\n\t            scheduler = null;\n\t        }\n\t        var len = array.length;\n\t        if (len > 1) {\n\t            return new ArrayObservable(array, scheduler);\n\t        }\n\t        else if (len === 1) {\n\t            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n\t        }\n\t        else {\n\t            return new EmptyObservable_1.EmptyObservable(scheduler);\n\t        }\n\t    };\n\t    ArrayObservable.dispatch = function (state) {\n\t        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n\t        if (index >= count) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(array[index]);\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        state.index = index + 1;\n\t        this.schedule(state);\n\t    };\n\t    ArrayObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var array = this.array;\n\t        var count = array.length;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n\t                array: array, index: index, count: count, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            for (var i = 0; i < count && !subscriber.closed; i++) {\n\t                subscriber.next(array[i]);\n\t            }\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return ArrayObservable;\n\t}(Observable_1.Observable));\n\texports.ArrayObservable = ArrayObservable;\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ScalarObservable = (function (_super) {\n\t    __extends(ScalarObservable, _super);\n\t    function ScalarObservable(value, scheduler) {\n\t        _super.call(this);\n\t        this.value = value;\n\t        this.scheduler = scheduler;\n\t        this._isScalar = true;\n\t        if (scheduler) {\n\t            this._isScalar = false;\n\t        }\n\t    }\n\t    ScalarObservable.create = function (value, scheduler) {\n\t        return new ScalarObservable(value, scheduler);\n\t    };\n\t    ScalarObservable.dispatch = function (state) {\n\t        var done = state.done, value = state.value, subscriber = state.subscriber;\n\t        if (done) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(value);\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        state.done = true;\n\t        this.schedule(state);\n\t    };\n\t    ScalarObservable.prototype._subscribe = function (subscriber) {\n\t        var value = this.value;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n\t                done: false, value: value, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            subscriber.next(value);\n\t            if (!subscriber.closed) {\n\t                subscriber.complete();\n\t            }\n\t        }\n\t    };\n\t    return ScalarObservable;\n\t}(Observable_1.Observable));\n\texports.ScalarObservable = ScalarObservable;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar EmptyObservable = (function (_super) {\n\t    __extends(EmptyObservable, _super);\n\t    function EmptyObservable(scheduler) {\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits no items to the Observer and immediately\n\t     * emits a complete notification.\n\t     *\n\t     * <span class=\"informal\">Just emits 'complete', and nothing else.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/empty.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that only\n\t     * emits the complete notification. It can be used for composing with other\n\t     * Observables, such as in a {@link mergeMap}.\n\t     *\n\t     * @example <caption>Emit the number 7, then complete.</caption>\n\t     * var result = Rx.Observable.empty().startWith(7);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n\t     * var interval = Rx.Observable.interval(1000);\n\t     * var result = interval.mergeMap(x =>\n\t     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n\t     * );\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link never}\n\t     * @see {@link of}\n\t     * @see {@link throw}\n\t     *\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emission of the complete notification.\n\t     * @return {Observable} An \"empty\" Observable: emits only the complete\n\t     * notification.\n\t     * @static true\n\t     * @name empty\n\t     * @owner Observable\n\t     */\n\t    EmptyObservable.create = function (scheduler) {\n\t        return new EmptyObservable(scheduler);\n\t    };\n\t    EmptyObservable.dispatch = function (arg) {\n\t        var subscriber = arg.subscriber;\n\t        subscriber.complete();\n\t    };\n\t    EmptyObservable.prototype._subscribe = function (subscriber) {\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n\t        }\n\t        else {\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return EmptyObservable;\n\t}(Observable_1.Observable));\n\texports.EmptyObservable = EmptyObservable;\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar ArrayObservable_1 = __webpack_require__(34);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\tvar none = {};\n\t/**\n\t * Combines multiple Observables to create an Observable whose values are\n\t * calculated from the latest values of each of its input Observables.\n\t *\n\t * <span class=\"informal\">Whenever any input Observable emits a value, it\n\t * computes a formula using the latest values from all the inputs, then emits\n\t * the output of that formula.</span>\n\t *\n\t * <img src=\"./img/combineLatest.png\" width=\"100%\">\n\t *\n\t * `combineLatest` combines the values from this Observable with values from\n\t * Observables passed as arguments. This is done by subscribing to each\n\t * Observable, in order, and collecting an array of each of the most recent\n\t * values any time any of the input Observables emits, then either taking that\n\t * array and passing it as arguments to an optional `project` function and\n\t * emitting the return value of that, or just emitting the array of recent\n\t * values directly if there is no `project` function.\n\t *\n\t * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n\t * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n\t * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n\t * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n\t * bmi.subscribe(x => console.log('BMI is ' + x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link merge}\n\t * @see {@link withLatestFrom}\n\t *\n\t * @param {Observable} other An input Observable to combine with the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {function} [project] An optional function to project the values from\n\t * the combined latest values into a new value on the output Observable.\n\t * @return {Observable} An Observable of projected values from the most recent\n\t * values from each input Observable, or an array of the most recent values from\n\t * each input Observable.\n\t * @method combineLatest\n\t * @owner Observable\n\t */\n\tfunction combineLatest() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var project = null;\n\t    if (typeof observables[observables.length - 1] === 'function') {\n\t        project = observables.pop();\n\t    }\n\t    // if the first and only other argument besides the resultSelector is an array\n\t    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n\t    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n\t        observables = observables[0];\n\t    }\n\t    observables.unshift(this);\n\t    return new ArrayObservable_1.ArrayObservable(observables).lift(new CombineLatestOperator(project));\n\t}\n\texports.combineLatest = combineLatest;\n\t/* tslint:enable:max-line-length */\n\tvar CombineLatestOperator = (function () {\n\t    function CombineLatestOperator(project) {\n\t        this.project = project;\n\t    }\n\t    CombineLatestOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n\t    };\n\t    return CombineLatestOperator;\n\t}());\n\texports.CombineLatestOperator = CombineLatestOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar CombineLatestSubscriber = (function (_super) {\n\t    __extends(CombineLatestSubscriber, _super);\n\t    function CombineLatestSubscriber(destination, project) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.active = 0;\n\t        this.values = [];\n\t        this.observables = [];\n\t    }\n\t    CombineLatestSubscriber.prototype._next = function (observable) {\n\t        this.values.push(none);\n\t        this.observables.push(observable);\n\t    };\n\t    CombineLatestSubscriber.prototype._complete = function () {\n\t        var observables = this.observables;\n\t        var len = observables.length;\n\t        if (len === 0) {\n\t            this.destination.complete();\n\t        }\n\t        else {\n\t            this.active = len;\n\t            this.toRespond = len;\n\t            for (var i = 0; i < len; i++) {\n\t                var observable = observables[i];\n\t                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n\t            }\n\t        }\n\t    };\n\t    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n\t        if ((this.active -= 1) === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var values = this.values;\n\t        var oldVal = values[outerIndex];\n\t        var toRespond = !this.toRespond\n\t            ? 0\n\t            : oldVal === none ? --this.toRespond : this.toRespond;\n\t        values[outerIndex] = innerValue;\n\t        if (toRespond === 0) {\n\t            if (this.project) {\n\t                this._tryProject(values);\n\t            }\n\t            else {\n\t                this.destination.next(values.slice());\n\t            }\n\t        }\n\t    };\n\t    CombineLatestSubscriber.prototype._tryProject = function (values) {\n\t        var result;\n\t        try {\n\t            result = this.project.apply(this, values);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return CombineLatestSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.CombineLatestSubscriber = CombineLatestSubscriber;\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar OuterSubscriber = (function (_super) {\n\t    __extends(OuterSubscriber, _super);\n\t    function OuterSubscriber() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.destination.next(innerValue);\n\t    };\n\t    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this.destination.error(error);\n\t    };\n\t    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.destination.complete();\n\t    };\n\t    return OuterSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.OuterSubscriber = OuterSubscriber;\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar isPromise_1 = __webpack_require__(40);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar iterator_1 = __webpack_require__(41);\n\tvar InnerSubscriber_1 = __webpack_require__(42);\n\tvar observable_1 = __webpack_require__(21);\n\tfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n\t    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\t    if (destination.closed) {\n\t        return null;\n\t    }\n\t    if (result instanceof Observable_1.Observable) {\n\t        if (result._isScalar) {\n\t            destination.next(result.value);\n\t            destination.complete();\n\t            return null;\n\t        }\n\t        else {\n\t            return result.subscribe(destination);\n\t        }\n\t    }\n\t    if (isArray_1.isArray(result)) {\n\t        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n\t            destination.next(result[i]);\n\t        }\n\t        if (!destination.closed) {\n\t            destination.complete();\n\t        }\n\t    }\n\t    else if (isPromise_1.isPromise(result)) {\n\t        result.then(function (value) {\n\t            if (!destination.closed) {\n\t                destination.next(value);\n\t                destination.complete();\n\t            }\n\t        }, function (err) { return destination.error(err); })\n\t            .then(null, function (err) {\n\t            // Escaping the Promise trap: globally throw unhandled errors\n\t            root_1.root.setTimeout(function () { throw err; });\n\t        });\n\t        return destination;\n\t    }\n\t    else if (typeof result[iterator_1.$$iterator] === 'function') {\n\t        var iterator = result[iterator_1.$$iterator]();\n\t        do {\n\t            var item = iterator.next();\n\t            if (item.done) {\n\t                destination.complete();\n\t                break;\n\t            }\n\t            destination.next(item.value);\n\t            if (destination.closed) {\n\t                break;\n\t            }\n\t        } while (true);\n\t    }\n\t    else if (typeof result[observable_1.$$observable] === 'function') {\n\t        var obs = result[observable_1.$$observable]();\n\t        if (typeof obs.subscribe !== 'function') {\n\t            destination.error(new Error('invalid observable'));\n\t        }\n\t        else {\n\t            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n\t        }\n\t    }\n\t    else {\n\t        destination.error(new TypeError('unknown type returned'));\n\t    }\n\t    return null;\n\t}\n\texports.subscribeToResult = subscribeToResult;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isPromise(value) {\n\t    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n\t}\n\texports.isPromise = isPromise;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar Symbol = root_1.root.Symbol;\n\tif (typeof Symbol === 'function') {\n\t    if (Symbol.iterator) {\n\t        exports.$$iterator = Symbol.iterator;\n\t    }\n\t    else if (typeof Symbol.for === 'function') {\n\t        exports.$$iterator = Symbol.for('iterator');\n\t    }\n\t}\n\telse {\n\t    if (root_1.root.Set && typeof new root_1.root.Set()['@@iterator'] === 'function') {\n\t        // Bug for mozilla version\n\t        exports.$$iterator = '@@iterator';\n\t    }\n\t    else if (root_1.root.Map) {\n\t        // es6-shim specific logic\n\t        var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);\n\t        for (var i = 0; i < keys.length; ++i) {\n\t            var key = keys[i];\n\t            if (key !== 'entries' && key !== 'size' && root_1.root.Map.prototype[key] === root_1.root.Map.prototype['entries']) {\n\t                exports.$$iterator = key;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t    else {\n\t        exports.$$iterator = '@@iterator';\n\t    }\n\t}\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar InnerSubscriber = (function (_super) {\n\t    __extends(InnerSubscriber, _super);\n\t    function InnerSubscriber(parent, outerValue, outerIndex) {\n\t        _super.call(this);\n\t        this.parent = parent;\n\t        this.outerValue = outerValue;\n\t        this.outerIndex = outerIndex;\n\t        this.index = 0;\n\t    }\n\t    InnerSubscriber.prototype._next = function (value) {\n\t        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n\t    };\n\t    InnerSubscriber.prototype._error = function (error) {\n\t        this.parent.notifyError(error, this);\n\t        this.unsubscribe();\n\t    };\n\t    InnerSubscriber.prototype._complete = function () {\n\t        this.parent.notifyComplete(this);\n\t        this.unsubscribe();\n\t    };\n\t    return InnerSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.InnerSubscriber = InnerSubscriber;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concat_1 = __webpack_require__(44);\n\tObservable_1.Observable.concat = concat_1.concat;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar concat_1 = __webpack_require__(45);\n\texports.concat = concat_1.concatStatic;\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isScheduler_1 = __webpack_require__(33);\n\tvar ArrayObservable_1 = __webpack_require__(34);\n\tvar mergeAll_1 = __webpack_require__(46);\n\t/**\n\t * Creates an output Observable which sequentially emits all values from every\n\t * given input Observable after the current Observable.\n\t *\n\t * <span class=\"informal\">Concatenates multiple Observables together by\n\t * sequentially emitting their values, one Observable after the other.</span>\n\t *\n\t * <img src=\"./img/concat.png\" width=\"100%\">\n\t *\n\t * Joins this Observable with multiple other Observables by subscribing to them\n\t * one at a time, starting with the source, and merging their results into the\n\t * output Observable. Will wait for each Observable to complete before moving\n\t * on to the next.\n\t *\n\t * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n\t * var timer = Rx.Observable.interval(1000).take(4);\n\t * var sequence = Rx.Observable.range(1, 10);\n\t * var result = timer.concat(sequence);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Concatenate 3 Observables</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var result = timer1.concat(timer2, timer3);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatAll}\n\t * @see {@link concatMap}\n\t * @see {@link concatMapTo}\n\t *\n\t * @param {Observable} other An input Observable to concatenate after the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n\t * Observable subscription on.\n\t * @return {Observable} All values of each passed Observable merged into a\n\t * single Observable, in order, in serial fashion.\n\t * @method concat\n\t * @owner Observable\n\t */\n\tfunction concat() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    return concatStatic.apply(void 0, [this].concat(observables));\n\t}\n\texports.concat = concat;\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Creates an output Observable which sequentially emits all values from every\n\t * given input Observable after the current Observable.\n\t *\n\t * <span class=\"informal\">Concatenates multiple Observables together by\n\t * sequentially emitting their values, one Observable after the other.</span>\n\t *\n\t * <img src=\"./img/concat.png\" width=\"100%\">\n\t *\n\t * Joins multiple Observables together by subscribing to them one at a time and\n\t * merging their results into the output Observable. Will wait for each\n\t * Observable to complete before moving on to the next.\n\t *\n\t * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n\t * var timer = Rx.Observable.interval(1000).take(4);\n\t * var sequence = Rx.Observable.range(1, 10);\n\t * var result = Rx.Observable.concat(timer, sequence);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Concatenate 3 Observables</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var result = Rx.Observable.concat(timer1, timer2, timer3);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatAll}\n\t * @see {@link concatMap}\n\t * @see {@link concatMapTo}\n\t *\n\t * @param {Observable} input1 An input Observable to concatenate with others.\n\t * @param {Observable} input2 An input Observable to concatenate with others.\n\t * More than one input Observables may be given as argument.\n\t * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n\t * Observable subscription on.\n\t * @return {Observable} All values of each passed Observable merged into a\n\t * single Observable, in order, in serial fashion.\n\t * @static true\n\t * @name concat\n\t * @owner Observable\n\t */\n\tfunction concatStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var scheduler = null;\n\t    var args = observables;\n\t    if (isScheduler_1.isScheduler(args[observables.length - 1])) {\n\t        scheduler = args.pop();\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));\n\t}\n\texports.concatStatic = concatStatic;\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable which\n\t * concurrently delivers all values that are emitted on the inner Observables.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n\t *\n\t * <img src=\"./img/mergeAll.png\" width=\"100%\">\n\t *\n\t * `mergeAll` subscribes to an Observable that emits Observables, also known as\n\t * a higher-order Observable. Each time it observes one of these emitted inner\n\t * Observables, it subscribes to that and delivers all the values from the\n\t * inner Observable on the output Observable. The output Observable only\n\t * completes once all inner Observables have completed. Any error delivered by\n\t * a inner Observable will be immediately emitted on the output Observable.\n\t *\n\t * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n\t * var firstOrder = higherOrder.mergeAll();\n\t * firstOrder.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n\t * var firstOrder = higherOrder.mergeAll(2);\n\t * firstOrder.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concatAll}\n\t * @see {@link exhaust}\n\t * @see {@link merge}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t * @see {@link switch}\n\t * @see {@link zipAll}\n\t *\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n\t * Observables being subscribed to concurrently.\n\t * @return {Observable} An Observable that emits values coming from all the\n\t * inner Observables emitted by the source Observable.\n\t * @method mergeAll\n\t * @owner Observable\n\t */\n\tfunction mergeAll(concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    return this.lift(new MergeAllOperator(concurrent));\n\t}\n\texports.mergeAll = mergeAll;\n\tvar MergeAllOperator = (function () {\n\t    function MergeAllOperator(concurrent) {\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeAllOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n\t    };\n\t    return MergeAllOperator;\n\t}());\n\texports.MergeAllOperator = MergeAllOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeAllSubscriber = (function (_super) {\n\t    __extends(MergeAllSubscriber, _super);\n\t    function MergeAllSubscriber(destination, concurrent) {\n\t        _super.call(this, destination);\n\t        this.concurrent = concurrent;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t    }\n\t    MergeAllSubscriber.prototype._next = function (observable) {\n\t        if (this.active < this.concurrent) {\n\t            this.active++;\n\t            this.add(subscribeToResult_1.subscribeToResult(this, observable));\n\t        }\n\t        else {\n\t            this.buffer.push(observable);\n\t        }\n\t    };\n\t    MergeAllSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeAllSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeAllSubscriber = MergeAllSubscriber;\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar defer_1 = __webpack_require__(48);\n\tObservable_1.Observable.defer = defer_1.defer;\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar DeferObservable_1 = __webpack_require__(49);\n\texports.defer = DeferObservable_1.DeferObservable.create;\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar DeferObservable = (function (_super) {\n\t    __extends(DeferObservable, _super);\n\t    function DeferObservable(observableFactory) {\n\t        _super.call(this);\n\t        this.observableFactory = observableFactory;\n\t    }\n\t    /**\n\t     * Creates an Observable that, on subscribe, calls an Observable factory to\n\t     * make an Observable for each new Observer.\n\t     *\n\t     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n\t     * is subscribed.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/defer.png\" width=\"100%\">\n\t     *\n\t     * `defer` allows you to create the Observable only when the Observer\n\t     * subscribes, and create a fresh Observable for each Observer. It waits until\n\t     * an Observer subscribes to it, and then it generates an Observable,\n\t     * typically with an Observable factory function. It does this afresh for each\n\t     * subscriber, so although each subscriber may think it is subscribing to the\n\t     * same Observable, in fact each subscriber gets its own individual\n\t     * Observable.\n\t     *\n\t     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n\t     * var clicksOrInterval = Rx.Observable.defer(function () {\n\t     *   if (Math.random() > 0.5) {\n\t     *     return Rx.Observable.fromEvent(document, 'click');\n\t     *   } else {\n\t     *     return Rx.Observable.interval(1000);\n\t     *   }\n\t     * });\n\t     * clicksOrInterval.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     *\n\t     * @param {function(): Observable|Promise} observableFactory The Observable\n\t     * factory function to invoke for each Observer that subscribes to the output\n\t     * Observable. May also return a Promise, which will be converted on the fly\n\t     * to an Observable.\n\t     * @return {Observable} An Observable whose Observers' subscriptions trigger\n\t     * an invocation of the given Observable factory function.\n\t     * @static true\n\t     * @name defer\n\t     * @owner Observable\n\t     */\n\t    DeferObservable.create = function (observableFactory) {\n\t        return new DeferObservable(observableFactory);\n\t    };\n\t    DeferObservable.prototype._subscribe = function (subscriber) {\n\t        return new DeferSubscriber(subscriber, this.observableFactory);\n\t    };\n\t    return DeferObservable;\n\t}(Observable_1.Observable));\n\texports.DeferObservable = DeferObservable;\n\tvar DeferSubscriber = (function (_super) {\n\t    __extends(DeferSubscriber, _super);\n\t    function DeferSubscriber(destination, factory) {\n\t        _super.call(this, destination);\n\t        this.factory = factory;\n\t        this.tryDefer();\n\t    }\n\t    DeferSubscriber.prototype.tryDefer = function () {\n\t        try {\n\t            this._callFactory();\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    DeferSubscriber.prototype._callFactory = function () {\n\t        var result = this.factory();\n\t        if (result) {\n\t            this.add(subscribeToResult_1.subscribeToResult(this, result));\n\t        }\n\t    };\n\t    return DeferSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar empty_1 = __webpack_require__(51);\n\tObservable_1.Observable.empty = empty_1.empty;\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar EmptyObservable_1 = __webpack_require__(36);\n\texports.empty = EmptyObservable_1.EmptyObservable.create;\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar forkJoin_1 = __webpack_require__(53);\n\tObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ForkJoinObservable_1 = __webpack_require__(54);\n\texports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar EmptyObservable_1 = __webpack_require__(36);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ForkJoinObservable = (function (_super) {\n\t    __extends(ForkJoinObservable, _super);\n\t    function ForkJoinObservable(sources, resultSelector) {\n\t        _super.call(this);\n\t        this.sources = sources;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    /* tslint:enable:max-line-length */\n\t    /**\n\t     * @param sources\n\t     * @return {any}\n\t     * @static true\n\t     * @name forkJoin\n\t     * @owner Observable\n\t     */\n\t    ForkJoinObservable.create = function () {\n\t        var sources = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            sources[_i - 0] = arguments[_i];\n\t        }\n\t        if (sources === null || arguments.length === 0) {\n\t            return new EmptyObservable_1.EmptyObservable();\n\t        }\n\t        var resultSelector = null;\n\t        if (typeof sources[sources.length - 1] === 'function') {\n\t            resultSelector = sources.pop();\n\t        }\n\t        // if the first and only other argument besides the resultSelector is an array\n\t        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n\t        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n\t            sources = sources[0];\n\t        }\n\t        if (sources.length === 0) {\n\t            return new EmptyObservable_1.EmptyObservable();\n\t        }\n\t        return new ForkJoinObservable(sources, resultSelector);\n\t    };\n\t    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n\t        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n\t    };\n\t    return ForkJoinObservable;\n\t}(Observable_1.Observable));\n\texports.ForkJoinObservable = ForkJoinObservable;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ForkJoinSubscriber = (function (_super) {\n\t    __extends(ForkJoinSubscriber, _super);\n\t    function ForkJoinSubscriber(destination, sources, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.sources = sources;\n\t        this.resultSelector = resultSelector;\n\t        this.completed = 0;\n\t        this.haveValues = 0;\n\t        var len = sources.length;\n\t        this.total = len;\n\t        this.values = new Array(len);\n\t        for (var i = 0; i < len; i++) {\n\t            var source = sources[i];\n\t            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n\t            if (innerSubscription) {\n\t                innerSubscription.outerIndex = i;\n\t                this.add(innerSubscription);\n\t            }\n\t        }\n\t    }\n\t    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.values[outerIndex] = innerValue;\n\t        if (!innerSub._hasValue) {\n\t            innerSub._hasValue = true;\n\t            this.haveValues++;\n\t        }\n\t    };\n\t    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var destination = this.destination;\n\t        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n\t        var len = values.length;\n\t        if (!innerSub._hasValue) {\n\t            destination.complete();\n\t            return;\n\t        }\n\t        this.completed++;\n\t        if (this.completed !== len) {\n\t            return;\n\t        }\n\t        if (haveValues === len) {\n\t            var value = resultSelector ? resultSelector.apply(this, values) : values;\n\t            destination.next(value);\n\t        }\n\t        destination.complete();\n\t    };\n\t    return ForkJoinSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar from_1 = __webpack_require__(56);\n\tObservable_1.Observable.from = from_1.from;\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar FromObservable_1 = __webpack_require__(57);\n\texports.from = FromObservable_1.FromObservable.create;\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isArray_1 = __webpack_require__(14);\n\tvar isPromise_1 = __webpack_require__(40);\n\tvar PromiseObservable_1 = __webpack_require__(58);\n\tvar IteratorObservable_1 = __webpack_require__(59);\n\tvar ArrayObservable_1 = __webpack_require__(34);\n\tvar ArrayLikeObservable_1 = __webpack_require__(60);\n\tvar iterator_1 = __webpack_require__(41);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar observeOn_1 = __webpack_require__(61);\n\tvar observable_1 = __webpack_require__(21);\n\tvar isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar FromObservable = (function (_super) {\n\t    __extends(FromObservable, _super);\n\t    function FromObservable(ish, scheduler) {\n\t        _super.call(this, null);\n\t        this.ish = ish;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable from an Array, an array-like object, a Promise, an\n\t     * iterable object, or an Observable-like object.\n\t     *\n\t     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n\t     *\n\t     * <img src=\"./img/from.png\" width=\"100%\">\n\t     *\n\t     * Convert various other objects and data types into Observables. `from`\n\t     * converts a Promise or an array-like or an\n\t     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n\t     * object into an Observable that emits the items in that promise or array or\n\t     * iterable. A String, in this context, is treated as an array of characters.\n\t     * Observable-like objects (contains a function named with the ES2015 Symbol\n\t     * for Observable) can also be converted through this operator.\n\t     *\n\t     * @example <caption>Converts an array to an Observable</caption>\n\t     * var array = [10, 20, 30];\n\t     * var result = Rx.Observable.from(array);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n\t     * function* generateDoubles(seed) {\n\t     *   var i = seed;\n\t     *   while (true) {\n\t     *     yield i;\n\t     *     i = 2 * i; // double it\n\t     *   }\n\t     * }\n\t     *\n\t     * var iterator = generateDoubles(3);\n\t     * var result = Rx.Observable.from(iterator).take(10);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link fromEvent}\n\t     * @see {@link fromEventPattern}\n\t     * @see {@link fromPromise}\n\t     *\n\t     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n\t     * Observable-like, an Array, an iterable or an array-like object to be\n\t     * converted.\n\t     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n\t     * emissions of values.\n\t     * @return {Observable<T>} The Observable whose values are originally from the\n\t     * input object that was converted.\n\t     * @static true\n\t     * @name from\n\t     * @owner Observable\n\t     */\n\t    FromObservable.create = function (ish, scheduler) {\n\t        if (ish != null) {\n\t            if (typeof ish[observable_1.$$observable] === 'function') {\n\t                if (ish instanceof Observable_1.Observable && !scheduler) {\n\t                    return ish;\n\t                }\n\t                return new FromObservable(ish, scheduler);\n\t            }\n\t            else if (isArray_1.isArray(ish)) {\n\t                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n\t            }\n\t            else if (isPromise_1.isPromise(ish)) {\n\t                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n\t            }\n\t            else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {\n\t                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n\t            }\n\t            else if (isArrayLike(ish)) {\n\t                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n\t            }\n\t        }\n\t        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n\t    };\n\t    FromObservable.prototype._subscribe = function (subscriber) {\n\t        var ish = this.ish;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler == null) {\n\t            return ish[observable_1.$$observable]().subscribe(subscriber);\n\t        }\n\t        else {\n\t            return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n\t        }\n\t    };\n\t    return FromObservable;\n\t}(Observable_1.Observable));\n\texports.FromObservable = FromObservable;\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar PromiseObservable = (function (_super) {\n\t    __extends(PromiseObservable, _super);\n\t    function PromiseObservable(promise, scheduler) {\n\t        _super.call(this);\n\t        this.promise = promise;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Converts a Promise to an Observable.\n\t     *\n\t     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n\t     * resolved value, then completes.</span>\n\t     *\n\t     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n\t     * Observable. If the Promise resolves with a value, the output Observable\n\t     * emits that resolved value as a `next`, and then completes. If the Promise\n\t     * is rejected, then the output Observable emits the corresponding Error.\n\t     *\n\t     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n\t     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link bindCallback}\n\t     * @see {@link from}\n\t     *\n\t     * @param {Promise<T>} promise The promise to be converted.\n\t     * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n\t     * the delivery of the resolved value (or the rejection).\n\t     * @return {Observable<T>} An Observable which wraps the Promise.\n\t     * @static true\n\t     * @name fromPromise\n\t     * @owner Observable\n\t     */\n\t    PromiseObservable.create = function (promise, scheduler) {\n\t        return new PromiseObservable(promise, scheduler);\n\t    };\n\t    PromiseObservable.prototype._subscribe = function (subscriber) {\n\t        var _this = this;\n\t        var promise = this.promise;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler == null) {\n\t            if (this._isScalar) {\n\t                if (!subscriber.closed) {\n\t                    subscriber.next(this.value);\n\t                    subscriber.complete();\n\t                }\n\t            }\n\t            else {\n\t                promise.then(function (value) {\n\t                    _this.value = value;\n\t                    _this._isScalar = true;\n\t                    if (!subscriber.closed) {\n\t                        subscriber.next(value);\n\t                        subscriber.complete();\n\t                    }\n\t                }, function (err) {\n\t                    if (!subscriber.closed) {\n\t                        subscriber.error(err);\n\t                    }\n\t                })\n\t                    .then(null, function (err) {\n\t                    // escape the promise trap, throw unhandled errors\n\t                    root_1.root.setTimeout(function () { throw err; });\n\t                });\n\t            }\n\t        }\n\t        else {\n\t            if (this._isScalar) {\n\t                if (!subscriber.closed) {\n\t                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n\t                }\n\t            }\n\t            else {\n\t                promise.then(function (value) {\n\t                    _this.value = value;\n\t                    _this._isScalar = true;\n\t                    if (!subscriber.closed) {\n\t                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n\t                    }\n\t                }, function (err) {\n\t                    if (!subscriber.closed) {\n\t                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n\t                    }\n\t                })\n\t                    .then(null, function (err) {\n\t                    // escape the promise trap, throw unhandled errors\n\t                    root_1.root.setTimeout(function () { throw err; });\n\t                });\n\t            }\n\t        }\n\t    };\n\t    return PromiseObservable;\n\t}(Observable_1.Observable));\n\texports.PromiseObservable = PromiseObservable;\n\tfunction dispatchNext(arg) {\n\t    var value = arg.value, subscriber = arg.subscriber;\n\t    if (!subscriber.closed) {\n\t        subscriber.next(value);\n\t        subscriber.complete();\n\t    }\n\t}\n\tfunction dispatchError(arg) {\n\t    var err = arg.err, subscriber = arg.subscriber;\n\t    if (!subscriber.closed) {\n\t        subscriber.error(err);\n\t    }\n\t}\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar iterator_1 = __webpack_require__(41);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar IteratorObservable = (function (_super) {\n\t    __extends(IteratorObservable, _super);\n\t    function IteratorObservable(iterator, scheduler) {\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t        if (iterator == null) {\n\t            throw new Error('iterator cannot be null.');\n\t        }\n\t        this.iterator = getIterator(iterator);\n\t    }\n\t    IteratorObservable.create = function (iterator, scheduler) {\n\t        return new IteratorObservable(iterator, scheduler);\n\t    };\n\t    IteratorObservable.dispatch = function (state) {\n\t        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n\t        if (hasError) {\n\t            subscriber.error(state.error);\n\t            return;\n\t        }\n\t        var result = iterator.next();\n\t        if (result.done) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(result.value);\n\t        state.index = index + 1;\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        this.schedule(state);\n\t    };\n\t    IteratorObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n\t                index: index, iterator: iterator, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            do {\n\t                var result = iterator.next();\n\t                if (result.done) {\n\t                    subscriber.complete();\n\t                    break;\n\t                }\n\t                else {\n\t                    subscriber.next(result.value);\n\t                }\n\t                if (subscriber.closed) {\n\t                    break;\n\t                }\n\t            } while (true);\n\t        }\n\t    };\n\t    return IteratorObservable;\n\t}(Observable_1.Observable));\n\texports.IteratorObservable = IteratorObservable;\n\tvar StringIterator = (function () {\n\t    function StringIterator(str, idx, len) {\n\t        if (idx === void 0) { idx = 0; }\n\t        if (len === void 0) { len = str.length; }\n\t        this.str = str;\n\t        this.idx = idx;\n\t        this.len = len;\n\t    }\n\t    StringIterator.prototype[iterator_1.$$iterator] = function () { return (this); };\n\t    StringIterator.prototype.next = function () {\n\t        return this.idx < this.len ? {\n\t            done: false,\n\t            value: this.str.charAt(this.idx++)\n\t        } : {\n\t            done: true,\n\t            value: undefined\n\t        };\n\t    };\n\t    return StringIterator;\n\t}());\n\tvar ArrayIterator = (function () {\n\t    function ArrayIterator(arr, idx, len) {\n\t        if (idx === void 0) { idx = 0; }\n\t        if (len === void 0) { len = toLength(arr); }\n\t        this.arr = arr;\n\t        this.idx = idx;\n\t        this.len = len;\n\t    }\n\t    ArrayIterator.prototype[iterator_1.$$iterator] = function () { return this; };\n\t    ArrayIterator.prototype.next = function () {\n\t        return this.idx < this.len ? {\n\t            done: false,\n\t            value: this.arr[this.idx++]\n\t        } : {\n\t            done: true,\n\t            value: undefined\n\t        };\n\t    };\n\t    return ArrayIterator;\n\t}());\n\tfunction getIterator(obj) {\n\t    var i = obj[iterator_1.$$iterator];\n\t    if (!i && typeof obj === 'string') {\n\t        return new StringIterator(obj);\n\t    }\n\t    if (!i && obj.length !== undefined) {\n\t        return new ArrayIterator(obj);\n\t    }\n\t    if (!i) {\n\t        throw new TypeError('object is not iterable');\n\t    }\n\t    return obj[iterator_1.$$iterator]();\n\t}\n\tvar maxSafeInteger = Math.pow(2, 53) - 1;\n\tfunction toLength(o) {\n\t    var len = +o.length;\n\t    if (isNaN(len)) {\n\t        return 0;\n\t    }\n\t    if (len === 0 || !numberIsFinite(len)) {\n\t        return len;\n\t    }\n\t    len = sign(len) * Math.floor(Math.abs(len));\n\t    if (len <= 0) {\n\t        return 0;\n\t    }\n\t    if (len > maxSafeInteger) {\n\t        return maxSafeInteger;\n\t    }\n\t    return len;\n\t}\n\tfunction numberIsFinite(value) {\n\t    return typeof value === 'number' && root_1.root.isFinite(value);\n\t}\n\tfunction sign(value) {\n\t    var valueAsNumber = +value;\n\t    if (valueAsNumber === 0) {\n\t        return valueAsNumber;\n\t    }\n\t    if (isNaN(valueAsNumber)) {\n\t        return valueAsNumber;\n\t    }\n\t    return valueAsNumber < 0 ? -1 : 1;\n\t}\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ScalarObservable_1 = __webpack_require__(35);\n\tvar EmptyObservable_1 = __webpack_require__(36);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ArrayLikeObservable = (function (_super) {\n\t    __extends(ArrayLikeObservable, _super);\n\t    function ArrayLikeObservable(arrayLike, scheduler) {\n\t        _super.call(this);\n\t        this.arrayLike = arrayLike;\n\t        this.scheduler = scheduler;\n\t        if (!scheduler && arrayLike.length === 1) {\n\t            this._isScalar = true;\n\t            this.value = arrayLike[0];\n\t        }\n\t    }\n\t    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n\t        var length = arrayLike.length;\n\t        if (length === 0) {\n\t            return new EmptyObservable_1.EmptyObservable();\n\t        }\n\t        else if (length === 1) {\n\t            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n\t        }\n\t        else {\n\t            return new ArrayLikeObservable(arrayLike, scheduler);\n\t        }\n\t    };\n\t    ArrayLikeObservable.dispatch = function (state) {\n\t        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        if (index >= length) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(arrayLike[index]);\n\t        state.index = index + 1;\n\t        this.schedule(state);\n\t    };\n\t    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n\t        var length = arrayLike.length;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n\t                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            for (var i = 0; i < length && !subscriber.closed; i++) {\n\t                subscriber.next(arrayLike[i]);\n\t            }\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return ArrayLikeObservable;\n\t}(Observable_1.Observable));\n\texports.ArrayLikeObservable = ArrayLikeObservable;\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Notification_1 = __webpack_require__(62);\n\t/**\n\t * @see {@link Notification}\n\t *\n\t * @param scheduler\n\t * @param delay\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method observeOn\n\t * @owner Observable\n\t */\n\tfunction observeOn(scheduler, delay) {\n\t    if (delay === void 0) { delay = 0; }\n\t    return this.lift(new ObserveOnOperator(scheduler, delay));\n\t}\n\texports.observeOn = observeOn;\n\tvar ObserveOnOperator = (function () {\n\t    function ObserveOnOperator(scheduler, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        this.scheduler = scheduler;\n\t        this.delay = delay;\n\t    }\n\t    ObserveOnOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n\t    };\n\t    return ObserveOnOperator;\n\t}());\n\texports.ObserveOnOperator = ObserveOnOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ObserveOnSubscriber = (function (_super) {\n\t    __extends(ObserveOnSubscriber, _super);\n\t    function ObserveOnSubscriber(destination, scheduler, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        _super.call(this, destination);\n\t        this.scheduler = scheduler;\n\t        this.delay = delay;\n\t    }\n\t    ObserveOnSubscriber.dispatch = function (arg) {\n\t        var notification = arg.notification, destination = arg.destination;\n\t        notification.observe(destination);\n\t    };\n\t    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n\t        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n\t    };\n\t    ObserveOnSubscriber.prototype._next = function (value) {\n\t        this.scheduleMessage(Notification_1.Notification.createNext(value));\n\t    };\n\t    ObserveOnSubscriber.prototype._error = function (err) {\n\t        this.scheduleMessage(Notification_1.Notification.createError(err));\n\t    };\n\t    ObserveOnSubscriber.prototype._complete = function () {\n\t        this.scheduleMessage(Notification_1.Notification.createComplete());\n\t    };\n\t    return ObserveOnSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.ObserveOnSubscriber = ObserveOnSubscriber;\n\tvar ObserveOnMessage = (function () {\n\t    function ObserveOnMessage(notification, destination) {\n\t        this.notification = notification;\n\t        this.destination = destination;\n\t    }\n\t    return ObserveOnMessage;\n\t}());\n\texports.ObserveOnMessage = ObserveOnMessage;\n\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * Represents a push-based event or value that an {@link Observable} can emit.\n\t * This class is particularly useful for operators that manage notifications,\n\t * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n\t * others. Besides wrapping the actual delivered value, it also annotates it\n\t * with metadata of, for instance, what type of push message it is (`next`,\n\t * `error`, or `complete`).\n\t *\n\t * @see {@link materialize}\n\t * @see {@link dematerialize}\n\t * @see {@link observeOn}\n\t *\n\t * @class Notification<T>\n\t */\n\tvar Notification = (function () {\n\t    function Notification(kind, value, exception) {\n\t        this.kind = kind;\n\t        this.value = value;\n\t        this.exception = exception;\n\t        this.hasValue = kind === 'N';\n\t    }\n\t    /**\n\t     * Delivers to the given `observer` the value wrapped by this Notification.\n\t     * @param {Observer} observer\n\t     * @return\n\t     */\n\t    Notification.prototype.observe = function (observer) {\n\t        switch (this.kind) {\n\t            case 'N':\n\t                return observer.next && observer.next(this.value);\n\t            case 'E':\n\t                return observer.error && observer.error(this.exception);\n\t            case 'C':\n\t                return observer.complete && observer.complete();\n\t        }\n\t    };\n\t    /**\n\t     * Given some {@link Observer} callbacks, deliver the value represented by the\n\t     * current Notification to the correctly corresponding callback.\n\t     * @param {function(value: T): void} next An Observer `next` callback.\n\t     * @param {function(err: any): void} [error] An Observer `error` callback.\n\t     * @param {function(): void} [complete] An Observer `complete` callback.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.do = function (next, error, complete) {\n\t        var kind = this.kind;\n\t        switch (kind) {\n\t            case 'N':\n\t                return next && next(this.value);\n\t            case 'E':\n\t                return error && error(this.exception);\n\t            case 'C':\n\t                return complete && complete();\n\t        }\n\t    };\n\t    /**\n\t     * Takes an Observer or its individual callback functions, and calls `observe`\n\t     * or `do` methods accordingly.\n\t     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n\t     * the `next` callback.\n\t     * @param {function(err: any): void} [error] An Observer `error` callback.\n\t     * @param {function(): void} [complete] An Observer `complete` callback.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n\t        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n\t            return this.observe(nextOrObserver);\n\t        }\n\t        else {\n\t            return this.do(nextOrObserver, error, complete);\n\t        }\n\t    };\n\t    /**\n\t     * Returns a simple Observable that just delivers the notification represented\n\t     * by this Notification instance.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.toObservable = function () {\n\t        var kind = this.kind;\n\t        switch (kind) {\n\t            case 'N':\n\t                return Observable_1.Observable.of(this.value);\n\t            case 'E':\n\t                return Observable_1.Observable.throw(this.exception);\n\t            case 'C':\n\t                return Observable_1.Observable.empty();\n\t        }\n\t        throw new Error('unexpected notification kind value');\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `next` from a\n\t     * given value.\n\t     * @param {T} value The `next` value.\n\t     * @return {Notification<T>} The \"next\" Notification representing the\n\t     * argument.\n\t     */\n\t    Notification.createNext = function (value) {\n\t        if (typeof value !== 'undefined') {\n\t            return new Notification('N', value);\n\t        }\n\t        return this.undefinedValueNotification;\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `error` from a\n\t     * given error.\n\t     * @param {any} [err] The `error` exception.\n\t     * @return {Notification<T>} The \"error\" Notification representing the\n\t     * argument.\n\t     */\n\t    Notification.createError = function (err) {\n\t        return new Notification('E', undefined, err);\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `complete`.\n\t     * @return {Notification<any>} The valueless \"complete\" Notification.\n\t     */\n\t    Notification.createComplete = function () {\n\t        return this.completeNotification;\n\t    };\n\t    Notification.completeNotification = new Notification('C');\n\t    Notification.undefinedValueNotification = new Notification('N', undefined);\n\t    return Notification;\n\t}());\n\texports.Notification = Notification;\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar fromEvent_1 = __webpack_require__(64);\n\tObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar FromEventObservable_1 = __webpack_require__(65);\n\texports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar isFunction_1 = __webpack_require__(12);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar Subscription_1 = __webpack_require__(13);\n\tfunction isNodeStyleEventEmmitter(sourceObj) {\n\t    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n\t}\n\tfunction isJQueryStyleEventEmitter(sourceObj) {\n\t    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n\t}\n\tfunction isNodeList(sourceObj) {\n\t    return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n\t}\n\tfunction isHTMLCollection(sourceObj) {\n\t    return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n\t}\n\tfunction isEventTarget(sourceObj) {\n\t    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n\t}\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar FromEventObservable = (function (_super) {\n\t    __extends(FromEventObservable, _super);\n\t    function FromEventObservable(sourceObj, eventName, selector, options) {\n\t        _super.call(this);\n\t        this.sourceObj = sourceObj;\n\t        this.eventName = eventName;\n\t        this.selector = selector;\n\t        this.options = options;\n\t    }\n\t    /* tslint:enable:max-line-length */\n\t    /**\n\t     * Creates an Observable that emits events of a specific type coming from the\n\t     * given event target.\n\t     *\n\t     * <span class=\"informal\">Creates an Observable from DOM events, or Node\n\t     * EventEmitter events or others.</span>\n\t     *\n\t     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n\t     *\n\t     * Creates an Observable by attaching an event listener to an \"event target\",\n\t     * which may be an object with `addEventListener` and `removeEventListener`,\n\t     * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n\t     * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n\t     * the output Observable is subscribed, and removed when the Subscription is\n\t     * unsubscribed.\n\t     *\n\t     * @example <caption>Emits clicks happening on the DOM document</caption>\n\t     * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t     * clicks.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link from}\n\t     * @see {@link fromEventPattern}\n\t     *\n\t     * @param {EventTargetLike} target The DOMElement, event target, Node.js\n\t     * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n\t     * @param {string} eventName The event name of interest, being emitted by the\n\t     * `target`.\n\t     * @parm {EventListenerOptions} [options] Options to pass through to addEventListener\n\t     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n\t     * post-process results. It takes the arguments from the event handler and\n\t     * should return a single value.\n\t     * @return {Observable<T>}\n\t     * @static true\n\t     * @name fromEvent\n\t     * @owner Observable\n\t     */\n\t    FromEventObservable.create = function (target, eventName, options, selector) {\n\t        if (isFunction_1.isFunction(options)) {\n\t            selector = options;\n\t            options = undefined;\n\t        }\n\t        return new FromEventObservable(target, eventName, selector, options);\n\t    };\n\t    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n\t        var unsubscribe;\n\t        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n\t            for (var i = 0, len = sourceObj.length; i < len; i++) {\n\t                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n\t            }\n\t        }\n\t        else if (isEventTarget(sourceObj)) {\n\t            var source_1 = sourceObj;\n\t            sourceObj.addEventListener(eventName, handler, options);\n\t            unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };\n\t        }\n\t        else if (isJQueryStyleEventEmitter(sourceObj)) {\n\t            var source_2 = sourceObj;\n\t            sourceObj.on(eventName, handler);\n\t            unsubscribe = function () { return source_2.off(eventName, handler); };\n\t        }\n\t        else if (isNodeStyleEventEmmitter(sourceObj)) {\n\t            var source_3 = sourceObj;\n\t            sourceObj.addListener(eventName, handler);\n\t            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n\t        }\n\t        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n\t    };\n\t    FromEventObservable.prototype._subscribe = function (subscriber) {\n\t        var sourceObj = this.sourceObj;\n\t        var eventName = this.eventName;\n\t        var options = this.options;\n\t        var selector = this.selector;\n\t        var handler = selector ? function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n\t            if (result === errorObject_1.errorObject) {\n\t                subscriber.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                subscriber.next(result);\n\t            }\n\t        } : function (e) { return subscriber.next(e); };\n\t        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n\t    };\n\t    return FromEventObservable;\n\t}(Observable_1.Observable));\n\texports.FromEventObservable = FromEventObservable;\n\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar fromEventPattern_1 = __webpack_require__(67);\n\tObservable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;\n\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar FromEventPatternObservable_1 = __webpack_require__(68);\n\texports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;\n\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar FromEventPatternObservable = (function (_super) {\n\t    __extends(FromEventPatternObservable, _super);\n\t    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n\t        _super.call(this);\n\t        this.addHandler = addHandler;\n\t        this.removeHandler = removeHandler;\n\t        this.selector = selector;\n\t    }\n\t    /**\n\t     * Creates an Observable from an API based on addHandler/removeHandler\n\t     * functions.\n\t     *\n\t     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n\t     * Observable.</span>\n\t     *\n\t     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n\t     *\n\t     * Creates an Observable by using the `addHandler` and `removeHandler`\n\t     * functions to add and remove the handlers, with an optional selector\n\t     * function to project the event arguments to a result. The `addHandler` is\n\t     * called when the output Observable is subscribed, and `removeHandler` is\n\t     * called when the Subscription is unsubscribed.\n\t     *\n\t     * @example <caption>Emits clicks happening on the DOM document</caption>\n\t     * function addClickHandler(handler) {\n\t     *   document.addEventListener('click', handler);\n\t     * }\n\t     *\n\t     * function removeClickHandler(handler) {\n\t     *   document.removeEventListener('click', handler);\n\t     * }\n\t     *\n\t     * var clicks = Rx.Observable.fromEventPattern(\n\t     *   addClickHandler,\n\t     *   removeClickHandler\n\t     * );\n\t     * clicks.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link from}\n\t     * @see {@link fromEvent}\n\t     *\n\t     * @param {function(handler: Function): any} addHandler A function that takes\n\t     * a `handler` function as argument and attaches it somehow to the actual\n\t     * source of events.\n\t     * @param {function(handler: Function): void} removeHandler A function that\n\t     * takes a `handler` function as argument and removes it in case it was\n\t     * previously attached using `addHandler`.\n\t     * @param {function(...args: any): T} [selector] An optional function to\n\t     * post-process results. It takes the arguments from the event handler and\n\t     * should return a single value.\n\t     * @return {Observable<T>}\n\t     * @static true\n\t     * @name fromEventPattern\n\t     * @owner Observable\n\t     */\n\t    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n\t        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n\t    };\n\t    FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n\t        var _this = this;\n\t        var removeHandler = this.removeHandler;\n\t        var handler = !!this.selector ? function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            _this._callSelector(subscriber, args);\n\t        } : function (e) { subscriber.next(e); };\n\t        this._callAddHandler(handler, subscriber);\n\t        subscriber.add(new Subscription_1.Subscription(function () {\n\t            //TODO: determine whether or not to forward to error handler\n\t            removeHandler(handler);\n\t        }));\n\t    };\n\t    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n\t        try {\n\t            var result = this.selector.apply(this, args);\n\t            subscriber.next(result);\n\t        }\n\t        catch (e) {\n\t            subscriber.error(e);\n\t        }\n\t    };\n\t    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n\t        try {\n\t            this.addHandler(handler);\n\t        }\n\t        catch (e) {\n\t            errorSubscriber.error(e);\n\t        }\n\t    };\n\t    return FromEventPatternObservable;\n\t}(Observable_1.Observable));\n\texports.FromEventPatternObservable = FromEventPatternObservable;\n\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar fromPromise_1 = __webpack_require__(70);\n\tObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar PromiseObservable_1 = __webpack_require__(58);\n\texports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar GenerateObservable_1 = __webpack_require__(72);\n\tObservable_1.Observable.generate = GenerateObservable_1.GenerateObservable.create;\n\n\n/***/ },\n/* 72 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar isScheduler_1 = __webpack_require__(33);\n\tvar selfSelector = function (value) { return value; };\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar GenerateObservable = (function (_super) {\n\t    __extends(GenerateObservable, _super);\n\t    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n\t        _super.call(this);\n\t        this.initialState = initialState;\n\t        this.condition = condition;\n\t        this.iterate = iterate;\n\t        this.resultSelector = resultSelector;\n\t        this.scheduler = scheduler;\n\t    }\n\t    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n\t        if (arguments.length == 1) {\n\t            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n\t        }\n\t        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {\n\t            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n\t        }\n\t        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n\t    };\n\t    GenerateObservable.prototype._subscribe = function (subscriber) {\n\t        var state = this.initialState;\n\t        if (this.scheduler) {\n\t            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n\t                subscriber: subscriber,\n\t                iterate: this.iterate,\n\t                condition: this.condition,\n\t                resultSelector: this.resultSelector,\n\t                state: state });\n\t        }\n\t        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n\t        do {\n\t            if (condition) {\n\t                var conditionResult = void 0;\n\t                try {\n\t                    conditionResult = condition(state);\n\t                }\n\t                catch (err) {\n\t                    subscriber.error(err);\n\t                    return;\n\t                }\n\t                if (!conditionResult) {\n\t                    subscriber.complete();\n\t                    break;\n\t                }\n\t            }\n\t            var value = void 0;\n\t            try {\n\t                value = resultSelector(state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t            subscriber.next(value);\n\t            if (subscriber.closed) {\n\t                break;\n\t            }\n\t            try {\n\t                state = iterate(state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t        } while (true);\n\t    };\n\t    GenerateObservable.dispatch = function (state) {\n\t        var subscriber = state.subscriber, condition = state.condition;\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        if (state.needIterate) {\n\t            try {\n\t                state.state = state.iterate(state.state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t        }\n\t        else {\n\t            state.needIterate = true;\n\t        }\n\t        if (condition) {\n\t            var conditionResult = void 0;\n\t            try {\n\t                conditionResult = condition(state.state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t            if (!conditionResult) {\n\t                subscriber.complete();\n\t                return;\n\t            }\n\t            if (subscriber.closed) {\n\t                return;\n\t            }\n\t        }\n\t        var value;\n\t        try {\n\t            value = state.resultSelector(state.state);\n\t        }\n\t        catch (err) {\n\t            subscriber.error(err);\n\t            return;\n\t        }\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        subscriber.next(value);\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        return this.schedule(state);\n\t    };\n\t    return GenerateObservable;\n\t}(Observable_1.Observable));\n\texports.GenerateObservable = GenerateObservable;\n\n\n/***/ },\n/* 73 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar if_1 = __webpack_require__(74);\n\tObservable_1.Observable.if = if_1._if;\n\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar IfObservable_1 = __webpack_require__(75);\n\texports._if = IfObservable_1.IfObservable.create;\n\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar IfObservable = (function (_super) {\n\t    __extends(IfObservable, _super);\n\t    function IfObservable(condition, thenSource, elseSource) {\n\t        _super.call(this);\n\t        this.condition = condition;\n\t        this.thenSource = thenSource;\n\t        this.elseSource = elseSource;\n\t    }\n\t    IfObservable.create = function (condition, thenSource, elseSource) {\n\t        return new IfObservable(condition, thenSource, elseSource);\n\t    };\n\t    IfObservable.prototype._subscribe = function (subscriber) {\n\t        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n\t        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n\t    };\n\t    return IfObservable;\n\t}(Observable_1.Observable));\n\texports.IfObservable = IfObservable;\n\tvar IfSubscriber = (function (_super) {\n\t    __extends(IfSubscriber, _super);\n\t    function IfSubscriber(destination, condition, thenSource, elseSource) {\n\t        _super.call(this, destination);\n\t        this.condition = condition;\n\t        this.thenSource = thenSource;\n\t        this.elseSource = elseSource;\n\t        this.tryIf();\n\t    }\n\t    IfSubscriber.prototype.tryIf = function () {\n\t        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n\t        var result;\n\t        try {\n\t            result = condition();\n\t            var source = result ? thenSource : elseSource;\n\t            if (source) {\n\t                this.add(subscribeToResult_1.subscribeToResult(this, source));\n\t            }\n\t            else {\n\t                this._complete();\n\t            }\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    return IfSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar interval_1 = __webpack_require__(77);\n\tObservable_1.Observable.interval = interval_1.interval;\n\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar IntervalObservable_1 = __webpack_require__(78);\n\texports.interval = IntervalObservable_1.IntervalObservable.create;\n\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isNumeric_1 = __webpack_require__(79);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar async_1 = __webpack_require__(80);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar IntervalObservable = (function (_super) {\n\t    __extends(IntervalObservable, _super);\n\t    function IntervalObservable(period, scheduler) {\n\t        if (period === void 0) { period = 0; }\n\t        if (scheduler === void 0) { scheduler = async_1.async; }\n\t        _super.call(this);\n\t        this.period = period;\n\t        this.scheduler = scheduler;\n\t        if (!isNumeric_1.isNumeric(period) || period < 0) {\n\t            this.period = 0;\n\t        }\n\t        if (!scheduler || typeof scheduler.schedule !== 'function') {\n\t            this.scheduler = async_1.async;\n\t        }\n\t    }\n\t    /**\n\t     * Creates an Observable that emits sequential numbers every specified\n\t     * interval of time, on a specified Scheduler.\n\t     *\n\t     * <span class=\"informal\">Emits incremental numbers periodically in time.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/interval.png\" width=\"100%\">\n\t     *\n\t     * `interval` returns an Observable that emits an infinite sequence of\n\t     * ascending integers, with a constant interval of time of your choosing\n\t     * between those emissions. The first emission is not sent immediately, but\n\t     * only after the first period has passed. By default, this operator uses the\n\t     * `async` Scheduler to provide a notion of time, but you may pass any\n\t     * Scheduler to it.\n\t     *\n\t     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n\t     * var numbers = Rx.Observable.interval(1000);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link timer}\n\t     * @see {@link delay}\n\t     *\n\t     * @param {number} [period=0] The interval size in milliseconds (by default)\n\t     * or the time unit determined by the scheduler's clock.\n\t     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n\t     * the emission of values, and providing a notion of \"time\".\n\t     * @return {Observable} An Observable that emits a sequential number each time\n\t     * interval.\n\t     * @static true\n\t     * @name interval\n\t     * @owner Observable\n\t     */\n\t    IntervalObservable.create = function (period, scheduler) {\n\t        if (period === void 0) { period = 0; }\n\t        if (scheduler === void 0) { scheduler = async_1.async; }\n\t        return new IntervalObservable(period, scheduler);\n\t    };\n\t    IntervalObservable.dispatch = function (state) {\n\t        var index = state.index, subscriber = state.subscriber, period = state.period;\n\t        subscriber.next(index);\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        state.index += 1;\n\t        this.schedule(state, period);\n\t    };\n\t    IntervalObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var period = this.period;\n\t        var scheduler = this.scheduler;\n\t        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n\t            index: index, subscriber: subscriber, period: period\n\t        }));\n\t    };\n\t    return IntervalObservable;\n\t}(Observable_1.Observable));\n\texports.IntervalObservable = IntervalObservable;\n\n\n/***/ },\n/* 79 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isArray_1 = __webpack_require__(14);\n\tfunction isNumeric(val) {\n\t    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t    // subtraction forces infinities to NaN\n\t    // adding 1 corrects loss of precision from parseFloat (#15100)\n\t    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n\t}\n\texports.isNumeric = isNumeric;\n\t;\n\n\n/***/ },\n/* 80 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AsyncAction_1 = __webpack_require__(81);\n\tvar AsyncScheduler_1 = __webpack_require__(83);\n\texports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n\n\n/***/ },\n/* 81 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar Action_1 = __webpack_require__(82);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AsyncAction = (function (_super) {\n\t    __extends(AsyncAction, _super);\n\t    function AsyncAction(scheduler, work) {\n\t        _super.call(this, scheduler, work);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t        this.pending = false;\n\t    }\n\t    AsyncAction.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (this.closed) {\n\t            return this;\n\t        }\n\t        // Always replace the current state with the new state.\n\t        this.state = state;\n\t        // Set the pending flag indicating that this action has been scheduled, or\n\t        // has recursively rescheduled itself.\n\t        this.pending = true;\n\t        var id = this.id;\n\t        var scheduler = this.scheduler;\n\t        //\n\t        // Important implementation note:\n\t        //\n\t        // Actions only execute once by default, unless rescheduled from within the\n\t        // scheduled callback. This allows us to implement single and repeat\n\t        // actions via the same code path, without adding API surface area, as well\n\t        // as mimic traditional recursion but across asynchronous boundaries.\n\t        //\n\t        // However, JS runtimes and timers distinguish between intervals achieved by\n\t        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n\t        // serial `setTimeout` calls can be individually delayed, which delays\n\t        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n\t        // guarantee the interval callback will be invoked more precisely to the\n\t        // interval period, regardless of load.\n\t        //\n\t        // Therefore, we use `setInterval` to schedule single and repeat actions.\n\t        // If the action reschedules itself with the same delay, the interval is not\n\t        // canceled. If the action doesn't reschedule, or reschedules with a\n\t        // different delay, the interval will be canceled after scheduled callback\n\t        // execution.\n\t        //\n\t        if (id != null) {\n\t            this.id = this.recycleAsyncId(scheduler, id, delay);\n\t        }\n\t        this.delay = delay;\n\t        // If this action has already an async Id, don't request a new one.\n\t        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\t        return this;\n\t    };\n\t    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n\t    };\n\t    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        // If this action is rescheduled with the same delay time, don't clear the interval id.\n\t        if (delay !== null && this.delay === delay) {\n\t            return id;\n\t        }\n\t        // Otherwise, if the action's delay time is different from the current delay,\n\t        // clear the interval id\n\t        return root_1.root.clearInterval(id) && undefined || undefined;\n\t    };\n\t    /**\n\t     * Immediately executes this action and the `work` it contains.\n\t     * @return {any}\n\t     */\n\t    AsyncAction.prototype.execute = function (state, delay) {\n\t        if (this.closed) {\n\t            return new Error('executing a cancelled action');\n\t        }\n\t        this.pending = false;\n\t        var error = this._execute(state, delay);\n\t        if (error) {\n\t            return error;\n\t        }\n\t        else if (this.pending === false && this.id != null) {\n\t            // Dequeue if the action didn't reschedule itself. Don't call\n\t            // unsubscribe(), because the action could reschedule later.\n\t            // For example:\n\t            // ```\n\t            // scheduler.schedule(function doWork(counter) {\n\t            //   /* ... I'm a busy worker bee ... */\n\t            //   var originalAction = this;\n\t            //   /* wait 100ms before rescheduling the action */\n\t            //   setTimeout(function () {\n\t            //     originalAction.schedule(counter + 1);\n\t            //   }, 100);\n\t            // }, 1000);\n\t            // ```\n\t            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n\t        }\n\t    };\n\t    AsyncAction.prototype._execute = function (state, delay) {\n\t        var errored = false;\n\t        var errorValue = undefined;\n\t        try {\n\t            this.work(state);\n\t        }\n\t        catch (e) {\n\t            errored = true;\n\t            errorValue = !!e && e || new Error(e);\n\t        }\n\t        if (errored) {\n\t            this.unsubscribe();\n\t            return errorValue;\n\t        }\n\t    };\n\t    AsyncAction.prototype._unsubscribe = function () {\n\t        var id = this.id;\n\t        var scheduler = this.scheduler;\n\t        var actions = scheduler.actions;\n\t        var index = actions.indexOf(this);\n\t        this.work = null;\n\t        this.delay = null;\n\t        this.state = null;\n\t        this.pending = false;\n\t        this.scheduler = null;\n\t        if (index !== -1) {\n\t            actions.splice(index, 1);\n\t        }\n\t        if (id != null) {\n\t            this.id = this.recycleAsyncId(scheduler, id, null);\n\t        }\n\t    };\n\t    return AsyncAction;\n\t}(Action_1.Action));\n\texports.AsyncAction = AsyncAction;\n\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * A unit of work to be executed in a {@link Scheduler}. An action is typically\n\t * created from within a Scheduler and an RxJS user does not need to concern\n\t * themselves about creating and manipulating an Action.\n\t *\n\t * ```ts\n\t * class Action<T> extends Subscription {\n\t *   new (scheduler: Scheduler, work: (state?: T) => void);\n\t *   schedule(state?: T, delay: number = 0): Subscription;\n\t * }\n\t * ```\n\t *\n\t * @class Action<T>\n\t */\n\tvar Action = (function (_super) {\n\t    __extends(Action, _super);\n\t    function Action(scheduler, work) {\n\t        _super.call(this);\n\t    }\n\t    /**\n\t     * Schedules this action on its parent Scheduler for execution. May be passed\n\t     * some context object, `state`. May happen at some point in the future,\n\t     * according to the `delay` parameter, if specified.\n\t     * @param {T} [state] Some contextual data that the `work` function uses when\n\t     * called by the Scheduler.\n\t     * @param {number} [delay] Time to wait before executing the work, where the\n\t     * time unit is implicit and defined by the Scheduler.\n\t     * @return {void}\n\t     */\n\t    Action.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return this;\n\t    };\n\t    return Action;\n\t}(Subscription_1.Subscription));\n\texports.Action = Action;\n\n\n/***/ },\n/* 83 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Scheduler_1 = __webpack_require__(84);\n\tvar AsyncScheduler = (function (_super) {\n\t    __extends(AsyncScheduler, _super);\n\t    function AsyncScheduler() {\n\t        _super.apply(this, arguments);\n\t        this.actions = [];\n\t        /**\n\t         * A flag to indicate whether the Scheduler is currently executing a batch of\n\t         * queued actions.\n\t         * @type {boolean}\n\t         */\n\t        this.active = false;\n\t        /**\n\t         * An internal ID used to track the latest asynchronous task such as those\n\t         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n\t         * others.\n\t         * @type {any}\n\t         */\n\t        this.scheduled = undefined;\n\t    }\n\t    AsyncScheduler.prototype.flush = function (action) {\n\t        var actions = this.actions;\n\t        if (this.active) {\n\t            actions.push(action);\n\t            return;\n\t        }\n\t        var error;\n\t        this.active = true;\n\t        do {\n\t            if (error = action.execute(action.state, action.delay)) {\n\t                break;\n\t            }\n\t        } while (action = actions.shift()); // exhaust the scheduler queue\n\t        this.active = false;\n\t        if (error) {\n\t            while (action = actions.shift()) {\n\t                action.unsubscribe();\n\t            }\n\t            throw error;\n\t        }\n\t    };\n\t    return AsyncScheduler;\n\t}(Scheduler_1.Scheduler));\n\texports.AsyncScheduler = AsyncScheduler;\n\n\n/***/ },\n/* 84 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * An execution context and a data structure to order tasks and schedule their\n\t * execution. Provides a notion of (potentially virtual) time, through the\n\t * `now()` getter method.\n\t *\n\t * Each unit of work in a Scheduler is called an {@link Action}.\n\t *\n\t * ```ts\n\t * class Scheduler {\n\t *   now(): number;\n\t *   schedule(work, delay?, state?): Subscription;\n\t * }\n\t * ```\n\t *\n\t * @class Scheduler\n\t */\n\tvar Scheduler = (function () {\n\t    function Scheduler(SchedulerAction, now) {\n\t        if (now === void 0) { now = Scheduler.now; }\n\t        this.SchedulerAction = SchedulerAction;\n\t        this.now = now;\n\t    }\n\t    /**\n\t     * Schedules a function, `work`, for execution. May happen at some point in\n\t     * the future, according to the `delay` parameter, if specified. May be passed\n\t     * some context object, `state`, which will be passed to the `work` function.\n\t     *\n\t     * The given arguments will be processed an stored as an Action object in a\n\t     * queue of actions.\n\t     *\n\t     * @param {function(state: ?T): ?Subscription} work A function representing a\n\t     * task, or some unit of work to be executed by the Scheduler.\n\t     * @param {number} [delay] Time to wait before executing the work, where the\n\t     * time unit is implicit and defined by the Scheduler itself.\n\t     * @param {T} [state] Some contextual data that the `work` function uses when\n\t     * called by the Scheduler.\n\t     * @return {Subscription} A subscription in order to be able to unsubscribe\n\t     * the scheduled work.\n\t     */\n\t    Scheduler.prototype.schedule = function (work, delay, state) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return new this.SchedulerAction(this, work).schedule(state, delay);\n\t    };\n\t    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n\t    return Scheduler;\n\t}());\n\texports.Scheduler = Scheduler;\n\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar merge_1 = __webpack_require__(86);\n\tObservable_1.Observable.merge = merge_1.merge;\n\n\n/***/ },\n/* 86 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar merge_1 = __webpack_require__(87);\n\texports.merge = merge_1.mergeStatic;\n\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ArrayObservable_1 = __webpack_require__(34);\n\tvar mergeAll_1 = __webpack_require__(46);\n\tvar isScheduler_1 = __webpack_require__(33);\n\t/**\n\t * Creates an output Observable which concurrently emits all values from every\n\t * given input Observable.\n\t *\n\t * <span class=\"informal\">Flattens multiple Observables together by blending\n\t * their values into one Observable.</span>\n\t *\n\t * <img src=\"./img/merge.png\" width=\"100%\">\n\t *\n\t * `merge` subscribes to each given input Observable (either the source or an\n\t * Observable given as argument), and simply forwards (without doing any\n\t * transformation) all the values from all the input Observables to the output\n\t * Observable. The output Observable only completes once all input Observables\n\t * have completed. Any error delivered by an input Observable will be immediately\n\t * emitted on the output Observable.\n\t *\n\t * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var timer = Rx.Observable.interval(1000);\n\t * var clicksOrTimer = clicks.merge(timer);\n\t * clicksOrTimer.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var concurrent = 2; // the argument\n\t * var merged = timer1.merge(timer2, timer3, concurrent);\n\t * merged.subscribe(x => console.log(x));\n\t *\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t *\n\t * @param {Observable} other An input Observable to merge with the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n\t * concurrency of input Observables.\n\t * @return {Observable} an Observable that emits items that are the result of\n\t * every input Observable.\n\t * @method merge\n\t * @owner Observable\n\t */\n\tfunction merge() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    observables.unshift(this);\n\t    return mergeStatic.apply(this, observables);\n\t}\n\texports.merge = merge;\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Creates an output Observable which concurrently emits all values from every\n\t * given input Observable.\n\t *\n\t * <span class=\"informal\">Flattens multiple Observables together by blending\n\t * their values into one Observable.</span>\n\t *\n\t * <img src=\"./img/merge.png\" width=\"100%\">\n\t *\n\t * `merge` subscribes to each given input Observable (as arguments), and simply\n\t * forwards (without doing any transformation) all the values from all the input\n\t * Observables to the output Observable. The output Observable only completes\n\t * once all input Observables have completed. Any error delivered by an input\n\t * Observable will be immediately emitted on the output Observable.\n\t *\n\t * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var timer = Rx.Observable.interval(1000);\n\t * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n\t * clicksOrTimer.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var concurrent = 2; // the argument\n\t * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n\t * merged.subscribe(x => console.log(x));\n\t *\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t *\n\t * @param {Observable} input1 An input Observable to merge with others.\n\t * @param {Observable} input2 An input Observable to merge with others.\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n\t * concurrency of input Observables.\n\t * @return {Observable} an Observable that emits items that are the result of\n\t * every input Observable.\n\t * @static true\n\t * @name merge\n\t * @owner Observable\n\t */\n\tfunction mergeStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var concurrent = Number.POSITIVE_INFINITY;\n\t    var scheduler = null;\n\t    var last = observables[observables.length - 1];\n\t    if (isScheduler_1.isScheduler(last)) {\n\t        scheduler = observables.pop();\n\t        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n\t            concurrent = observables.pop();\n\t        }\n\t    }\n\t    else if (typeof last === 'number') {\n\t        concurrent = observables.pop();\n\t    }\n\t    if (observables.length === 1) {\n\t        return observables[0];\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));\n\t}\n\texports.mergeStatic = mergeStatic;\n\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar race_1 = __webpack_require__(89);\n\tObservable_1.Observable.race = race_1.raceStatic;\n\n\n/***/ },\n/* 89 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isArray_1 = __webpack_require__(14);\n\tvar ArrayObservable_1 = __webpack_require__(34);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Returns an Observable that mirrors the first source Observable to emit an item\n\t * from the combination of this Observable and supplied Observables\n\t * @param {...Observables} ...observables sources used to race for which Observable emits first.\n\t * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n\t * @method race\n\t * @owner Observable\n\t */\n\tfunction race() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    // if the only argument is an array, it was most likely called with\n\t    // `pair([obs1, obs2, ...])`\n\t    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n\t        observables = observables[0];\n\t    }\n\t    observables.unshift(this);\n\t    return raceStatic.apply(this, observables);\n\t}\n\texports.race = race;\n\tfunction raceStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    // if the only argument is an array, it was most likely called with\n\t    // `pair([obs1, obs2, ...])`\n\t    if (observables.length === 1) {\n\t        if (isArray_1.isArray(observables[0])) {\n\t            observables = observables[0];\n\t        }\n\t        else {\n\t            return observables[0];\n\t        }\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n\t}\n\texports.raceStatic = raceStatic;\n\tvar RaceOperator = (function () {\n\t    function RaceOperator() {\n\t    }\n\t    RaceOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RaceSubscriber(subscriber));\n\t    };\n\t    return RaceOperator;\n\t}());\n\texports.RaceOperator = RaceOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RaceSubscriber = (function (_super) {\n\t    __extends(RaceSubscriber, _super);\n\t    function RaceSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.hasFirst = false;\n\t        this.observables = [];\n\t        this.subscriptions = [];\n\t    }\n\t    RaceSubscriber.prototype._next = function (observable) {\n\t        this.observables.push(observable);\n\t    };\n\t    RaceSubscriber.prototype._complete = function () {\n\t        var observables = this.observables;\n\t        var len = observables.length;\n\t        if (len === 0) {\n\t            this.destination.complete();\n\t        }\n\t        else {\n\t            for (var i = 0; i < len; i++) {\n\t                var observable = observables[i];\n\t                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n\t                if (this.subscriptions) {\n\t                    this.subscriptions.push(subscription);\n\t                    this.add(subscription);\n\t                }\n\t            }\n\t            this.observables = null;\n\t        }\n\t    };\n\t    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (!this.hasFirst) {\n\t            this.hasFirst = true;\n\t            for (var i = 0; i < this.subscriptions.length; i++) {\n\t                if (i !== outerIndex) {\n\t                    var subscription = this.subscriptions[i];\n\t                    subscription.unsubscribe();\n\t                    this.remove(subscription);\n\t                }\n\t            }\n\t            this.subscriptions = null;\n\t        }\n\t        this.destination.next(innerValue);\n\t    };\n\t    return RaceSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.RaceSubscriber = RaceSubscriber;\n\n\n/***/ },\n/* 90 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar never_1 = __webpack_require__(91);\n\tObservable_1.Observable.never = never_1.never;\n\n\n/***/ },\n/* 91 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar NeverObservable_1 = __webpack_require__(92);\n\texports.never = NeverObservable_1.NeverObservable.create;\n\n\n/***/ },\n/* 92 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar noop_1 = __webpack_require__(93);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar NeverObservable = (function (_super) {\n\t    __extends(NeverObservable, _super);\n\t    function NeverObservable() {\n\t        _super.call(this);\n\t    }\n\t    /**\n\t     * Creates an Observable that emits no items to the Observer.\n\t     *\n\t     * <span class=\"informal\">An Observable that never emits anything.</span>\n\t     *\n\t     * <img src=\"./img/never.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that emits\n\t     * neither values nor errors nor the completion notification. It can be used\n\t     * for testing purposes or for composing with other Observables. Please not\n\t     * that by never emitting a complete notification, this Observable keeps the\n\t     * subscription from being disposed automatically. Subscriptions need to be\n\t     * manually disposed.\n\t     *\n\t     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n\t     * function info() {\n\t     *   console.log('Will not be called');\n\t     * }\n\t     * var result = Rx.Observable.never().startWith(7);\n\t     * result.subscribe(x => console.log(x), info, info);\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link empty}\n\t     * @see {@link of}\n\t     * @see {@link throw}\n\t     *\n\t     * @return {Observable} A \"never\" Observable: never emits anything.\n\t     * @static true\n\t     * @name never\n\t     * @owner Observable\n\t     */\n\t    NeverObservable.create = function () {\n\t        return new NeverObservable();\n\t    };\n\t    NeverObservable.prototype._subscribe = function (subscriber) {\n\t        noop_1.noop();\n\t    };\n\t    return NeverObservable;\n\t}(Observable_1.Observable));\n\texports.NeverObservable = NeverObservable;\n\n\n/***/ },\n/* 93 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/* tslint:disable:no-empty */\n\tfunction noop() { }\n\texports.noop = noop;\n\n\n/***/ },\n/* 94 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar of_1 = __webpack_require__(95);\n\tObservable_1.Observable.of = of_1.of;\n\n\n/***/ },\n/* 95 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ArrayObservable_1 = __webpack_require__(34);\n\texports.of = ArrayObservable_1.ArrayObservable.of;\n\n\n/***/ },\n/* 96 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar onErrorResumeNext_1 = __webpack_require__(97);\n\tObservable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;\n\n\n/***/ },\n/* 97 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar FromObservable_1 = __webpack_require__(57);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\tfunction onErrorResumeNext() {\n\t    var nextSources = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        nextSources[_i - 0] = arguments[_i];\n\t    }\n\t    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n\t        nextSources = nextSources[0];\n\t    }\n\t    return this.lift(new OnErrorResumeNextOperator(nextSources));\n\t}\n\texports.onErrorResumeNext = onErrorResumeNext;\n\t/* tslint:enable:max-line-length */\n\tfunction onErrorResumeNextStatic() {\n\t    var nextSources = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        nextSources[_i - 0] = arguments[_i];\n\t    }\n\t    var source = null;\n\t    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n\t        nextSources = nextSources[0];\n\t    }\n\t    source = nextSources.shift();\n\t    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n\t}\n\texports.onErrorResumeNextStatic = onErrorResumeNextStatic;\n\tvar OnErrorResumeNextOperator = (function () {\n\t    function OnErrorResumeNextOperator(nextSources) {\n\t        this.nextSources = nextSources;\n\t    }\n\t    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n\t    };\n\t    return OnErrorResumeNextOperator;\n\t}());\n\tvar OnErrorResumeNextSubscriber = (function (_super) {\n\t    __extends(OnErrorResumeNextSubscriber, _super);\n\t    function OnErrorResumeNextSubscriber(destination, nextSources) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.nextSources = nextSources;\n\t    }\n\t    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype._complete = function () {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n\t        var next = this.nextSources.shift();\n\t        if (next) {\n\t            this.add(subscribeToResult_1.subscribeToResult(this, next));\n\t        }\n\t        else {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return OnErrorResumeNextSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 98 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar pairs_1 = __webpack_require__(99);\n\tObservable_1.Observable.pairs = pairs_1.pairs;\n\n\n/***/ },\n/* 99 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar PairsObservable_1 = __webpack_require__(100);\n\texports.pairs = PairsObservable_1.PairsObservable.create;\n\n\n/***/ },\n/* 100 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tfunction dispatch(state) {\n\t    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;\n\t    if (index === length) {\n\t        subscriber.complete();\n\t        return;\n\t    }\n\t    var key = keys[index];\n\t    subscriber.next([key, obj[key]]);\n\t    state.index = index + 1;\n\t    this.schedule(state);\n\t}\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar PairsObservable = (function (_super) {\n\t    __extends(PairsObservable, _super);\n\t    function PairsObservable(obj, scheduler) {\n\t        _super.call(this);\n\t        this.obj = obj;\n\t        this.scheduler = scheduler;\n\t        this.keys = Object.keys(obj);\n\t    }\n\t    /**\n\t     * Convert an object into an observable sequence of [key, value] pairs\n\t     * using an optional Scheduler to enumerate the object.\n\t     *\n\t     * @example <caption>Converts a javascript object to an Observable</caption>\n\t     * var obj = {\n\t     *   foo: 42,\n\t     *   bar: 56,\n\t     *   baz: 78\n\t     * };\n\t     *\n\t     * var source = Rx.Observable.pairs(obj);\n\t     *\n\t     * var subscription = source.subscribe(\n\t     *   function (x) {\n\t     *     console.log('Next: %s', x);\n\t     *   },\n\t     *   function (err) {\n\t     *     console.log('Error: %s', err);\n\t     *   },\n\t     *   function () {\n\t     *     console.log('Completed');\n\t     *   });\n\t     *\n\t     * @param {Object} obj The object to inspect and turn into an\n\t     * Observable sequence.\n\t     * @param {Scheduler} [scheduler] An optional Scheduler to run the\n\t     * enumeration of the input sequence on.\n\t     * @returns {(Observable<Array<string | T>>)} An observable sequence of\n\t     * [key, value] pairs from the object.\n\t     */\n\t    PairsObservable.create = function (obj, scheduler) {\n\t        return new PairsObservable(obj, scheduler);\n\t    };\n\t    PairsObservable.prototype._subscribe = function (subscriber) {\n\t        var _a = this, keys = _a.keys, scheduler = _a.scheduler;\n\t        var length = keys.length;\n\t        if (scheduler) {\n\t            return scheduler.schedule(dispatch, 0, {\n\t                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            for (var idx = 0; idx < length; idx++) {\n\t                var key = keys[idx];\n\t                subscriber.next([key, this.obj[key]]);\n\t            }\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return PairsObservable;\n\t}(Observable_1.Observable));\n\texports.PairsObservable = PairsObservable;\n\n\n/***/ },\n/* 101 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar range_1 = __webpack_require__(102);\n\tObservable_1.Observable.range = range_1.range;\n\n\n/***/ },\n/* 102 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar RangeObservable_1 = __webpack_require__(103);\n\texports.range = RangeObservable_1.RangeObservable.create;\n\n\n/***/ },\n/* 103 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar RangeObservable = (function (_super) {\n\t    __extends(RangeObservable, _super);\n\t    function RangeObservable(start, count, scheduler) {\n\t        _super.call(this);\n\t        this.start = start;\n\t        this._count = count;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits a sequence of numbers within a specified\n\t     * range.\n\t     *\n\t     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n\t     *\n\t     * <img src=\"./img/range.png\" width=\"100%\">\n\t     *\n\t     * `range` operator emits a range of sequential integers, in order, where you\n\t     * select the `start` of the range and its `length`. By default, uses no\n\t     * Scheduler and just delivers the notifications synchronously, but may use\n\t     * an optional Scheduler to regulate those deliveries.\n\t     *\n\t     * @example <caption>Emits the numbers 1 to 10</caption>\n\t     * var numbers = Rx.Observable.range(1, 10);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link timer}\n\t     * @see {@link interval}\n\t     *\n\t     * @param {number} [start=0] The value of the first integer in the sequence.\n\t     * @param {number} [count=0] The number of sequential integers to generate.\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emissions of the notifications.\n\t     * @return {Observable} An Observable of numbers that emits a finite range of\n\t     * sequential integers.\n\t     * @static true\n\t     * @name range\n\t     * @owner Observable\n\t     */\n\t    RangeObservable.create = function (start, count, scheduler) {\n\t        if (start === void 0) { start = 0; }\n\t        if (count === void 0) { count = 0; }\n\t        return new RangeObservable(start, count, scheduler);\n\t    };\n\t    RangeObservable.dispatch = function (state) {\n\t        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n\t        if (index >= count) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(start);\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        state.index = index + 1;\n\t        state.start = start + 1;\n\t        this.schedule(state);\n\t    };\n\t    RangeObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var start = this.start;\n\t        var count = this._count;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(RangeObservable.dispatch, 0, {\n\t                index: index, count: count, start: start, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            do {\n\t                if (index++ >= count) {\n\t                    subscriber.complete();\n\t                    break;\n\t                }\n\t                subscriber.next(start++);\n\t                if (subscriber.closed) {\n\t                    break;\n\t                }\n\t            } while (true);\n\t        }\n\t    };\n\t    return RangeObservable;\n\t}(Observable_1.Observable));\n\texports.RangeObservable = RangeObservable;\n\n\n/***/ },\n/* 104 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar using_1 = __webpack_require__(105);\n\tObservable_1.Observable.using = using_1.using;\n\n\n/***/ },\n/* 105 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar UsingObservable_1 = __webpack_require__(106);\n\texports.using = UsingObservable_1.UsingObservable.create;\n\n\n/***/ },\n/* 106 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar UsingObservable = (function (_super) {\n\t    __extends(UsingObservable, _super);\n\t    function UsingObservable(resourceFactory, observableFactory) {\n\t        _super.call(this);\n\t        this.resourceFactory = resourceFactory;\n\t        this.observableFactory = observableFactory;\n\t    }\n\t    UsingObservable.create = function (resourceFactory, observableFactory) {\n\t        return new UsingObservable(resourceFactory, observableFactory);\n\t    };\n\t    UsingObservable.prototype._subscribe = function (subscriber) {\n\t        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n\t        var resource;\n\t        try {\n\t            resource = resourceFactory();\n\t            return new UsingSubscriber(subscriber, resource, observableFactory);\n\t        }\n\t        catch (err) {\n\t            subscriber.error(err);\n\t        }\n\t    };\n\t    return UsingObservable;\n\t}(Observable_1.Observable));\n\texports.UsingObservable = UsingObservable;\n\tvar UsingSubscriber = (function (_super) {\n\t    __extends(UsingSubscriber, _super);\n\t    function UsingSubscriber(destination, resource, observableFactory) {\n\t        _super.call(this, destination);\n\t        this.resource = resource;\n\t        this.observableFactory = observableFactory;\n\t        destination.add(resource);\n\t        this.tryUse();\n\t    }\n\t    UsingSubscriber.prototype.tryUse = function () {\n\t        try {\n\t            var source = this.observableFactory.call(this, this.resource);\n\t            if (source) {\n\t                this.add(subscribeToResult_1.subscribeToResult(this, source));\n\t            }\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    return UsingSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 107 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar throw_1 = __webpack_require__(108);\n\tObservable_1.Observable.throw = throw_1._throw;\n\n\n/***/ },\n/* 108 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ErrorObservable_1 = __webpack_require__(109);\n\texports._throw = ErrorObservable_1.ErrorObservable.create;\n\n\n/***/ },\n/* 109 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ErrorObservable = (function (_super) {\n\t    __extends(ErrorObservable, _super);\n\t    function ErrorObservable(error, scheduler) {\n\t        _super.call(this);\n\t        this.error = error;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits no items to the Observer and immediately\n\t     * emits an error notification.\n\t     *\n\t     * <span class=\"informal\">Just emits 'error', and nothing else.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/throw.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that only\n\t     * emits the error notification. It can be used for composing with other\n\t     * Observables, such as in a {@link mergeMap}.\n\t     *\n\t     * @example <caption>Emit the number 7, then emit an error.</caption>\n\t     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n\t     * var interval = Rx.Observable.interval(1000);\n\t     * var result = interval.mergeMap(x =>\n\t     *   x === 13 ?\n\t     *     Rx.Observable.throw('Thirteens are bad') :\n\t     *     Rx.Observable.of('a', 'b', 'c')\n\t     * );\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link empty}\n\t     * @see {@link never}\n\t     * @see {@link of}\n\t     *\n\t     * @param {any} error The particular Error to pass to the error notification.\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emission of the error notification.\n\t     * @return {Observable} An error Observable: emits only the error notification\n\t     * using the given error argument.\n\t     * @static true\n\t     * @name throw\n\t     * @owner Observable\n\t     */\n\t    ErrorObservable.create = function (error, scheduler) {\n\t        return new ErrorObservable(error, scheduler);\n\t    };\n\t    ErrorObservable.dispatch = function (arg) {\n\t        var error = arg.error, subscriber = arg.subscriber;\n\t        subscriber.error(error);\n\t    };\n\t    ErrorObservable.prototype._subscribe = function (subscriber) {\n\t        var error = this.error;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n\t                error: error, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            subscriber.error(error);\n\t        }\n\t    };\n\t    return ErrorObservable;\n\t}(Observable_1.Observable));\n\texports.ErrorObservable = ErrorObservable;\n\n\n/***/ },\n/* 110 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timer_1 = __webpack_require__(111);\n\tObservable_1.Observable.timer = timer_1.timer;\n\n\n/***/ },\n/* 111 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar TimerObservable_1 = __webpack_require__(112);\n\texports.timer = TimerObservable_1.TimerObservable.create;\n\n\n/***/ },\n/* 112 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isNumeric_1 = __webpack_require__(79);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar async_1 = __webpack_require__(80);\n\tvar isScheduler_1 = __webpack_require__(33);\n\tvar isDate_1 = __webpack_require__(113);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar TimerObservable = (function (_super) {\n\t    __extends(TimerObservable, _super);\n\t    function TimerObservable(dueTime, period, scheduler) {\n\t        if (dueTime === void 0) { dueTime = 0; }\n\t        _super.call(this);\n\t        this.period = -1;\n\t        this.dueTime = 0;\n\t        if (isNumeric_1.isNumeric(period)) {\n\t            this.period = Number(period) < 1 && 1 || Number(period);\n\t        }\n\t        else if (isScheduler_1.isScheduler(period)) {\n\t            scheduler = period;\n\t        }\n\t        if (!isScheduler_1.isScheduler(scheduler)) {\n\t            scheduler = async_1.async;\n\t        }\n\t        this.scheduler = scheduler;\n\t        this.dueTime = isDate_1.isDate(dueTime) ?\n\t            (+dueTime - this.scheduler.now()) :\n\t            dueTime;\n\t    }\n\t    /**\n\t     * Creates an Observable that starts emitting after an `initialDelay` and\n\t     * emits ever increasing numbers after each `period` of time thereafter.\n\t     *\n\t     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n\t     * should the emissions start.</span>\n\t     *\n\t     * <img src=\"./img/timer.png\" width=\"100%\">\n\t     *\n\t     * `timer` returns an Observable that emits an infinite sequence of ascending\n\t     * integers, with a constant interval of time, `period` of your choosing\n\t     * between those emissions. The first emission happens after the specified\n\t     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n\t     * operator uses the `async` Scheduler to provide a notion of time, but you\n\t     * may pass any Scheduler to it. If `period` is not specified, the output\n\t     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n\t     * sequence.\n\t     *\n\t     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n\t     * var numbers = Rx.Observable.timer(3000, 1000);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @example <caption>Emits one number after five seconds</caption>\n\t     * var numbers = Rx.Observable.timer(5000);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link interval}\n\t     * @see {@link delay}\n\t     *\n\t     * @param {number|Date} initialDelay The initial delay time to wait before\n\t     * emitting the first value of `0`.\n\t     * @param {number} [period] The period of time between emissions of the\n\t     * subsequent numbers.\n\t     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n\t     * the emission of values, and providing a notion of \"time\".\n\t     * @return {Observable} An Observable that emits a `0` after the\n\t     * `initialDelay` and ever increasing numbers after each `period` of time\n\t     * thereafter.\n\t     * @static true\n\t     * @name timer\n\t     * @owner Observable\n\t     */\n\t    TimerObservable.create = function (initialDelay, period, scheduler) {\n\t        if (initialDelay === void 0) { initialDelay = 0; }\n\t        return new TimerObservable(initialDelay, period, scheduler);\n\t    };\n\t    TimerObservable.dispatch = function (state) {\n\t        var index = state.index, period = state.period, subscriber = state.subscriber;\n\t        var action = this;\n\t        subscriber.next(index);\n\t        if (subscriber.closed) {\n\t            return;\n\t        }\n\t        else if (period === -1) {\n\t            return subscriber.complete();\n\t        }\n\t        state.index = index + 1;\n\t        action.schedule(state, period);\n\t    };\n\t    TimerObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n\t        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n\t            index: index, period: period, subscriber: subscriber\n\t        });\n\t    };\n\t    return TimerObservable;\n\t}(Observable_1.Observable));\n\texports.TimerObservable = TimerObservable;\n\n\n/***/ },\n/* 113 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isDate(value) {\n\t    return value instanceof Date && !isNaN(+value);\n\t}\n\texports.isDate = isDate;\n\n\n/***/ },\n/* 114 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar zip_1 = __webpack_require__(115);\n\tObservable_1.Observable.zip = zip_1.zip;\n\n\n/***/ },\n/* 115 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar zip_1 = __webpack_require__(116);\n\texports.zip = zip_1.zipStatic;\n\n\n/***/ },\n/* 116 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar ArrayObservable_1 = __webpack_require__(34);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\tvar iterator_1 = __webpack_require__(41);\n\t/**\n\t * @param observables\n\t * @return {Observable<R>}\n\t * @method zip\n\t * @owner Observable\n\t */\n\tfunction zipProto() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    observables.unshift(this);\n\t    return zipStatic.apply(this, observables);\n\t}\n\texports.zipProto = zipProto;\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * @param observables\n\t * @return {Observable<R>}\n\t * @static true\n\t * @name zip\n\t * @owner Observable\n\t */\n\tfunction zipStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var project = observables[observables.length - 1];\n\t    if (typeof project === 'function') {\n\t        observables.pop();\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));\n\t}\n\texports.zipStatic = zipStatic;\n\tvar ZipOperator = (function () {\n\t    function ZipOperator(project) {\n\t        this.project = project;\n\t    }\n\t    ZipOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ZipSubscriber(subscriber, this.project));\n\t    };\n\t    return ZipOperator;\n\t}());\n\texports.ZipOperator = ZipOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ZipSubscriber = (function (_super) {\n\t    __extends(ZipSubscriber, _super);\n\t    function ZipSubscriber(destination, project, values) {\n\t        if (values === void 0) { values = Object.create(null); }\n\t        _super.call(this, destination);\n\t        this.index = 0;\n\t        this.iterators = [];\n\t        this.active = 0;\n\t        this.project = (typeof project === 'function') ? project : null;\n\t        this.values = values;\n\t    }\n\t    ZipSubscriber.prototype._next = function (value) {\n\t        var iterators = this.iterators;\n\t        var index = this.index++;\n\t        if (isArray_1.isArray(value)) {\n\t            iterators.push(new StaticArrayIterator(value));\n\t        }\n\t        else if (typeof value[iterator_1.$$iterator] === 'function') {\n\t            iterators.push(new StaticIterator(value[iterator_1.$$iterator]()));\n\t        }\n\t        else {\n\t            iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n\t        }\n\t    };\n\t    ZipSubscriber.prototype._complete = function () {\n\t        var iterators = this.iterators;\n\t        var len = iterators.length;\n\t        this.active = len;\n\t        for (var i = 0; i < len; i++) {\n\t            var iterator = iterators[i];\n\t            if (iterator.stillUnsubscribed) {\n\t                this.add(iterator.subscribe(iterator, i));\n\t            }\n\t            else {\n\t                this.active--; // not an observable\n\t            }\n\t        }\n\t    };\n\t    ZipSubscriber.prototype.notifyInactive = function () {\n\t        this.active--;\n\t        if (this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ZipSubscriber.prototype.checkIterators = function () {\n\t        var iterators = this.iterators;\n\t        var len = iterators.length;\n\t        var destination = this.destination;\n\t        // abort if not all of them have values\n\t        for (var i = 0; i < len; i++) {\n\t            var iterator = iterators[i];\n\t            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n\t                return;\n\t            }\n\t        }\n\t        var shouldComplete = false;\n\t        var args = [];\n\t        for (var i = 0; i < len; i++) {\n\t            var iterator = iterators[i];\n\t            var result = iterator.next();\n\t            // check to see if it's completed now that you've gotten\n\t            // the next value.\n\t            if (iterator.hasCompleted()) {\n\t                shouldComplete = true;\n\t            }\n\t            if (result.done) {\n\t                destination.complete();\n\t                return;\n\t            }\n\t            args.push(result.value);\n\t        }\n\t        if (this.project) {\n\t            this._tryProject(args);\n\t        }\n\t        else {\n\t            destination.next(args);\n\t        }\n\t        if (shouldComplete) {\n\t            destination.complete();\n\t        }\n\t    };\n\t    ZipSubscriber.prototype._tryProject = function (args) {\n\t        var result;\n\t        try {\n\t            result = this.project.apply(this, args);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return ZipSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.ZipSubscriber = ZipSubscriber;\n\tvar StaticIterator = (function () {\n\t    function StaticIterator(iterator) {\n\t        this.iterator = iterator;\n\t        this.nextResult = iterator.next();\n\t    }\n\t    StaticIterator.prototype.hasValue = function () {\n\t        return true;\n\t    };\n\t    StaticIterator.prototype.next = function () {\n\t        var result = this.nextResult;\n\t        this.nextResult = this.iterator.next();\n\t        return result;\n\t    };\n\t    StaticIterator.prototype.hasCompleted = function () {\n\t        var nextResult = this.nextResult;\n\t        return nextResult && nextResult.done;\n\t    };\n\t    return StaticIterator;\n\t}());\n\tvar StaticArrayIterator = (function () {\n\t    function StaticArrayIterator(array) {\n\t        this.array = array;\n\t        this.index = 0;\n\t        this.length = 0;\n\t        this.length = array.length;\n\t    }\n\t    StaticArrayIterator.prototype[iterator_1.$$iterator] = function () {\n\t        return this;\n\t    };\n\t    StaticArrayIterator.prototype.next = function (value) {\n\t        var i = this.index++;\n\t        var array = this.array;\n\t        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n\t    };\n\t    StaticArrayIterator.prototype.hasValue = function () {\n\t        return this.array.length > this.index;\n\t    };\n\t    StaticArrayIterator.prototype.hasCompleted = function () {\n\t        return this.array.length === this.index;\n\t    };\n\t    return StaticArrayIterator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ZipBufferIterator = (function (_super) {\n\t    __extends(ZipBufferIterator, _super);\n\t    function ZipBufferIterator(destination, parent, observable, index) {\n\t        _super.call(this, destination);\n\t        this.parent = parent;\n\t        this.observable = observable;\n\t        this.index = index;\n\t        this.stillUnsubscribed = true;\n\t        this.buffer = [];\n\t        this.isComplete = false;\n\t    }\n\t    ZipBufferIterator.prototype[iterator_1.$$iterator] = function () {\n\t        return this;\n\t    };\n\t    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n\t    //    this is legit because `next()` will never be called by a subscription in this case.\n\t    ZipBufferIterator.prototype.next = function () {\n\t        var buffer = this.buffer;\n\t        if (buffer.length === 0 && this.isComplete) {\n\t            return { value: null, done: true };\n\t        }\n\t        else {\n\t            return { value: buffer.shift(), done: false };\n\t        }\n\t    };\n\t    ZipBufferIterator.prototype.hasValue = function () {\n\t        return this.buffer.length > 0;\n\t    };\n\t    ZipBufferIterator.prototype.hasCompleted = function () {\n\t        return this.buffer.length === 0 && this.isComplete;\n\t    };\n\t    ZipBufferIterator.prototype.notifyComplete = function () {\n\t        if (this.buffer.length > 0) {\n\t            this.isComplete = true;\n\t            this.parent.notifyInactive();\n\t        }\n\t        else {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.buffer.push(innerValue);\n\t        this.parent.checkIterators();\n\t    };\n\t    ZipBufferIterator.prototype.subscribe = function (value, index) {\n\t        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);\n\t    };\n\t    return ZipBufferIterator;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 117 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ajax_1 = __webpack_require__(118);\n\tObservable_1.Observable.ajax = ajax_1.ajax;\n\n\n/***/ },\n/* 118 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AjaxObservable_1 = __webpack_require__(119);\n\texports.ajax = AjaxObservable_1.AjaxObservable.create;\n\n\n/***/ },\n/* 119 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tfunction getCORSRequest() {\n\t    if (root_1.root.XMLHttpRequest) {\n\t        var xhr = new root_1.root.XMLHttpRequest();\n\t        if ('withCredentials' in xhr) {\n\t            xhr.withCredentials = !!this.withCredentials;\n\t        }\n\t        return xhr;\n\t    }\n\t    else if (!!root_1.root.XDomainRequest) {\n\t        return new root_1.root.XDomainRequest();\n\t    }\n\t    else {\n\t        throw new Error('CORS is not supported by your browser');\n\t    }\n\t}\n\tfunction getXMLHttpRequest() {\n\t    if (root_1.root.XMLHttpRequest) {\n\t        return new root_1.root.XMLHttpRequest();\n\t    }\n\t    else {\n\t        var progId = void 0;\n\t        try {\n\t            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n\t            for (var i = 0; i < 3; i++) {\n\t                try {\n\t                    progId = progIds[i];\n\t                    if (new root_1.root.ActiveXObject(progId)) {\n\t                        break;\n\t                    }\n\t                }\n\t                catch (e) {\n\t                }\n\t            }\n\t            return new root_1.root.ActiveXObject(progId);\n\t        }\n\t        catch (e) {\n\t            throw new Error('XMLHttpRequest is not supported by your browser');\n\t        }\n\t    }\n\t}\n\tfunction ajaxGet(url, headers) {\n\t    if (headers === void 0) { headers = null; }\n\t    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n\t}\n\texports.ajaxGet = ajaxGet;\n\t;\n\tfunction ajaxPost(url, body, headers) {\n\t    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n\t}\n\texports.ajaxPost = ajaxPost;\n\t;\n\tfunction ajaxDelete(url, headers) {\n\t    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n\t}\n\texports.ajaxDelete = ajaxDelete;\n\t;\n\tfunction ajaxPut(url, body, headers) {\n\t    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n\t}\n\texports.ajaxPut = ajaxPut;\n\t;\n\tfunction ajaxGetJSON(url, headers) {\n\t    return new AjaxObservable({ method: 'GET', url: url, responseType: 'json', headers: headers }).map(function (x) { return x.response; });\n\t}\n\texports.ajaxGetJSON = ajaxGetJSON;\n\t;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar AjaxObservable = (function (_super) {\n\t    __extends(AjaxObservable, _super);\n\t    function AjaxObservable(urlOrRequest) {\n\t        _super.call(this);\n\t        var request = {\n\t            async: true,\n\t            createXHR: function () {\n\t                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n\t            },\n\t            crossDomain: false,\n\t            withCredentials: false,\n\t            headers: {},\n\t            method: 'GET',\n\t            responseType: 'json',\n\t            timeout: 0\n\t        };\n\t        if (typeof urlOrRequest === 'string') {\n\t            request.url = urlOrRequest;\n\t        }\n\t        else {\n\t            for (var prop in urlOrRequest) {\n\t                if (urlOrRequest.hasOwnProperty(prop)) {\n\t                    request[prop] = urlOrRequest[prop];\n\t                }\n\t            }\n\t        }\n\t        this.request = request;\n\t    }\n\t    AjaxObservable.prototype._subscribe = function (subscriber) {\n\t        return new AjaxSubscriber(subscriber, this.request);\n\t    };\n\t    /**\n\t     * Creates an observable for an Ajax request with either a request object with\n\t     * url, headers, etc or a string for a URL.\n\t     *\n\t     * @example\n\t     * source = Rx.Observable.ajax('/products');\n\t     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n\t     *\n\t     * @param {string|Object} request Can be one of the following:\n\t     *   A string of the URL to make the Ajax call.\n\t     *   An object with the following properties\n\t     *   - url: URL of the request\n\t     *   - body: The body of the request\n\t     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n\t     *   - async: Whether the request is async\n\t     *   - headers: Optional headers\n\t     *   - crossDomain: true if a cross domain request, else false\n\t     *   - createXHR: a function to override if you need to use an alternate\n\t     *   XMLHttpRequest implementation.\n\t     *   - resultSelector: a function to use to alter the output value type of\n\t     *   the Observable. Gets {@link AjaxResponse} as an argument.\n\t     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n\t     * @static true\n\t     * @name ajax\n\t     * @owner Observable\n\t    */\n\t    AjaxObservable.create = (function () {\n\t        var create = function (urlOrRequest) {\n\t            return new AjaxObservable(urlOrRequest);\n\t        };\n\t        create.get = ajaxGet;\n\t        create.post = ajaxPost;\n\t        create.delete = ajaxDelete;\n\t        create.put = ajaxPut;\n\t        create.getJSON = ajaxGetJSON;\n\t        return create;\n\t    })();\n\t    return AjaxObservable;\n\t}(Observable_1.Observable));\n\texports.AjaxObservable = AjaxObservable;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AjaxSubscriber = (function (_super) {\n\t    __extends(AjaxSubscriber, _super);\n\t    function AjaxSubscriber(destination, request) {\n\t        _super.call(this, destination);\n\t        this.request = request;\n\t        this.done = false;\n\t        var headers = request.headers = request.headers || {};\n\t        // force CORS if requested\n\t        if (!request.crossDomain && !headers['X-Requested-With']) {\n\t            headers['X-Requested-With'] = 'XMLHttpRequest';\n\t        }\n\t        // ensure content type is set\n\t        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {\n\t            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n\t        }\n\t        // properly serialize body\n\t        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\t        this.send();\n\t    }\n\t    AjaxSubscriber.prototype.next = function (e) {\n\t        this.done = true;\n\t        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n\t        var response = new AjaxResponse(e, xhr, request);\n\t        destination.next(response);\n\t    };\n\t    AjaxSubscriber.prototype.send = function () {\n\t        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n\t        var createXHR = request.createXHR;\n\t        var xhr = tryCatch_1.tryCatch(createXHR).call(request);\n\t        if (xhr === errorObject_1.errorObject) {\n\t            this.error(errorObject_1.errorObject.e);\n\t        }\n\t        else {\n\t            this.xhr = xhr;\n\t            // open XHR first\n\t            var result = void 0;\n\t            if (user) {\n\t                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n\t            }\n\t            else {\n\t                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);\n\t            }\n\t            if (result === errorObject_1.errorObject) {\n\t                this.error(errorObject_1.errorObject.e);\n\t                return null;\n\t            }\n\t            // timeout and responseType can be set once the XHR is open\n\t            xhr.timeout = request.timeout;\n\t            xhr.responseType = request.responseType;\n\t            // set headers\n\t            this.setHeaders(xhr, headers);\n\t            // now set up the events\n\t            this.setupEvents(xhr, request);\n\t            // finally send the request\n\t            if (body) {\n\t                xhr.send(body);\n\t            }\n\t            else {\n\t                xhr.send();\n\t            }\n\t        }\n\t        return xhr;\n\t    };\n\t    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n\t        if (!body || typeof body === 'string') {\n\t            return body;\n\t        }\n\t        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {\n\t            return body;\n\t        }\n\t        if (contentType) {\n\t            var splitIndex = contentType.indexOf(';');\n\t            if (splitIndex !== -1) {\n\t                contentType = contentType.substring(0, splitIndex);\n\t            }\n\t        }\n\t        switch (contentType) {\n\t            case 'application/x-www-form-urlencoded':\n\t                return Object.keys(body).map(function (key) { return (encodeURI(key) + \"=\" + encodeURI(body[key])); }).join('&');\n\t            case 'application/json':\n\t                return JSON.stringify(body);\n\t            default:\n\t                return body;\n\t        }\n\t    };\n\t    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n\t        for (var key in headers) {\n\t            if (headers.hasOwnProperty(key)) {\n\t                xhr.setRequestHeader(key, headers[key]);\n\t            }\n\t        }\n\t    };\n\t    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n\t        var progressSubscriber = request.progressSubscriber;\n\t        xhr.ontimeout = function xhrTimeout(e) {\n\t            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n\t            if (progressSubscriber) {\n\t                progressSubscriber.error(e);\n\t            }\n\t            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n\t        };\n\t        xhr.ontimeout.request = request;\n\t        xhr.ontimeout.subscriber = this;\n\t        xhr.ontimeout.progressSubscriber = progressSubscriber;\n\t        if (xhr.upload && 'withCredentials' in xhr && root_1.root.XDomainRequest) {\n\t            if (progressSubscriber) {\n\t                xhr.onprogress = function xhrProgress(e) {\n\t                    var progressSubscriber = xhrProgress.progressSubscriber;\n\t                    progressSubscriber.next(e);\n\t                };\n\t                xhr.onprogress.progressSubscriber = progressSubscriber;\n\t            }\n\t            xhr.onerror = function xhrError(e) {\n\t                var _a = xhrError, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n\t                if (progressSubscriber) {\n\t                    progressSubscriber.error(e);\n\t                }\n\t                subscriber.error(new AjaxError('ajax error', this, request));\n\t            };\n\t            xhr.onerror.request = request;\n\t            xhr.onerror.subscriber = this;\n\t            xhr.onerror.progressSubscriber = progressSubscriber;\n\t        }\n\t        xhr.onreadystatechange = function xhrReadyStateChange(e) {\n\t            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n\t            if (this.readyState === 4) {\n\t                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n\t                var status_1 = this.status === 1223 ? 204 : this.status;\n\t                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n\t                // fix status code when it is 0 (0 status is undocumented).\n\t                // Occurs when accessing file resources or on Android 4.1 stock browser\n\t                // while retrieving files from application cache.\n\t                if (status_1 === 0) {\n\t                    status_1 = response ? 200 : 0;\n\t                }\n\t                if (200 <= status_1 && status_1 < 300) {\n\t                    if (progressSubscriber) {\n\t                        progressSubscriber.complete();\n\t                    }\n\t                    subscriber.next(e);\n\t                    subscriber.complete();\n\t                }\n\t                else {\n\t                    if (progressSubscriber) {\n\t                        progressSubscriber.error(e);\n\t                    }\n\t                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n\t                }\n\t            }\n\t        };\n\t        xhr.onreadystatechange.subscriber = this;\n\t        xhr.onreadystatechange.progressSubscriber = progressSubscriber;\n\t        xhr.onreadystatechange.request = request;\n\t    };\n\t    AjaxSubscriber.prototype.unsubscribe = function () {\n\t        var _a = this, done = _a.done, xhr = _a.xhr;\n\t        if (!done && xhr && xhr.readyState !== 4) {\n\t            xhr.abort();\n\t        }\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    return AjaxSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.AjaxSubscriber = AjaxSubscriber;\n\t/**\n\t * A normalized AJAX response.\n\t *\n\t * @see {@link ajax}\n\t *\n\t * @class AjaxResponse\n\t */\n\tvar AjaxResponse = (function () {\n\t    function AjaxResponse(originalEvent, xhr, request) {\n\t        this.originalEvent = originalEvent;\n\t        this.xhr = xhr;\n\t        this.request = request;\n\t        this.status = xhr.status;\n\t        this.responseType = xhr.responseType || request.responseType;\n\t        switch (this.responseType) {\n\t            case 'json':\n\t                if ('response' in xhr) {\n\t                    //IE does not support json as responseType, parse it internally\n\t                    this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || '');\n\t                }\n\t                else {\n\t                    this.response = JSON.parse(xhr.responseText || '');\n\t                }\n\t                break;\n\t            case 'xml':\n\t                this.response = xhr.responseXML;\n\t                break;\n\t            case 'text':\n\t            default:\n\t                this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n\t                break;\n\t        }\n\t    }\n\t    return AjaxResponse;\n\t}());\n\texports.AjaxResponse = AjaxResponse;\n\t/**\n\t * A normalized AJAX error.\n\t *\n\t * @see {@link ajax}\n\t *\n\t * @class AjaxError\n\t */\n\tvar AjaxError = (function (_super) {\n\t    __extends(AjaxError, _super);\n\t    function AjaxError(message, xhr, request) {\n\t        _super.call(this, message);\n\t        this.message = message;\n\t        this.xhr = xhr;\n\t        this.request = request;\n\t        this.status = xhr.status;\n\t    }\n\t    return AjaxError;\n\t}(Error));\n\texports.AjaxError = AjaxError;\n\t/**\n\t * @see {@link ajax}\n\t *\n\t * @class AjaxTimeoutError\n\t */\n\tvar AjaxTimeoutError = (function (_super) {\n\t    __extends(AjaxTimeoutError, _super);\n\t    function AjaxTimeoutError(xhr, request) {\n\t        _super.call(this, 'ajax timeout', xhr, request);\n\t    }\n\t    return AjaxTimeoutError;\n\t}(AjaxError));\n\texports.AjaxTimeoutError = AjaxTimeoutError;\n\n\n/***/ },\n/* 120 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar webSocket_1 = __webpack_require__(121);\n\tObservable_1.Observable.webSocket = webSocket_1.webSocket;\n\n\n/***/ },\n/* 121 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar WebSocketSubject_1 = __webpack_require__(122);\n\texports.webSocket = WebSocketSubject_1.WebSocketSubject.create;\n\n\n/***/ },\n/* 122 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar root_1 = __webpack_require__(8);\n\tvar ReplaySubject_1 = __webpack_require__(123);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar assign_1 = __webpack_require__(127);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar WebSocketSubject = (function (_super) {\n\t    __extends(WebSocketSubject, _super);\n\t    function WebSocketSubject(urlConfigOrSource, destination) {\n\t        if (urlConfigOrSource instanceof Observable_1.Observable) {\n\t            _super.call(this, destination, urlConfigOrSource);\n\t        }\n\t        else {\n\t            _super.call(this);\n\t            this.WebSocketCtor = root_1.root.WebSocket;\n\t            this._output = new Subject_1.Subject();\n\t            if (typeof urlConfigOrSource === 'string') {\n\t                this.url = urlConfigOrSource;\n\t            }\n\t            else {\n\t                // WARNING: config object could override important members here.\n\t                assign_1.assign(this, urlConfigOrSource);\n\t            }\n\t            if (!this.WebSocketCtor) {\n\t                throw new Error('no WebSocket constructor can be found');\n\t            }\n\t            this.destination = new ReplaySubject_1.ReplaySubject();\n\t        }\n\t    }\n\t    WebSocketSubject.prototype.resultSelector = function (e) {\n\t        return JSON.parse(e.data);\n\t    };\n\t    /**\n\t     * @param urlConfigOrSource\n\t     * @return {WebSocketSubject}\n\t     * @static true\n\t     * @name webSocket\n\t     * @owner Observable\n\t     */\n\t    WebSocketSubject.create = function (urlConfigOrSource) {\n\t        return new WebSocketSubject(urlConfigOrSource);\n\t    };\n\t    WebSocketSubject.prototype.lift = function (operator) {\n\t        var sock = new WebSocketSubject(this, this.destination);\n\t        sock.operator = operator;\n\t        return sock;\n\t    };\n\t    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n\t    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n\t        var self = this;\n\t        return new Observable_1.Observable(function (observer) {\n\t            var result = tryCatch_1.tryCatch(subMsg)();\n\t            if (result === errorObject_1.errorObject) {\n\t                observer.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                self.next(result);\n\t            }\n\t            var subscription = self.subscribe(function (x) {\n\t                var result = tryCatch_1.tryCatch(messageFilter)(x);\n\t                if (result === errorObject_1.errorObject) {\n\t                    observer.error(errorObject_1.errorObject.e);\n\t                }\n\t                else if (result) {\n\t                    observer.next(x);\n\t                }\n\t            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n\t            return function () {\n\t                var result = tryCatch_1.tryCatch(unsubMsg)();\n\t                if (result === errorObject_1.errorObject) {\n\t                    observer.error(errorObject_1.errorObject.e);\n\t                }\n\t                else {\n\t                    self.next(result);\n\t                }\n\t                subscription.unsubscribe();\n\t            };\n\t        });\n\t    };\n\t    WebSocketSubject.prototype._connectSocket = function () {\n\t        var _this = this;\n\t        var WebSocketCtor = this.WebSocketCtor;\n\t        var socket = this.protocol ?\n\t            new WebSocketCtor(this.url, this.protocol) :\n\t            new WebSocketCtor(this.url);\n\t        this.socket = socket;\n\t        var subscription = new Subscription_1.Subscription(function () {\n\t            _this.socket = null;\n\t            if (socket && socket.readyState === 1) {\n\t                socket.close();\n\t            }\n\t        });\n\t        var observer = this._output;\n\t        socket.onopen = function (e) {\n\t            var openObserver = _this.openObserver;\n\t            if (openObserver) {\n\t                openObserver.next(e);\n\t            }\n\t            var queue = _this.destination;\n\t            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n\t                var closingObserver = _this.closingObserver;\n\t                if (closingObserver) {\n\t                    closingObserver.next(undefined);\n\t                }\n\t                if (e && e.code) {\n\t                    socket.close(e.code, e.reason);\n\t                }\n\t                else {\n\t                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n\t                        'and an optional reason: { code: number, reason: string }'));\n\t                }\n\t                _this.destination = new ReplaySubject_1.ReplaySubject();\n\t                _this.socket = null;\n\t            }, function () {\n\t                var closingObserver = _this.closingObserver;\n\t                if (closingObserver) {\n\t                    closingObserver.next(undefined);\n\t                }\n\t                socket.close();\n\t                _this.destination = new ReplaySubject_1.ReplaySubject();\n\t                _this.socket = null;\n\t            });\n\t            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n\t                subscription.add(queue.subscribe(_this.destination));\n\t            }\n\t        };\n\t        socket.onerror = function (e) { return observer.error(e); };\n\t        socket.onclose = function (e) {\n\t            var closeObserver = _this.closeObserver;\n\t            if (closeObserver) {\n\t                closeObserver.next(e);\n\t            }\n\t            if (e.wasClean) {\n\t                observer.complete();\n\t            }\n\t            else {\n\t                observer.error(e);\n\t            }\n\t        };\n\t        socket.onmessage = function (e) {\n\t            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n\t            if (result === errorObject_1.errorObject) {\n\t                observer.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                observer.next(result);\n\t            }\n\t        };\n\t    };\n\t    WebSocketSubject.prototype._subscribe = function (subscriber) {\n\t        var _this = this;\n\t        var source = this.source;\n\t        if (source) {\n\t            return source.subscribe(subscriber);\n\t        }\n\t        if (!this.socket) {\n\t            this._connectSocket();\n\t        }\n\t        var subscription = new Subscription_1.Subscription();\n\t        subscription.add(this._output.subscribe(subscriber));\n\t        subscription.add(function () {\n\t            var socket = _this.socket;\n\t            if (_this._output.observers.length === 0 && socket && socket.readyState === 1) {\n\t                socket.close();\n\t                _this.socket = null;\n\t            }\n\t        });\n\t        return subscription;\n\t    };\n\t    WebSocketSubject.prototype.unsubscribe = function () {\n\t        var _a = this, source = _a.source, socket = _a.socket;\n\t        if (socket && socket.readyState === 1) {\n\t            socket.close();\n\t            this.socket = null;\n\t        }\n\t        _super.prototype.unsubscribe.call(this);\n\t        if (!source) {\n\t            this.destination = new ReplaySubject_1.ReplaySubject();\n\t        }\n\t    };\n\t    return WebSocketSubject;\n\t}(Subject_1.AnonymousSubject));\n\texports.WebSocketSubject = WebSocketSubject;\n\n\n/***/ },\n/* 123 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar queue_1 = __webpack_require__(124);\n\tvar observeOn_1 = __webpack_require__(61);\n\t/**\n\t * @class ReplaySubject<T>\n\t */\n\tvar ReplaySubject = (function (_super) {\n\t    __extends(ReplaySubject, _super);\n\t    function ReplaySubject(bufferSize, windowTime, scheduler) {\n\t        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n\t        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t        this._events = [];\n\t        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n\t        this._windowTime = windowTime < 1 ? 1 : windowTime;\n\t    }\n\t    ReplaySubject.prototype.next = function (value) {\n\t        var now = this._getNow();\n\t        this._events.push(new ReplayEvent(now, value));\n\t        this._trimBufferThenGetEvents();\n\t        _super.prototype.next.call(this, value);\n\t    };\n\t    ReplaySubject.prototype._subscribe = function (subscriber) {\n\t        var _events = this._trimBufferThenGetEvents();\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n\t        }\n\t        var len = _events.length;\n\t        for (var i = 0; i < len && !subscriber.closed; i++) {\n\t            subscriber.next(_events[i].value);\n\t        }\n\t        return _super.prototype._subscribe.call(this, subscriber);\n\t    };\n\t    ReplaySubject.prototype._getNow = function () {\n\t        return (this.scheduler || queue_1.queue).now();\n\t    };\n\t    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n\t        var now = this._getNow();\n\t        var _bufferSize = this._bufferSize;\n\t        var _windowTime = this._windowTime;\n\t        var _events = this._events;\n\t        var eventsCount = _events.length;\n\t        var spliceCount = 0;\n\t        // Trim events that fall out of the time window.\n\t        // Start at the front of the list. Break early once\n\t        // we encounter an event that falls within the window.\n\t        while (spliceCount < eventsCount) {\n\t            if ((now - _events[spliceCount].time) < _windowTime) {\n\t                break;\n\t            }\n\t            spliceCount++;\n\t        }\n\t        if (eventsCount > _bufferSize) {\n\t            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n\t        }\n\t        if (spliceCount > 0) {\n\t            _events.splice(0, spliceCount);\n\t        }\n\t        return _events;\n\t    };\n\t    return ReplaySubject;\n\t}(Subject_1.Subject));\n\texports.ReplaySubject = ReplaySubject;\n\tvar ReplayEvent = (function () {\n\t    function ReplayEvent(time, value) {\n\t        this.time = time;\n\t        this.value = value;\n\t    }\n\t    return ReplayEvent;\n\t}());\n\n\n/***/ },\n/* 124 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar QueueAction_1 = __webpack_require__(125);\n\tvar QueueScheduler_1 = __webpack_require__(126);\n\texports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);\n\n\n/***/ },\n/* 125 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar AsyncAction_1 = __webpack_require__(81);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar QueueAction = (function (_super) {\n\t    __extends(QueueAction, _super);\n\t    function QueueAction(scheduler, work) {\n\t        _super.call(this, scheduler, work);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t    }\n\t    QueueAction.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (delay > 0) {\n\t            return _super.prototype.schedule.call(this, state, delay);\n\t        }\n\t        this.delay = delay;\n\t        this.state = state;\n\t        this.scheduler.flush(this);\n\t        return this;\n\t    };\n\t    QueueAction.prototype.execute = function (state, delay) {\n\t        return (delay > 0 || this.closed) ?\n\t            _super.prototype.execute.call(this, state, delay) :\n\t            this._execute(state, delay);\n\t    };\n\t    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        // If delay is greater than 0, enqueue as an async action.\n\t        if (delay !== null && delay > 0) {\n\t            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n\t        }\n\t        // Otherwise flush the scheduler starting with this action.\n\t        return scheduler.flush(this);\n\t    };\n\t    return QueueAction;\n\t}(AsyncAction_1.AsyncAction));\n\texports.QueueAction = QueueAction;\n\n\n/***/ },\n/* 126 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar AsyncScheduler_1 = __webpack_require__(83);\n\tvar QueueScheduler = (function (_super) {\n\t    __extends(QueueScheduler, _super);\n\t    function QueueScheduler() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    return QueueScheduler;\n\t}(AsyncScheduler_1.AsyncScheduler));\n\texports.QueueScheduler = QueueScheduler;\n\n\n/***/ },\n/* 127 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar Object = root_1.root.Object;\n\tif (typeof Object.assign != 'function') {\n\t    (function () {\n\t        Object.assign = function assignPolyfill(target) {\n\t            var sources = [];\n\t            for (var _i = 1; _i < arguments.length; _i++) {\n\t                sources[_i - 1] = arguments[_i];\n\t            }\n\t            if (target === undefined || target === null) {\n\t                throw new TypeError('cannot convert undefined or null to object');\n\t            }\n\t            var output = Object(target);\n\t            var len = sources.length;\n\t            for (var index = 0; index < len; index++) {\n\t                var source = sources[index];\n\t                if (source !== undefined && source !== null) {\n\t                    for (var key in source) {\n\t                        if (source.hasOwnProperty(key)) {\n\t                            output[key] = source[key];\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return output;\n\t        };\n\t    })();\n\t}\n\texports.assign = Object.assign;\n\n\n/***/ },\n/* 128 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar buffer_1 = __webpack_require__(129);\n\tObservable_1.Observable.prototype.buffer = buffer_1.buffer;\n\n\n/***/ },\n/* 129 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Buffers the source Observable values until `closingNotifier` emits.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array, and emits\n\t * that array only when another Observable emits.</span>\n\t *\n\t * <img src=\"./img/buffer.png\" width=\"100%\">\n\t *\n\t * Buffers the incoming Observable values until the given `closingNotifier`\n\t * Observable emits a value, at which point it emits the buffer on the output\n\t * Observable and starts a new buffer internally, awaiting the next time\n\t * `closingNotifier` emits.\n\t *\n\t * @example <caption>On every click, emit array of most recent interval events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var interval = Rx.Observable.interval(1000);\n\t * var buffered = interval.buffer(clicks);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link bufferCount}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferToggle}\n\t * @see {@link bufferWhen}\n\t * @see {@link window}\n\t *\n\t * @param {Observable<any>} closingNotifier An Observable that signals the\n\t * buffer to be emitted on the output Observable.\n\t * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n\t * values.\n\t * @method buffer\n\t * @owner Observable\n\t */\n\tfunction buffer(closingNotifier) {\n\t    return this.lift(new BufferOperator(closingNotifier));\n\t}\n\texports.buffer = buffer;\n\tvar BufferOperator = (function () {\n\t    function BufferOperator(closingNotifier) {\n\t        this.closingNotifier = closingNotifier;\n\t    }\n\t    BufferOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n\t    };\n\t    return BufferOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferSubscriber = (function (_super) {\n\t    __extends(BufferSubscriber, _super);\n\t    function BufferSubscriber(destination, closingNotifier) {\n\t        _super.call(this, destination);\n\t        this.buffer = [];\n\t        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n\t    }\n\t    BufferSubscriber.prototype._next = function (value) {\n\t        this.buffer.push(value);\n\t    };\n\t    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var buffer = this.buffer;\n\t        this.buffer = [];\n\t        this.destination.next(buffer);\n\t    };\n\t    return BufferSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 130 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferCount_1 = __webpack_require__(131);\n\tObservable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;\n\n\n/***/ },\n/* 131 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Buffers the source Observable values until the size hits the maximum\n\t * `bufferSize` given.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array, and emits\n\t * that array only when its size reaches `bufferSize`.</span>\n\t *\n\t * <img src=\"./img/bufferCount.png\" width=\"100%\">\n\t *\n\t * Buffers a number of values from the source Observable by `bufferSize` then\n\t * emits the buffer and clears it, and starts a new buffer each\n\t * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n\t * `null`, then new buffers are started immediately at the start of the source\n\t * and when each buffer closes and is emitted.\n\t *\n\t * @example <caption>Emit the last two click events as an array</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferCount(2);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>On every click, emit the last two click events as an array</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferCount(2, 1);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferToggle}\n\t * @see {@link bufferWhen}\n\t * @see {@link pairwise}\n\t * @see {@link windowCount}\n\t *\n\t * @param {number} bufferSize The maximum size of the buffer emitted.\n\t * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n\t * For example if `startBufferEvery` is `2`, then a new buffer will be started\n\t * on every other value from the source. A new buffer is started at the\n\t * beginning of the source by default.\n\t * @return {Observable<T[]>} An Observable of arrays of buffered values.\n\t * @method bufferCount\n\t * @owner Observable\n\t */\n\tfunction bufferCount(bufferSize, startBufferEvery) {\n\t    if (startBufferEvery === void 0) { startBufferEvery = null; }\n\t    return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n\t}\n\texports.bufferCount = bufferCount;\n\tvar BufferCountOperator = (function () {\n\t    function BufferCountOperator(bufferSize, startBufferEvery) {\n\t        this.bufferSize = bufferSize;\n\t        this.startBufferEvery = startBufferEvery;\n\t    }\n\t    BufferCountOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n\t    };\n\t    return BufferCountOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferCountSubscriber = (function (_super) {\n\t    __extends(BufferCountSubscriber, _super);\n\t    function BufferCountSubscriber(destination, bufferSize, startBufferEvery) {\n\t        _super.call(this, destination);\n\t        this.bufferSize = bufferSize;\n\t        this.startBufferEvery = startBufferEvery;\n\t        this.buffers = [[]];\n\t        this.count = 0;\n\t    }\n\t    BufferCountSubscriber.prototype._next = function (value) {\n\t        var count = (this.count += 1);\n\t        var destination = this.destination;\n\t        var bufferSize = this.bufferSize;\n\t        var startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n\t        var buffers = this.buffers;\n\t        var len = buffers.length;\n\t        var remove = -1;\n\t        if (count % startBufferEvery === 0) {\n\t            buffers.push([]);\n\t        }\n\t        for (var i = 0; i < len; i++) {\n\t            var buffer = buffers[i];\n\t            buffer.push(value);\n\t            if (buffer.length === bufferSize) {\n\t                remove = i;\n\t                destination.next(buffer);\n\t            }\n\t        }\n\t        if (remove !== -1) {\n\t            buffers.splice(remove, 1);\n\t        }\n\t    };\n\t    BufferCountSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        var buffers = this.buffers;\n\t        while (buffers.length > 0) {\n\t            var buffer = buffers.shift();\n\t            if (buffer.length > 0) {\n\t                destination.next(buffer);\n\t            }\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    return BufferCountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 132 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferTime_1 = __webpack_require__(133);\n\tObservable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;\n\n\n/***/ },\n/* 133 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(80);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar isScheduler_1 = __webpack_require__(33);\n\t/**\n\t * Buffers the source Observable values for a specific time period.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array, and emits\n\t * those arrays periodically in time.</span>\n\t *\n\t * <img src=\"./img/bufferTime.png\" width=\"100%\">\n\t *\n\t * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n\t * Unless the optional argument `bufferCreationInterval` is given, it emits and\n\t * resets the buffer every `bufferTimeSpan` milliseconds. If\n\t * `bufferCreationInterval` is given, this operator opens the buffer every\n\t * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n\t * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n\t * `maxBufferSize` is specified, the buffer will be closed either after\n\t * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n\t *\n\t * @example <caption>Every second, emit an array of the recent click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferTime(1000);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferTime(2000, 5000);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t * @see {@link bufferToggle}\n\t * @see {@link bufferWhen}\n\t * @see {@link windowTime}\n\t *\n\t * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n\t * @param {number} [bufferCreationInterval] The interval at which to start new\n\t * buffers.\n\t * @param {number} [maxBufferSize] The maximum buffer size.\n\t * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n\t * intervals that determine buffer boundaries.\n\t * @return {Observable<T[]>} An observable of arrays of buffered values.\n\t * @method bufferTime\n\t * @owner Observable\n\t */\n\tfunction bufferTime(bufferTimeSpan) {\n\t    var length = arguments.length;\n\t    var scheduler = async_1.async;\n\t    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n\t        scheduler = arguments[arguments.length - 1];\n\t        length--;\n\t    }\n\t    var bufferCreationInterval = null;\n\t    if (length >= 2) {\n\t        bufferCreationInterval = arguments[1];\n\t    }\n\t    var maxBufferSize = Number.POSITIVE_INFINITY;\n\t    if (length >= 3) {\n\t        maxBufferSize = arguments[2];\n\t    }\n\t    return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n\t}\n\texports.bufferTime = bufferTime;\n\tvar BufferTimeOperator = (function () {\n\t    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n\t        this.bufferTimeSpan = bufferTimeSpan;\n\t        this.bufferCreationInterval = bufferCreationInterval;\n\t        this.maxBufferSize = maxBufferSize;\n\t        this.scheduler = scheduler;\n\t    }\n\t    BufferTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n\t    };\n\t    return BufferTimeOperator;\n\t}());\n\tvar Context = (function () {\n\t    function Context() {\n\t        this.buffer = [];\n\t    }\n\t    return Context;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferTimeSubscriber = (function (_super) {\n\t    __extends(BufferTimeSubscriber, _super);\n\t    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n\t        _super.call(this, destination);\n\t        this.bufferTimeSpan = bufferTimeSpan;\n\t        this.bufferCreationInterval = bufferCreationInterval;\n\t        this.maxBufferSize = maxBufferSize;\n\t        this.scheduler = scheduler;\n\t        this.contexts = [];\n\t        var context = this.openContext();\n\t        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n\t        if (this.timespanOnly) {\n\t            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n\t            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n\t        }\n\t        else {\n\t            var closeState = { subscriber: this, context: context };\n\t            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };\n\t            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n\t            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n\t        }\n\t    }\n\t    BufferTimeSubscriber.prototype._next = function (value) {\n\t        var contexts = this.contexts;\n\t        var len = contexts.length;\n\t        var filledBufferContext;\n\t        for (var i = 0; i < len; i++) {\n\t            var context = contexts[i];\n\t            var buffer = context.buffer;\n\t            buffer.push(value);\n\t            if (buffer.length == this.maxBufferSize) {\n\t                filledBufferContext = context;\n\t            }\n\t        }\n\t        if (filledBufferContext) {\n\t            this.onBufferFull(filledBufferContext);\n\t        }\n\t    };\n\t    BufferTimeSubscriber.prototype._error = function (err) {\n\t        this.contexts.length = 0;\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    BufferTimeSubscriber.prototype._complete = function () {\n\t        var _a = this, contexts = _a.contexts, destination = _a.destination;\n\t        while (contexts.length > 0) {\n\t            var context = contexts.shift();\n\t            destination.next(context.buffer);\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    BufferTimeSubscriber.prototype._unsubscribe = function () {\n\t        this.contexts = null;\n\t    };\n\t    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n\t        this.closeContext(context);\n\t        var closeAction = context.closeAction;\n\t        closeAction.unsubscribe();\n\t        this.remove(closeAction);\n\t        if (this.timespanOnly) {\n\t            context = this.openContext();\n\t            var bufferTimeSpan = this.bufferTimeSpan;\n\t            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n\t            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n\t        }\n\t    };\n\t    BufferTimeSubscriber.prototype.openContext = function () {\n\t        var context = new Context();\n\t        this.contexts.push(context);\n\t        return context;\n\t    };\n\t    BufferTimeSubscriber.prototype.closeContext = function (context) {\n\t        this.destination.next(context.buffer);\n\t        var contexts = this.contexts;\n\t        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n\t        if (spliceIndex >= 0) {\n\t            contexts.splice(contexts.indexOf(context), 1);\n\t        }\n\t    };\n\t    return BufferTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchBufferTimeSpanOnly(state) {\n\t    var subscriber = state.subscriber;\n\t    var prevContext = state.context;\n\t    if (prevContext) {\n\t        subscriber.closeContext(prevContext);\n\t    }\n\t    if (!subscriber.closed) {\n\t        state.context = subscriber.openContext();\n\t        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n\t    }\n\t}\n\tfunction dispatchBufferCreation(state) {\n\t    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n\t    var context = subscriber.openContext();\n\t    var action = this;\n\t    if (!subscriber.closed) {\n\t        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n\t        action.schedule(state, bufferCreationInterval);\n\t    }\n\t}\n\tfunction dispatchBufferClose(arg) {\n\t    var subscriber = arg.subscriber, context = arg.context;\n\t    subscriber.closeContext(context);\n\t}\n\n\n/***/ },\n/* 134 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferToggle_1 = __webpack_require__(135);\n\tObservable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;\n\n\n/***/ },\n/* 135 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\t/**\n\t * Buffers the source Observable values starting from an emission from\n\t * `openings` and ending when the output of `closingSelector` emits.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array. Starts\n\t * collecting only when `opening` emits, and calls the `closingSelector`\n\t * function to get an Observable that tells when to close the buffer.</span>\n\t *\n\t * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n\t *\n\t * Buffers values from the source by opening the buffer via signals from an\n\t * Observable provided to `openings`, and closing and sending the buffers when\n\t * a Subscribable or Promise returned by the `closingSelector` function emits.\n\t *\n\t * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var openings = Rx.Observable.interval(1000);\n\t * var buffered = clicks.bufferToggle(openings, i =>\n\t *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n\t * );\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferWhen}\n\t * @see {@link windowToggle}\n\t *\n\t * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n\t * buffers.\n\t * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n\t * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n\t * which, when it emits, signals that the associated buffer should be emitted\n\t * and cleared.\n\t * @return {Observable<T[]>} An observable of arrays of buffered values.\n\t * @method bufferToggle\n\t * @owner Observable\n\t */\n\tfunction bufferToggle(openings, closingSelector) {\n\t    return this.lift(new BufferToggleOperator(openings, closingSelector));\n\t}\n\texports.bufferToggle = bufferToggle;\n\tvar BufferToggleOperator = (function () {\n\t    function BufferToggleOperator(openings, closingSelector) {\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    BufferToggleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n\t    };\n\t    return BufferToggleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferToggleSubscriber = (function (_super) {\n\t    __extends(BufferToggleSubscriber, _super);\n\t    function BufferToggleSubscriber(destination, openings, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t        this.contexts = [];\n\t        this.add(subscribeToResult_1.subscribeToResult(this, openings));\n\t    }\n\t    BufferToggleSubscriber.prototype._next = function (value) {\n\t        var contexts = this.contexts;\n\t        var len = contexts.length;\n\t        for (var i = 0; i < len; i++) {\n\t            contexts[i].buffer.push(value);\n\t        }\n\t    };\n\t    BufferToggleSubscriber.prototype._error = function (err) {\n\t        var contexts = this.contexts;\n\t        while (contexts.length > 0) {\n\t            var context = contexts.shift();\n\t            context.subscription.unsubscribe();\n\t            context.buffer = null;\n\t            context.subscription = null;\n\t        }\n\t        this.contexts = null;\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    BufferToggleSubscriber.prototype._complete = function () {\n\t        var contexts = this.contexts;\n\t        while (contexts.length > 0) {\n\t            var context = contexts.shift();\n\t            this.destination.next(context.buffer);\n\t            context.subscription.unsubscribe();\n\t            context.buffer = null;\n\t            context.subscription = null;\n\t        }\n\t        this.contexts = null;\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n\t    };\n\t    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.closeBuffer(innerSub.context);\n\t    };\n\t    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n\t        try {\n\t            var closingSelector = this.closingSelector;\n\t            var closingNotifier = closingSelector.call(this, value);\n\t            if (closingNotifier) {\n\t                this.trySubscribe(closingNotifier);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n\t        var contexts = this.contexts;\n\t        if (contexts && context) {\n\t            var buffer = context.buffer, subscription = context.subscription;\n\t            this.destination.next(buffer);\n\t            contexts.splice(contexts.indexOf(context), 1);\n\t            this.remove(subscription);\n\t            subscription.unsubscribe();\n\t        }\n\t    };\n\t    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n\t        var contexts = this.contexts;\n\t        var buffer = [];\n\t        var subscription = new Subscription_1.Subscription();\n\t        var context = { buffer: buffer, subscription: subscription };\n\t        contexts.push(context);\n\t        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n\t        if (!innerSubscription || innerSubscription.closed) {\n\t            this.closeBuffer(context);\n\t        }\n\t        else {\n\t            innerSubscription.context = context;\n\t            this.add(innerSubscription);\n\t            subscription.add(innerSubscription);\n\t        }\n\t    };\n\t    return BufferToggleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 136 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferWhen_1 = __webpack_require__(137);\n\tObservable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;\n\n\n/***/ },\n/* 137 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Buffers the source Observable values, using a factory function of closing\n\t * Observables to determine when to close, emit, and reset the buffer.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array. When it\n\t * starts collecting values, it calls a function that returns an Observable that\n\t * tells when to close the buffer and restart collecting.</span>\n\t *\n\t * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n\t *\n\t * Opens a buffer immediately, then closes the buffer when the observable\n\t * returned by calling `closingSelector` function emits a value. When it closes\n\t * the buffer, it immediately opens a new buffer and repeats the process.\n\t *\n\t * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferWhen(() =>\n\t *   Rx.Observable.interval(1000 + Math.random() * 4000)\n\t * );\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferToggle}\n\t * @see {@link windowWhen}\n\t *\n\t * @param {function(): Observable} closingSelector A function that takes no\n\t * arguments and returns an Observable that signals buffer closure.\n\t * @return {Observable<T[]>} An observable of arrays of buffered values.\n\t * @method bufferWhen\n\t * @owner Observable\n\t */\n\tfunction bufferWhen(closingSelector) {\n\t    return this.lift(new BufferWhenOperator(closingSelector));\n\t}\n\texports.bufferWhen = bufferWhen;\n\tvar BufferWhenOperator = (function () {\n\t    function BufferWhenOperator(closingSelector) {\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    BufferWhenOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n\t    };\n\t    return BufferWhenOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferWhenSubscriber = (function (_super) {\n\t    __extends(BufferWhenSubscriber, _super);\n\t    function BufferWhenSubscriber(destination, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.closingSelector = closingSelector;\n\t        this.subscribing = false;\n\t        this.openBuffer();\n\t    }\n\t    BufferWhenSubscriber.prototype._next = function (value) {\n\t        this.buffer.push(value);\n\t    };\n\t    BufferWhenSubscriber.prototype._complete = function () {\n\t        var buffer = this.buffer;\n\t        if (buffer) {\n\t            this.destination.next(buffer);\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    BufferWhenSubscriber.prototype._unsubscribe = function () {\n\t        this.buffer = null;\n\t        this.subscribing = false;\n\t    };\n\t    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.openBuffer();\n\t    };\n\t    BufferWhenSubscriber.prototype.notifyComplete = function () {\n\t        if (this.subscribing) {\n\t            this.complete();\n\t        }\n\t        else {\n\t            this.openBuffer();\n\t        }\n\t    };\n\t    BufferWhenSubscriber.prototype.openBuffer = function () {\n\t        var closingSubscription = this.closingSubscription;\n\t        if (closingSubscription) {\n\t            this.remove(closingSubscription);\n\t            closingSubscription.unsubscribe();\n\t        }\n\t        var buffer = this.buffer;\n\t        if (this.buffer) {\n\t            this.destination.next(buffer);\n\t        }\n\t        this.buffer = [];\n\t        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n\t        if (closingNotifier === errorObject_1.errorObject) {\n\t            this.error(errorObject_1.errorObject.e);\n\t        }\n\t        else {\n\t            closingSubscription = new Subscription_1.Subscription();\n\t            this.closingSubscription = closingSubscription;\n\t            this.add(closingSubscription);\n\t            this.subscribing = true;\n\t            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n\t            this.subscribing = false;\n\t        }\n\t    };\n\t    return BufferWhenSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 138 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar cache_1 = __webpack_require__(139);\n\tObservable_1.Observable.prototype.cache = cache_1.cache;\n\n\n/***/ },\n/* 139 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ReplaySubject_1 = __webpack_require__(123);\n\t/**\n\t * @param bufferSize\n\t * @param windowTime\n\t * @param scheduler\n\t * @return {Observable<any>}\n\t * @method cache\n\t * @owner Observable\n\t */\n\tfunction cache(bufferSize, windowTime, scheduler) {\n\t    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n\t    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n\t    var subject;\n\t    var source = this;\n\t    var refs = 0;\n\t    var outerSub;\n\t    var getSubject = function () {\n\t        subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n\t        return subject;\n\t    };\n\t    return new Observable_1.Observable(function (observer) {\n\t        if (!subject) {\n\t            subject = getSubject();\n\t            outerSub = source.subscribe(function (value) { return subject.next(value); }, function (err) {\n\t                var s = subject;\n\t                subject = null;\n\t                s.error(err);\n\t            }, function () { return subject.complete(); });\n\t        }\n\t        refs++;\n\t        if (!subject) {\n\t            subject = getSubject();\n\t        }\n\t        var innerSub = subject.subscribe(observer);\n\t        return function () {\n\t            refs--;\n\t            if (innerSub) {\n\t                innerSub.unsubscribe();\n\t            }\n\t            if (refs === 0) {\n\t                outerSub.unsubscribe();\n\t            }\n\t        };\n\t    });\n\t}\n\texports.cache = cache;\n\n\n/***/ },\n/* 140 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar catch_1 = __webpack_require__(141);\n\tObservable_1.Observable.prototype.catch = catch_1._catch;\n\n\n/***/ },\n/* 141 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n\t * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n\t *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n\t *  is returned by the `selector` will be used to continue the observable chain.\n\t * @return {Observable} an observable that originates from either the source or the observable returned by the\n\t *  catch `selector` function.\n\t * @method catch\n\t * @owner Observable\n\t */\n\tfunction _catch(selector) {\n\t    var operator = new CatchOperator(selector);\n\t    var caught = this.lift(operator);\n\t    return (operator.caught = caught);\n\t}\n\texports._catch = _catch;\n\tvar CatchOperator = (function () {\n\t    function CatchOperator(selector) {\n\t        this.selector = selector;\n\t    }\n\t    CatchOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n\t    };\n\t    return CatchOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar CatchSubscriber = (function (_super) {\n\t    __extends(CatchSubscriber, _super);\n\t    function CatchSubscriber(destination, selector, caught) {\n\t        _super.call(this, destination);\n\t        this.selector = selector;\n\t        this.caught = caught;\n\t    }\n\t    // NOTE: overriding `error` instead of `_error` because we don't want\n\t    // to have this flag this subscriber as `isStopped`.\n\t    CatchSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var result = void 0;\n\t            try {\n\t                result = this.selector(err, this.caught);\n\t            }\n\t            catch (err) {\n\t                this.destination.error(err);\n\t                return;\n\t            }\n\t            this.unsubscribe();\n\t            this.destination.remove(this);\n\t            subscribeToResult_1.subscribeToResult(this, result);\n\t        }\n\t    };\n\t    return CatchSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 142 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar combineAll_1 = __webpack_require__(143);\n\tObservable_1.Observable.prototype.combineAll = combineAll_1.combineAll;\n\n\n/***/ },\n/* 143 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar combineLatest_1 = __webpack_require__(37);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by waiting\n\t * for the outer Observable to complete, then applying {@link combineLatest}.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n\t * {@link combineLatest} when the Observable-of-Observables completes.</span>\n\t *\n\t * <img src=\"./img/combineAll.png\" width=\"100%\">\n\t *\n\t * Takes an Observable of Observables, and collects all Observables from it.\n\t * Once the outer Observable completes, it subscribes to all collected\n\t * Observables and combines their values using the {@link combineLatest}\n\t * strategy, such that:\n\t * - Every time an inner Observable emits, the output Observable emits.\n\t * - When the returned observable emits, it emits all of the latest values by:\n\t *   - If a `project` function is provided, it is called with each recent value\n\t *     from each inner Observable in whatever order they arrived, and the result\n\t *     of the `project` function is what is emitted by the output Observable.\n\t *   - If there is no `project` function, an array of all of the most recent\n\t *     values is emitted by the output Observable.\n\t *\n\t * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map(ev =>\n\t *   Rx.Observable.interval(Math.random()*2000).take(3)\n\t * ).take(2);\n\t * var result = higherOrder.combineAll();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineLatest}\n\t * @see {@link mergeAll}\n\t *\n\t * @param {function} [project] An optional function to map the most recent\n\t * values from each inner Observable into a new result. Takes each of the most\n\t * recent values from each collected inner Observable as arguments, in order.\n\t * @return {Observable} An Observable of projected results or arrays of recent\n\t * values.\n\t * @method combineAll\n\t * @owner Observable\n\t */\n\tfunction combineAll(project) {\n\t    return this.lift(new combineLatest_1.CombineLatestOperator(project));\n\t}\n\texports.combineAll = combineAll;\n\n\n/***/ },\n/* 144 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar combineLatest_1 = __webpack_require__(37);\n\tObservable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;\n\n\n/***/ },\n/* 145 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concat_1 = __webpack_require__(45);\n\tObservable_1.Observable.prototype.concat = concat_1.concat;\n\n\n/***/ },\n/* 146 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concatAll_1 = __webpack_require__(147);\n\tObservable_1.Observable.prototype.concatAll = concatAll_1.concatAll;\n\n\n/***/ },\n/* 147 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar mergeAll_1 = __webpack_require__(46);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by\n\t * concatenating the inner Observables in order.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n\t * inner Observable after the other.</span>\n\t *\n\t * <img src=\"./img/concatAll.png\" width=\"100%\">\n\t *\n\t * Joins every Observable emitted by the source (a higher-order Observable), in\n\t * a serial fashion. It subscribes to each inner Observable only after the\n\t * previous inner Observable has completed, and merges all of their values into\n\t * the returned observable.\n\t *\n\t * __Warning:__ If the source Observable emits Observables quickly and\n\t * endlessly, and the inner Observables it emits generally complete slower than\n\t * the source emits, you can run into memory issues as the incoming Observables\n\t * collect in an unbounded buffer.\n\t *\n\t * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n\t * to `1`.\n\t *\n\t * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n\t * var firstOrder = higherOrder.concatAll();\n\t * firstOrder.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concat}\n\t * @see {@link concatMap}\n\t * @see {@link concatMapTo}\n\t * @see {@link exhaust}\n\t * @see {@link mergeAll}\n\t * @see {@link switch}\n\t * @see {@link zipAll}\n\t *\n\t * @return {Observable} An Observable emitting values from all the inner\n\t * Observables concatenated.\n\t * @method concatAll\n\t * @owner Observable\n\t */\n\tfunction concatAll() {\n\t    return this.lift(new mergeAll_1.MergeAllOperator(1));\n\t}\n\texports.concatAll = concatAll;\n\n\n/***/ },\n/* 148 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concatMap_1 = __webpack_require__(149);\n\tObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n\n\n/***/ },\n/* 149 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar mergeMap_1 = __webpack_require__(150);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable, in a serialized fashion waiting for each one to complete before\n\t * merging the next.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link concatAll}.</span>\n\t *\n\t * <img src=\"./img/concatMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an (so-called \"inner\") Observable. Each new inner Observable is\n\t * concatenated with the previous inner Observable.\n\t *\n\t * __Warning:__ if source values arrive endlessly and faster than their\n\t * corresponding inner Observables can complete, it will result in memory issues\n\t * as inner Observables amass in an unbounded buffer waiting for their turn to\n\t * be subscribed to.\n\t *\n\t * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n\t * to `1`.\n\t *\n\t * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concat}\n\t * @see {@link concatAll}\n\t * @see {@link concatMapTo}\n\t * @see {@link exhaustMap}\n\t * @see {@link mergeMap}\n\t * @see {@link switchMap}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} an observable of values merged from the projected\n\t * Observables as they were subscribed to, one at a time. Optionally, these\n\t * values may have been projected from a passed `projectResult` argument.\n\t * @return {Observable} An Observable that emits the result of applying the\n\t * projection function (and the optional `resultSelector`) to each item emitted\n\t * by the source Observable and taking values from each projected inner\n\t * Observable sequentially.\n\t * @method concatMap\n\t * @owner Observable\n\t */\n\tfunction concatMap(project, resultSelector) {\n\t    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));\n\t}\n\texports.concatMap = concatMap;\n\n\n/***/ },\n/* 150 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link mergeAll}.</span>\n\t *\n\t * <img src=\"./img/mergeMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an Observable, and then merging those resulting Observables and\n\t * emitting the results of this merger.\n\t *\n\t * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n\t * var letters = Rx.Observable.of('a', 'b', 'c');\n\t * var result = letters.mergeMap(x =>\n\t *   Rx.Observable.interval(1000).map(i => x+i)\n\t * );\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMap}\n\t * @see {@link exhaustMap}\n\t * @see {@link merge}\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t * @see {@link switchMap}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @return {Observable} An Observable that emits the result of applying the\n\t * projection function (and the optional `resultSelector`) to each item emitted\n\t * by the source Observable and merging the results of the Observables obtained\n\t * from this transformation.\n\t * @method mergeMap\n\t * @owner Observable\n\t */\n\tfunction mergeMap(project, resultSelector, concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    if (typeof resultSelector === 'number') {\n\t        concurrent = resultSelector;\n\t        resultSelector = null;\n\t    }\n\t    return this.lift(new MergeMapOperator(project, resultSelector, concurrent));\n\t}\n\texports.mergeMap = mergeMap;\n\tvar MergeMapOperator = (function () {\n\t    function MergeMapOperator(project, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeMapOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n\t    };\n\t    return MergeMapOperator;\n\t}());\n\texports.MergeMapOperator = MergeMapOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeMapSubscriber = (function (_super) {\n\t    __extends(MergeMapSubscriber, _super);\n\t    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t        this.index = 0;\n\t    }\n\t    MergeMapSubscriber.prototype._next = function (value) {\n\t        if (this.active < this.concurrent) {\n\t            this._tryNext(value);\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype._tryNext = function (value) {\n\t        var result;\n\t        var index = this.index++;\n\t        try {\n\t            result = this.project(value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.active++;\n\t        this._innerSub(result, value, index);\n\t    };\n\t    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n\t        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n\t    };\n\t    MergeMapSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (this.resultSelector) {\n\t            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            this.destination.next(innerValue);\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeMapSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeMapSubscriber = MergeMapSubscriber;\n\n\n/***/ },\n/* 151 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concatMapTo_1 = __webpack_require__(152);\n\tObservable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;\n\n\n/***/ },\n/* 152 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar mergeMapTo_1 = __webpack_require__(153);\n\t/**\n\t * Projects each source value to the same Observable which is merged multiple\n\t * times in a serialized fashion on the output Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n\t * always to the same inner Observable.</span>\n\t *\n\t * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n\t *\n\t * Maps each source value to the given Observable `innerObservable` regardless\n\t * of the source value, and then flattens those resulting Observables into one\n\t * single Observable, which is the output Observable. Each new `innerObservable`\n\t * instance emitted on the output Observable is concatenated with the previous\n\t * `innerObservable` instance.\n\t *\n\t * __Warning:__ if source values arrive endlessly and faster than their\n\t * corresponding inner Observables can complete, it will result in memory issues\n\t * as inner Observables amass in an unbounded buffer waiting for their turn to\n\t * be subscribed to.\n\t *\n\t * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n\t * set to `1`.\n\t *\n\t * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concat}\n\t * @see {@link concatAll}\n\t * @see {@link concatMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link switchMapTo}\n\t *\n\t * @param {Observable} innerObservable An Observable to replace each value from\n\t * the source Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An observable of values merged together by joining the\n\t * passed observable with itself, one after the other, for each value emitted\n\t * from the source.\n\t * @method concatMapTo\n\t * @owner Observable\n\t */\n\tfunction concatMapTo(innerObservable, resultSelector) {\n\t    return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable, resultSelector, 1));\n\t}\n\texports.concatMapTo = concatMapTo;\n\n\n/***/ },\n/* 153 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Projects each source value to the same Observable which is merged multiple\n\t * times in the output Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n\t * to the same inner Observable.</span>\n\t *\n\t * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n\t *\n\t * Maps each source value to the given Observable `innerObservable` regardless\n\t * of the source value, and then merges those resulting Observables into one\n\t * single Observable, which is the output Observable.\n\t *\n\t * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMapTo}\n\t * @see {@link merge}\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeScan}\n\t * @see {@link switchMapTo}\n\t *\n\t * @param {Observable} innerObservable An Observable to replace each value from\n\t * the source Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @return {Observable} An Observable that emits items from the given\n\t * `innerObservable` (and optionally transformed through `resultSelector`) every\n\t * time a value is emitted on the source Observable.\n\t * @method mergeMapTo\n\t * @owner Observable\n\t */\n\tfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    if (typeof resultSelector === 'number') {\n\t        concurrent = resultSelector;\n\t        resultSelector = null;\n\t    }\n\t    return this.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));\n\t}\n\texports.mergeMapTo = mergeMapTo;\n\t// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n\t//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\n\tvar MergeMapToOperator = (function () {\n\t    function MergeMapToOperator(ish, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        this.ish = ish;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeMapToOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n\t    };\n\t    return MergeMapToOperator;\n\t}());\n\texports.MergeMapToOperator = MergeMapToOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeMapToSubscriber = (function (_super) {\n\t    __extends(MergeMapToSubscriber, _super);\n\t    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        _super.call(this, destination);\n\t        this.ish = ish;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t        this.index = 0;\n\t    }\n\t    MergeMapToSubscriber.prototype._next = function (value) {\n\t        if (this.active < this.concurrent) {\n\t            var resultSelector = this.resultSelector;\n\t            var index = this.index++;\n\t            var ish = this.ish;\n\t            var destination = this.destination;\n\t            this.active++;\n\t            this._innerSub(ish, destination, resultSelector, value, index);\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n\t        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n\t    };\n\t    MergeMapToSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        if (resultSelector) {\n\t            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            destination.next(innerValue);\n\t        }\n\t    };\n\t    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        var result;\n\t        try {\n\t            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t            return;\n\t        }\n\t        destination.next(result);\n\t    };\n\t    MergeMapToSubscriber.prototype.notifyError = function (err) {\n\t        this.destination.error(err);\n\t    };\n\t    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeMapToSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeMapToSubscriber = MergeMapToSubscriber;\n\n\n/***/ },\n/* 154 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar count_1 = __webpack_require__(155);\n\tObservable_1.Observable.prototype.count = count_1.count;\n\n\n/***/ },\n/* 155 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Counts the number of emissions on the source and emits that number when the\n\t * source completes.\n\t *\n\t * <span class=\"informal\">Tells how many values were emitted, when the source\n\t * completes.</span>\n\t *\n\t * <img src=\"./img/count.png\" width=\"100%\">\n\t *\n\t * `count` transforms an Observable that emits values into an Observable that\n\t * emits a single value that represents the number of values emitted by the\n\t * source Observable. If the source Observable terminates with an error, `count`\n\t * will pass this error notification along without emitting an value first. If\n\t * the source Observable does not terminate at all, `count` will neither emit\n\t * a value nor terminate. This operator takes an optional `predicate` function\n\t * as argument, in which case the output emission will represent the number of\n\t * source values that matched `true` with the `predicate`.\n\t *\n\t * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n\t * var seconds = Rx.Observable.interval(1000);\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var secondsBeforeClick = seconds.takeUntil(clicks);\n\t * var result = secondsBeforeClick.count();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n\t * var numbers = Rx.Observable.range(1, 7);\n\t * var result = numbers.count(i => i % 2 === 1);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link max}\n\t * @see {@link min}\n\t * @see {@link reduce}\n\t *\n\t * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n\t * boolean function to select what values are to be counted. It is provided with\n\t * arguments of:\n\t * - `value`: the value from the source Observable.\n\t * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n\t * - `source`: the source Observable instance itself.\n\t * @return {Observable} An Observable of one number that represents the count as\n\t * described above.\n\t * @method count\n\t * @owner Observable\n\t */\n\tfunction count(predicate) {\n\t    return this.lift(new CountOperator(predicate, this));\n\t}\n\texports.count = count;\n\tvar CountOperator = (function () {\n\t    function CountOperator(predicate, source) {\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t    }\n\t    CountOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n\t    };\n\t    return CountOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar CountSubscriber = (function (_super) {\n\t    __extends(CountSubscriber, _super);\n\t    function CountSubscriber(destination, predicate, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.count = 0;\n\t        this.index = 0;\n\t    }\n\t    CountSubscriber.prototype._next = function (value) {\n\t        if (this.predicate) {\n\t            this._tryPredicate(value);\n\t        }\n\t        else {\n\t            this.count++;\n\t        }\n\t    };\n\t    CountSubscriber.prototype._tryPredicate = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, this.index++, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            this.count++;\n\t        }\n\t    };\n\t    CountSubscriber.prototype._complete = function () {\n\t        this.destination.next(this.count);\n\t        this.destination.complete();\n\t    };\n\t    return CountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 156 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar dematerialize_1 = __webpack_require__(157);\n\tObservable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;\n\n\n/***/ },\n/* 157 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Converts an Observable of {@link Notification} objects into the emissions\n\t * that they represent.\n\t *\n\t * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n\t * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n\t *\n\t * <img src=\"./img/dematerialize.png\" width=\"100%\">\n\t *\n\t * `dematerialize` is assumed to operate an Observable that only emits\n\t * {@link Notification} objects as `next` emissions, and does not emit any\n\t * `error`. Such Observable is the output of a `materialize` operation. Those\n\t * notifications are then unwrapped using the metadata they contain, and emitted\n\t * as `next`, `error`, and `complete` on the output Observable.\n\t *\n\t * Use this operator in conjunction with {@link materialize}.\n\t *\n\t * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n\t * var notifA = new Rx.Notification('N', 'A');\n\t * var notifB = new Rx.Notification('N', 'B');\n\t * var notifE = new Rx.Notification('E', void 0,\n\t *   new TypeError('x.toUpperCase is not a function')\n\t * );\n\t * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n\t * var upperCase = materialized.dematerialize();\n\t * upperCase.subscribe(x => console.log(x), e => console.error(e));\n\t *\n\t * @see {@link Notification}\n\t * @see {@link materialize}\n\t *\n\t * @return {Observable} An Observable that emits items and notifications\n\t * embedded in Notification objects emitted by the source Observable.\n\t * @method dematerialize\n\t * @owner Observable\n\t */\n\tfunction dematerialize() {\n\t    return this.lift(new DeMaterializeOperator());\n\t}\n\texports.dematerialize = dematerialize;\n\tvar DeMaterializeOperator = (function () {\n\t    function DeMaterializeOperator() {\n\t    }\n\t    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DeMaterializeSubscriber(subscriber));\n\t    };\n\t    return DeMaterializeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DeMaterializeSubscriber = (function (_super) {\n\t    __extends(DeMaterializeSubscriber, _super);\n\t    function DeMaterializeSubscriber(destination) {\n\t        _super.call(this, destination);\n\t    }\n\t    DeMaterializeSubscriber.prototype._next = function (value) {\n\t        value.observe(this.destination);\n\t    };\n\t    return DeMaterializeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 158 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar debounce_1 = __webpack_require__(159);\n\tObservable_1.Observable.prototype.debounce = debounce_1.debounce;\n\n\n/***/ },\n/* 159 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Emits a value from the source Observable only after a particular time span\n\t * determined by another Observable has passed without another source emission.\n\t *\n\t * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n\t * emission silence is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/debounce.png\" width=\"100%\">\n\t *\n\t * `debounce` delays values emitted by the source Observable, but drops previous\n\t * pending delayed emissions if a new value arrives on the source Observable.\n\t * This operator keeps track of the most recent value from the source\n\t * Observable, and spawns a duration Observable by calling the\n\t * `durationSelector` function. The value is emitted only when the duration\n\t * Observable emits a value or completes, and if no other value was emitted on\n\t * the source Observable since the duration Observable was spawned. If a new\n\t * value appears before the duration Observable emits, the previous value will\n\t * be dropped and will not be emitted on the output Observable.\n\t *\n\t * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n\t * delay-like operator since output emissions do not necessarily occur at the\n\t * same time as they did on the source Observable.\n\t *\n\t * @example <caption>Emit the most recent click after a burst of clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounceTime}\n\t * @see {@link delayWhen}\n\t * @see {@link throttle}\n\t *\n\t * @param {function(value: T): Observable|Promise} durationSelector A function\n\t * that receives a value from the source Observable, for computing the timeout\n\t * duration for each source value, returned as an Observable or a Promise.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by the specified duration Observable returned by\n\t * `durationSelector`, and may drop some values if they occur too frequently.\n\t * @method debounce\n\t * @owner Observable\n\t */\n\tfunction debounce(durationSelector) {\n\t    return this.lift(new DebounceOperator(durationSelector));\n\t}\n\texports.debounce = debounce;\n\tvar DebounceOperator = (function () {\n\t    function DebounceOperator(durationSelector) {\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    DebounceOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n\t    };\n\t    return DebounceOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DebounceSubscriber = (function (_super) {\n\t    __extends(DebounceSubscriber, _super);\n\t    function DebounceSubscriber(destination, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.durationSelector = durationSelector;\n\t        this.hasValue = false;\n\t        this.durationSubscription = null;\n\t    }\n\t    DebounceSubscriber.prototype._next = function (value) {\n\t        try {\n\t            var result = this.durationSelector.call(this, value);\n\t            if (result) {\n\t                this._tryNext(value, result);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    DebounceSubscriber.prototype._complete = function () {\n\t        this.emitValue();\n\t        this.destination.complete();\n\t    };\n\t    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n\t        var subscription = this.durationSubscription;\n\t        this.value = value;\n\t        this.hasValue = true;\n\t        if (subscription) {\n\t            subscription.unsubscribe();\n\t            this.remove(subscription);\n\t        }\n\t        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n\t        if (!subscription.closed) {\n\t            this.add(this.durationSubscription = subscription);\n\t        }\n\t    };\n\t    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.emitValue();\n\t    };\n\t    DebounceSubscriber.prototype.notifyComplete = function () {\n\t        this.emitValue();\n\t    };\n\t    DebounceSubscriber.prototype.emitValue = function () {\n\t        if (this.hasValue) {\n\t            var value = this.value;\n\t            var subscription = this.durationSubscription;\n\t            if (subscription) {\n\t                this.durationSubscription = null;\n\t                subscription.unsubscribe();\n\t                this.remove(subscription);\n\t            }\n\t            this.value = null;\n\t            this.hasValue = false;\n\t            _super.prototype._next.call(this, value);\n\t        }\n\t    };\n\t    return DebounceSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 160 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar debounceTime_1 = __webpack_require__(161);\n\tObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n\n\n/***/ },\n/* 161 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(80);\n\t/**\n\t * Emits a value from the source Observable only after a particular time span\n\t * has passed without another source emission.\n\t *\n\t * <span class=\"informal\">It's like {@link delay}, but passes only the most\n\t * recent value from each burst of emissions.</span>\n\t *\n\t * <img src=\"./img/debounceTime.png\" width=\"100%\">\n\t *\n\t * `debounceTime` delays values emitted by the source Observable, but drops\n\t * previous pending delayed emissions if a new value arrives on the source\n\t * Observable. This operator keeps track of the most recent value from the\n\t * source Observable, and emits that only when `dueTime` enough time has passed\n\t * without any other value appearing on the source Observable. If a new value\n\t * appears before `dueTime` silence occurs, the previous value will be dropped\n\t * and will not be emitted on the output Observable.\n\t *\n\t * This is a rate-limiting operator, because it is impossible for more than one\n\t * value to be emitted in any time window of duration `dueTime`, but it is also\n\t * a delay-like operator since output emissions do not occur at the same time as\n\t * they did on the source Observable. Optionally takes a {@link Scheduler} for\n\t * managing timers.\n\t *\n\t * @example <caption>Emit the most recent click after a burst of clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.debounceTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounce}\n\t * @see {@link delay}\n\t * @see {@link sampleTime}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {number} dueTime The timeout duration in milliseconds (or the time\n\t * unit determined internally by the optional `scheduler`) for the window of\n\t * time required to wait for emission silence before emitting the most recent\n\t * source value.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the timeout for each value.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by the specified `dueTime`, and may drop some values if they occur\n\t * too frequently.\n\t * @method debounceTime\n\t * @owner Observable\n\t */\n\tfunction debounceTime(dueTime, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n\t}\n\texports.debounceTime = debounceTime;\n\tvar DebounceTimeOperator = (function () {\n\t    function DebounceTimeOperator(dueTime, scheduler) {\n\t        this.dueTime = dueTime;\n\t        this.scheduler = scheduler;\n\t    }\n\t    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n\t    };\n\t    return DebounceTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DebounceTimeSubscriber = (function (_super) {\n\t    __extends(DebounceTimeSubscriber, _super);\n\t    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n\t        _super.call(this, destination);\n\t        this.dueTime = dueTime;\n\t        this.scheduler = scheduler;\n\t        this.debouncedSubscription = null;\n\t        this.lastValue = null;\n\t        this.hasValue = false;\n\t    }\n\t    DebounceTimeSubscriber.prototype._next = function (value) {\n\t        this.clearDebounce();\n\t        this.lastValue = value;\n\t        this.hasValue = true;\n\t        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n\t    };\n\t    DebounceTimeSubscriber.prototype._complete = function () {\n\t        this.debouncedNext();\n\t        this.destination.complete();\n\t    };\n\t    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n\t        this.clearDebounce();\n\t        if (this.hasValue) {\n\t            this.destination.next(this.lastValue);\n\t            this.lastValue = null;\n\t            this.hasValue = false;\n\t        }\n\t    };\n\t    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n\t        var debouncedSubscription = this.debouncedSubscription;\n\t        if (debouncedSubscription !== null) {\n\t            this.remove(debouncedSubscription);\n\t            debouncedSubscription.unsubscribe();\n\t            this.debouncedSubscription = null;\n\t        }\n\t    };\n\t    return DebounceTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNext(subscriber) {\n\t    subscriber.debouncedNext();\n\t}\n\n\n/***/ },\n/* 162 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar defaultIfEmpty_1 = __webpack_require__(163);\n\tObservable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\n\n\n/***/ },\n/* 163 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits a given value if the source Observable completes without emitting any\n\t * `next` value, otherwise mirrors the source Observable.\n\t *\n\t * <span class=\"informal\">If the source Observable turns out to be empty, then\n\t * this operator will emit a default value.</span>\n\t *\n\t * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n\t *\n\t * `defaultIfEmpty` emits the values emitted by the source Observable or a\n\t * specified default value if the source Observable is empty (completes without\n\t * having emitted any `next` value).\n\t *\n\t * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n\t * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link empty}\n\t * @see {@link last}\n\t *\n\t * @param {any} [defaultValue=null] The default value used if the source\n\t * Observable is empty.\n\t * @return {Observable} An Observable that emits either the specified\n\t * `defaultValue` if the source Observable emits no items, or the values emitted\n\t * by the source Observable.\n\t * @method defaultIfEmpty\n\t * @owner Observable\n\t */\n\tfunction defaultIfEmpty(defaultValue) {\n\t    if (defaultValue === void 0) { defaultValue = null; }\n\t    return this.lift(new DefaultIfEmptyOperator(defaultValue));\n\t}\n\texports.defaultIfEmpty = defaultIfEmpty;\n\tvar DefaultIfEmptyOperator = (function () {\n\t    function DefaultIfEmptyOperator(defaultValue) {\n\t        this.defaultValue = defaultValue;\n\t    }\n\t    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n\t    };\n\t    return DefaultIfEmptyOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DefaultIfEmptySubscriber = (function (_super) {\n\t    __extends(DefaultIfEmptySubscriber, _super);\n\t    function DefaultIfEmptySubscriber(destination, defaultValue) {\n\t        _super.call(this, destination);\n\t        this.defaultValue = defaultValue;\n\t        this.isEmpty = true;\n\t    }\n\t    DefaultIfEmptySubscriber.prototype._next = function (value) {\n\t        this.isEmpty = false;\n\t        this.destination.next(value);\n\t    };\n\t    DefaultIfEmptySubscriber.prototype._complete = function () {\n\t        if (this.isEmpty) {\n\t            this.destination.next(this.defaultValue);\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    return DefaultIfEmptySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 164 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar delay_1 = __webpack_require__(165);\n\tObservable_1.Observable.prototype.delay = delay_1.delay;\n\n\n/***/ },\n/* 165 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(80);\n\tvar isDate_1 = __webpack_require__(113);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Notification_1 = __webpack_require__(62);\n\t/**\n\t * Delays the emission of items from the source Observable by a given timeout or\n\t * until a given Date.\n\t *\n\t * <span class=\"informal\">Time shifts each item by some specified amount of\n\t * milliseconds.</span>\n\t *\n\t * <img src=\"./img/delay.png\" width=\"100%\">\n\t *\n\t * If the delay argument is a Number, this operator time shifts the source\n\t * Observable by that amount of time expressed in milliseconds. The relative\n\t * time intervals between the values are preserved.\n\t *\n\t * If the delay argument is a Date, this operator time shifts the start of the\n\t * Observable execution until the given date occurs.\n\t *\n\t * @example <caption>Delay each click by one second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n\t * delayedClicks.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Delay all clicks until a future date happens</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var date = new Date('March 15, 2050 12:00:00'); // in the future\n\t * var delayedClicks = clicks.delay(date); // click emitted only after that date\n\t * delayedClicks.subscribe(x => console.log(x));\n\t *\n\t * @see {@link debounceTime}\n\t * @see {@link delayWhen}\n\t *\n\t * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n\t * a `Date` until which the emission of the source items is delayed.\n\t * @param {Scheduler} [scheduler=async] The Scheduler to use for\n\t * managing the timers that handle the time-shift for each item.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by the specified timeout or Date.\n\t * @method delay\n\t * @owner Observable\n\t */\n\tfunction delay(delay, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    var absoluteDelay = isDate_1.isDate(delay);\n\t    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n\t    return this.lift(new DelayOperator(delayFor, scheduler));\n\t}\n\texports.delay = delay;\n\tvar DelayOperator = (function () {\n\t    function DelayOperator(delay, scheduler) {\n\t        this.delay = delay;\n\t        this.scheduler = scheduler;\n\t    }\n\t    DelayOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n\t    };\n\t    return DelayOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DelaySubscriber = (function (_super) {\n\t    __extends(DelaySubscriber, _super);\n\t    function DelaySubscriber(destination, delay, scheduler) {\n\t        _super.call(this, destination);\n\t        this.delay = delay;\n\t        this.scheduler = scheduler;\n\t        this.queue = [];\n\t        this.active = false;\n\t        this.errored = false;\n\t    }\n\t    DelaySubscriber.dispatch = function (state) {\n\t        var source = state.source;\n\t        var queue = source.queue;\n\t        var scheduler = state.scheduler;\n\t        var destination = state.destination;\n\t        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n\t            queue.shift().notification.observe(destination);\n\t        }\n\t        if (queue.length > 0) {\n\t            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n\t            this.schedule(state, delay_1);\n\t        }\n\t        else {\n\t            source.active = false;\n\t        }\n\t    };\n\t    DelaySubscriber.prototype._schedule = function (scheduler) {\n\t        this.active = true;\n\t        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n\t            source: this, destination: this.destination, scheduler: scheduler\n\t        }));\n\t    };\n\t    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n\t        if (this.errored === true) {\n\t            return;\n\t        }\n\t        var scheduler = this.scheduler;\n\t        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n\t        this.queue.push(message);\n\t        if (this.active === false) {\n\t            this._schedule(scheduler);\n\t        }\n\t    };\n\t    DelaySubscriber.prototype._next = function (value) {\n\t        this.scheduleNotification(Notification_1.Notification.createNext(value));\n\t    };\n\t    DelaySubscriber.prototype._error = function (err) {\n\t        this.errored = true;\n\t        this.queue = [];\n\t        this.destination.error(err);\n\t    };\n\t    DelaySubscriber.prototype._complete = function () {\n\t        this.scheduleNotification(Notification_1.Notification.createComplete());\n\t    };\n\t    return DelaySubscriber;\n\t}(Subscriber_1.Subscriber));\n\tvar DelayMessage = (function () {\n\t    function DelayMessage(time, notification) {\n\t        this.time = time;\n\t        this.notification = notification;\n\t    }\n\t    return DelayMessage;\n\t}());\n\n\n/***/ },\n/* 166 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar delayWhen_1 = __webpack_require__(167);\n\tObservable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;\n\n\n/***/ },\n/* 167 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Delays the emission of items from the source Observable by a given time span\n\t * determined by the emissions of another Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link delay}, but the time span of the\n\t * delay duration is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/delayWhen.png\" width=\"100%\">\n\t *\n\t * `delayWhen` time shifts each emitted value from the source Observable by a\n\t * time span determined by another Observable. When the source emits a value,\n\t * the `delayDurationSelector` function is called with the source value as\n\t * argument, and should return an Observable, called the \"duration\" Observable.\n\t * The source value is emitted on the output Observable only when the duration\n\t * Observable emits a value or completes.\n\t *\n\t * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n\t * is an Observable. When `subscriptionDelay` emits its first value or\n\t * completes, the source Observable is subscribed to and starts behaving like\n\t * described in the previous paragraph. If `subscriptionDelay` is not provided,\n\t * `delayWhen` will subscribe to the source Observable as soon as the output\n\t * Observable is subscribed.\n\t *\n\t * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var delayedClicks = clicks.delayWhen(event =>\n\t *   Rx.Observable.interval(Math.random() * 5000)\n\t * );\n\t * delayedClicks.subscribe(x => console.log(x));\n\t *\n\t * @see {@link debounce}\n\t * @see {@link delay}\n\t *\n\t * @param {function(value: T): Observable} delayDurationSelector A function that\n\t * returns an Observable for each value emitted by the source Observable, which\n\t * is then used to delay the emission of that item on the output Observable\n\t * until the Observable returned from this function emits a value.\n\t * @param {Observable} subscriptionDelay An Observable that triggers the\n\t * subscription to the source Observable once it emits any value.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by an amount of time specified by the Observable returned by\n\t * `delayDurationSelector`.\n\t * @method delayWhen\n\t * @owner Observable\n\t */\n\tfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n\t    if (subscriptionDelay) {\n\t        return new SubscriptionDelayObservable(this, subscriptionDelay)\n\t            .lift(new DelayWhenOperator(delayDurationSelector));\n\t    }\n\t    return this.lift(new DelayWhenOperator(delayDurationSelector));\n\t}\n\texports.delayWhen = delayWhen;\n\tvar DelayWhenOperator = (function () {\n\t    function DelayWhenOperator(delayDurationSelector) {\n\t        this.delayDurationSelector = delayDurationSelector;\n\t    }\n\t    DelayWhenOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n\t    };\n\t    return DelayWhenOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DelayWhenSubscriber = (function (_super) {\n\t    __extends(DelayWhenSubscriber, _super);\n\t    function DelayWhenSubscriber(destination, delayDurationSelector) {\n\t        _super.call(this, destination);\n\t        this.delayDurationSelector = delayDurationSelector;\n\t        this.completed = false;\n\t        this.delayNotifierSubscriptions = [];\n\t        this.values = [];\n\t    }\n\t    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.destination.next(outerValue);\n\t        this.removeSubscription(innerSub);\n\t        this.tryComplete();\n\t    };\n\t    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var value = this.removeSubscription(innerSub);\n\t        if (value) {\n\t            this.destination.next(value);\n\t        }\n\t        this.tryComplete();\n\t    };\n\t    DelayWhenSubscriber.prototype._next = function (value) {\n\t        try {\n\t            var delayNotifier = this.delayDurationSelector(value);\n\t            if (delayNotifier) {\n\t                this.tryDelay(delayNotifier, value);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    DelayWhenSubscriber.prototype._complete = function () {\n\t        this.completed = true;\n\t        this.tryComplete();\n\t    };\n\t    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n\t        subscription.unsubscribe();\n\t        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n\t        var value = null;\n\t        if (subscriptionIdx !== -1) {\n\t            value = this.values[subscriptionIdx];\n\t            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n\t            this.values.splice(subscriptionIdx, 1);\n\t        }\n\t        return value;\n\t    };\n\t    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n\t        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n\t        this.add(notifierSubscription);\n\t        this.delayNotifierSubscriptions.push(notifierSubscription);\n\t        this.values.push(value);\n\t    };\n\t    DelayWhenSubscriber.prototype.tryComplete = function () {\n\t        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return DelayWhenSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubscriptionDelayObservable = (function (_super) {\n\t    __extends(SubscriptionDelayObservable, _super);\n\t    function SubscriptionDelayObservable(source, subscriptionDelay) {\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.subscriptionDelay = subscriptionDelay;\n\t    }\n\t    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n\t        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n\t    };\n\t    return SubscriptionDelayObservable;\n\t}(Observable_1.Observable));\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubscriptionDelaySubscriber = (function (_super) {\n\t    __extends(SubscriptionDelaySubscriber, _super);\n\t    function SubscriptionDelaySubscriber(parent, source) {\n\t        _super.call(this);\n\t        this.parent = parent;\n\t        this.source = source;\n\t        this.sourceSubscribed = false;\n\t    }\n\t    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n\t        this.subscribeToSource();\n\t    };\n\t    SubscriptionDelaySubscriber.prototype._error = function (err) {\n\t        this.unsubscribe();\n\t        this.parent.error(err);\n\t    };\n\t    SubscriptionDelaySubscriber.prototype._complete = function () {\n\t        this.subscribeToSource();\n\t    };\n\t    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n\t        if (!this.sourceSubscribed) {\n\t            this.sourceSubscribed = true;\n\t            this.unsubscribe();\n\t            this.source.subscribe(this.parent);\n\t        }\n\t    };\n\t    return SubscriptionDelaySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 168 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinct_1 = __webpack_require__(169);\n\tObservable_1.Observable.prototype.distinct = distinct_1.distinct;\n\n\n/***/ },\n/* 169 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n\t * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n\t * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n\t * @method distinct\n\t * @owner Observable\n\t */\n\tfunction distinct(compare, flushes) {\n\t    return this.lift(new DistinctOperator(compare, flushes));\n\t}\n\texports.distinct = distinct;\n\tvar DistinctOperator = (function () {\n\t    function DistinctOperator(compare, flushes) {\n\t        this.compare = compare;\n\t        this.flushes = flushes;\n\t    }\n\t    DistinctOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n\t    };\n\t    return DistinctOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DistinctSubscriber = (function (_super) {\n\t    __extends(DistinctSubscriber, _super);\n\t    function DistinctSubscriber(destination, compare, flushes) {\n\t        _super.call(this, destination);\n\t        this.values = [];\n\t        if (typeof compare === 'function') {\n\t            this.compare = compare;\n\t        }\n\t        if (flushes) {\n\t            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n\t        }\n\t    }\n\t    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.values.length = 0;\n\t    };\n\t    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    DistinctSubscriber.prototype._next = function (value) {\n\t        var found = false;\n\t        var values = this.values;\n\t        var len = values.length;\n\t        try {\n\t            for (var i = 0; i < len; i++) {\n\t                if (this.compare(values[i], value)) {\n\t                    found = true;\n\t                    return;\n\t                }\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.values.push(value);\n\t        this.destination.next(value);\n\t    };\n\t    DistinctSubscriber.prototype.compare = function (x, y) {\n\t        return x === y;\n\t    };\n\t    return DistinctSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.DistinctSubscriber = DistinctSubscriber;\n\n\n/***/ },\n/* 170 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinctKey_1 = __webpack_require__(171);\n\tObservable_1.Observable.prototype.distinctKey = distinctKey_1.distinctKey;\n\n\n/***/ },\n/* 171 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar distinct_1 = __webpack_require__(169);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n\t * using a property accessed by using the key provided to check if the two items are distinct.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n\t * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n\t * @param {string} key string key for object property lookup on each item.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n\t * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n\t * @method distinctKey\n\t * @owner Observable\n\t */\n\tfunction distinctKey(key, compare, flushes) {\n\t    return distinct_1.distinct.call(this, function (x, y) {\n\t        if (compare) {\n\t            return compare(x[key], y[key]);\n\t        }\n\t        return x[key] === y[key];\n\t    }, flushes);\n\t}\n\texports.distinctKey = distinctKey;\n\n\n/***/ },\n/* 172 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinctUntilChanged_1 = __webpack_require__(173);\n\tObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n\n\n/***/ },\n/* 173 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n\t * @method distinctUntilChanged\n\t * @owner Observable\n\t */\n\tfunction distinctUntilChanged(compare, keySelector) {\n\t    return this.lift(new DistinctUntilChangedOperator(compare, keySelector));\n\t}\n\texports.distinctUntilChanged = distinctUntilChanged;\n\tvar DistinctUntilChangedOperator = (function () {\n\t    function DistinctUntilChangedOperator(compare, keySelector) {\n\t        this.compare = compare;\n\t        this.keySelector = keySelector;\n\t    }\n\t    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n\t    };\n\t    return DistinctUntilChangedOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DistinctUntilChangedSubscriber = (function (_super) {\n\t    __extends(DistinctUntilChangedSubscriber, _super);\n\t    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n\t        _super.call(this, destination);\n\t        this.keySelector = keySelector;\n\t        this.hasKey = false;\n\t        if (typeof compare === 'function') {\n\t            this.compare = compare;\n\t        }\n\t    }\n\t    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n\t        return x === y;\n\t    };\n\t    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n\t        var keySelector = this.keySelector;\n\t        var key = value;\n\t        if (keySelector) {\n\t            key = tryCatch_1.tryCatch(this.keySelector)(value);\n\t            if (key === errorObject_1.errorObject) {\n\t                return this.destination.error(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        var result = false;\n\t        if (this.hasKey) {\n\t            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n\t            if (result === errorObject_1.errorObject) {\n\t                return this.destination.error(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        else {\n\t            this.hasKey = true;\n\t        }\n\t        if (Boolean(result) === false) {\n\t            this.key = key;\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    return DistinctUntilChangedSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 174 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinctUntilKeyChanged_1 = __webpack_require__(175);\n\tObservable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\n\n\n/***/ },\n/* 175 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar distinctUntilChanged_1 = __webpack_require__(173);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n\t * using a property accessed by using the key provided to check if the two items are distinct.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * @param {string} key string key for object property lookup on each item.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n\t * @method distinctUntilKeyChanged\n\t * @owner Observable\n\t */\n\tfunction distinctUntilKeyChanged(key, compare) {\n\t    return distinctUntilChanged_1.distinctUntilChanged.call(this, function (x, y) {\n\t        if (compare) {\n\t            return compare(x[key], y[key]);\n\t        }\n\t        return x[key] === y[key];\n\t    });\n\t}\n\texports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\n\n/***/ },\n/* 176 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar do_1 = __webpack_require__(177);\n\tObservable_1.Observable.prototype.do = do_1._do;\n\n\n/***/ },\n/* 177 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Perform a side effect for every emission on the source Observable, but return\n\t * an Observable that is identical to the source.\n\t *\n\t * <span class=\"informal\">Intercepts each emission on the source and runs a\n\t * function, but returns an output which is identical to the source.</span>\n\t *\n\t * <img src=\"./img/do.png\" width=\"100%\">\n\t *\n\t * Returns a mirrored Observable of the source Observable, but modified so that\n\t * the provided Observer is called to perform a side effect for every value,\n\t * error, and completion emitted by the source. Any errors that are thrown in\n\t * the aforementioned Observer or handlers are safely sent down the error path\n\t * of the output Observable.\n\t *\n\t * This operator is useful for debugging your Observables for the correct values\n\t * or performing other side effects.\n\t *\n\t * Note: this is different to a `subscribe` on the Observable. If the Observable\n\t * returned by `do` is not subscribed, the side effects specified by the\n\t * Observer will never happen. `do` therefore simply spies on existing\n\t * execution, it does not trigger an execution to happen like `subscribe` does.\n\t *\n\t * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var positions = clicks\n\t *   .do(ev => console.log(ev))\n\t *   .map(ev => ev.clientX);\n\t * positions.subscribe(x => console.log(x));\n\t *\n\t * @see {@link map}\n\t * @see {@link subscribe}\n\t *\n\t * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n\t * callback for `next`.\n\t * @param {function} [error] Callback for errors in the source.\n\t * @param {function} [complete] Callback for the completion of the source.\n\t * @return {Observable} An Observable identical to the source, but runs the\n\t * specified Observer or callback(s) for each item.\n\t * @method do\n\t * @name do\n\t * @owner Observable\n\t */\n\tfunction _do(nextOrObserver, error, complete) {\n\t    return this.lift(new DoOperator(nextOrObserver, error, complete));\n\t}\n\texports._do = _do;\n\tvar DoOperator = (function () {\n\t    function DoOperator(nextOrObserver, error, complete) {\n\t        this.nextOrObserver = nextOrObserver;\n\t        this.error = error;\n\t        this.complete = complete;\n\t    }\n\t    DoOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n\t    };\n\t    return DoOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DoSubscriber = (function (_super) {\n\t    __extends(DoSubscriber, _super);\n\t    function DoSubscriber(destination, nextOrObserver, error, complete) {\n\t        _super.call(this, destination);\n\t        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n\t        safeSubscriber.syncErrorThrowable = true;\n\t        this.add(safeSubscriber);\n\t        this.safeSubscriber = safeSubscriber;\n\t    }\n\t    DoSubscriber.prototype._next = function (value) {\n\t        var safeSubscriber = this.safeSubscriber;\n\t        safeSubscriber.next(value);\n\t        if (safeSubscriber.syncErrorThrown) {\n\t            this.destination.error(safeSubscriber.syncErrorValue);\n\t        }\n\t        else {\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    DoSubscriber.prototype._error = function (err) {\n\t        var safeSubscriber = this.safeSubscriber;\n\t        safeSubscriber.error(err);\n\t        if (safeSubscriber.syncErrorThrown) {\n\t            this.destination.error(safeSubscriber.syncErrorValue);\n\t        }\n\t        else {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    DoSubscriber.prototype._complete = function () {\n\t        var safeSubscriber = this.safeSubscriber;\n\t        safeSubscriber.complete();\n\t        if (safeSubscriber.syncErrorThrown) {\n\t            this.destination.error(safeSubscriber.syncErrorValue);\n\t        }\n\t        else {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return DoSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 178 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar exhaust_1 = __webpack_require__(179);\n\tObservable_1.Observable.prototype.exhaust = exhaust_1.exhaust;\n\n\n/***/ },\n/* 179 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by dropping\n\t * inner Observables while the previous inner Observable has not yet completed.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n\t * next inner Observables while the current inner is still executing.</span>\n\t *\n\t * <img src=\"./img/exhaust.png\" width=\"100%\">\n\t *\n\t * `exhaust` subscribes to an Observable that emits Observables, also known as a\n\t * higher-order Observable. Each time it observes one of these emitted inner\n\t * Observables, the output Observable begins emitting the items emitted by that\n\t * inner Observable. So far, it behaves like {@link mergeAll}. However,\n\t * `exhaust` ignores every new inner Observable if the previous Observable has\n\t * not yet completed. Once that one completes, it will accept and flatten the\n\t * next inner Observable and repeat this process.\n\t *\n\t * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n\t * var result = higherOrder.exhaust();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concatAll}\n\t * @see {@link switch}\n\t * @see {@link mergeAll}\n\t * @see {@link exhaustMap}\n\t * @see {@link zipAll}\n\t *\n\t * @return {Observable} Returns an Observable that takes a source of Observables\n\t * and propagates the first observable exclusively until it completes before\n\t * subscribing to the next.\n\t * @method exhaust\n\t * @owner Observable\n\t */\n\tfunction exhaust() {\n\t    return this.lift(new SwitchFirstOperator());\n\t}\n\texports.exhaust = exhaust;\n\tvar SwitchFirstOperator = (function () {\n\t    function SwitchFirstOperator() {\n\t    }\n\t    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchFirstSubscriber(subscriber));\n\t    };\n\t    return SwitchFirstOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchFirstSubscriber = (function (_super) {\n\t    __extends(SwitchFirstSubscriber, _super);\n\t    function SwitchFirstSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.hasCompleted = false;\n\t        this.hasSubscription = false;\n\t    }\n\t    SwitchFirstSubscriber.prototype._next = function (value) {\n\t        if (!this.hasSubscription) {\n\t            this.hasSubscription = true;\n\t            this.add(subscribeToResult_1.subscribeToResult(this, value));\n\t        }\n\t    };\n\t    SwitchFirstSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (!this.hasSubscription) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.hasSubscription = false;\n\t        if (this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return SwitchFirstSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 180 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar exhaustMap_1 = __webpack_require__(181);\n\tObservable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;\n\n\n/***/ },\n/* 181 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable only if the previous projected Observable has completed.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link exhaust}.</span>\n\t *\n\t * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an (so-called \"inner\") Observable. When it projects a source value to\n\t * an Observable, the output Observable begins emitting the items emitted by\n\t * that projected Observable. However, `exhaustMap` ignores every new projected\n\t * Observable if the previous projected Observable has not yet completed. Once\n\t * that one completes, it will accept and flatten the next projected Observable\n\t * and repeat this process.\n\t *\n\t * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMap}\n\t * @see {@link exhaust}\n\t * @see {@link mergeMap}\n\t * @see {@link switchMap}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An Observable containing projected Observables\n\t * of each item of the source, ignoring projected Observables that start before\n\t * their preceding Observable has completed.\n\t * @method exhaustMap\n\t * @owner Observable\n\t */\n\tfunction exhaustMap(project, resultSelector) {\n\t    return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n\t}\n\texports.exhaustMap = exhaustMap;\n\tvar SwitchFirstMapOperator = (function () {\n\t    function SwitchFirstMapOperator(project, resultSelector) {\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n\t    };\n\t    return SwitchFirstMapOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchFirstMapSubscriber = (function (_super) {\n\t    __extends(SwitchFirstMapSubscriber, _super);\n\t    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.hasSubscription = false;\n\t        this.hasCompleted = false;\n\t        this.index = 0;\n\t    }\n\t    SwitchFirstMapSubscriber.prototype._next = function (value) {\n\t        if (!this.hasSubscription) {\n\t            this.tryNext(value);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n\t        var index = this.index++;\n\t        var destination = this.destination;\n\t        try {\n\t            var result = this.project(value, index);\n\t            this.hasSubscription = true;\n\t            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (!this.hasSubscription) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        if (resultSelector) {\n\t            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            destination.next(innerValue);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        try {\n\t            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t            destination.next(result);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n\t        this.destination.error(err);\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.hasSubscription = false;\n\t        if (this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return SwitchFirstMapSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 182 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar expand_1 = __webpack_require__(183);\n\tObservable_1.Observable.prototype.expand = expand_1.expand;\n\n\n/***/ },\n/* 183 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Recursively projects each source value to an Observable which is merged in\n\t * the output Observable.\n\t *\n\t * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n\t * projection function to every source value as well as every output value.\n\t * It's recursive.</span>\n\t *\n\t * <img src=\"./img/expand.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an Observable, and then merging those resulting Observables and\n\t * emitting the results of this merger. *Expand* will re-emit on the output\n\t * Observable every source value. Then, each output value is given to the\n\t * `project` function which returns an inner Observable to be merged on the\n\t * output Observable. Those output values resulting from the projection are also\n\t * given to the `project` function to produce new output values. This is how\n\t * *expand* behaves recursively.\n\t *\n\t * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var powersOfTwo = clicks\n\t *   .mapTo(1)\n\t *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n\t *   .take(10);\n\t * powersOfTwo.subscribe(x => console.log(x));\n\t *\n\t * @see {@link mergeMap}\n\t * @see {@link mergeScan}\n\t *\n\t * @param {function(value: T, index: number) => Observable} project A function\n\t * that, when applied to an item emitted by the source or the output Observable,\n\t * returns an Observable.\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n\t * each projected inner Observable.\n\t * @return {Observable} An Observable that emits the source values and also\n\t * result of applying the projection function to each value emitted on the\n\t * output Observable and and merging the results of the Observables obtained\n\t * from this transformation.\n\t * @method expand\n\t * @owner Observable\n\t */\n\tfunction expand(project, concurrent, scheduler) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    if (scheduler === void 0) { scheduler = undefined; }\n\t    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\t    return this.lift(new ExpandOperator(project, concurrent, scheduler));\n\t}\n\texports.expand = expand;\n\tvar ExpandOperator = (function () {\n\t    function ExpandOperator(project, concurrent, scheduler) {\n\t        this.project = project;\n\t        this.concurrent = concurrent;\n\t        this.scheduler = scheduler;\n\t    }\n\t    ExpandOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n\t    };\n\t    return ExpandOperator;\n\t}());\n\texports.ExpandOperator = ExpandOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ExpandSubscriber = (function (_super) {\n\t    __extends(ExpandSubscriber, _super);\n\t    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.concurrent = concurrent;\n\t        this.scheduler = scheduler;\n\t        this.index = 0;\n\t        this.active = 0;\n\t        this.hasCompleted = false;\n\t        if (concurrent < Number.POSITIVE_INFINITY) {\n\t            this.buffer = [];\n\t        }\n\t    }\n\t    ExpandSubscriber.dispatch = function (arg) {\n\t        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n\t        subscriber.subscribeToProjection(result, value, index);\n\t    };\n\t    ExpandSubscriber.prototype._next = function (value) {\n\t        var destination = this.destination;\n\t        if (destination.closed) {\n\t            this._complete();\n\t            return;\n\t        }\n\t        var index = this.index++;\n\t        if (this.active < this.concurrent) {\n\t            destination.next(value);\n\t            var result = tryCatch_1.tryCatch(this.project)(value, index);\n\t            if (result === errorObject_1.errorObject) {\n\t                destination.error(errorObject_1.errorObject.e);\n\t            }\n\t            else if (!this.scheduler) {\n\t                this.subscribeToProjection(result, value, index);\n\t            }\n\t            else {\n\t                var state = { subscriber: this, result: result, value: value, index: index };\n\t                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n\t            }\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n\t        this.active++;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n\t    };\n\t    ExpandSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.hasCompleted && this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this._next(innerValue);\n\t    };\n\t    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer && buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        if (this.hasCompleted && this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return ExpandSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.ExpandSubscriber = ExpandSubscriber;\n\n\n/***/ },\n/* 184 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar elementAt_1 = __webpack_require__(185);\n\tObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n\n\n/***/ },\n/* 185 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(186);\n\t/**\n\t * Emits the single value at the specified `index` in a sequence of emissions\n\t * from the source Observable.\n\t *\n\t * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n\t *\n\t * <img src=\"./img/elementAt.png\" width=\"100%\">\n\t *\n\t * `elementAt` returns an Observable that emits the item at the specified\n\t * `index` in the source Observable, or a default value if that `index` is out\n\t * of range and the `default` argument is provided. If the `default` argument is\n\t * not given and the `index` is out of range, the output Observable will emit an\n\t * `ArgumentOutOfRangeError` error.\n\t *\n\t * @example <caption>Emit only the third click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.elementAt(2);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link first}\n\t * @see {@link last}\n\t * @see {@link skip}\n\t * @see {@link single}\n\t * @see {@link take}\n\t *\n\t * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n\t * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n\t * Observable has completed before emitting the i-th `next` notification.\n\t *\n\t * @param {number} index Is the number `i` for the i-th source emission that has\n\t * happened since the subscription, starting from the number `0`.\n\t * @param {T} [defaultValue] The default value returned for missing indices.\n\t * @return {Observable} An Observable that emits a single item, if it is found.\n\t * Otherwise, will emit the default value if given. If not, then emits an error.\n\t * @method elementAt\n\t * @owner Observable\n\t */\n\tfunction elementAt(index, defaultValue) {\n\t    return this.lift(new ElementAtOperator(index, defaultValue));\n\t}\n\texports.elementAt = elementAt;\n\tvar ElementAtOperator = (function () {\n\t    function ElementAtOperator(index, defaultValue) {\n\t        this.index = index;\n\t        this.defaultValue = defaultValue;\n\t        if (index < 0) {\n\t            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\t        }\n\t    }\n\t    ElementAtOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n\t    };\n\t    return ElementAtOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ElementAtSubscriber = (function (_super) {\n\t    __extends(ElementAtSubscriber, _super);\n\t    function ElementAtSubscriber(destination, index, defaultValue) {\n\t        _super.call(this, destination);\n\t        this.index = index;\n\t        this.defaultValue = defaultValue;\n\t    }\n\t    ElementAtSubscriber.prototype._next = function (x) {\n\t        if (this.index-- === 0) {\n\t            this.destination.next(x);\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ElementAtSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (this.index >= 0) {\n\t            if (typeof this.defaultValue !== 'undefined') {\n\t                destination.next(this.defaultValue);\n\t            }\n\t            else {\n\t                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n\t            }\n\t        }\n\t        destination.complete();\n\t    };\n\t    return ElementAtSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 186 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an element was queried at a certain index of an\n\t * Observable, but no such index or position exists in that sequence.\n\t *\n\t * @see {@link elementAt}\n\t * @see {@link take}\n\t * @see {@link takeLast}\n\t *\n\t * @class ArgumentOutOfRangeError\n\t */\n\tvar ArgumentOutOfRangeError = (function (_super) {\n\t    __extends(ArgumentOutOfRangeError, _super);\n\t    function ArgumentOutOfRangeError() {\n\t        var err = _super.call(this, 'argument out of range');\n\t        this.name = err.name = 'ArgumentOutOfRangeError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return ArgumentOutOfRangeError;\n\t}(Error));\n\texports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n\n\n/***/ },\n/* 187 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar filter_1 = __webpack_require__(188);\n\tObservable_1.Observable.prototype.filter = filter_1.filter;\n\n\n/***/ },\n/* 188 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Filter items emitted by the source Observable by only emitting those that\n\t * satisfy a specified predicate.\n\t *\n\t * <span class=\"informal\">Like\n\t * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n\t * it only emits a value from the source if it passes a criterion function.</span>\n\t *\n\t * <img src=\"./img/filter.png\" width=\"100%\">\n\t *\n\t * Similar to the well-known `Array.prototype.filter` method, this operator\n\t * takes values from the source Observable, passes them through a `predicate`\n\t * function and only emits those values that yielded `true`.\n\t *\n\t * @example <caption>Emit only click events whose target was a DIV element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n\t * clicksOnDivs.subscribe(x => console.log(x));\n\t *\n\t * @see {@link distinct}\n\t * @see {@link distinctKey}\n\t * @see {@link distinctUntilChanged}\n\t * @see {@link distinctUntilKeyChanged}\n\t * @see {@link ignoreElements}\n\t * @see {@link partition}\n\t * @see {@link skip}\n\t *\n\t * @param {function(value: T, index: number): boolean} predicate A function that\n\t * evaluates each value emitted by the source Observable. If it returns `true`,\n\t * the value is emitted, if `false` the value is not passed to the output\n\t * Observable. The `index` parameter is the number `i` for the i-th source\n\t * emission that has happened since the subscription, starting from the number\n\t * `0`.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {Observable} An Observable of values from the source that were\n\t * allowed by the `predicate` function.\n\t * @method filter\n\t * @owner Observable\n\t */\n\tfunction filter(predicate, thisArg) {\n\t    return this.lift(new FilterOperator(predicate, thisArg));\n\t}\n\texports.filter = filter;\n\tvar FilterOperator = (function () {\n\t    function FilterOperator(predicate, thisArg) {\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t    }\n\t    FilterOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n\t    };\n\t    return FilterOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FilterSubscriber = (function (_super) {\n\t    __extends(FilterSubscriber, _super);\n\t    function FilterSubscriber(destination, predicate, thisArg) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t        this.count = 0;\n\t        this.predicate = predicate;\n\t    }\n\t    // the try catch block below is left specifically for\n\t    // optimization and perf reasons. a tryCatcher is not necessary here.\n\t    FilterSubscriber.prototype._next = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.predicate.call(this.thisArg, value, this.count++);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    return FilterSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 189 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar finally_1 = __webpack_require__(190);\n\tObservable_1.Observable.prototype.finally = finally_1._finally;\n\n\n/***/ },\n/* 190 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * Returns an Observable that mirrors the source Observable, but will call a specified function when\n\t * the source terminates on complete or error.\n\t * @param {function} callback function to be called when source terminates.\n\t * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n\t * @method finally\n\t * @owner Observable\n\t */\n\tfunction _finally(callback) {\n\t    return this.lift(new FinallyOperator(callback));\n\t}\n\texports._finally = _finally;\n\tvar FinallyOperator = (function () {\n\t    function FinallyOperator(callback) {\n\t        this.callback = callback;\n\t    }\n\t    FinallyOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n\t    };\n\t    return FinallyOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FinallySubscriber = (function (_super) {\n\t    __extends(FinallySubscriber, _super);\n\t    function FinallySubscriber(destination, callback) {\n\t        _super.call(this, destination);\n\t        this.add(new Subscription_1.Subscription(callback));\n\t    }\n\t    return FinallySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 191 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar find_1 = __webpack_require__(192);\n\tObservable_1.Observable.prototype.find = find_1.find;\n\n\n/***/ },\n/* 192 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits only the first value emitted by the source Observable that meets some\n\t * condition.\n\t *\n\t * <span class=\"informal\">Finds the first value that passes some test and emits\n\t * that.</span>\n\t *\n\t * <img src=\"./img/find.png\" width=\"100%\">\n\t *\n\t * `find` searches for the first item in the source Observable that matches the\n\t * specified condition embodied by the `predicate`, and returns the first\n\t * occurrence in the source. Unlike {@link first}, the `predicate` is required\n\t * in `find`, and does not emit an error if a valid value is not found.\n\t *\n\t * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link filter}\n\t * @see {@link first}\n\t * @see {@link findIndex}\n\t * @see {@link take}\n\t *\n\t * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n\t * A function called with each item to test for condition matching.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {Observable<T>} An Observable of the first item that matches the\n\t * condition.\n\t * @method find\n\t * @owner Observable\n\t */\n\tfunction find(predicate, thisArg) {\n\t    if (typeof predicate !== 'function') {\n\t        throw new TypeError('predicate is not a function');\n\t    }\n\t    return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n\t}\n\texports.find = find;\n\tvar FindValueOperator = (function () {\n\t    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.yieldIndex = yieldIndex;\n\t        this.thisArg = thisArg;\n\t    }\n\t    FindValueOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n\t    };\n\t    return FindValueOperator;\n\t}());\n\texports.FindValueOperator = FindValueOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FindValueSubscriber = (function (_super) {\n\t    __extends(FindValueSubscriber, _super);\n\t    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.yieldIndex = yieldIndex;\n\t        this.thisArg = thisArg;\n\t        this.index = 0;\n\t    }\n\t    FindValueSubscriber.prototype.notifyComplete = function (value) {\n\t        var destination = this.destination;\n\t        destination.next(value);\n\t        destination.complete();\n\t    };\n\t    FindValueSubscriber.prototype._next = function (value) {\n\t        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n\t        var index = this.index++;\n\t        try {\n\t            var result = predicate.call(thisArg || this, value, index, this.source);\n\t            if (result) {\n\t                this.notifyComplete(this.yieldIndex ? index : value);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    FindValueSubscriber.prototype._complete = function () {\n\t        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n\t    };\n\t    return FindValueSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.FindValueSubscriber = FindValueSubscriber;\n\n\n/***/ },\n/* 193 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar findIndex_1 = __webpack_require__(194);\n\tObservable_1.Observable.prototype.findIndex = findIndex_1.findIndex;\n\n\n/***/ },\n/* 194 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar find_1 = __webpack_require__(192);\n\t/**\n\t * Emits only the index of the first value emitted by the source Observable that\n\t * meets some condition.\n\t *\n\t * <span class=\"informal\">It's like {@link find}, but emits the index of the\n\t * found value, not the value itself.</span>\n\t *\n\t * <img src=\"./img/findIndex.png\" width=\"100%\">\n\t *\n\t * `findIndex` searches for the first item in the source Observable that matches\n\t * the specified condition embodied by the `predicate`, and returns the\n\t * (zero-based) index of the first occurrence in the source. Unlike\n\t * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n\t * an error if a valid value is not found.\n\t *\n\t * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link filter}\n\t * @see {@link find}\n\t * @see {@link first}\n\t * @see {@link take}\n\t *\n\t * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n\t * A function called with each item to test for condition matching.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {Observable} An Observable of the index of the first item that\n\t * matches the condition.\n\t * @method find\n\t * @owner Observable\n\t */\n\tfunction findIndex(predicate, thisArg) {\n\t    return this.lift(new find_1.FindValueOperator(predicate, this, true, thisArg));\n\t}\n\texports.findIndex = findIndex;\n\n\n/***/ },\n/* 195 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar first_1 = __webpack_require__(196);\n\tObservable_1.Observable.prototype.first = first_1.first;\n\n\n/***/ },\n/* 196 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyError_1 = __webpack_require__(197);\n\t/**\n\t * Emits only the first value (or the first value that meets some condition)\n\t * emitted by the source Observable.\n\t *\n\t * <span class=\"informal\">Emits only the first value. Or emits only the first\n\t * value that passes some test.</span>\n\t *\n\t * <img src=\"./img/first.png\" width=\"100%\">\n\t *\n\t * If called with no arguments, `first` emits the first value of the source\n\t * Observable, then completes. If called with a `predicate` function, `first`\n\t * emits the first value of the source that matches the specified condition. It\n\t * may also take a `resultSelector` function to produce the output value from\n\t * the input value, and a `defaultValue` to emit in case the source completes\n\t * before it is able to emit a valid value. Throws an error if `defaultValue`\n\t * was not provided and a matching element is not found.\n\t *\n\t * @example <caption>Emit only the first click that happens on the DOM</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.first();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Emits the first click that happens on a DIV</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link filter}\n\t * @see {@link find}\n\t * @see {@link take}\n\t *\n\t * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n\t * callback if the Observable completes before any `next` notification was sent.\n\t *\n\t * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n\t * An optional function called with each item to test for condition matching.\n\t * @param {function(value: T, index: number): R} [resultSelector] A function to\n\t * produce the value on the output Observable based on the values\n\t * and the indices of the source Observable. The arguments passed to this\n\t * function are:\n\t * - `value`: the value that was emitted on the source.\n\t * - `index`: the \"index\" of the value from the source.\n\t * @param {R} [defaultValue] The default value emitted in case no valid value\n\t * was found on the source.\n\t * @return {Observable<T|R>} an Observable of the first item that matches the\n\t * condition.\n\t * @method first\n\t * @owner Observable\n\t */\n\tfunction first(predicate, resultSelector, defaultValue) {\n\t    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n\t}\n\texports.first = first;\n\tvar FirstOperator = (function () {\n\t    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t    }\n\t    FirstOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n\t    };\n\t    return FirstOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FirstSubscriber = (function (_super) {\n\t    __extends(FirstSubscriber, _super);\n\t    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t        this.index = 0;\n\t        this.hasCompleted = false;\n\t    }\n\t    FirstSubscriber.prototype._next = function (value) {\n\t        var index = this.index++;\n\t        if (this.predicate) {\n\t            this._tryPredicate(value, index);\n\t        }\n\t        else {\n\t            this._emit(value, index);\n\t        }\n\t    };\n\t    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, index, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            this._emit(value, index);\n\t        }\n\t    };\n\t    FirstSubscriber.prototype._emit = function (value, index) {\n\t        if (this.resultSelector) {\n\t            this._tryResultSelector(value, index);\n\t            return;\n\t        }\n\t        this._emitFinal(value);\n\t    };\n\t    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this._emitFinal(result);\n\t    };\n\t    FirstSubscriber.prototype._emitFinal = function (value) {\n\t        var destination = this.destination;\n\t        destination.next(value);\n\t        destination.complete();\n\t        this.hasCompleted = true;\n\t    };\n\t    FirstSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n\t            destination.next(this.defaultValue);\n\t            destination.complete();\n\t        }\n\t        else if (!this.hasCompleted) {\n\t            destination.error(new EmptyError_1.EmptyError);\n\t        }\n\t    };\n\t    return FirstSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 197 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an Observable or a sequence was queried but has no\n\t * elements.\n\t *\n\t * @see {@link first}\n\t * @see {@link last}\n\t * @see {@link single}\n\t *\n\t * @class EmptyError\n\t */\n\tvar EmptyError = (function (_super) {\n\t    __extends(EmptyError, _super);\n\t    function EmptyError() {\n\t        var err = _super.call(this, 'no elements in sequence');\n\t        this.name = err.name = 'EmptyError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return EmptyError;\n\t}(Error));\n\texports.EmptyError = EmptyError;\n\n\n/***/ },\n/* 198 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar groupBy_1 = __webpack_require__(199);\n\tObservable_1.Observable.prototype.groupBy = groupBy_1.groupBy;\n\n\n/***/ },\n/* 199 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Map_1 = __webpack_require__(200);\n\tvar FastMap_1 = __webpack_require__(202);\n\t/**\n\t * Groups the items emitted by an Observable according to a specified criterion,\n\t * and emits these grouped items as `GroupedObservables`, one\n\t * {@link GroupedObservable} per group.\n\t *\n\t * <img src=\"./img/groupBy.png\" width=\"100%\">\n\t *\n\t * @param {function(value: T): K} keySelector a function that extracts the key\n\t * for each item.\n\t * @param {function(value: T): R} [elementSelector] a function that extracts the\n\t * return element for each item.\n\t * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n\t * a function that returns an Observable to determine how long each group should\n\t * exist.\n\t * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n\t * GroupedObservables, each of which corresponds to a unique key value and each\n\t * of which emits those items from the source Observable that share that key\n\t * value.\n\t * @method groupBy\n\t * @owner Observable\n\t */\n\tfunction groupBy(keySelector, elementSelector, durationSelector) {\n\t    return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n\t}\n\texports.groupBy = groupBy;\n\tvar GroupByOperator = (function () {\n\t    function GroupByOperator(source, keySelector, elementSelector, durationSelector) {\n\t        this.source = source;\n\t        this.keySelector = keySelector;\n\t        this.elementSelector = elementSelector;\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    GroupByOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector));\n\t    };\n\t    return GroupByOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar GroupBySubscriber = (function (_super) {\n\t    __extends(GroupBySubscriber, _super);\n\t    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.keySelector = keySelector;\n\t        this.elementSelector = elementSelector;\n\t        this.durationSelector = durationSelector;\n\t        this.groups = null;\n\t        this.attemptedToUnsubscribe = false;\n\t        this.count = 0;\n\t    }\n\t    GroupBySubscriber.prototype._next = function (value) {\n\t        var key;\n\t        try {\n\t            key = this.keySelector(value);\n\t        }\n\t        catch (err) {\n\t            this.error(err);\n\t            return;\n\t        }\n\t        this._group(value, key);\n\t    };\n\t    GroupBySubscriber.prototype._group = function (value, key) {\n\t        var groups = this.groups;\n\t        if (!groups) {\n\t            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();\n\t        }\n\t        var group = groups.get(key);\n\t        var element;\n\t        if (this.elementSelector) {\n\t            try {\n\t                element = this.elementSelector(value);\n\t            }\n\t            catch (err) {\n\t                this.error(err);\n\t            }\n\t        }\n\t        else {\n\t            element = value;\n\t        }\n\t        if (!group) {\n\t            groups.set(key, group = new Subject_1.Subject());\n\t            var groupedObservable = new GroupedObservable(key, group, this);\n\t            this.destination.next(groupedObservable);\n\t            if (this.durationSelector) {\n\t                var duration = void 0;\n\t                try {\n\t                    duration = this.durationSelector(new GroupedObservable(key, group));\n\t                }\n\t                catch (err) {\n\t                    this.error(err);\n\t                    return;\n\t                }\n\t                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n\t            }\n\t        }\n\t        if (!group.closed) {\n\t            group.next(element);\n\t        }\n\t    };\n\t    GroupBySubscriber.prototype._error = function (err) {\n\t        var groups = this.groups;\n\t        if (groups) {\n\t            groups.forEach(function (group, key) {\n\t                group.error(err);\n\t            });\n\t            groups.clear();\n\t        }\n\t        this.destination.error(err);\n\t    };\n\t    GroupBySubscriber.prototype._complete = function () {\n\t        var groups = this.groups;\n\t        if (groups) {\n\t            groups.forEach(function (group, key) {\n\t                group.complete();\n\t            });\n\t            groups.clear();\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    GroupBySubscriber.prototype.removeGroup = function (key) {\n\t        this.groups.delete(key);\n\t    };\n\t    GroupBySubscriber.prototype.unsubscribe = function () {\n\t        if (!this.closed && !this.attemptedToUnsubscribe) {\n\t            this.attemptedToUnsubscribe = true;\n\t            if (this.count === 0) {\n\t                _super.prototype.unsubscribe.call(this);\n\t            }\n\t        }\n\t    };\n\t    return GroupBySubscriber;\n\t}(Subscriber_1.Subscriber));\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar GroupDurationSubscriber = (function (_super) {\n\t    __extends(GroupDurationSubscriber, _super);\n\t    function GroupDurationSubscriber(key, group, parent) {\n\t        _super.call(this);\n\t        this.key = key;\n\t        this.group = group;\n\t        this.parent = parent;\n\t    }\n\t    GroupDurationSubscriber.prototype._next = function (value) {\n\t        this._complete();\n\t    };\n\t    GroupDurationSubscriber.prototype._error = function (err) {\n\t        var group = this.group;\n\t        if (!group.closed) {\n\t            group.error(err);\n\t        }\n\t        this.parent.removeGroup(this.key);\n\t    };\n\t    GroupDurationSubscriber.prototype._complete = function () {\n\t        var group = this.group;\n\t        if (!group.closed) {\n\t            group.complete();\n\t        }\n\t        this.parent.removeGroup(this.key);\n\t    };\n\t    return GroupDurationSubscriber;\n\t}(Subscriber_1.Subscriber));\n\t/**\n\t * An Observable representing values belonging to the same group represented by\n\t * a common key. The values emitted by a GroupedObservable come from the source\n\t * Observable. The common key is available as the field `key` on a\n\t * GroupedObservable instance.\n\t *\n\t * @class GroupedObservable<K, T>\n\t */\n\tvar GroupedObservable = (function (_super) {\n\t    __extends(GroupedObservable, _super);\n\t    function GroupedObservable(key, groupSubject, refCountSubscription) {\n\t        _super.call(this);\n\t        this.key = key;\n\t        this.groupSubject = groupSubject;\n\t        this.refCountSubscription = refCountSubscription;\n\t    }\n\t    GroupedObservable.prototype._subscribe = function (subscriber) {\n\t        var subscription = new Subscription_1.Subscription();\n\t        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n\t        if (refCountSubscription && !refCountSubscription.closed) {\n\t            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n\t        }\n\t        subscription.add(groupSubject.subscribe(subscriber));\n\t        return subscription;\n\t    };\n\t    return GroupedObservable;\n\t}(Observable_1.Observable));\n\texports.GroupedObservable = GroupedObservable;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar InnerRefCountSubscription = (function (_super) {\n\t    __extends(InnerRefCountSubscription, _super);\n\t    function InnerRefCountSubscription(parent) {\n\t        _super.call(this);\n\t        this.parent = parent;\n\t        parent.count++;\n\t    }\n\t    InnerRefCountSubscription.prototype.unsubscribe = function () {\n\t        var parent = this.parent;\n\t        if (!parent.closed && !this.closed) {\n\t            _super.prototype.unsubscribe.call(this);\n\t            parent.count -= 1;\n\t            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n\t                parent.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    return InnerRefCountSubscription;\n\t}(Subscription_1.Subscription));\n\n\n/***/ },\n/* 200 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar MapPolyfill_1 = __webpack_require__(201);\n\texports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();\n\n\n/***/ },\n/* 201 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar MapPolyfill = (function () {\n\t    function MapPolyfill() {\n\t        this.size = 0;\n\t        this._values = [];\n\t        this._keys = [];\n\t    }\n\t    MapPolyfill.prototype.get = function (key) {\n\t        var i = this._keys.indexOf(key);\n\t        return i === -1 ? undefined : this._values[i];\n\t    };\n\t    MapPolyfill.prototype.set = function (key, value) {\n\t        var i = this._keys.indexOf(key);\n\t        if (i === -1) {\n\t            this._keys.push(key);\n\t            this._values.push(value);\n\t            this.size++;\n\t        }\n\t        else {\n\t            this._values[i] = value;\n\t        }\n\t        return this;\n\t    };\n\t    MapPolyfill.prototype.delete = function (key) {\n\t        var i = this._keys.indexOf(key);\n\t        if (i === -1) {\n\t            return false;\n\t        }\n\t        this._values.splice(i, 1);\n\t        this._keys.splice(i, 1);\n\t        this.size--;\n\t        return true;\n\t    };\n\t    MapPolyfill.prototype.clear = function () {\n\t        this._keys.length = 0;\n\t        this._values.length = 0;\n\t        this.size = 0;\n\t    };\n\t    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n\t        for (var i = 0; i < this.size; i++) {\n\t            cb.call(thisArg, this._values[i], this._keys[i]);\n\t        }\n\t    };\n\t    return MapPolyfill;\n\t}());\n\texports.MapPolyfill = MapPolyfill;\n\n\n/***/ },\n/* 202 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar FastMap = (function () {\n\t    function FastMap() {\n\t        this.values = {};\n\t    }\n\t    FastMap.prototype.delete = function (key) {\n\t        this.values[key] = null;\n\t        return true;\n\t    };\n\t    FastMap.prototype.set = function (key, value) {\n\t        this.values[key] = value;\n\t        return this;\n\t    };\n\t    FastMap.prototype.get = function (key) {\n\t        return this.values[key];\n\t    };\n\t    FastMap.prototype.forEach = function (cb, thisArg) {\n\t        var values = this.values;\n\t        for (var key in values) {\n\t            if (values.hasOwnProperty(key) && values[key] !== null) {\n\t                cb.call(thisArg, values[key], key);\n\t            }\n\t        }\n\t    };\n\t    FastMap.prototype.clear = function () {\n\t        this.values = {};\n\t    };\n\t    return FastMap;\n\t}());\n\texports.FastMap = FastMap;\n\n\n/***/ },\n/* 203 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ignoreElements_1 = __webpack_require__(204);\n\tObservable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;\n\n\n/***/ },\n/* 204 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar noop_1 = __webpack_require__(93);\n\t/**\n\t * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n\t *\n\t * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n\t *\n\t * @return {Observable} an empty Observable that only calls `complete`\n\t * or `error`, based on which one is called by the source Observable.\n\t * @method ignoreElements\n\t * @owner Observable\n\t */\n\tfunction ignoreElements() {\n\t    return this.lift(new IgnoreElementsOperator());\n\t}\n\texports.ignoreElements = ignoreElements;\n\t;\n\tvar IgnoreElementsOperator = (function () {\n\t    function IgnoreElementsOperator() {\n\t    }\n\t    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n\t    };\n\t    return IgnoreElementsOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar IgnoreElementsSubscriber = (function (_super) {\n\t    __extends(IgnoreElementsSubscriber, _super);\n\t    function IgnoreElementsSubscriber() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    IgnoreElementsSubscriber.prototype._next = function (unused) {\n\t        noop_1.noop();\n\t    };\n\t    return IgnoreElementsSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 205 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar isEmpty_1 = __webpack_require__(206);\n\tObservable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;\n\n\n/***/ },\n/* 206 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n\t *\n\t * <img src=\"./img/isEmpty.png\" width=\"100%\">\n\t *\n\t * @return {Observable} an Observable that emits a Boolean.\n\t * @method isEmpty\n\t * @owner Observable\n\t */\n\tfunction isEmpty() {\n\t    return this.lift(new IsEmptyOperator());\n\t}\n\texports.isEmpty = isEmpty;\n\tvar IsEmptyOperator = (function () {\n\t    function IsEmptyOperator() {\n\t    }\n\t    IsEmptyOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new IsEmptySubscriber(observer));\n\t    };\n\t    return IsEmptyOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar IsEmptySubscriber = (function (_super) {\n\t    __extends(IsEmptySubscriber, _super);\n\t    function IsEmptySubscriber(destination) {\n\t        _super.call(this, destination);\n\t    }\n\t    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n\t        var destination = this.destination;\n\t        destination.next(isEmpty);\n\t        destination.complete();\n\t    };\n\t    IsEmptySubscriber.prototype._next = function (value) {\n\t        this.notifyComplete(false);\n\t    };\n\t    IsEmptySubscriber.prototype._complete = function () {\n\t        this.notifyComplete(true);\n\t    };\n\t    return IsEmptySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 207 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar audit_1 = __webpack_require__(208);\n\tObservable_1.Observable.prototype.audit = audit_1.audit;\n\n\n/***/ },\n/* 208 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Ignores source values for a duration determined by another Observable, then\n\t * emits the most recent value from the source Observable, then repeats this\n\t * process.\n\t *\n\t * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n\t * duration is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/audit.png\" width=\"100%\">\n\t *\n\t * `audit` is similar to `throttle`, but emits the last value from the silenced\n\t * time window, instead of the first value. `audit` emits the most recent value\n\t * from the source Observable on the output Observable as soon as its internal\n\t * timer becomes disabled, and ignores source values while the timer is enabled.\n\t * Initially, the timer is disabled. As soon as the first source value arrives,\n\t * the timer is enabled by calling the `durationSelector` function with the\n\t * source value, which returns the \"duration\" Observable. When the duration\n\t * Observable emits a value or completes, the timer is disabled, then the most\n\t * recent source value is emitted on the output Observable, and this process\n\t * repeats for the next source value.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounce}\n\t * @see {@link delayWhen}\n\t * @see {@link sample}\n\t * @see {@link throttle}\n\t *\n\t * @param {function(value: T): Observable|Promise} durationSelector A function\n\t * that receives a value from the source Observable, for computing the silencing\n\t * duration, returned as an Observable or a Promise.\n\t * @return {Observable<T>} An Observable that performs rate-limiting of\n\t * emissions from the source Observable.\n\t * @method audit\n\t * @owner Observable\n\t */\n\tfunction audit(durationSelector) {\n\t    return this.lift(new AuditOperator(durationSelector));\n\t}\n\texports.audit = audit;\n\tvar AuditOperator = (function () {\n\t    function AuditOperator(durationSelector) {\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    AuditOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n\t    };\n\t    return AuditOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AuditSubscriber = (function (_super) {\n\t    __extends(AuditSubscriber, _super);\n\t    function AuditSubscriber(destination, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.durationSelector = durationSelector;\n\t        this.hasValue = false;\n\t    }\n\t    AuditSubscriber.prototype._next = function (value) {\n\t        this.value = value;\n\t        this.hasValue = true;\n\t        if (!this.throttled) {\n\t            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n\t            if (duration === errorObject_1.errorObject) {\n\t                this.destination.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n\t            }\n\t        }\n\t    };\n\t    AuditSubscriber.prototype.clearThrottle = function () {\n\t        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n\t        if (throttled) {\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t            throttled.unsubscribe();\n\t        }\n\t        if (hasValue) {\n\t            this.value = null;\n\t            this.hasValue = false;\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        this.clearThrottle();\n\t    };\n\t    AuditSubscriber.prototype.notifyComplete = function () {\n\t        this.clearThrottle();\n\t    };\n\t    return AuditSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 209 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar auditTime_1 = __webpack_require__(210);\n\tObservable_1.Observable.prototype.auditTime = auditTime_1.auditTime;\n\n\n/***/ },\n/* 210 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(80);\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Ignores source values for `duration` milliseconds, then emits the most recent\n\t * value from the source Observable, then repeats this process.\n\t *\n\t * <span class=\"informal\">When it sees a source values, it ignores that plus\n\t * the next ones for `duration` milliseconds, and then it emits the most recent\n\t * value from the source.</span>\n\t *\n\t * <img src=\"./img/auditTime.png\" width=\"100%\">\n\t *\n\t * `auditTime` is similar to `throttleTime`, but emits the last value from the\n\t * silenced time window, instead of the first value. `auditTime` emits the most\n\t * recent value from the source Observable on the output Observable as soon as\n\t * its internal timer becomes disabled, and ignores source values while the\n\t * timer is enabled. Initially, the timer is disabled. As soon as the first\n\t * source value arrives, the timer is enabled. After `duration` milliseconds (or\n\t * the time unit determined internally by the optional `scheduler`) has passed,\n\t * the timer is disabled, then the most recent source value is emitted on the\n\t * output Observable, and this process repeats for the next source value.\n\t * Optionally takes a {@link Scheduler} for managing timers.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.auditTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounceTime}\n\t * @see {@link delay}\n\t * @see {@link sampleTime}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {number} duration Time to wait before emitting the most recent source\n\t * value, measured in milliseconds or the time unit determined internally\n\t * by the optional `scheduler`.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the rate-limiting behavior.\n\t * @return {Observable<T>} An Observable that performs rate-limiting of\n\t * emissions from the source Observable.\n\t * @method auditTime\n\t * @owner Observable\n\t */\n\tfunction auditTime(duration, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new AuditTimeOperator(duration, scheduler));\n\t}\n\texports.auditTime = auditTime;\n\tvar AuditTimeOperator = (function () {\n\t    function AuditTimeOperator(duration, scheduler) {\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t    }\n\t    AuditTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n\t    };\n\t    return AuditTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AuditTimeSubscriber = (function (_super) {\n\t    __extends(AuditTimeSubscriber, _super);\n\t    function AuditTimeSubscriber(destination, duration, scheduler) {\n\t        _super.call(this, destination);\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t        this.hasValue = false;\n\t    }\n\t    AuditTimeSubscriber.prototype._next = function (value) {\n\t        this.value = value;\n\t        this.hasValue = true;\n\t        if (!this.throttled) {\n\t            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n\t        }\n\t    };\n\t    AuditTimeSubscriber.prototype.clearThrottle = function () {\n\t        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n\t        if (throttled) {\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t            throttled.unsubscribe();\n\t        }\n\t        if (hasValue) {\n\t            this.value = null;\n\t            this.hasValue = false;\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    return AuditTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNext(subscriber) {\n\t    subscriber.clearThrottle();\n\t}\n\n\n/***/ },\n/* 211 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar last_1 = __webpack_require__(212);\n\tObservable_1.Observable.prototype.last = last_1.last;\n\n\n/***/ },\n/* 212 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyError_1 = __webpack_require__(197);\n\t/**\n\t * Returns an Observable that emits only the last item emitted by the source Observable.\n\t * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n\t * the last item from the source Observable, the resulting Observable will emit the last item\n\t * from the source Observable that satisfies the predicate.\n\t *\n\t * <img src=\"./img/last.png\" width=\"100%\">\n\t *\n\t * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n\t * callback if the Observable completes before any `next` notification was sent.\n\t * @param {function} predicate - the condition any source emitted item has to satisfy.\n\t * @return {Observable} an Observable that emits only the last item satisfying the given condition\n\t * from the source, or an NoSuchElementException if no such items are emitted.\n\t * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n\t * @method last\n\t * @owner Observable\n\t */\n\tfunction last(predicate, resultSelector, defaultValue) {\n\t    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n\t}\n\texports.last = last;\n\tvar LastOperator = (function () {\n\t    function LastOperator(predicate, resultSelector, defaultValue, source) {\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t    }\n\t    LastOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n\t    };\n\t    return LastOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar LastSubscriber = (function (_super) {\n\t    __extends(LastSubscriber, _super);\n\t    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t        this.hasValue = false;\n\t        this.index = 0;\n\t        if (typeof defaultValue !== 'undefined') {\n\t            this.lastValue = defaultValue;\n\t            this.hasValue = true;\n\t        }\n\t    }\n\t    LastSubscriber.prototype._next = function (value) {\n\t        var index = this.index++;\n\t        if (this.predicate) {\n\t            this._tryPredicate(value, index);\n\t        }\n\t        else {\n\t            if (this.resultSelector) {\n\t                this._tryResultSelector(value, index);\n\t                return;\n\t            }\n\t            this.lastValue = value;\n\t            this.hasValue = true;\n\t        }\n\t    };\n\t    LastSubscriber.prototype._tryPredicate = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, index, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            if (this.resultSelector) {\n\t                this._tryResultSelector(value, index);\n\t                return;\n\t            }\n\t            this.lastValue = value;\n\t            this.hasValue = true;\n\t        }\n\t    };\n\t    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.lastValue = result;\n\t        this.hasValue = true;\n\t    };\n\t    LastSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (this.hasValue) {\n\t            destination.next(this.lastValue);\n\t            destination.complete();\n\t        }\n\t        else {\n\t            destination.error(new EmptyError_1.EmptyError);\n\t        }\n\t    };\n\t    return LastSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 213 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar let_1 = __webpack_require__(214);\n\tObservable_1.Observable.prototype.let = let_1.letProto;\n\tObservable_1.Observable.prototype.letBind = let_1.letProto;\n\n\n/***/ },\n/* 214 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * @param func\n\t * @return {Observable<R>}\n\t * @method let\n\t * @owner Observable\n\t */\n\tfunction letProto(func) {\n\t    return func(this);\n\t}\n\texports.letProto = letProto;\n\n\n/***/ },\n/* 215 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar every_1 = __webpack_require__(216);\n\tObservable_1.Observable.prototype.every = every_1.every;\n\n\n/***/ },\n/* 216 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n\t * @param {function} predicate a function for determining if an item meets a specified condition.\n\t * @param {any} [thisArg] optional object to use for `this` in the callback\n\t * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n\t * @method every\n\t * @owner Observable\n\t */\n\tfunction every(predicate, thisArg) {\n\t    return this.lift(new EveryOperator(predicate, thisArg, this));\n\t}\n\texports.every = every;\n\tvar EveryOperator = (function () {\n\t    function EveryOperator(predicate, thisArg, source) {\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t        this.source = source;\n\t    }\n\t    EveryOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n\t    };\n\t    return EveryOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar EverySubscriber = (function (_super) {\n\t    __extends(EverySubscriber, _super);\n\t    function EverySubscriber(destination, predicate, thisArg, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t        this.source = source;\n\t        this.index = 0;\n\t        this.thisArg = thisArg || this;\n\t    }\n\t    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n\t        this.destination.next(everyValueMatch);\n\t        this.destination.complete();\n\t    };\n\t    EverySubscriber.prototype._next = function (value) {\n\t        var result = false;\n\t        try {\n\t            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (!result) {\n\t            this.notifyComplete(false);\n\t        }\n\t    };\n\t    EverySubscriber.prototype._complete = function () {\n\t        this.notifyComplete(true);\n\t    };\n\t    return EverySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 217 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar map_1 = __webpack_require__(218);\n\tObservable_1.Observable.prototype.map = map_1.map;\n\n\n/***/ },\n/* 218 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Applies a given `project` function to each value emitted by the source\n\t * Observable, and emits the resulting values as an Observable.\n\t *\n\t * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n\t * it passes each source value through a transformation function to get\n\t * corresponding output values.</span>\n\t *\n\t * <img src=\"./img/map.png\" width=\"100%\">\n\t *\n\t * Similar to the well known `Array.prototype.map` function, this operator\n\t * applies a projection to each value and emits that projection in the output\n\t * Observable.\n\t *\n\t * @example <caption>Map every every click to the clientX position of that click</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var positions = clicks.map(ev => ev.clientX);\n\t * positions.subscribe(x => console.log(x));\n\t *\n\t * @see {@link mapTo}\n\t * @see {@link pluck}\n\t *\n\t * @param {function(value: T, index: number): R} project The function to apply\n\t * to each `value` emitted by the source Observable. The `index` parameter is\n\t * the number `i` for the i-th emission that has happened since the\n\t * subscription, starting from the number `0`.\n\t * @param {any} [thisArg] An optional argument to define what `this` is in the\n\t * `project` function.\n\t * @return {Observable<R>} An Observable that emits the values from the source\n\t * Observable transformed by the given `project` function.\n\t * @method map\n\t * @owner Observable\n\t */\n\tfunction map(project, thisArg) {\n\t    if (typeof project !== 'function') {\n\t        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n\t    }\n\t    return this.lift(new MapOperator(project, thisArg));\n\t}\n\texports.map = map;\n\tvar MapOperator = (function () {\n\t    function MapOperator(project, thisArg) {\n\t        this.project = project;\n\t        this.thisArg = thisArg;\n\t    }\n\t    MapOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n\t    };\n\t    return MapOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MapSubscriber = (function (_super) {\n\t    __extends(MapSubscriber, _super);\n\t    function MapSubscriber(destination, project, thisArg) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.count = 0;\n\t        this.thisArg = thisArg || this;\n\t    }\n\t    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n\t    // using try/catch optimizations.\n\t    MapSubscriber.prototype._next = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.project.call(this.thisArg, value, this.count++);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return MapSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 219 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mapTo_1 = __webpack_require__(220);\n\tObservable_1.Observable.prototype.mapTo = mapTo_1.mapTo;\n\n\n/***/ },\n/* 220 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits the given constant value on the output Observable every time the source\n\t * Observable emits a value.\n\t *\n\t * <span class=\"informal\">Like {@link map}, but it maps every source value to\n\t * the same output value every time.</span>\n\t *\n\t * <img src=\"./img/mapTo.png\" width=\"100%\">\n\t *\n\t * Takes a constant `value` as argument, and emits that whenever the source\n\t * Observable emits a value. In other words, ignores the actual source value,\n\t * and simply uses the emission moment to know when to emit the given `value`.\n\t *\n\t * @example <caption>Map every every click to the string 'Hi'</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var greetings = clicks.mapTo('Hi');\n\t * greetings.subscribe(x => console.log(x));\n\t *\n\t * @see {@link map}\n\t *\n\t * @param {any} value The value to map each source value to.\n\t * @return {Observable} An Observable that emits the given `value` every time\n\t * the source Observable emits something.\n\t * @method mapTo\n\t * @owner Observable\n\t */\n\tfunction mapTo(value) {\n\t    return this.lift(new MapToOperator(value));\n\t}\n\texports.mapTo = mapTo;\n\tvar MapToOperator = (function () {\n\t    function MapToOperator(value) {\n\t        this.value = value;\n\t    }\n\t    MapToOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MapToSubscriber(subscriber, this.value));\n\t    };\n\t    return MapToOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MapToSubscriber = (function (_super) {\n\t    __extends(MapToSubscriber, _super);\n\t    function MapToSubscriber(destination, value) {\n\t        _super.call(this, destination);\n\t        this.value = value;\n\t    }\n\t    MapToSubscriber.prototype._next = function (x) {\n\t        this.destination.next(this.value);\n\t    };\n\t    return MapToSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 221 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar materialize_1 = __webpack_require__(222);\n\tObservable_1.Observable.prototype.materialize = materialize_1.materialize;\n\n\n/***/ },\n/* 222 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Notification_1 = __webpack_require__(62);\n\t/**\n\t * Represents all of the notifications from the source Observable as `next`\n\t * emissions marked with their original types within {@link Notification}\n\t * objects.\n\t *\n\t * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n\t * {@link Notification} objects, emitted as `next` on the output Observable.\n\t * </span>\n\t *\n\t * <img src=\"./img/materialize.png\" width=\"100%\">\n\t *\n\t * `materialize` returns an Observable that emits a `next` notification for each\n\t * `next`, `error`, or `complete` emission of the source Observable. When the\n\t * source Observable emits `complete`, the output Observable will emit `next` as\n\t * a Notification of type \"complete\", and then it will emit `complete` as well.\n\t * When the source Observable emits `error`, the output will emit `next` as a\n\t * Notification of type \"error\", and then `complete`.\n\t *\n\t * This operator is useful for producing metadata of the source Observable, to\n\t * be consumed as `next` emissions. Use it in conjunction with\n\t * {@link dematerialize}.\n\t *\n\t * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n\t * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n\t * var upperCase = letters.map(x => x.toUpperCase());\n\t * var materialized = upperCase.materialize();\n\t * materialized.subscribe(x => console.log(x));\n\t *\n\t * @see {@link Notification}\n\t * @see {@link dematerialize}\n\t *\n\t * @return {Observable<Notification<T>>} An Observable that emits\n\t * {@link Notification} objects that wrap the original emissions from the source\n\t * Observable with metadata.\n\t * @method materialize\n\t * @owner Observable\n\t */\n\tfunction materialize() {\n\t    return this.lift(new MaterializeOperator());\n\t}\n\texports.materialize = materialize;\n\tvar MaterializeOperator = (function () {\n\t    function MaterializeOperator() {\n\t    }\n\t    MaterializeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MaterializeSubscriber(subscriber));\n\t    };\n\t    return MaterializeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MaterializeSubscriber = (function (_super) {\n\t    __extends(MaterializeSubscriber, _super);\n\t    function MaterializeSubscriber(destination) {\n\t        _super.call(this, destination);\n\t    }\n\t    MaterializeSubscriber.prototype._next = function (value) {\n\t        this.destination.next(Notification_1.Notification.createNext(value));\n\t    };\n\t    MaterializeSubscriber.prototype._error = function (err) {\n\t        var destination = this.destination;\n\t        destination.next(Notification_1.Notification.createError(err));\n\t        destination.complete();\n\t    };\n\t    MaterializeSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        destination.next(Notification_1.Notification.createComplete());\n\t        destination.complete();\n\t    };\n\t    return MaterializeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 223 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar max_1 = __webpack_require__(224);\n\tObservable_1.Observable.prototype.max = max_1.max;\n\n\n/***/ },\n/* 224 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar reduce_1 = __webpack_require__(225);\n\t/**\n\t * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n\t * and when source Observable completes it emits a single item: the item with the largest number.\n\t *\n\t * <img src=\"./img/max.png\" width=\"100%\">\n\t *\n\t * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n\t * items.\n\t * @return {Observable} an Observable that emits item with the largest number.\n\t * @method max\n\t * @owner Observable\n\t */\n\tfunction max(comparer) {\n\t    var max = (typeof comparer === 'function')\n\t        ? comparer\n\t        : function (x, y) { return x > y ? x : y; };\n\t    return this.lift(new reduce_1.ReduceOperator(max));\n\t}\n\texports.max = max;\n\n\n/***/ },\n/* 225 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Applies an accumulator function over the source Observable, and returns the\n\t * accumulated result when the source completes, given an optional seed value.\n\t *\n\t * <span class=\"informal\">Combines together all values emitted on the source,\n\t * using an accumulator function that knows how to join a new source value into\n\t * the accumulation from the past.</span>\n\t *\n\t * <img src=\"./img/reduce.png\" width=\"100%\">\n\t *\n\t * Like\n\t * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n\t * `reduce` applies an `accumulator` function against an accumulation and each\n\t * value of the source Observable (from the past) to reduce it to a single\n\t * value, emitted on the output Observable. Note that `reduce` will only emit\n\t * one value, only when the source Observable completes. It is equivalent to\n\t * applying operator {@link scan} followed by operator {@link last}.\n\t *\n\t * Returns an Observable that applies a specified `accumulator` function to each\n\t * item emitted by the source Observable. If a `seed` value is specified, then\n\t * that value will be used as the initial value for the accumulator. If no seed\n\t * value is specified, the first item of the source is used as the seed.\n\t *\n\t * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n\t * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n\t *   .takeUntil(Rx.Observable.interval(5000));\n\t * var ones = clicksInFiveSeconds.mapTo(1);\n\t * var seed = 0;\n\t * var count = ones.reduce((acc, one) => acc + one, seed);\n\t * count.subscribe(x => console.log(x));\n\t *\n\t * @see {@link count}\n\t * @see {@link expand}\n\t * @see {@link mergeScan}\n\t * @see {@link scan}\n\t *\n\t * @param {function(acc: R, value: T): R} accumulator The accumulator function\n\t * called on each source value.\n\t * @param {R} [seed] The initial accumulation value.\n\t * @return {Observable<R>} An observable of the accumulated values.\n\t * @return {Observable<R>} An Observable that emits a single value that is the\n\t * result of accumulating the values emitted by the source Observable.\n\t * @method reduce\n\t * @owner Observable\n\t */\n\tfunction reduce(accumulator, seed) {\n\t    return this.lift(new ReduceOperator(accumulator, seed));\n\t}\n\texports.reduce = reduce;\n\tvar ReduceOperator = (function () {\n\t    function ReduceOperator(accumulator, seed) {\n\t        this.accumulator = accumulator;\n\t        this.seed = seed;\n\t    }\n\t    ReduceOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n\t    };\n\t    return ReduceOperator;\n\t}());\n\texports.ReduceOperator = ReduceOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ReduceSubscriber = (function (_super) {\n\t    __extends(ReduceSubscriber, _super);\n\t    function ReduceSubscriber(destination, accumulator, seed) {\n\t        _super.call(this, destination);\n\t        this.accumulator = accumulator;\n\t        this.hasValue = false;\n\t        this.acc = seed;\n\t        this.accumulator = accumulator;\n\t        this.hasSeed = typeof seed !== 'undefined';\n\t    }\n\t    ReduceSubscriber.prototype._next = function (value) {\n\t        if (this.hasValue || (this.hasValue = this.hasSeed)) {\n\t            this._tryReduce(value);\n\t        }\n\t        else {\n\t            this.acc = value;\n\t            this.hasValue = true;\n\t        }\n\t    };\n\t    ReduceSubscriber.prototype._tryReduce = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.accumulator(this.acc, value);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.acc = result;\n\t    };\n\t    ReduceSubscriber.prototype._complete = function () {\n\t        if (this.hasValue || this.hasSeed) {\n\t            this.destination.next(this.acc);\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    return ReduceSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.ReduceSubscriber = ReduceSubscriber;\n\n\n/***/ },\n/* 226 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar merge_1 = __webpack_require__(87);\n\tObservable_1.Observable.prototype.merge = merge_1.merge;\n\n\n/***/ },\n/* 227 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeAll_1 = __webpack_require__(46);\n\tObservable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;\n\n\n/***/ },\n/* 228 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeMap_1 = __webpack_require__(150);\n\tObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\n\tObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n\n\n/***/ },\n/* 229 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeMapTo_1 = __webpack_require__(153);\n\tObservable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;\n\tObservable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;\n\n\n/***/ },\n/* 230 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeScan_1 = __webpack_require__(231);\n\tObservable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;\n\n\n/***/ },\n/* 231 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\t/**\n\t * @param project\n\t * @param seed\n\t * @param concurrent\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method mergeScan\n\t * @owner Observable\n\t */\n\tfunction mergeScan(project, seed, concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    return this.lift(new MergeScanOperator(project, seed, concurrent));\n\t}\n\texports.mergeScan = mergeScan;\n\tvar MergeScanOperator = (function () {\n\t    function MergeScanOperator(project, seed, concurrent) {\n\t        this.project = project;\n\t        this.seed = seed;\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeScanOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MergeScanSubscriber(subscriber, this.project, this.seed, this.concurrent));\n\t    };\n\t    return MergeScanOperator;\n\t}());\n\texports.MergeScanOperator = MergeScanOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeScanSubscriber = (function (_super) {\n\t    __extends(MergeScanSubscriber, _super);\n\t    function MergeScanSubscriber(destination, project, acc, concurrent) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.acc = acc;\n\t        this.concurrent = concurrent;\n\t        this.hasValue = false;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t        this.index = 0;\n\t    }\n\t    MergeScanSubscriber.prototype._next = function (value) {\n\t        if (this.active < this.concurrent) {\n\t            var index = this.index++;\n\t            var ish = tryCatch_1.tryCatch(this.project)(this.acc, value);\n\t            var destination = this.destination;\n\t            if (ish === errorObject_1.errorObject) {\n\t                destination.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                this.active++;\n\t                this._innerSub(ish, value, index);\n\t            }\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n\t        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n\t    };\n\t    MergeScanSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            if (this.hasValue === false) {\n\t                this.destination.next(this.acc);\n\t            }\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var destination = this.destination;\n\t        this.acc = innerValue;\n\t        this.hasValue = true;\n\t        destination.next(innerValue);\n\t    };\n\t    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            if (this.hasValue === false) {\n\t                this.destination.next(this.acc);\n\t            }\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeScanSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeScanSubscriber = MergeScanSubscriber;\n\n\n/***/ },\n/* 232 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar min_1 = __webpack_require__(233);\n\tObservable_1.Observable.prototype.min = min_1.min;\n\n\n/***/ },\n/* 233 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar reduce_1 = __webpack_require__(225);\n\t/**\n\t * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n\t * and when source Observable completes it emits a single item: the item with the smallest number.\n\t *\n\t * <img src=\"./img/min.png\" width=\"100%\">\n\t *\n\t * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n\t * @return {Observable<R>} an Observable that emits item with the smallest number.\n\t * @method min\n\t * @owner Observable\n\t */\n\tfunction min(comparer) {\n\t    var min = (typeof comparer === 'function')\n\t        ? comparer\n\t        : function (x, y) { return x < y ? x : y; };\n\t    return this.lift(new reduce_1.ReduceOperator(min));\n\t}\n\texports.min = min;\n\n\n/***/ },\n/* 234 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar multicast_1 = __webpack_require__(235);\n\tObservable_1.Observable.prototype.multicast = multicast_1.multicast;\n\n\n/***/ },\n/* 235 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar MulticastObservable_1 = __webpack_require__(236);\n\tvar ConnectableObservable_1 = __webpack_require__(237);\n\t/**\n\t * Returns an Observable that emits the results of invoking a specified selector on items\n\t * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n\t *\n\t * <img src=\"./img/multicast.png\" width=\"100%\">\n\t *\n\t * @param {Function|Subject} Factory function to create an intermediate subject through\n\t * which the source sequence's elements will be multicast to the selector function\n\t * or Subject to push source elements into.\n\t * @param {Function} Optional selector function that can use the multicasted source stream\n\t * as many times as needed, without causing multiple subscriptions to the source stream.\n\t * Subscribers to the given source will receive all notifications of the source from the\n\t * time of the subscription forward.\n\t * @return {Observable} an Observable that emits the results of invoking the selector\n\t * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n\t * the underlying stream.\n\t * @method multicast\n\t * @owner Observable\n\t */\n\tfunction multicast(subjectOrSubjectFactory, selector) {\n\t    var subjectFactory;\n\t    if (typeof subjectOrSubjectFactory === 'function') {\n\t        subjectFactory = subjectOrSubjectFactory;\n\t    }\n\t    else {\n\t        subjectFactory = function subjectFactory() {\n\t            return subjectOrSubjectFactory;\n\t        };\n\t    }\n\t    return !selector ?\n\t        new ConnectableObservable_1.ConnectableObservable(this, subjectFactory) :\n\t        new MulticastObservable_1.MulticastObservable(this, subjectFactory, selector);\n\t}\n\texports.multicast = multicast;\n\n\n/***/ },\n/* 236 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ConnectableObservable_1 = __webpack_require__(237);\n\tvar MulticastObservable = (function (_super) {\n\t    __extends(MulticastObservable, _super);\n\t    function MulticastObservable(source, subjectFactory, selector) {\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.subjectFactory = subjectFactory;\n\t        this.selector = selector;\n\t    }\n\t    MulticastObservable.prototype._subscribe = function (subscriber) {\n\t        var _a = this, selector = _a.selector, source = _a.source;\n\t        var connectable = new ConnectableObservable_1.ConnectableObservable(source, this.subjectFactory);\n\t        var subscription = selector(connectable).subscribe(subscriber);\n\t        subscription.add(connectable.connect());\n\t        return subscription;\n\t    };\n\t    return MulticastObservable;\n\t}(Observable_1.Observable));\n\texports.MulticastObservable = MulticastObservable;\n\n\n/***/ },\n/* 237 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * @class ConnectableObservable<T>\n\t */\n\tvar ConnectableObservable = (function (_super) {\n\t    __extends(ConnectableObservable, _super);\n\t    function ConnectableObservable(source, subjectFactory) {\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.subjectFactory = subjectFactory;\n\t        this._refCount = 0;\n\t    }\n\t    ConnectableObservable.prototype._subscribe = function (subscriber) {\n\t        return this.getSubject().subscribe(subscriber);\n\t    };\n\t    ConnectableObservable.prototype.getSubject = function () {\n\t        var subject = this._subject;\n\t        if (!subject || subject.isStopped) {\n\t            this._subject = this.subjectFactory();\n\t        }\n\t        return this._subject;\n\t    };\n\t    ConnectableObservable.prototype.connect = function () {\n\t        var connection = this._connection;\n\t        if (!connection) {\n\t            connection = this._connection = new Subscription_1.Subscription();\n\t            connection.add(this.source\n\t                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\t            if (connection.closed) {\n\t                this._connection = null;\n\t                connection = Subscription_1.Subscription.EMPTY;\n\t            }\n\t            else {\n\t                this._connection = connection;\n\t            }\n\t        }\n\t        return connection;\n\t    };\n\t    ConnectableObservable.prototype.refCount = function () {\n\t        return this.lift(new RefCountOperator(this));\n\t    };\n\t    return ConnectableObservable;\n\t}(Observable_1.Observable));\n\texports.ConnectableObservable = ConnectableObservable;\n\tvar ConnectableSubscriber = (function (_super) {\n\t    __extends(ConnectableSubscriber, _super);\n\t    function ConnectableSubscriber(destination, connectable) {\n\t        _super.call(this, destination);\n\t        this.connectable = connectable;\n\t    }\n\t    ConnectableSubscriber.prototype._error = function (err) {\n\t        this._unsubscribe();\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    ConnectableSubscriber.prototype._complete = function () {\n\t        this._unsubscribe();\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    ConnectableSubscriber.prototype._unsubscribe = function () {\n\t        var connectable = this.connectable;\n\t        if (connectable) {\n\t            this.connectable = null;\n\t            var connection = connectable._connection;\n\t            connectable._refCount = 0;\n\t            connectable._subject = null;\n\t            connectable._connection = null;\n\t            if (connection) {\n\t                connection.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    return ConnectableSubscriber;\n\t}(Subject_1.SubjectSubscriber));\n\tvar RefCountOperator = (function () {\n\t    function RefCountOperator(connectable) {\n\t        this.connectable = connectable;\n\t    }\n\t    RefCountOperator.prototype.call = function (subscriber, source) {\n\t        var connectable = this.connectable;\n\t        connectable._refCount++;\n\t        var refCounter = new RefCountSubscriber(subscriber, connectable);\n\t        var subscription = source._subscribe(refCounter);\n\t        if (!refCounter.closed) {\n\t            refCounter.connection = connectable.connect();\n\t        }\n\t        return subscription;\n\t    };\n\t    return RefCountOperator;\n\t}());\n\tvar RefCountSubscriber = (function (_super) {\n\t    __extends(RefCountSubscriber, _super);\n\t    function RefCountSubscriber(destination, connectable) {\n\t        _super.call(this, destination);\n\t        this.connectable = connectable;\n\t    }\n\t    RefCountSubscriber.prototype._unsubscribe = function () {\n\t        var connectable = this.connectable;\n\t        if (!connectable) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        this.connectable = null;\n\t        var refCount = connectable._refCount;\n\t        if (refCount <= 0) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        connectable._refCount = refCount - 1;\n\t        if (refCount > 1) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        ///\n\t        // Compare the local RefCountSubscriber's connection Subscription to the\n\t        // connection Subscription on the shared ConnectableObservable. In cases\n\t        // where the ConnectableObservable source synchronously emits values, and\n\t        // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n\t        // execution continues to here before the RefCountOperator has a chance to\n\t        // supply the RefCountSubscriber with the shared connection Subscription.\n\t        // For example:\n\t        // ```\n\t        // Observable.range(0, 10)\n\t        //   .publish()\n\t        //   .refCount()\n\t        //   .take(5)\n\t        //   .subscribe();\n\t        // ```\n\t        // In order to account for this case, RefCountSubscriber should only dispose\n\t        // the ConnectableObservable's shared connection Subscription if the\n\t        // connection Subscription exists, *and* either:\n\t        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n\t        //      Subscription yet, or,\n\t        //   b. RefCountSubscriber's connection Subscription reference is identical\n\t        //      to the shared connection Subscription\n\t        ///\n\t        var connection = this.connection;\n\t        var sharedConnection = connectable._connection;\n\t        this.connection = null;\n\t        if (sharedConnection && (!connection || sharedConnection === connection)) {\n\t            sharedConnection.unsubscribe();\n\t        }\n\t    };\n\t    return RefCountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 238 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar observeOn_1 = __webpack_require__(61);\n\tObservable_1.Observable.prototype.observeOn = observeOn_1.observeOn;\n\n\n/***/ },\n/* 239 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar onErrorResumeNext_1 = __webpack_require__(97);\n\tObservable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n\n\n/***/ },\n/* 240 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar pairwise_1 = __webpack_require__(241);\n\tObservable_1.Observable.prototype.pairwise = pairwise_1.pairwise;\n\n\n/***/ },\n/* 241 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Groups pairs of consecutive emissions together and emits them as an array of\n\t * two values.\n\t *\n\t * <span class=\"informal\">Puts the current value and previous value together as\n\t * an array, and emits that.</span>\n\t *\n\t * <img src=\"./img/pairwise.png\" width=\"100%\">\n\t *\n\t * The Nth emission from the source Observable will cause the output Observable\n\t * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n\t * pair. For this reason, `pairwise` emits on the second and subsequent\n\t * emissions from the source Observable, but not on the first emission, because\n\t * there is no previous value in that case.\n\t *\n\t * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var pairs = clicks.pairwise();\n\t * var distance = pairs.map(pair => {\n\t *   var x0 = pair[0].clientX;\n\t *   var y0 = pair[0].clientY;\n\t *   var x1 = pair[1].clientX;\n\t *   var y1 = pair[1].clientY;\n\t *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n\t * });\n\t * distance.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t *\n\t * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n\t * consecutive values from the source Observable.\n\t * @method pairwise\n\t * @owner Observable\n\t */\n\tfunction pairwise() {\n\t    return this.lift(new PairwiseOperator());\n\t}\n\texports.pairwise = pairwise;\n\tvar PairwiseOperator = (function () {\n\t    function PairwiseOperator() {\n\t    }\n\t    PairwiseOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new PairwiseSubscriber(subscriber));\n\t    };\n\t    return PairwiseOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar PairwiseSubscriber = (function (_super) {\n\t    __extends(PairwiseSubscriber, _super);\n\t    function PairwiseSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.hasPrev = false;\n\t    }\n\t    PairwiseSubscriber.prototype._next = function (value) {\n\t        if (this.hasPrev) {\n\t            this.destination.next([this.prev, value]);\n\t        }\n\t        else {\n\t            this.hasPrev = true;\n\t        }\n\t        this.prev = value;\n\t    };\n\t    return PairwiseSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 242 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar partition_1 = __webpack_require__(243);\n\tObservable_1.Observable.prototype.partition = partition_1.partition;\n\n\n/***/ },\n/* 243 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar not_1 = __webpack_require__(244);\n\tvar filter_1 = __webpack_require__(188);\n\t/**\n\t * Splits the source Observable into two, one with values that satisfy a\n\t * predicate, and another with values that don't satisfy the predicate.\n\t *\n\t * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n\t * one like the output of {@link filter}, and the other with values that did not\n\t * pass the condition.</span>\n\t *\n\t * <img src=\"./img/partition.png\" width=\"100%\">\n\t *\n\t * `partition` outputs an array with two Observables that partition the values\n\t * from the source Observable through the given `predicate` function. The first\n\t * Observable in that array emits source values for which the predicate argument\n\t * returns true. The second Observable emits source values for which the\n\t * predicate returns false. The first behaves like {@link filter} and the second\n\t * behaves like {@link filter} with the predicate negated.\n\t *\n\t * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n\t * var clicksOnDivs = parts[0];\n\t * var clicksElsewhere = parts[1];\n\t * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n\t * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n\t *\n\t * @see {@link filter}\n\t *\n\t * @param {function(value: T, index: number): boolean} predicate A function that\n\t * evaluates each value emitted by the source Observable. If it returns `true`,\n\t * the value is emitted on the first Observable in the returned array, if\n\t * `false` the value is emitted on the second Observable in the array. The\n\t * `index` parameter is the number `i` for the i-th source emission that has\n\t * happened since the subscription, starting from the number `0`.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n\t * with values that passed the predicate, and another with values that did not\n\t * pass the predicate.\n\t * @method partition\n\t * @owner Observable\n\t */\n\tfunction partition(predicate, thisArg) {\n\t    return [\n\t        filter_1.filter.call(this, predicate),\n\t        filter_1.filter.call(this, not_1.not(predicate, thisArg))\n\t    ];\n\t}\n\texports.partition = partition;\n\n\n/***/ },\n/* 244 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction not(pred, thisArg) {\n\t    function notPred() {\n\t        return !(notPred.pred.apply(notPred.thisArg, arguments));\n\t    }\n\t    notPred.pred = pred;\n\t    notPred.thisArg = thisArg;\n\t    return notPred;\n\t}\n\texports.not = not;\n\n\n/***/ },\n/* 245 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar pluck_1 = __webpack_require__(246);\n\tObservable_1.Observable.prototype.pluck = pluck_1.pluck;\n\n\n/***/ },\n/* 246 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar map_1 = __webpack_require__(218);\n\t/**\n\t * Maps each source value (an object) to its specified nested property.\n\t *\n\t * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n\t * the nested properties of every emitted object.</span>\n\t *\n\t * <img src=\"./img/pluck.png\" width=\"100%\">\n\t *\n\t * Given a list of strings describing a path to an object property, retrieves\n\t * the value of a specified nested property from all values in the source\n\t * Observable. If a property can't be resolved, it will return `undefined` for\n\t * that value.\n\t *\n\t * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var tagNames = clicks.pluck('target', 'tagName');\n\t * tagNames.subscribe(x => console.log(x));\n\t *\n\t * @see {@link map}\n\t *\n\t * @param {...string} properties The nested properties to pluck from each source\n\t * value (an object).\n\t * @return {Observable} Returns a new Observable of property values from the\n\t * source values.\n\t * @method pluck\n\t * @owner Observable\n\t */\n\tfunction pluck() {\n\t    var properties = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        properties[_i - 0] = arguments[_i];\n\t    }\n\t    var length = properties.length;\n\t    if (length === 0) {\n\t        throw new Error('list of properties cannot be empty.');\n\t    }\n\t    return map_1.map.call(this, plucker(properties, length));\n\t}\n\texports.pluck = pluck;\n\tfunction plucker(props, length) {\n\t    var mapper = function (x) {\n\t        var currentProp = x;\n\t        for (var i = 0; i < length; i++) {\n\t            var p = currentProp[props[i]];\n\t            if (typeof p !== 'undefined') {\n\t                currentProp = p;\n\t            }\n\t            else {\n\t                return undefined;\n\t            }\n\t        }\n\t        return currentProp;\n\t    };\n\t    return mapper;\n\t}\n\n\n/***/ },\n/* 247 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publish_1 = __webpack_require__(248);\n\tObservable_1.Observable.prototype.publish = publish_1.publish;\n\n\n/***/ },\n/* 248 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subject_1 = __webpack_require__(6);\n\tvar multicast_1 = __webpack_require__(235);\n\t/**\n\t * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n\t * before it begins emitting items to those Observers that have subscribed to it.\n\t *\n\t * <img src=\"./img/publish.png\" width=\"100%\">\n\t *\n\t * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n\t * without causing multiple subscriptions to the source sequence.\n\t * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n\t * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n\t * @method publish\n\t * @owner Observable\n\t */\n\tfunction publish(selector) {\n\t    return selector ? multicast_1.multicast.call(this, function () { return new Subject_1.Subject(); }, selector) :\n\t        multicast_1.multicast.call(this, new Subject_1.Subject());\n\t}\n\texports.publish = publish;\n\n\n/***/ },\n/* 249 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publishBehavior_1 = __webpack_require__(250);\n\tObservable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;\n\n\n/***/ },\n/* 250 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar BehaviorSubject_1 = __webpack_require__(251);\n\tvar multicast_1 = __webpack_require__(235);\n\t/**\n\t * @param value\n\t * @return {ConnectableObservable<T>}\n\t * @method publishBehavior\n\t * @owner Observable\n\t */\n\tfunction publishBehavior(value) {\n\t    return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));\n\t}\n\texports.publishBehavior = publishBehavior;\n\n\n/***/ },\n/* 251 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(22);\n\t/**\n\t * @class BehaviorSubject<T>\n\t */\n\tvar BehaviorSubject = (function (_super) {\n\t    __extends(BehaviorSubject, _super);\n\t    function BehaviorSubject(_value) {\n\t        _super.call(this);\n\t        this._value = _value;\n\t    }\n\t    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n\t        get: function () {\n\t            return this.getValue();\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    BehaviorSubject.prototype._subscribe = function (subscriber) {\n\t        var subscription = _super.prototype._subscribe.call(this, subscriber);\n\t        if (subscription && !subscription.closed) {\n\t            subscriber.next(this._value);\n\t        }\n\t        return subscription;\n\t    };\n\t    BehaviorSubject.prototype.getValue = function () {\n\t        if (this.hasError) {\n\t            throw this.thrownError;\n\t        }\n\t        else if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else {\n\t            return this._value;\n\t        }\n\t    };\n\t    BehaviorSubject.prototype.next = function (value) {\n\t        _super.prototype.next.call(this, this._value = value);\n\t    };\n\t    return BehaviorSubject;\n\t}(Subject_1.Subject));\n\texports.BehaviorSubject = BehaviorSubject;\n\n\n/***/ },\n/* 252 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publishReplay_1 = __webpack_require__(253);\n\tObservable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;\n\n\n/***/ },\n/* 253 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ReplaySubject_1 = __webpack_require__(123);\n\tvar multicast_1 = __webpack_require__(235);\n\t/**\n\t * @param bufferSize\n\t * @param windowTime\n\t * @param scheduler\n\t * @return {ConnectableObservable<T>}\n\t * @method publishReplay\n\t * @owner Observable\n\t */\n\tfunction publishReplay(bufferSize, windowTime, scheduler) {\n\t    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n\t    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n\t    return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));\n\t}\n\texports.publishReplay = publishReplay;\n\n\n/***/ },\n/* 254 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publishLast_1 = __webpack_require__(255);\n\tObservable_1.Observable.prototype.publishLast = publishLast_1.publishLast;\n\n\n/***/ },\n/* 255 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AsyncSubject_1 = __webpack_require__(27);\n\tvar multicast_1 = __webpack_require__(235);\n\t/**\n\t * @return {ConnectableObservable<T>}\n\t * @method publishLast\n\t * @owner Observable\n\t */\n\tfunction publishLast() {\n\t    return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());\n\t}\n\texports.publishLast = publishLast;\n\n\n/***/ },\n/* 256 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar race_1 = __webpack_require__(89);\n\tObservable_1.Observable.prototype.race = race_1.race;\n\n\n/***/ },\n/* 257 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar reduce_1 = __webpack_require__(225);\n\tObservable_1.Observable.prototype.reduce = reduce_1.reduce;\n\n\n/***/ },\n/* 258 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar repeat_1 = __webpack_require__(259);\n\tObservable_1.Observable.prototype.repeat = repeat_1.repeat;\n\n\n/***/ },\n/* 259 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyObservable_1 = __webpack_require__(36);\n\t/**\n\t * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n\t * on a particular Scheduler.\n\t *\n\t * <img src=\"./img/repeat.png\" width=\"100%\">\n\t *\n\t * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n\t * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n\t * an empty Observable.\n\t * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n\t * count times.\n\t * @method repeat\n\t * @owner Observable\n\t */\n\tfunction repeat(count) {\n\t    if (count === void 0) { count = -1; }\n\t    if (count === 0) {\n\t        return new EmptyObservable_1.EmptyObservable();\n\t    }\n\t    else if (count < 0) {\n\t        return this.lift(new RepeatOperator(-1, this));\n\t    }\n\t    else {\n\t        return this.lift(new RepeatOperator(count - 1, this));\n\t    }\n\t}\n\texports.repeat = repeat;\n\tvar RepeatOperator = (function () {\n\t    function RepeatOperator(count, source) {\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RepeatOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n\t    };\n\t    return RepeatOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RepeatSubscriber = (function (_super) {\n\t    __extends(RepeatSubscriber, _super);\n\t    function RepeatSubscriber(destination, count, source) {\n\t        _super.call(this, destination);\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RepeatSubscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            var _a = this, source = _a.source, count = _a.count;\n\t            if (count === 0) {\n\t                return _super.prototype.complete.call(this);\n\t            }\n\t            else if (count > -1) {\n\t                this.count = count - 1;\n\t            }\n\t            this.unsubscribe();\n\t            this.isStopped = false;\n\t            this.closed = false;\n\t            source.subscribe(this);\n\t        }\n\t    };\n\t    return RepeatSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 260 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar retry_1 = __webpack_require__(261);\n\tObservable_1.Observable.prototype.retry = retry_1.retry;\n\n\n/***/ },\n/* 261 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n\t * predicate returns true for that specific exception and retry count.\n\t * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n\t * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n\t *\n\t * <img src=\"./img/retry.png\" width=\"100%\">\n\t *\n\t * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n\t * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n\t * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n\t * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n\t * @param {number} number of retry attempts before failing.\n\t * @return {Observable} the source Observable modified with the retry logic.\n\t * @method retry\n\t * @owner Observable\n\t */\n\tfunction retry(count) {\n\t    if (count === void 0) { count = -1; }\n\t    return this.lift(new RetryOperator(count, this));\n\t}\n\texports.retry = retry;\n\tvar RetryOperator = (function () {\n\t    function RetryOperator(count, source) {\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RetryOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n\t    };\n\t    return RetryOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RetrySubscriber = (function (_super) {\n\t    __extends(RetrySubscriber, _super);\n\t    function RetrySubscriber(destination, count, source) {\n\t        _super.call(this, destination);\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RetrySubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var _a = this, source = _a.source, count = _a.count;\n\t            if (count === 0) {\n\t                return _super.prototype.error.call(this, err);\n\t            }\n\t            else if (count > -1) {\n\t                this.count = count - 1;\n\t            }\n\t            this.unsubscribe();\n\t            this.isStopped = false;\n\t            this.closed = false;\n\t            source.subscribe(this);\n\t        }\n\t    };\n\t    return RetrySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 262 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar retryWhen_1 = __webpack_require__(263);\n\tObservable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;\n\n\n/***/ },\n/* 263 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n\t * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n\t * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n\t * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n\t * Scheduler.\n\t *\n\t * <img src=\"./img/retryWhen.png\" width=\"100%\">\n\t *\n\t * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n\t * aborting the retry.\n\t * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n\t * @return {Observable} the source Observable modified with retry logic.\n\t * @method retryWhen\n\t * @owner Observable\n\t */\n\tfunction retryWhen(notifier) {\n\t    return this.lift(new RetryWhenOperator(notifier, this));\n\t}\n\texports.retryWhen = retryWhen;\n\tvar RetryWhenOperator = (function () {\n\t    function RetryWhenOperator(notifier, source) {\n\t        this.notifier = notifier;\n\t        this.source = source;\n\t    }\n\t    RetryWhenOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n\t    };\n\t    return RetryWhenOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RetryWhenSubscriber = (function (_super) {\n\t    __extends(RetryWhenSubscriber, _super);\n\t    function RetryWhenSubscriber(destination, notifier, source) {\n\t        _super.call(this, destination);\n\t        this.notifier = notifier;\n\t        this.source = source;\n\t    }\n\t    RetryWhenSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var errors = this.errors;\n\t            var retries = this.retries;\n\t            var retriesSubscription = this.retriesSubscription;\n\t            if (!retries) {\n\t                errors = new Subject_1.Subject();\n\t                retries = tryCatch_1.tryCatch(this.notifier)(errors);\n\t                if (retries === errorObject_1.errorObject) {\n\t                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n\t                }\n\t                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n\t            }\n\t            else {\n\t                this.errors = null;\n\t                this.retriesSubscription = null;\n\t            }\n\t            this.unsubscribe();\n\t            this.closed = false;\n\t            this.errors = errors;\n\t            this.retries = retries;\n\t            this.retriesSubscription = retriesSubscription;\n\t            errors.next(err);\n\t        }\n\t    };\n\t    RetryWhenSubscriber.prototype._unsubscribe = function () {\n\t        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n\t        if (errors) {\n\t            errors.unsubscribe();\n\t            this.errors = null;\n\t        }\n\t        if (retriesSubscription) {\n\t            retriesSubscription.unsubscribe();\n\t            this.retriesSubscription = null;\n\t        }\n\t        this.retries = null;\n\t    };\n\t    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n\t        this.errors = null;\n\t        this.retries = null;\n\t        this.retriesSubscription = null;\n\t        this.unsubscribe();\n\t        this.isStopped = false;\n\t        this.closed = false;\n\t        this.errors = errors;\n\t        this.retries = retries;\n\t        this.retriesSubscription = retriesSubscription;\n\t        this.source.subscribe(this);\n\t    };\n\t    return RetryWhenSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 264 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar sample_1 = __webpack_require__(265);\n\tObservable_1.Observable.prototype.sample = sample_1.sample;\n\n\n/***/ },\n/* 265 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Emits the most recently emitted value from the source Observable whenever\n\t * another Observable, the `notifier`, emits.\n\t *\n\t * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n\t * the `notifier` Observable emits something.</span>\n\t *\n\t * <img src=\"./img/sample.png\" width=\"100%\">\n\t *\n\t * Whenever the `notifier` Observable emits a value or completes, `sample`\n\t * looks at the source Observable and emits whichever value it has most recently\n\t * emitted since the previous sampling, unless the source has not emitted\n\t * anything since the previous sampling. The `notifier` is subscribed to as soon\n\t * as the output Observable is subscribed.\n\t *\n\t * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n\t * var seconds = Rx.Observable.interval(1000);\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = seconds.sample(clicks);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounce}\n\t * @see {@link sampleTime}\n\t * @see {@link throttle}\n\t *\n\t * @param {Observable<any>} notifier The Observable to use for sampling the\n\t * source Observable.\n\t * @return {Observable<T>} An Observable that emits the results of sampling the\n\t * values emitted by the source Observable whenever the notifier Observable\n\t * emits value or completes.\n\t * @method sample\n\t * @owner Observable\n\t */\n\tfunction sample(notifier) {\n\t    return this.lift(new SampleOperator(notifier));\n\t}\n\texports.sample = sample;\n\tvar SampleOperator = (function () {\n\t    function SampleOperator(notifier) {\n\t        this.notifier = notifier;\n\t    }\n\t    SampleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n\t    };\n\t    return SampleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SampleSubscriber = (function (_super) {\n\t    __extends(SampleSubscriber, _super);\n\t    function SampleSubscriber(destination, notifier) {\n\t        _super.call(this, destination);\n\t        this.hasValue = false;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n\t    }\n\t    SampleSubscriber.prototype._next = function (value) {\n\t        this.value = value;\n\t        this.hasValue = true;\n\t    };\n\t    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.emitValue();\n\t    };\n\t    SampleSubscriber.prototype.notifyComplete = function () {\n\t        this.emitValue();\n\t    };\n\t    SampleSubscriber.prototype.emitValue = function () {\n\t        if (this.hasValue) {\n\t            this.hasValue = false;\n\t            this.destination.next(this.value);\n\t        }\n\t    };\n\t    return SampleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 266 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar sampleTime_1 = __webpack_require__(267);\n\tObservable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;\n\n\n/***/ },\n/* 267 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(80);\n\t/**\n\t * Emits the most recently emitted value from the source Observable within\n\t * periodic time intervals.\n\t *\n\t * <span class=\"informal\">Samples the source Observable at periodic time\n\t * intervals, emitting what it samples.</span>\n\t *\n\t * <img src=\"./img/sampleTime.png\" width=\"100%\">\n\t *\n\t * `sampleTime` periodically looks at the source Observable and emits whichever\n\t * value it has most recently emitted since the previous sampling, unless the\n\t * source has not emitted anything since the previous sampling. The sampling\n\t * happens periodically in time every `period` milliseconds (or the time unit\n\t * defined by the optional `scheduler` argument). The sampling starts as soon as\n\t * the output Observable is subscribed.\n\t *\n\t * @example <caption>Every second, emit the most recent click at most once</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.sampleTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounceTime}\n\t * @see {@link delay}\n\t * @see {@link sample}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {number} period The sampling period expressed in milliseconds or the\n\t * time unit determined internally by the optional `scheduler`.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the sampling.\n\t * @return {Observable<T>} An Observable that emits the results of sampling the\n\t * values emitted by the source Observable at the specified time interval.\n\t * @method sampleTime\n\t * @owner Observable\n\t */\n\tfunction sampleTime(period, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new SampleTimeOperator(period, scheduler));\n\t}\n\texports.sampleTime = sampleTime;\n\tvar SampleTimeOperator = (function () {\n\t    function SampleTimeOperator(period, scheduler) {\n\t        this.period = period;\n\t        this.scheduler = scheduler;\n\t    }\n\t    SampleTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n\t    };\n\t    return SampleTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SampleTimeSubscriber = (function (_super) {\n\t    __extends(SampleTimeSubscriber, _super);\n\t    function SampleTimeSubscriber(destination, period, scheduler) {\n\t        _super.call(this, destination);\n\t        this.period = period;\n\t        this.scheduler = scheduler;\n\t        this.hasValue = false;\n\t        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\n\t    }\n\t    SampleTimeSubscriber.prototype._next = function (value) {\n\t        this.lastValue = value;\n\t        this.hasValue = true;\n\t    };\n\t    SampleTimeSubscriber.prototype.notifyNext = function () {\n\t        if (this.hasValue) {\n\t            this.hasValue = false;\n\t            this.destination.next(this.lastValue);\n\t        }\n\t    };\n\t    return SampleTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNotification(state) {\n\t    var subscriber = state.subscriber, period = state.period;\n\t    subscriber.notifyNext();\n\t    this.schedule(state, period);\n\t}\n\n\n/***/ },\n/* 268 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar scan_1 = __webpack_require__(269);\n\tObservable_1.Observable.prototype.scan = scan_1.scan;\n\n\n/***/ },\n/* 269 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Applies an accumulator function over the source Observable, and returns each\n\t * intermediate result, with an optional seed value.\n\t *\n\t * <span class=\"informal\">It's like {@link reduce}, but emits the current\n\t * accumulation whenever the source emits a value.</span>\n\t *\n\t * <img src=\"./img/scan.png\" width=\"100%\">\n\t *\n\t * Combines together all values emitted on the source, using an accumulator\n\t * function that knows how to join a new source value into the accumulation from\n\t * the past. Is similar to {@link reduce}, but emits the intermediate\n\t * accumulations.\n\t *\n\t * Returns an Observable that applies a specified `accumulator` function to each\n\t * item emitted by the source Observable. If a `seed` value is specified, then\n\t * that value will be used as the initial value for the accumulator. If no seed\n\t * value is specified, the first item of the source is used as the seed.\n\t *\n\t * @example <caption>Count the number of click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var ones = clicks.mapTo(1);\n\t * var seed = 0;\n\t * var count = ones.scan((acc, one) => acc + one, seed);\n\t * count.subscribe(x => console.log(x));\n\t *\n\t * @see {@link expand}\n\t * @see {@link mergeScan}\n\t * @see {@link reduce}\n\t *\n\t * @param {function(acc: R, value: T, index: number): R} accumulator\n\t * The accumulator function called on each source value.\n\t * @param {T|R} [seed] The initial accumulation value.\n\t * @return {Observable<R>} An observable of the accumulated values.\n\t * @method scan\n\t * @owner Observable\n\t */\n\tfunction scan(accumulator, seed) {\n\t    return this.lift(new ScanOperator(accumulator, seed));\n\t}\n\texports.scan = scan;\n\tvar ScanOperator = (function () {\n\t    function ScanOperator(accumulator, seed) {\n\t        this.accumulator = accumulator;\n\t        this.seed = seed;\n\t    }\n\t    ScanOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n\t    };\n\t    return ScanOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ScanSubscriber = (function (_super) {\n\t    __extends(ScanSubscriber, _super);\n\t    function ScanSubscriber(destination, accumulator, seed) {\n\t        _super.call(this, destination);\n\t        this.accumulator = accumulator;\n\t        this.index = 0;\n\t        this.accumulatorSet = false;\n\t        this.seed = seed;\n\t        this.accumulatorSet = typeof seed !== 'undefined';\n\t    }\n\t    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n\t        get: function () {\n\t            return this._seed;\n\t        },\n\t        set: function (value) {\n\t            this.accumulatorSet = true;\n\t            this._seed = value;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    ScanSubscriber.prototype._next = function (value) {\n\t        if (!this.accumulatorSet) {\n\t            this.seed = value;\n\t            this.destination.next(value);\n\t        }\n\t        else {\n\t            return this._tryNext(value);\n\t        }\n\t    };\n\t    ScanSubscriber.prototype._tryNext = function (value) {\n\t        var index = this.index++;\n\t        var result;\n\t        try {\n\t            result = this.accumulator(this.seed, value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t        this.seed = result;\n\t        this.destination.next(result);\n\t    };\n\t    return ScanSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 270 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar share_1 = __webpack_require__(271);\n\tObservable_1.Observable.prototype.share = share_1.share;\n\n\n/***/ },\n/* 271 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar multicast_1 = __webpack_require__(235);\n\tvar Subject_1 = __webpack_require__(6);\n\tfunction shareSubjectFactory() {\n\t    return new Subject_1.Subject();\n\t}\n\t/**\n\t * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n\t * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n\t * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n\t * This is an alias for .publish().refCount().\n\t *\n\t * <img src=\"./img/share.png\" width=\"100%\">\n\t *\n\t * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n\t * @method share\n\t * @owner Observable\n\t */\n\tfunction share() {\n\t    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();\n\t}\n\texports.share = share;\n\t;\n\n\n/***/ },\n/* 272 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar single_1 = __webpack_require__(273);\n\tObservable_1.Observable.prototype.single = single_1.single;\n\n\n/***/ },\n/* 273 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyError_1 = __webpack_require__(197);\n\t/**\n\t * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n\t * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n\t * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n\t *\n\t * <img src=\"./img/single.png\" width=\"100%\">\n\t *\n\t * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n\t * callback if the Observable completes before any `next` notification was sent.\n\t * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n\t * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n\t * the predicate.\n\t .\n\t * @method single\n\t * @owner Observable\n\t */\n\tfunction single(predicate) {\n\t    return this.lift(new SingleOperator(predicate, this));\n\t}\n\texports.single = single;\n\tvar SingleOperator = (function () {\n\t    function SingleOperator(predicate, source) {\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t    }\n\t    SingleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n\t    };\n\t    return SingleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SingleSubscriber = (function (_super) {\n\t    __extends(SingleSubscriber, _super);\n\t    function SingleSubscriber(destination, predicate, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.seenValue = false;\n\t        this.index = 0;\n\t    }\n\t    SingleSubscriber.prototype.applySingleValue = function (value) {\n\t        if (this.seenValue) {\n\t            this.destination.error('Sequence contains more than one element');\n\t        }\n\t        else {\n\t            this.seenValue = true;\n\t            this.singleValue = value;\n\t        }\n\t    };\n\t    SingleSubscriber.prototype._next = function (value) {\n\t        var predicate = this.predicate;\n\t        this.index++;\n\t        if (predicate) {\n\t            this.tryNext(value);\n\t        }\n\t        else {\n\t            this.applySingleValue(value);\n\t        }\n\t    };\n\t    SingleSubscriber.prototype.tryNext = function (value) {\n\t        try {\n\t            var result = this.predicate(value, this.index, this.source);\n\t            if (result) {\n\t                this.applySingleValue(value);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    SingleSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (this.index > 0) {\n\t            destination.next(this.seenValue ? this.singleValue : undefined);\n\t            destination.complete();\n\t        }\n\t        else {\n\t            destination.error(new EmptyError_1.EmptyError);\n\t        }\n\t    };\n\t    return SingleSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 274 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar skip_1 = __webpack_require__(275);\n\tObservable_1.Observable.prototype.skip = skip_1.skip;\n\n\n/***/ },\n/* 275 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that skips `n` items emitted by an Observable.\n\t *\n\t * <img src=\"./img/skip.png\" width=\"100%\">\n\t *\n\t * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n\t * @return {Observable} an Observable that skips values emitted by the source Observable.\n\t *\n\t * @method skip\n\t * @owner Observable\n\t */\n\tfunction skip(total) {\n\t    return this.lift(new SkipOperator(total));\n\t}\n\texports.skip = skip;\n\tvar SkipOperator = (function () {\n\t    function SkipOperator(total) {\n\t        this.total = total;\n\t    }\n\t    SkipOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SkipSubscriber(subscriber, this.total));\n\t    };\n\t    return SkipOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SkipSubscriber = (function (_super) {\n\t    __extends(SkipSubscriber, _super);\n\t    function SkipSubscriber(destination, total) {\n\t        _super.call(this, destination);\n\t        this.total = total;\n\t        this.count = 0;\n\t    }\n\t    SkipSubscriber.prototype._next = function (x) {\n\t        if (++this.count > this.total) {\n\t            this.destination.next(x);\n\t        }\n\t    };\n\t    return SkipSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 276 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar skipUntil_1 = __webpack_require__(277);\n\tObservable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;\n\n\n/***/ },\n/* 277 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n\t *\n\t * <img src=\"./img/skipUntil.png\" width=\"100%\">\n\t *\n\t * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n\t * be mirrored by the resulting Observable.\n\t * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n\t * an item, then emits the remaining items.\n\t * @method skipUntil\n\t * @owner Observable\n\t */\n\tfunction skipUntil(notifier) {\n\t    return this.lift(new SkipUntilOperator(notifier));\n\t}\n\texports.skipUntil = skipUntil;\n\tvar SkipUntilOperator = (function () {\n\t    function SkipUntilOperator(notifier) {\n\t        this.notifier = notifier;\n\t    }\n\t    SkipUntilOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n\t    };\n\t    return SkipUntilOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SkipUntilSubscriber = (function (_super) {\n\t    __extends(SkipUntilSubscriber, _super);\n\t    function SkipUntilSubscriber(destination, notifier) {\n\t        _super.call(this, destination);\n\t        this.hasValue = false;\n\t        this.isInnerStopped = false;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n\t    }\n\t    SkipUntilSubscriber.prototype._next = function (value) {\n\t        if (this.hasValue) {\n\t            _super.prototype._next.call(this, value);\n\t        }\n\t    };\n\t    SkipUntilSubscriber.prototype._complete = function () {\n\t        if (this.isInnerStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t        else {\n\t            this.unsubscribe();\n\t        }\n\t    };\n\t    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.hasValue = true;\n\t    };\n\t    SkipUntilSubscriber.prototype.notifyComplete = function () {\n\t        this.isInnerStopped = true;\n\t        if (this.isStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    return SkipUntilSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 278 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar skipWhile_1 = __webpack_require__(279);\n\tObservable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;\n\n\n/***/ },\n/* 279 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n\t * true, but emits all further source items as soon as the condition becomes false.\n\t *\n\t * <img src=\"./img/skipWhile.png\" width=\"100%\">\n\t *\n\t * @param {Function} predicate - a function to test each item emitted from the source Observable.\n\t * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n\t * specified predicate becomes false.\n\t * @method skipWhile\n\t * @owner Observable\n\t */\n\tfunction skipWhile(predicate) {\n\t    return this.lift(new SkipWhileOperator(predicate));\n\t}\n\texports.skipWhile = skipWhile;\n\tvar SkipWhileOperator = (function () {\n\t    function SkipWhileOperator(predicate) {\n\t        this.predicate = predicate;\n\t    }\n\t    SkipWhileOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n\t    };\n\t    return SkipWhileOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SkipWhileSubscriber = (function (_super) {\n\t    __extends(SkipWhileSubscriber, _super);\n\t    function SkipWhileSubscriber(destination, predicate) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.skipping = true;\n\t        this.index = 0;\n\t    }\n\t    SkipWhileSubscriber.prototype._next = function (value) {\n\t        var destination = this.destination;\n\t        if (this.skipping) {\n\t            this.tryCallPredicate(value);\n\t        }\n\t        if (!this.skipping) {\n\t            destination.next(value);\n\t        }\n\t    };\n\t    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n\t        try {\n\t            var result = this.predicate(value, this.index++);\n\t            this.skipping = Boolean(result);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    return SkipWhileSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 280 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar startWith_1 = __webpack_require__(281);\n\tObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n\n\n/***/ },\n/* 281 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ArrayObservable_1 = __webpack_require__(34);\n\tvar ScalarObservable_1 = __webpack_require__(35);\n\tvar EmptyObservable_1 = __webpack_require__(36);\n\tvar concat_1 = __webpack_require__(45);\n\tvar isScheduler_1 = __webpack_require__(33);\n\t/**\n\t * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n\t * source Observable.\n\t *\n\t * <img src=\"./img/startWith.png\" width=\"100%\">\n\t *\n\t * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n\t * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n\t * emitted by the source Observable.\n\t * @method startWith\n\t * @owner Observable\n\t */\n\tfunction startWith() {\n\t    var array = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        array[_i - 0] = arguments[_i];\n\t    }\n\t    var scheduler = array[array.length - 1];\n\t    if (isScheduler_1.isScheduler(scheduler)) {\n\t        array.pop();\n\t    }\n\t    else {\n\t        scheduler = null;\n\t    }\n\t    var len = array.length;\n\t    if (len === 1) {\n\t        return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);\n\t    }\n\t    else if (len > 1) {\n\t        return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);\n\t    }\n\t    else {\n\t        return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);\n\t    }\n\t}\n\texports.startWith = startWith;\n\n\n/***/ },\n/* 282 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeOn_1 = __webpack_require__(283);\n\tObservable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;\n\n\n/***/ },\n/* 283 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar SubscribeOnObservable_1 = __webpack_require__(284);\n\t/**\n\t * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n\t *\n\t * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n\t *\n\t * @param {Scheduler} the Scheduler to perform subscription actions on.\n\t * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n\t .\n\t * @method subscribeOn\n\t * @owner Observable\n\t */\n\tfunction subscribeOn(scheduler, delay) {\n\t    if (delay === void 0) { delay = 0; }\n\t    return new SubscribeOnObservable_1.SubscribeOnObservable(this, delay, scheduler);\n\t}\n\texports.subscribeOn = subscribeOn;\n\n\n/***/ },\n/* 284 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar asap_1 = __webpack_require__(285);\n\tvar isNumeric_1 = __webpack_require__(79);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar SubscribeOnObservable = (function (_super) {\n\t    __extends(SubscribeOnObservable, _super);\n\t    function SubscribeOnObservable(source, delayTime, scheduler) {\n\t        if (delayTime === void 0) { delayTime = 0; }\n\t        if (scheduler === void 0) { scheduler = asap_1.asap; }\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.delayTime = delayTime;\n\t        this.scheduler = scheduler;\n\t        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {\n\t            this.delayTime = 0;\n\t        }\n\t        if (!scheduler || typeof scheduler.schedule !== 'function') {\n\t            this.scheduler = asap_1.asap;\n\t        }\n\t    }\n\t    SubscribeOnObservable.create = function (source, delay, scheduler) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (scheduler === void 0) { scheduler = asap_1.asap; }\n\t        return new SubscribeOnObservable(source, delay, scheduler);\n\t    };\n\t    SubscribeOnObservable.dispatch = function (arg) {\n\t        var source = arg.source, subscriber = arg.subscriber;\n\t        return source.subscribe(subscriber);\n\t    };\n\t    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n\t        var delay = this.delayTime;\n\t        var source = this.source;\n\t        var scheduler = this.scheduler;\n\t        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n\t            source: source, subscriber: subscriber\n\t        });\n\t    };\n\t    return SubscribeOnObservable;\n\t}(Observable_1.Observable));\n\texports.SubscribeOnObservable = SubscribeOnObservable;\n\n\n/***/ },\n/* 285 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AsapAction_1 = __webpack_require__(286);\n\tvar AsapScheduler_1 = __webpack_require__(290);\n\texports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);\n\n\n/***/ },\n/* 286 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Immediate_1 = __webpack_require__(287);\n\tvar AsyncAction_1 = __webpack_require__(81);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AsapAction = (function (_super) {\n\t    __extends(AsapAction, _super);\n\t    function AsapAction(scheduler, work) {\n\t        _super.call(this, scheduler, work);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t    }\n\t    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        // If delay is greater than 0, request as an async action.\n\t        if (delay !== null && delay > 0) {\n\t            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n\t        }\n\t        // Push the action to the end of the scheduler queue.\n\t        scheduler.actions.push(this);\n\t        // If a microtask has already been scheduled, don't schedule another\n\t        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n\t        // the current scheduled microtask id.\n\t        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n\t    };\n\t    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        // If delay exists and is greater than 0, recycle as an async action.\n\t        if (delay !== null && delay > 0) {\n\t            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n\t        }\n\t        // If the scheduler queue is empty, cancel the requested microtask and\n\t        // set the scheduled flag to undefined so the next AsapAction will schedule\n\t        // its own.\n\t        if (scheduler.actions.length === 0) {\n\t            Immediate_1.Immediate.clearImmediate(id);\n\t            scheduler.scheduled = undefined;\n\t        }\n\t        // Return undefined so the action knows to request a new async id if it's rescheduled.\n\t        return undefined;\n\t    };\n\t    return AsapAction;\n\t}(AsyncAction_1.AsyncAction));\n\texports.AsapAction = AsapAction;\n\n\n/***/ },\n/* 287 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(clearImmediate, setImmediate) {/**\n\tSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n\t*/\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar ImmediateDefinition = (function () {\n\t    function ImmediateDefinition(root) {\n\t        this.root = root;\n\t        if (root.setImmediate && typeof root.setImmediate === 'function') {\n\t            this.setImmediate = root.setImmediate.bind(root);\n\t            this.clearImmediate = root.clearImmediate.bind(root);\n\t        }\n\t        else {\n\t            this.nextHandle = 1;\n\t            this.tasksByHandle = {};\n\t            this.currentlyRunningATask = false;\n\t            // Don't get fooled by e.g. browserify environments.\n\t            if (this.canUseProcessNextTick()) {\n\t                // For Node.js before 0.9\n\t                this.setImmediate = this.createProcessNextTickSetImmediate();\n\t            }\n\t            else if (this.canUsePostMessage()) {\n\t                // For non-IE10 modern browsers\n\t                this.setImmediate = this.createPostMessageSetImmediate();\n\t            }\n\t            else if (this.canUseMessageChannel()) {\n\t                // For web workers, where supported\n\t                this.setImmediate = this.createMessageChannelSetImmediate();\n\t            }\n\t            else if (this.canUseReadyStateChange()) {\n\t                // For IE 6–8\n\t                this.setImmediate = this.createReadyStateChangeSetImmediate();\n\t            }\n\t            else {\n\t                // For older browsers\n\t                this.setImmediate = this.createSetTimeoutSetImmediate();\n\t            }\n\t            var ci = function clearImmediate(handle) {\n\t                delete clearImmediate.instance.tasksByHandle[handle];\n\t            };\n\t            ci.instance = this;\n\t            this.clearImmediate = ci;\n\t        }\n\t    }\n\t    ImmediateDefinition.prototype.identify = function (o) {\n\t        return this.root.Object.prototype.toString.call(o);\n\t    };\n\t    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n\t        return this.identify(this.root.process) === '[object process]';\n\t    };\n\t    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n\t        return Boolean(this.root.MessageChannel);\n\t    };\n\t    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n\t        var document = this.root.document;\n\t        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n\t    };\n\t    ImmediateDefinition.prototype.canUsePostMessage = function () {\n\t        var root = this.root;\n\t        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n\t        // where `root.postMessage` means something completely different and can't be used for this purpose.\n\t        if (root.postMessage && !root.importScripts) {\n\t            var postMessageIsAsynchronous_1 = true;\n\t            var oldOnMessage = root.onmessage;\n\t            root.onmessage = function () {\n\t                postMessageIsAsynchronous_1 = false;\n\t            };\n\t            root.postMessage('', '*');\n\t            root.onmessage = oldOnMessage;\n\t            return postMessageIsAsynchronous_1;\n\t        }\n\t        return false;\n\t    };\n\t    // This function accepts the same arguments as setImmediate, but\n\t    // returns a function that requires no arguments.\n\t    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n\t        var args = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            args[_i - 1] = arguments[_i];\n\t        }\n\t        var fn = function result() {\n\t            var _a = result, handler = _a.handler, args = _a.args;\n\t            if (typeof handler === 'function') {\n\t                handler.apply(undefined, args);\n\t            }\n\t            else {\n\t                (new Function('' + handler))();\n\t            }\n\t        };\n\t        fn.handler = handler;\n\t        fn.args = args;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n\t        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n\t        return this.nextHandle++;\n\t    };\n\t    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n\t        var fn = function setImmediate() {\n\t            var instance = setImmediate.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n\t        // Installs an event handler on `global` for the `message` event: see\n\t        // * https://developer.mozilla.org/en/DOM/window.postMessage\n\t        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\t        var root = this.root;\n\t        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n\t        var onGlobalMessage = function globalMessageHandler(event) {\n\t            var instance = globalMessageHandler.instance;\n\t            if (event.source === root &&\n\t                typeof event.data === 'string' &&\n\t                event.data.indexOf(messagePrefix) === 0) {\n\t                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n\t            }\n\t        };\n\t        onGlobalMessage.instance = this;\n\t        root.addEventListener('message', onGlobalMessage, false);\n\t        var fn = function setImmediate() {\n\t            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            instance.root.postMessage(messagePrefix + handle, '*');\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        fn.messagePrefix = messagePrefix;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n\t        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n\t        // So if we're currently running a task, we'll need to delay this invocation.\n\t        if (this.currentlyRunningATask) {\n\t            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n\t            // 'too much recursion' error.\n\t            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n\t        }\n\t        else {\n\t            var task = this.tasksByHandle[handle];\n\t            if (task) {\n\t                this.currentlyRunningATask = true;\n\t                try {\n\t                    task();\n\t                }\n\t                finally {\n\t                    this.clearImmediate(handle);\n\t                    this.currentlyRunningATask = false;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n\t        var _this = this;\n\t        var channel = new this.root.MessageChannel();\n\t        channel.port1.onmessage = function (event) {\n\t            var handle = event.data;\n\t            _this.runIfPresent(handle);\n\t        };\n\t        var fn = function setImmediate() {\n\t            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            channel.port2.postMessage(handle);\n\t            return handle;\n\t        };\n\t        fn.channel = channel;\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n\t        var fn = function setImmediate() {\n\t            var instance = setImmediate.instance;\n\t            var root = instance.root;\n\t            var doc = root.document;\n\t            var html = doc.documentElement;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n\t            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\t            var script = doc.createElement('script');\n\t            script.onreadystatechange = function () {\n\t                instance.runIfPresent(handle);\n\t                script.onreadystatechange = null;\n\t                html.removeChild(script);\n\t                script = null;\n\t            };\n\t            html.appendChild(script);\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n\t        var fn = function setImmediate() {\n\t            var instance = setImmediate.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    return ImmediateDefinition;\n\t}());\n\texports.ImmediateDefinition = ImmediateDefinition;\n\texports.Immediate = new ImmediateDefinition(root_1.root);\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(288).clearImmediate, __webpack_require__(288).setImmediate))\n\n/***/ },\n/* 288 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(289).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(288).setImmediate, __webpack_require__(288).clearImmediate))\n\n/***/ },\n/* 289 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\t(function () {\n\t  try {\n\t    cachedSetTimeout = setTimeout;\n\t  } catch (e) {\n\t    cachedSetTimeout = function () {\n\t      throw new Error('setTimeout is not defined');\n\t    }\n\t  }\n\t  try {\n\t    cachedClearTimeout = clearTimeout;\n\t  } catch (e) {\n\t    cachedClearTimeout = function () {\n\t      throw new Error('clearTimeout is not defined');\n\t    }\n\t  }\n\t} ())\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = cachedSetTimeout.call(null, cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    cachedClearTimeout.call(null, timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        cachedSetTimeout.call(null, drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 290 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar AsyncScheduler_1 = __webpack_require__(83);\n\tvar AsapScheduler = (function (_super) {\n\t    __extends(AsapScheduler, _super);\n\t    function AsapScheduler() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AsapScheduler.prototype.flush = function () {\n\t        this.active = true;\n\t        this.scheduled = undefined;\n\t        var actions = this.actions;\n\t        var error;\n\t        var index = -1;\n\t        var count = actions.length;\n\t        var action = actions.shift();\n\t        do {\n\t            if (error = action.execute(action.state, action.delay)) {\n\t                break;\n\t            }\n\t        } while (++index < count && (action = actions.shift()));\n\t        this.active = false;\n\t        if (error) {\n\t            while (++index < count && (action = actions.shift())) {\n\t                action.unsubscribe();\n\t            }\n\t            throw error;\n\t        }\n\t    };\n\t    return AsapScheduler;\n\t}(AsyncScheduler_1.AsyncScheduler));\n\texports.AsapScheduler = AsapScheduler;\n\n\n/***/ },\n/* 291 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar switch_1 = __webpack_require__(292);\n\tObservable_1.Observable.prototype.switch = switch_1._switch;\n\n\n/***/ },\n/* 292 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by\n\t * subscribing to only the most recently emitted of those inner Observables.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n\t * previous inner Observable once a new one appears.</span>\n\t *\n\t * <img src=\"./img/switch.png\" width=\"100%\">\n\t *\n\t * `switch` subscribes to an Observable that emits Observables, also known as a\n\t * higher-order Observable. Each time it observes one of these emitted inner\n\t * Observables, the output Observable subscribes to the inner Observable and\n\t * begins emitting the items emitted by that. So far, it behaves\n\t * like {@link mergeAll}. However, when a new inner Observable is emitted,\n\t * `switch` unsubscribes from the earlier-emitted inner Observable and\n\t * subscribes to the new inner Observable and begins emitting items from it. It\n\t * continues to behave like this for subsequent inner Observables.\n\t *\n\t * @example <caption>Rerun an interval Observable on every click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * // Each click event is mapped to an Observable that ticks every second\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n\t * var switched = higherOrder.switch();\n\t * // The outcome is that `switched` is essentially a timer that restarts\n\t * // on every click. The interval Observables from older clicks do not merge\n\t * // with the current interval Observable.\n\t * switched.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concatAll}\n\t * @see {@link exhaust}\n\t * @see {@link mergeAll}\n\t * @see {@link switchMap}\n\t * @see {@link switchMapTo}\n\t * @see {@link zipAll}\n\t *\n\t * @return {Observable<T>} An Observable that emits the items emitted by the\n\t * Observable most recently emitted by the source Observable.\n\t * @method switch\n\t * @name switch\n\t * @owner Observable\n\t */\n\tfunction _switch() {\n\t    return this.lift(new SwitchOperator());\n\t}\n\texports._switch = _switch;\n\tvar SwitchOperator = (function () {\n\t    function SwitchOperator() {\n\t    }\n\t    SwitchOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchSubscriber(subscriber));\n\t    };\n\t    return SwitchOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchSubscriber = (function (_super) {\n\t    __extends(SwitchSubscriber, _super);\n\t    function SwitchSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.active = 0;\n\t        this.hasCompleted = false;\n\t    }\n\t    SwitchSubscriber.prototype._next = function (value) {\n\t        this.unsubscribeInner();\n\t        this.active++;\n\t        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));\n\t    };\n\t    SwitchSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    SwitchSubscriber.prototype.unsubscribeInner = function () {\n\t        this.active = this.active > 0 ? this.active - 1 : 0;\n\t        var innerSubscription = this.innerSubscription;\n\t        if (innerSubscription) {\n\t            innerSubscription.unsubscribe();\n\t            this.remove(innerSubscription);\n\t        }\n\t    };\n\t    SwitchSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.destination.next(innerValue);\n\t    };\n\t    SwitchSubscriber.prototype.notifyError = function (err) {\n\t        this.destination.error(err);\n\t    };\n\t    SwitchSubscriber.prototype.notifyComplete = function () {\n\t        this.unsubscribeInner();\n\t        if (this.hasCompleted && this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return SwitchSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 293 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar switchMap_1 = __webpack_require__(294);\n\tObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n\n\n/***/ },\n/* 294 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable, emitting values only from the most recently projected Observable.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link switch}.</span>\n\t *\n\t * <img src=\"./img/switchMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an (so-called \"inner\") Observable. Each time it observes one of these\n\t * inner Observables, the output Observable begins emitting the items emitted by\n\t * that inner Observable. When a new inner Observable is emitted, `switchMap`\n\t * stops emitting items from the earlier-emitted inner Observable and begins\n\t * emitting items from the new one. It continues to behave like this for\n\t * subsequent inner Observables.\n\t *\n\t * @example <caption>Rerun an interval Observable on every click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMap}\n\t * @see {@link exhaustMap}\n\t * @see {@link mergeMap}\n\t * @see {@link switch}\n\t * @see {@link switchMapTo}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An Observable that emits the result of applying the\n\t * projection function (and the optional `resultSelector`) to each item emitted\n\t * by the source Observable and taking only the values from the most recently\n\t * projected inner Observable.\n\t * @method switchMap\n\t * @owner Observable\n\t */\n\tfunction switchMap(project, resultSelector) {\n\t    return this.lift(new SwitchMapOperator(project, resultSelector));\n\t}\n\texports.switchMap = switchMap;\n\tvar SwitchMapOperator = (function () {\n\t    function SwitchMapOperator(project, resultSelector) {\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    SwitchMapOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n\t    };\n\t    return SwitchMapOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchMapSubscriber = (function (_super) {\n\t    __extends(SwitchMapSubscriber, _super);\n\t    function SwitchMapSubscriber(destination, project, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.index = 0;\n\t    }\n\t    SwitchMapSubscriber.prototype._next = function (value) {\n\t        var result;\n\t        var index = this.index++;\n\t        try {\n\t            result = this.project(value, index);\n\t        }\n\t        catch (error) {\n\t            this.destination.error(error);\n\t            return;\n\t        }\n\t        this._innerSub(result, value, index);\n\t    };\n\t    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (innerSubscription) {\n\t            innerSubscription.unsubscribe();\n\t        }\n\t        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n\t    };\n\t    SwitchMapSubscriber.prototype._complete = function () {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (!innerSubscription || innerSubscription.closed) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype._unsubscribe = function () {\n\t        this.innerSubscription = null;\n\t    };\n\t    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.innerSubscription = null;\n\t        if (this.isStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (this.resultSelector) {\n\t            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            this.destination.next(innerValue);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return SwitchMapSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 295 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar switchMapTo_1 = __webpack_require__(296);\n\tObservable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;\n\n\n/***/ },\n/* 296 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Projects each source value to the same Observable which is flattened multiple\n\t * times with {@link switch} in the output Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n\t * always to the same inner Observable.</span>\n\t *\n\t * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n\t *\n\t * Maps each source value to the given Observable `innerObservable` regardless\n\t * of the source value, and then flattens those resulting Observables into one\n\t * single Observable, which is the output Observable. The output Observables\n\t * emits values only from the most recently emitted instance of\n\t * `innerObservable`.\n\t *\n\t * @example <caption>Rerun an interval Observable on every click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMapTo}\n\t * @see {@link switch}\n\t * @see {@link switchMap}\n\t * @see {@link mergeMapTo}\n\t *\n\t * @param {Observable} innerObservable An Observable to replace each value from\n\t * the source Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An Observable that emits items from the given\n\t * `innerObservable` every time a value is emitted on the source Observable.\n\t * @return {Observable} An Observable that emits items from the given\n\t * `innerObservable` (and optionally transformed through `resultSelector`) every\n\t * time a value is emitted on the source Observable, and taking only the values\n\t * from the most recently projected inner Observable.\n\t * @method switchMapTo\n\t * @owner Observable\n\t */\n\tfunction switchMapTo(innerObservable, resultSelector) {\n\t    return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n\t}\n\texports.switchMapTo = switchMapTo;\n\tvar SwitchMapToOperator = (function () {\n\t    function SwitchMapToOperator(observable, resultSelector) {\n\t        this.observable = observable;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n\t    };\n\t    return SwitchMapToOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchMapToSubscriber = (function (_super) {\n\t    __extends(SwitchMapToSubscriber, _super);\n\t    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.inner = inner;\n\t        this.resultSelector = resultSelector;\n\t        this.index = 0;\n\t    }\n\t    SwitchMapToSubscriber.prototype._next = function (value) {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (innerSubscription) {\n\t            innerSubscription.unsubscribe();\n\t        }\n\t        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n\t    };\n\t    SwitchMapToSubscriber.prototype._complete = function () {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (!innerSubscription || innerSubscription.closed) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapToSubscriber.prototype._unsubscribe = function () {\n\t        this.innerSubscription = null;\n\t    };\n\t    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.innerSubscription = null;\n\t        if (this.isStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        if (resultSelector) {\n\t            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            destination.next(innerValue);\n\t        }\n\t    };\n\t    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        var result;\n\t        try {\n\t            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t            return;\n\t        }\n\t        destination.next(result);\n\t    };\n\t    return SwitchMapToSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 297 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar take_1 = __webpack_require__(298);\n\tObservable_1.Observable.prototype.take = take_1.take;\n\n\n/***/ },\n/* 298 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(186);\n\tvar EmptyObservable_1 = __webpack_require__(36);\n\t/**\n\t * Emits only the first `count` values emitted by the source Observable.\n\t *\n\t * <span class=\"informal\">Takes the first `count` values from the source, then\n\t * completes.</span>\n\t *\n\t * <img src=\"./img/take.png\" width=\"100%\">\n\t *\n\t * `take` returns an Observable that emits only the first `count` values emitted\n\t * by the source Observable. If the source emits fewer than `count` values then\n\t * all of its values are emitted. After that, it completes, regardless if the\n\t * source completes.\n\t *\n\t * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n\t * var interval = Rx.Observable.interval(1000);\n\t * var five = interval.take(5);\n\t * five.subscribe(x => console.log(x));\n\t *\n\t * @see {@link takeLast}\n\t * @see {@link takeUntil}\n\t * @see {@link takeWhile}\n\t * @see {@link skip}\n\t *\n\t * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n\t * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n\t *\n\t * @param {number} count The maximum number of `next` values to emit.\n\t * @return {Observable<T>} An Observable that emits only the first `count`\n\t * values emitted by the source Observable, or all of the values from the source\n\t * if the source emits fewer than `count` values.\n\t * @method take\n\t * @owner Observable\n\t */\n\tfunction take(count) {\n\t    if (count === 0) {\n\t        return new EmptyObservable_1.EmptyObservable();\n\t    }\n\t    else {\n\t        return this.lift(new TakeOperator(count));\n\t    }\n\t}\n\texports.take = take;\n\tvar TakeOperator = (function () {\n\t    function TakeOperator(total) {\n\t        this.total = total;\n\t        if (this.total < 0) {\n\t            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\t        }\n\t    }\n\t    TakeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeSubscriber(subscriber, this.total));\n\t    };\n\t    return TakeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeSubscriber = (function (_super) {\n\t    __extends(TakeSubscriber, _super);\n\t    function TakeSubscriber(destination, total) {\n\t        _super.call(this, destination);\n\t        this.total = total;\n\t        this.count = 0;\n\t    }\n\t    TakeSubscriber.prototype._next = function (value) {\n\t        var total = this.total;\n\t        if (++this.count <= total) {\n\t            this.destination.next(value);\n\t            if (this.count === total) {\n\t                this.destination.complete();\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    return TakeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 299 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar takeLast_1 = __webpack_require__(300);\n\tObservable_1.Observable.prototype.takeLast = takeLast_1.takeLast;\n\n\n/***/ },\n/* 300 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(186);\n\tvar EmptyObservable_1 = __webpack_require__(36);\n\t/**\n\t * Emits only the last `count` values emitted by the source Observable.\n\t *\n\t * <span class=\"informal\">Remembers the latest `count` values, then emits those\n\t * only when the source completes.</span>\n\t *\n\t * <img src=\"./img/takeLast.png\" width=\"100%\">\n\t *\n\t * `takeLast` returns an Observable that emits at most the last `count` values\n\t * emitted by the source Observable. If the source emits fewer than `count`\n\t * values then all of its values are emitted. This operator must wait until the\n\t * `complete` notification emission from the source in order to emit the `next`\n\t * values on the output Observable, because otherwise it is impossible to know\n\t * whether or not more values will be emitted on the source. For this reason,\n\t * all values are emitted synchronously, followed by the complete notification.\n\t *\n\t * @example <caption>Take the last 3 values of an Observable with many values</caption>\n\t * var many = Rx.Observable.range(1, 100);\n\t * var lastThree = many.takeLast(3);\n\t * lastThree.subscribe(x => console.log(x));\n\t *\n\t * @see {@link take}\n\t * @see {@link takeUntil}\n\t * @see {@link takeWhile}\n\t * @see {@link skip}\n\t *\n\t * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n\t * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n\t *\n\t * @param {number} count The maximum number of values to emit from the end of\n\t * the sequence of values emitted by the source Observable.\n\t * @return {Observable<T>} An Observable that emits at most the last count\n\t * values emitted by the source Observable.\n\t * @method takeLast\n\t * @owner Observable\n\t */\n\tfunction takeLast(count) {\n\t    if (count === 0) {\n\t        return new EmptyObservable_1.EmptyObservable();\n\t    }\n\t    else {\n\t        return this.lift(new TakeLastOperator(count));\n\t    }\n\t}\n\texports.takeLast = takeLast;\n\tvar TakeLastOperator = (function () {\n\t    function TakeLastOperator(total) {\n\t        this.total = total;\n\t        if (this.total < 0) {\n\t            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\t        }\n\t    }\n\t    TakeLastOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n\t    };\n\t    return TakeLastOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeLastSubscriber = (function (_super) {\n\t    __extends(TakeLastSubscriber, _super);\n\t    function TakeLastSubscriber(destination, total) {\n\t        _super.call(this, destination);\n\t        this.total = total;\n\t        this.ring = new Array();\n\t        this.count = 0;\n\t    }\n\t    TakeLastSubscriber.prototype._next = function (value) {\n\t        var ring = this.ring;\n\t        var total = this.total;\n\t        var count = this.count++;\n\t        if (ring.length < total) {\n\t            ring.push(value);\n\t        }\n\t        else {\n\t            var index = count % total;\n\t            ring[index] = value;\n\t        }\n\t    };\n\t    TakeLastSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        var count = this.count;\n\t        if (count > 0) {\n\t            var total = this.count >= this.total ? this.total : this.count;\n\t            var ring = this.ring;\n\t            for (var i = 0; i < total; i++) {\n\t                var idx = (count++) % total;\n\t                destination.next(ring[idx]);\n\t            }\n\t        }\n\t        destination.complete();\n\t    };\n\t    return TakeLastSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 301 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar takeUntil_1 = __webpack_require__(302);\n\tObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n\n\n/***/ },\n/* 302 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Emits the values emitted by the source Observable until a `notifier`\n\t * Observable emits a value.\n\t *\n\t * <span class=\"informal\">Lets values pass until a second Observable,\n\t * `notifier`, emits something. Then, it completes.</span>\n\t *\n\t * <img src=\"./img/takeUntil.png\" width=\"100%\">\n\t *\n\t * `takeUntil` subscribes and begins mirroring the source Observable. It also\n\t * monitors a second Observable, `notifier` that you provide. If the `notifier`\n\t * emits a value or a complete notification, the output Observable stops\n\t * mirroring the source Observable and completes.\n\t *\n\t * @example <caption>Tick every second until the first click happens</caption>\n\t * var interval = Rx.Observable.interval(1000);\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = interval.takeUntil(clicks);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link take}\n\t * @see {@link takeLast}\n\t * @see {@link takeWhile}\n\t * @see {@link skip}\n\t *\n\t * @param {Observable} notifier The Observable whose first emitted value will\n\t * cause the output Observable of `takeUntil` to stop emitting values from the\n\t * source Observable.\n\t * @return {Observable<T>} An Observable that emits the values from the source\n\t * Observable until such time as `notifier` emits its first value.\n\t * @method takeUntil\n\t * @owner Observable\n\t */\n\tfunction takeUntil(notifier) {\n\t    return this.lift(new TakeUntilOperator(notifier));\n\t}\n\texports.takeUntil = takeUntil;\n\tvar TakeUntilOperator = (function () {\n\t    function TakeUntilOperator(notifier) {\n\t        this.notifier = notifier;\n\t    }\n\t    TakeUntilOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n\t    };\n\t    return TakeUntilOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeUntilSubscriber = (function (_super) {\n\t    __extends(TakeUntilSubscriber, _super);\n\t    function TakeUntilSubscriber(destination, notifier) {\n\t        _super.call(this, destination);\n\t        this.notifier = notifier;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n\t    }\n\t    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.complete();\n\t    };\n\t    TakeUntilSubscriber.prototype.notifyComplete = function () {\n\t        // noop\n\t    };\n\t    return TakeUntilSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 303 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar takeWhile_1 = __webpack_require__(304);\n\tObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n\n\n/***/ },\n/* 304 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits values emitted by the source Observable so long as each value satisfies\n\t * the given `predicate`, and then completes as soon as this `predicate` is not\n\t * satisfied.\n\t *\n\t * <span class=\"informal\">Takes values from the source only while they pass the\n\t * condition given. When the first value does not satisfy, it completes.</span>\n\t *\n\t * <img src=\"./img/takeWhile.png\" width=\"100%\">\n\t *\n\t * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n\t * emitted on the source is given to the `predicate` function which returns a\n\t * boolean, representing a condition to be satisfied by the source values. The\n\t * output Observable emits the source values until such time as the `predicate`\n\t * returns false, at which point `takeWhile` stops mirroring the source\n\t * Observable and completes the output Observable.\n\t *\n\t * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.takeWhile(ev => ev.clientX > 200);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link take}\n\t * @see {@link takeLast}\n\t * @see {@link takeUntil}\n\t * @see {@link skip}\n\t *\n\t * @param {function(value: T, index: number): boolean} predicate A function that\n\t * evaluates a value emitted by the source Observable and returns a boolean.\n\t * Also takes the (zero-based) index as the second argument.\n\t * @return {Observable<T>} An Observable that emits the values from the source\n\t * Observable so long as each value satisfies the condition defined by the\n\t * `predicate`, then completes.\n\t * @method takeWhile\n\t * @owner Observable\n\t */\n\tfunction takeWhile(predicate) {\n\t    return this.lift(new TakeWhileOperator(predicate));\n\t}\n\texports.takeWhile = takeWhile;\n\tvar TakeWhileOperator = (function () {\n\t    function TakeWhileOperator(predicate) {\n\t        this.predicate = predicate;\n\t    }\n\t    TakeWhileOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n\t    };\n\t    return TakeWhileOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeWhileSubscriber = (function (_super) {\n\t    __extends(TakeWhileSubscriber, _super);\n\t    function TakeWhileSubscriber(destination, predicate) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.index = 0;\n\t    }\n\t    TakeWhileSubscriber.prototype._next = function (value) {\n\t        var destination = this.destination;\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, this.index++);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t            return;\n\t        }\n\t        this.nextOrComplete(value, result);\n\t    };\n\t    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n\t        var destination = this.destination;\n\t        if (Boolean(predicateResult)) {\n\t            destination.next(value);\n\t        }\n\t        else {\n\t            destination.complete();\n\t        }\n\t    };\n\t    return TakeWhileSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 305 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar throttle_1 = __webpack_require__(306);\n\tObservable_1.Observable.prototype.throttle = throttle_1.throttle;\n\n\n/***/ },\n/* 306 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Emits a value from the source Observable, then ignores subsequent source\n\t * values for a duration determined by another Observable, then repeats this\n\t * process.\n\t *\n\t * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n\t * duration is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/throttle.png\" width=\"100%\">\n\t *\n\t * `throttle` emits the source Observable values on the output Observable\n\t * when its internal timer is disabled, and ignores source values when the timer\n\t * is enabled. Initially, the timer is disabled. As soon as the first source\n\t * value arrives, it is forwarded to the output Observable, and then the timer\n\t * is enabled by calling the `durationSelector` function with the source value,\n\t * which returns the \"duration\" Observable. When the duration Observable emits a\n\t * value or completes, the timer is disabled, and this process repeats for the\n\t * next source value.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounce}\n\t * @see {@link delayWhen}\n\t * @see {@link sample}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {function(value: T): Observable|Promise} durationSelector A function\n\t * that receives a value from the source Observable, for computing the silencing\n\t * duration for each source value, returned as an Observable or a Promise.\n\t * @return {Observable<T>} An Observable that performs the throttle operation to\n\t * limit the rate of emissions from the source.\n\t * @method throttle\n\t * @owner Observable\n\t */\n\tfunction throttle(durationSelector) {\n\t    return this.lift(new ThrottleOperator(durationSelector));\n\t}\n\texports.throttle = throttle;\n\tvar ThrottleOperator = (function () {\n\t    function ThrottleOperator(durationSelector) {\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    ThrottleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n\t    };\n\t    return ThrottleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ThrottleSubscriber = (function (_super) {\n\t    __extends(ThrottleSubscriber, _super);\n\t    function ThrottleSubscriber(destination, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    ThrottleSubscriber.prototype._next = function (value) {\n\t        if (!this.throttled) {\n\t            this.tryDurationSelector(value);\n\t        }\n\t    };\n\t    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n\t        var duration = null;\n\t        try {\n\t            duration = this.durationSelector(value);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.emitAndThrottle(value, duration);\n\t    };\n\t    ThrottleSubscriber.prototype.emitAndThrottle = function (value, duration) {\n\t        this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n\t        this.destination.next(value);\n\t    };\n\t    ThrottleSubscriber.prototype._unsubscribe = function () {\n\t        var throttled = this.throttled;\n\t        if (throttled) {\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t            throttled.unsubscribe();\n\t        }\n\t    };\n\t    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this._unsubscribe();\n\t    };\n\t    ThrottleSubscriber.prototype.notifyComplete = function () {\n\t        this._unsubscribe();\n\t    };\n\t    return ThrottleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 307 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar throttleTime_1 = __webpack_require__(308);\n\tObservable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;\n\n\n/***/ },\n/* 308 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(80);\n\t/**\n\t * Emits a value from the source Observable, then ignores subsequent source\n\t * values for `duration` milliseconds, then repeats this process.\n\t *\n\t * <span class=\"informal\">Lets a value pass, then ignores source values for the\n\t * next `duration` milliseconds.</span>\n\t *\n\t * <img src=\"./img/throttleTime.png\" width=\"100%\">\n\t *\n\t * `throttleTime` emits the source Observable values on the output Observable\n\t * when its internal timer is disabled, and ignores source values when the timer\n\t * is enabled. Initially, the timer is disabled. As soon as the first source\n\t * value arrives, it is forwarded to the output Observable, and then the timer\n\t * is enabled. After `duration` milliseconds (or the time unit determined\n\t * internally by the optional `scheduler`) has passed, the timer is disabled,\n\t * and this process repeats for the next source value. Optionally takes a\n\t * {@link Scheduler} for managing timers.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.throttleTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounceTime}\n\t * @see {@link delay}\n\t * @see {@link sampleTime}\n\t * @see {@link throttle}\n\t *\n\t * @param {number} duration Time to wait before emitting another value after\n\t * emitting the last value, measured in milliseconds or the time unit determined\n\t * internally by the optional `scheduler`.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the sampling.\n\t * @return {Observable<T>} An Observable that performs the throttle operation to\n\t * limit the rate of emissions from the source.\n\t * @method throttleTime\n\t * @owner Observable\n\t */\n\tfunction throttleTime(duration, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new ThrottleTimeOperator(duration, scheduler));\n\t}\n\texports.throttleTime = throttleTime;\n\tvar ThrottleTimeOperator = (function () {\n\t    function ThrottleTimeOperator(duration, scheduler) {\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t    }\n\t    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n\t    };\n\t    return ThrottleTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ThrottleTimeSubscriber = (function (_super) {\n\t    __extends(ThrottleTimeSubscriber, _super);\n\t    function ThrottleTimeSubscriber(destination, duration, scheduler) {\n\t        _super.call(this, destination);\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t    }\n\t    ThrottleTimeSubscriber.prototype._next = function (value) {\n\t        if (!this.throttled) {\n\t            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n\t        var throttled = this.throttled;\n\t        if (throttled) {\n\t            throttled.unsubscribe();\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t        }\n\t    };\n\t    return ThrottleTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNext(arg) {\n\t    var subscriber = arg.subscriber;\n\t    subscriber.clearThrottle();\n\t}\n\n\n/***/ },\n/* 309 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timeInterval_1 = __webpack_require__(310);\n\tObservable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;\n\n\n/***/ },\n/* 310 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(80);\n\t/**\n\t * @param scheduler\n\t * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n\t * @method timeInterval\n\t * @owner Observable\n\t */\n\tfunction timeInterval(scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new TimeIntervalOperator(scheduler));\n\t}\n\texports.timeInterval = timeInterval;\n\tvar TimeInterval = (function () {\n\t    function TimeInterval(value, interval) {\n\t        this.value = value;\n\t        this.interval = interval;\n\t    }\n\t    return TimeInterval;\n\t}());\n\texports.TimeInterval = TimeInterval;\n\t;\n\tvar TimeIntervalOperator = (function () {\n\t    function TimeIntervalOperator(scheduler) {\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimeIntervalOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n\t    };\n\t    return TimeIntervalOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TimeIntervalSubscriber = (function (_super) {\n\t    __extends(TimeIntervalSubscriber, _super);\n\t    function TimeIntervalSubscriber(destination, scheduler) {\n\t        _super.call(this, destination);\n\t        this.scheduler = scheduler;\n\t        this.lastTime = 0;\n\t        this.lastTime = scheduler.now();\n\t    }\n\t    TimeIntervalSubscriber.prototype._next = function (value) {\n\t        var now = this.scheduler.now();\n\t        var span = now - this.lastTime;\n\t        this.lastTime = now;\n\t        this.destination.next(new TimeInterval(value, span));\n\t    };\n\t    return TimeIntervalSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 311 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timeout_1 = __webpack_require__(312);\n\tObservable_1.Observable.prototype.timeout = timeout_1.timeout;\n\n\n/***/ },\n/* 312 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(80);\n\tvar isDate_1 = __webpack_require__(113);\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * @param due\n\t * @param errorToSend\n\t * @param scheduler\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method timeout\n\t * @owner Observable\n\t */\n\tfunction timeout(due, errorToSend, scheduler) {\n\t    if (errorToSend === void 0) { errorToSend = null; }\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    var absoluteTimeout = isDate_1.isDate(due);\n\t    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n\t    return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n\t}\n\texports.timeout = timeout;\n\tvar TimeoutOperator = (function () {\n\t    function TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler) {\n\t        this.waitFor = waitFor;\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.errorToSend = errorToSend;\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimeoutOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler));\n\t    };\n\t    return TimeoutOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TimeoutSubscriber = (function (_super) {\n\t    __extends(TimeoutSubscriber, _super);\n\t    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, errorToSend, scheduler) {\n\t        _super.call(this, destination);\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.waitFor = waitFor;\n\t        this.errorToSend = errorToSend;\n\t        this.scheduler = scheduler;\n\t        this.index = 0;\n\t        this._previousIndex = 0;\n\t        this._hasCompleted = false;\n\t        this.scheduleTimeout();\n\t    }\n\t    Object.defineProperty(TimeoutSubscriber.prototype, \"previousIndex\", {\n\t        get: function () {\n\t            return this._previousIndex;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(TimeoutSubscriber.prototype, \"hasCompleted\", {\n\t        get: function () {\n\t            return this._hasCompleted;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    TimeoutSubscriber.dispatchTimeout = function (state) {\n\t        var source = state.subscriber;\n\t        var currentIndex = state.index;\n\t        if (!source.hasCompleted && source.previousIndex === currentIndex) {\n\t            source.notifyTimeout();\n\t        }\n\t    };\n\t    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n\t        var currentIndex = this.index;\n\t        this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n\t        this.index++;\n\t        this._previousIndex = currentIndex;\n\t    };\n\t    TimeoutSubscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t        if (!this.absoluteTimeout) {\n\t            this.scheduleTimeout();\n\t        }\n\t    };\n\t    TimeoutSubscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutSubscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutSubscriber.prototype.notifyTimeout = function () {\n\t        this.error(this.errorToSend || new Error('timeout'));\n\t    };\n\t    return TimeoutSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 313 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timeoutWith_1 = __webpack_require__(314);\n\tObservable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;\n\n\n/***/ },\n/* 314 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(80);\n\tvar isDate_1 = __webpack_require__(113);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * @param due\n\t * @param withObservable\n\t * @param scheduler\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method timeoutWith\n\t * @owner Observable\n\t */\n\tfunction timeoutWith(due, withObservable, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    var absoluteTimeout = isDate_1.isDate(due);\n\t    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n\t    return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n\t}\n\texports.timeoutWith = timeoutWith;\n\tvar TimeoutWithOperator = (function () {\n\t    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n\t        this.waitFor = waitFor;\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.withObservable = withObservable;\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n\t    };\n\t    return TimeoutWithOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TimeoutWithSubscriber = (function (_super) {\n\t    __extends(TimeoutWithSubscriber, _super);\n\t    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n\t        _super.call(this);\n\t        this.destination = destination;\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.waitFor = waitFor;\n\t        this.withObservable = withObservable;\n\t        this.scheduler = scheduler;\n\t        this.timeoutSubscription = undefined;\n\t        this.index = 0;\n\t        this._previousIndex = 0;\n\t        this._hasCompleted = false;\n\t        destination.add(this);\n\t        this.scheduleTimeout();\n\t    }\n\t    Object.defineProperty(TimeoutWithSubscriber.prototype, \"previousIndex\", {\n\t        get: function () {\n\t            return this._previousIndex;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(TimeoutWithSubscriber.prototype, \"hasCompleted\", {\n\t        get: function () {\n\t            return this._hasCompleted;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    TimeoutWithSubscriber.dispatchTimeout = function (state) {\n\t        var source = state.subscriber;\n\t        var currentIndex = state.index;\n\t        if (!source.hasCompleted && source.previousIndex === currentIndex) {\n\t            source.handleTimeout();\n\t        }\n\t    };\n\t    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n\t        var currentIndex = this.index;\n\t        var timeoutState = { subscriber: this, index: currentIndex };\n\t        this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n\t        this.index++;\n\t        this._previousIndex = currentIndex;\n\t    };\n\t    TimeoutWithSubscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t        if (!this.absoluteTimeout) {\n\t            this.scheduleTimeout();\n\t        }\n\t    };\n\t    TimeoutWithSubscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutWithSubscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutWithSubscriber.prototype.handleTimeout = function () {\n\t        if (!this.closed) {\n\t            var withObservable = this.withObservable;\n\t            this.unsubscribe();\n\t            this.destination.add(this.timeoutSubscription = subscribeToResult_1.subscribeToResult(this, withObservable));\n\t        }\n\t    };\n\t    return TimeoutWithSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 315 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timestamp_1 = __webpack_require__(316);\n\tObservable_1.Observable.prototype.timestamp = timestamp_1.timestamp;\n\n\n/***/ },\n/* 316 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(80);\n\t/**\n\t * @param scheduler\n\t * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n\t * @method timestamp\n\t * @owner Observable\n\t */\n\tfunction timestamp(scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new TimestampOperator(scheduler));\n\t}\n\texports.timestamp = timestamp;\n\tvar Timestamp = (function () {\n\t    function Timestamp(value, timestamp) {\n\t        this.value = value;\n\t        this.timestamp = timestamp;\n\t    }\n\t    return Timestamp;\n\t}());\n\texports.Timestamp = Timestamp;\n\t;\n\tvar TimestampOperator = (function () {\n\t    function TimestampOperator(scheduler) {\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimestampOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\n\t    };\n\t    return TimestampOperator;\n\t}());\n\tvar TimestampSubscriber = (function (_super) {\n\t    __extends(TimestampSubscriber, _super);\n\t    function TimestampSubscriber(destination, scheduler) {\n\t        _super.call(this, destination);\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimestampSubscriber.prototype._next = function (value) {\n\t        var now = this.scheduler.now();\n\t        this.destination.next(new Timestamp(value, now));\n\t    };\n\t    return TimestampSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 317 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar toArray_1 = __webpack_require__(318);\n\tObservable_1.Observable.prototype.toArray = toArray_1.toArray;\n\n\n/***/ },\n/* 318 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n\t * @method toArray\n\t * @owner Observable\n\t */\n\tfunction toArray() {\n\t    return this.lift(new ToArrayOperator());\n\t}\n\texports.toArray = toArray;\n\tvar ToArrayOperator = (function () {\n\t    function ToArrayOperator() {\n\t    }\n\t    ToArrayOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ToArraySubscriber(subscriber));\n\t    };\n\t    return ToArrayOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ToArraySubscriber = (function (_super) {\n\t    __extends(ToArraySubscriber, _super);\n\t    function ToArraySubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.array = [];\n\t    }\n\t    ToArraySubscriber.prototype._next = function (x) {\n\t        this.array.push(x);\n\t    };\n\t    ToArraySubscriber.prototype._complete = function () {\n\t        this.destination.next(this.array);\n\t        this.destination.complete();\n\t    };\n\t    return ToArraySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 319 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar toPromise_1 = __webpack_require__(320);\n\tObservable_1.Observable.prototype.toPromise = toPromise_1.toPromise;\n\n\n/***/ },\n/* 320 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\t/**\n\t * @param PromiseCtor\n\t * @return {Promise<T>}\n\t * @method toPromise\n\t * @owner Observable\n\t */\n\tfunction toPromise(PromiseCtor) {\n\t    var _this = this;\n\t    if (!PromiseCtor) {\n\t        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t            PromiseCtor = root_1.root.Rx.config.Promise;\n\t        }\n\t        else if (root_1.root.Promise) {\n\t            PromiseCtor = root_1.root.Promise;\n\t        }\n\t    }\n\t    if (!PromiseCtor) {\n\t        throw new Error('no Promise impl found');\n\t    }\n\t    return new PromiseCtor(function (resolve, reject) {\n\t        var value;\n\t        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n\t    });\n\t}\n\texports.toPromise = toPromise;\n\n\n/***/ },\n/* 321 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar window_1 = __webpack_require__(322);\n\tObservable_1.Observable.prototype.window = window_1.window;\n\n\n/***/ },\n/* 322 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Branch out the source Observable values as a nested Observable whenever\n\t * `windowBoundaries` emits.\n\t *\n\t * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n\t * instead of an array.</span>\n\t *\n\t * <img src=\"./img/window.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits connected, non-overlapping\n\t * windows. It emits the current window and opens a new one whenever the\n\t * Observable `windowBoundaries` emits an item. Because each window is an\n\t * Observable, the output is a higher-order Observable.\n\t *\n\t * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var interval = Rx.Observable.interval(1000);\n\t * var result = clicks.window(interval)\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link windowCount}\n\t * @see {@link windowTime}\n\t * @see {@link windowToggle}\n\t * @see {@link windowWhen}\n\t * @see {@link buffer}\n\t *\n\t * @param {Observable<any>} windowBoundaries An Observable that completes the\n\t * previous window and starts a new window.\n\t * @return {Observable<Observable<T>>} An Observable of windows, which are\n\t * Observables emitting values of the source Observable.\n\t * @method window\n\t * @owner Observable\n\t */\n\tfunction window(windowBoundaries) {\n\t    return this.lift(new WindowOperator(windowBoundaries));\n\t}\n\texports.window = window;\n\tvar WindowOperator = (function () {\n\t    function WindowOperator(windowBoundaries) {\n\t        this.windowBoundaries = windowBoundaries;\n\t    }\n\t    WindowOperator.prototype.call = function (subscriber, source) {\n\t        var windowSubscriber = new WindowSubscriber(subscriber);\n\t        var sourceSubscription = source._subscribe(windowSubscriber);\n\t        if (!sourceSubscription.closed) {\n\t            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n\t        }\n\t        return sourceSubscription;\n\t    };\n\t    return WindowOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowSubscriber = (function (_super) {\n\t    __extends(WindowSubscriber, _super);\n\t    function WindowSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.window = new Subject_1.Subject();\n\t        destination.next(this.window);\n\t    }\n\t    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.openWindow();\n\t    };\n\t    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this._complete();\n\t    };\n\t    WindowSubscriber.prototype._next = function (value) {\n\t        this.window.next(value);\n\t    };\n\t    WindowSubscriber.prototype._error = function (err) {\n\t        this.window.error(err);\n\t        this.destination.error(err);\n\t    };\n\t    WindowSubscriber.prototype._complete = function () {\n\t        this.window.complete();\n\t        this.destination.complete();\n\t    };\n\t    WindowSubscriber.prototype._unsubscribe = function () {\n\t        this.window = null;\n\t    };\n\t    WindowSubscriber.prototype.openWindow = function () {\n\t        var prevWindow = this.window;\n\t        if (prevWindow) {\n\t            prevWindow.complete();\n\t        }\n\t        var destination = this.destination;\n\t        var newWindow = this.window = new Subject_1.Subject();\n\t        destination.next(newWindow);\n\t    };\n\t    return WindowSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 323 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowCount_1 = __webpack_require__(324);\n\tObservable_1.Observable.prototype.windowCount = windowCount_1.windowCount;\n\n\n/***/ },\n/* 324 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subject_1 = __webpack_require__(6);\n\t/**\n\t * Branch out the source Observable values as a nested Observable with each\n\t * nested Observable emitting at most `windowSize` values.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowCount.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits windows every `startWindowEvery`\n\t * items, each containing no more than `windowSize` items. When the source\n\t * Observable completes or encounters an error, the output Observable emits\n\t * the current window and propagates the notification from the source\n\t * Observable. If `startWindowEvery` is not provided, then new windows are\n\t * started immediately at the start of the source and when each window completes\n\t * with size `windowSize`.\n\t *\n\t * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowCount(3)\n\t *   .map(win => win.skip(1)) // skip first of every 3 clicks\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowCount(2, 3)\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowTime}\n\t * @see {@link windowToggle}\n\t * @see {@link windowWhen}\n\t * @see {@link bufferCount}\n\t *\n\t * @param {number} windowSize The maximum number of values emitted by each\n\t * window.\n\t * @param {number} [startWindowEvery] Interval at which to start a new window.\n\t * For example if `startWindowEvery` is `2`, then a new window will be started\n\t * on every other value from the source. A new window is started at the\n\t * beginning of the source by default.\n\t * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n\t * are Observable of values.\n\t * @method windowCount\n\t * @owner Observable\n\t */\n\tfunction windowCount(windowSize, startWindowEvery) {\n\t    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n\t    return this.lift(new WindowCountOperator(windowSize, startWindowEvery));\n\t}\n\texports.windowCount = windowCount;\n\tvar WindowCountOperator = (function () {\n\t    function WindowCountOperator(windowSize, startWindowEvery) {\n\t        this.windowSize = windowSize;\n\t        this.startWindowEvery = startWindowEvery;\n\t    }\n\t    WindowCountOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n\t    };\n\t    return WindowCountOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowCountSubscriber = (function (_super) {\n\t    __extends(WindowCountSubscriber, _super);\n\t    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.windowSize = windowSize;\n\t        this.startWindowEvery = startWindowEvery;\n\t        this.windows = [new Subject_1.Subject()];\n\t        this.count = 0;\n\t        destination.next(this.windows[0]);\n\t    }\n\t    WindowCountSubscriber.prototype._next = function (value) {\n\t        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n\t        var destination = this.destination;\n\t        var windowSize = this.windowSize;\n\t        var windows = this.windows;\n\t        var len = windows.length;\n\t        for (var i = 0; i < len && !this.closed; i++) {\n\t            windows[i].next(value);\n\t        }\n\t        var c = this.count - windowSize + 1;\n\t        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n\t            windows.shift().complete();\n\t        }\n\t        if (++this.count % startWindowEvery === 0 && !this.closed) {\n\t            var window_1 = new Subject_1.Subject();\n\t            windows.push(window_1);\n\t            destination.next(window_1);\n\t        }\n\t    };\n\t    WindowCountSubscriber.prototype._error = function (err) {\n\t        var windows = this.windows;\n\t        if (windows) {\n\t            while (windows.length > 0 && !this.closed) {\n\t                windows.shift().error(err);\n\t            }\n\t        }\n\t        this.destination.error(err);\n\t    };\n\t    WindowCountSubscriber.prototype._complete = function () {\n\t        var windows = this.windows;\n\t        if (windows) {\n\t            while (windows.length > 0 && !this.closed) {\n\t                windows.shift().complete();\n\t            }\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    WindowCountSubscriber.prototype._unsubscribe = function () {\n\t        this.count = 0;\n\t        this.windows = null;\n\t    };\n\t    return WindowCountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 325 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowTime_1 = __webpack_require__(326);\n\tObservable_1.Observable.prototype.windowTime = windowTime_1.windowTime;\n\n\n/***/ },\n/* 326 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar async_1 = __webpack_require__(80);\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Branch out the source Observable values as a nested Observable periodically\n\t * in time.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowTime.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable starts a new window periodically, as\n\t * determined by the `windowCreationInterval` argument. It emits each window\n\t * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n\t * source Observable completes or encounters an error, the output Observable\n\t * emits the current window and propagates the notification from the source\n\t * Observable. If `windowCreationInterval` is not provided, the output\n\t * Observable starts a new window when the previous window of duration\n\t * `windowTimeSpan` completes.\n\t *\n\t * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowTime(1000)\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowTime(1000, 5000)\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowCount}\n\t * @see {@link windowToggle}\n\t * @see {@link windowWhen}\n\t * @see {@link bufferTime}\n\t *\n\t * @param {number} windowTimeSpan The amount of time to fill each window.\n\t * @param {number} [windowCreationInterval] The interval at which to start new\n\t * windows.\n\t * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n\t * intervals that determine window boundaries.\n\t * @return {Observable<Observable<T>>} An observable of windows, which in turn\n\t * are Observables.\n\t * @method windowTime\n\t * @owner Observable\n\t */\n\tfunction windowTime(windowTimeSpan, windowCreationInterval, scheduler) {\n\t    if (windowCreationInterval === void 0) { windowCreationInterval = null; }\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler));\n\t}\n\texports.windowTime = windowTime;\n\tvar WindowTimeOperator = (function () {\n\t    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler) {\n\t        this.windowTimeSpan = windowTimeSpan;\n\t        this.windowCreationInterval = windowCreationInterval;\n\t        this.scheduler = scheduler;\n\t    }\n\t    WindowTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler));\n\t    };\n\t    return WindowTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowTimeSubscriber = (function (_super) {\n\t    __extends(WindowTimeSubscriber, _super);\n\t    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, scheduler) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.windowTimeSpan = windowTimeSpan;\n\t        this.windowCreationInterval = windowCreationInterval;\n\t        this.scheduler = scheduler;\n\t        this.windows = [];\n\t        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n\t            var window_1 = this.openWindow();\n\t            var closeState = { subscriber: this, window: window_1, context: null };\n\t            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };\n\t            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n\t            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n\t        }\n\t        else {\n\t            var window_2 = this.openWindow();\n\t            var timeSpanOnlyState = { subscriber: this, window: window_2, windowTimeSpan: windowTimeSpan };\n\t            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n\t        }\n\t    }\n\t    WindowTimeSubscriber.prototype._next = function (value) {\n\t        var windows = this.windows;\n\t        var len = windows.length;\n\t        for (var i = 0; i < len; i++) {\n\t            var window_3 = windows[i];\n\t            if (!window_3.closed) {\n\t                window_3.next(value);\n\t            }\n\t        }\n\t    };\n\t    WindowTimeSubscriber.prototype._error = function (err) {\n\t        var windows = this.windows;\n\t        while (windows.length > 0) {\n\t            windows.shift().error(err);\n\t        }\n\t        this.destination.error(err);\n\t    };\n\t    WindowTimeSubscriber.prototype._complete = function () {\n\t        var windows = this.windows;\n\t        while (windows.length > 0) {\n\t            var window_4 = windows.shift();\n\t            if (!window_4.closed) {\n\t                window_4.complete();\n\t            }\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    WindowTimeSubscriber.prototype.openWindow = function () {\n\t        var window = new Subject_1.Subject();\n\t        this.windows.push(window);\n\t        var destination = this.destination;\n\t        destination.next(window);\n\t        return window;\n\t    };\n\t    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n\t        window.complete();\n\t        var windows = this.windows;\n\t        windows.splice(windows.indexOf(window), 1);\n\t    };\n\t    return WindowTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchWindowTimeSpanOnly(state) {\n\t    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n\t    if (window) {\n\t        window.complete();\n\t    }\n\t    state.window = subscriber.openWindow();\n\t    this.schedule(state, windowTimeSpan);\n\t}\n\tfunction dispatchWindowCreation(state) {\n\t    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n\t    var window = subscriber.openWindow();\n\t    var action = this;\n\t    var context = { action: action, subscription: null };\n\t    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n\t    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n\t    action.add(context.subscription);\n\t    action.schedule(state, windowCreationInterval);\n\t}\n\tfunction dispatchWindowClose(arg) {\n\t    var subscriber = arg.subscriber, window = arg.window, context = arg.context;\n\t    if (context && context.action && context.subscription) {\n\t        context.action.remove(context.subscription);\n\t    }\n\t    subscriber.closeWindow(window);\n\t}\n\n\n/***/ },\n/* 327 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowToggle_1 = __webpack_require__(328);\n\tObservable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;\n\n\n/***/ },\n/* 328 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Branch out the source Observable values as a nested Observable starting from\n\t * an emission from `openings` and ending when the output of `closingSelector`\n\t * emits.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowToggle.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits windows that contain those items\n\t * emitted by the source Observable between the time when the `openings`\n\t * Observable emits an item and when the Observable returned by\n\t * `closingSelector` emits an item.\n\t *\n\t * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var openings = Rx.Observable.interval(1000);\n\t * var result = clicks.windowToggle(openings, i =>\n\t *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n\t * ).mergeAll();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowCount}\n\t * @see {@link windowTime}\n\t * @see {@link windowWhen}\n\t * @see {@link bufferToggle}\n\t *\n\t * @param {Observable<O>} openings An observable of notifications to start new\n\t * windows.\n\t * @param {function(value: O): Observable} closingSelector A function that takes\n\t * the value emitted by the `openings` observable and returns an Observable,\n\t * which, when it emits (either `next` or `complete`), signals that the\n\t * associated window should complete.\n\t * @return {Observable<Observable<T>>} An observable of windows, which in turn\n\t * are Observables.\n\t * @method windowToggle\n\t * @owner Observable\n\t */\n\tfunction windowToggle(openings, closingSelector) {\n\t    return this.lift(new WindowToggleOperator(openings, closingSelector));\n\t}\n\texports.windowToggle = windowToggle;\n\tvar WindowToggleOperator = (function () {\n\t    function WindowToggleOperator(openings, closingSelector) {\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    WindowToggleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n\t    };\n\t    return WindowToggleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowToggleSubscriber = (function (_super) {\n\t    __extends(WindowToggleSubscriber, _super);\n\t    function WindowToggleSubscriber(destination, openings, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t        this.contexts = [];\n\t        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\n\t    }\n\t    WindowToggleSubscriber.prototype._next = function (value) {\n\t        var contexts = this.contexts;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            for (var i = 0; i < len; i++) {\n\t                contexts[i].window.next(value);\n\t            }\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype._error = function (err) {\n\t        var contexts = this.contexts;\n\t        this.contexts = null;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            var index = -1;\n\t            while (++index < len) {\n\t                var context = contexts[index];\n\t                context.window.error(err);\n\t                context.subscription.unsubscribe();\n\t            }\n\t        }\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    WindowToggleSubscriber.prototype._complete = function () {\n\t        var contexts = this.contexts;\n\t        this.contexts = null;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            var index = -1;\n\t            while (++index < len) {\n\t                var context = contexts[index];\n\t                context.window.complete();\n\t                context.subscription.unsubscribe();\n\t            }\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    WindowToggleSubscriber.prototype._unsubscribe = function () {\n\t        var contexts = this.contexts;\n\t        this.contexts = null;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            var index = -1;\n\t            while (++index < len) {\n\t                var context = contexts[index];\n\t                context.window.unsubscribe();\n\t                context.subscription.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (outerValue === this.openings) {\n\t            var closingSelector = this.closingSelector;\n\t            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n\t            if (closingNotifier === errorObject_1.errorObject) {\n\t                return this.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                var window_1 = new Subject_1.Subject();\n\t                var subscription = new Subscription_1.Subscription();\n\t                var context = { window: window_1, subscription: subscription };\n\t                this.contexts.push(context);\n\t                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n\t                if (innerSubscription.closed) {\n\t                    this.closeWindow(this.contexts.length - 1);\n\t                }\n\t                else {\n\t                    innerSubscription.context = context;\n\t                    subscription.add(innerSubscription);\n\t                }\n\t                this.destination.next(window_1);\n\t            }\n\t        }\n\t        else {\n\t            this.closeWindow(this.contexts.indexOf(outerValue));\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype.notifyError = function (err) {\n\t        this.error(err);\n\t    };\n\t    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n\t        if (inner !== this.openSubscription) {\n\t            this.closeWindow(this.contexts.indexOf(inner.context));\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n\t        if (index === -1) {\n\t            return;\n\t        }\n\t        var contexts = this.contexts;\n\t        var context = contexts[index];\n\t        var window = context.window, subscription = context.subscription;\n\t        contexts.splice(index, 1);\n\t        window.complete();\n\t        subscription.unsubscribe();\n\t    };\n\t    return WindowToggleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 329 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowWhen_1 = __webpack_require__(330);\n\tObservable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;\n\n\n/***/ },\n/* 330 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Branch out the source Observable values as a nested Observable using a\n\t * factory function of closing Observables to determine when to start a new\n\t * window.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowWhen.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits connected, non-overlapping windows.\n\t * It emits the current window and opens a new one whenever the Observable\n\t * produced by the specified `closingSelector` function emits an item. The first\n\t * window is opened immediately when subscribing to the output Observable.\n\t *\n\t * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks\n\t *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowCount}\n\t * @see {@link windowTime}\n\t * @see {@link windowToggle}\n\t * @see {@link bufferWhen}\n\t *\n\t * @param {function(): Observable} closingSelector A function that takes no\n\t * arguments and returns an Observable that signals (on either `next` or\n\t * `complete`) when to close the previous window and start a new one.\n\t * @return {Observable<Observable<T>>} An observable of windows, which in turn\n\t * are Observables.\n\t * @method windowWhen\n\t * @owner Observable\n\t */\n\tfunction windowWhen(closingSelector) {\n\t    return this.lift(new WindowOperator(closingSelector));\n\t}\n\texports.windowWhen = windowWhen;\n\tvar WindowOperator = (function () {\n\t    function WindowOperator(closingSelector) {\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    WindowOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n\t    };\n\t    return WindowOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowSubscriber = (function (_super) {\n\t    __extends(WindowSubscriber, _super);\n\t    function WindowSubscriber(destination, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.closingSelector = closingSelector;\n\t        this.openWindow();\n\t    }\n\t    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.openWindow(innerSub);\n\t    };\n\t    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.openWindow(innerSub);\n\t    };\n\t    WindowSubscriber.prototype._next = function (value) {\n\t        this.window.next(value);\n\t    };\n\t    WindowSubscriber.prototype._error = function (err) {\n\t        this.window.error(err);\n\t        this.destination.error(err);\n\t        this.unsubscribeClosingNotification();\n\t    };\n\t    WindowSubscriber.prototype._complete = function () {\n\t        this.window.complete();\n\t        this.destination.complete();\n\t        this.unsubscribeClosingNotification();\n\t    };\n\t    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n\t        if (this.closingNotification) {\n\t            this.closingNotification.unsubscribe();\n\t        }\n\t    };\n\t    WindowSubscriber.prototype.openWindow = function (innerSub) {\n\t        if (innerSub === void 0) { innerSub = null; }\n\t        if (innerSub) {\n\t            this.remove(innerSub);\n\t            innerSub.unsubscribe();\n\t        }\n\t        var prevWindow = this.window;\n\t        if (prevWindow) {\n\t            prevWindow.complete();\n\t        }\n\t        var window = this.window = new Subject_1.Subject();\n\t        this.destination.next(window);\n\t        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n\t        if (closingNotifier === errorObject_1.errorObject) {\n\t            var err = errorObject_1.errorObject.e;\n\t            this.destination.error(err);\n\t            this.window.error(err);\n\t        }\n\t        else {\n\t            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n\t        }\n\t    };\n\t    return WindowSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 331 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar withLatestFrom_1 = __webpack_require__(332);\n\tObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n\n\n/***/ },\n/* 332 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(38);\n\tvar subscribeToResult_1 = __webpack_require__(39);\n\t/**\n\t * Combines the source Observable with other Observables to create an Observable\n\t * whose values are calculated from the latest values of each, only when the\n\t * source emits.\n\t *\n\t * <span class=\"informal\">Whenever the source Observable emits a value, it\n\t * computes a formula using that value plus the latest values from other input\n\t * Observables, then emits the output of that formula.</span>\n\t *\n\t * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n\t *\n\t * `withLatestFrom` combines each value from the source Observable (the\n\t * instance) with the latest values from the other input Observables only when\n\t * the source emits a value, optionally using a `project` function to determine\n\t * the value to be emitted on the output Observable. All input Observables must\n\t * emit at least one value before the output Observable will emit a value.\n\t *\n\t * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var timer = Rx.Observable.interval(1000);\n\t * var result = clicks.withLatestFrom(timer);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineLatest}\n\t *\n\t * @param {Observable} other An input Observable to combine with the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {Function} [project] Projection function for combining values\n\t * together. Receives all values in order of the Observables passed, where the\n\t * first parameter is a value from the source Observable. (e.g.\n\t * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n\t * passed, arrays will be emitted on the output Observable.\n\t * @return {Observable} An Observable of projected values from the most recent\n\t * values from each input Observable, or an array of the most recent values from\n\t * each input Observable.\n\t * @method withLatestFrom\n\t * @owner Observable\n\t */\n\tfunction withLatestFrom() {\n\t    var args = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        args[_i - 0] = arguments[_i];\n\t    }\n\t    var project;\n\t    if (typeof args[args.length - 1] === 'function') {\n\t        project = args.pop();\n\t    }\n\t    var observables = args;\n\t    return this.lift(new WithLatestFromOperator(observables, project));\n\t}\n\texports.withLatestFrom = withLatestFrom;\n\t/* tslint:enable:max-line-length */\n\tvar WithLatestFromOperator = (function () {\n\t    function WithLatestFromOperator(observables, project) {\n\t        this.observables = observables;\n\t        this.project = project;\n\t    }\n\t    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n\t    };\n\t    return WithLatestFromOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WithLatestFromSubscriber = (function (_super) {\n\t    __extends(WithLatestFromSubscriber, _super);\n\t    function WithLatestFromSubscriber(destination, observables, project) {\n\t        _super.call(this, destination);\n\t        this.observables = observables;\n\t        this.project = project;\n\t        this.toRespond = [];\n\t        var len = observables.length;\n\t        this.values = new Array(len);\n\t        for (var i = 0; i < len; i++) {\n\t            this.toRespond.push(i);\n\t        }\n\t        for (var i = 0; i < len; i++) {\n\t            var observable = observables[i];\n\t            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n\t        }\n\t    }\n\t    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.values[outerIndex] = innerValue;\n\t        var toRespond = this.toRespond;\n\t        if (toRespond.length > 0) {\n\t            var found = toRespond.indexOf(outerIndex);\n\t            if (found !== -1) {\n\t                toRespond.splice(found, 1);\n\t            }\n\t        }\n\t    };\n\t    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n\t        // noop\n\t    };\n\t    WithLatestFromSubscriber.prototype._next = function (value) {\n\t        if (this.toRespond.length === 0) {\n\t            var args = [value].concat(this.values);\n\t            if (this.project) {\n\t                this._tryProject(args);\n\t            }\n\t            else {\n\t                this.destination.next(args);\n\t            }\n\t        }\n\t    };\n\t    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n\t        var result;\n\t        try {\n\t            result = this.project.apply(this, args);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return WithLatestFromSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 333 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar zip_1 = __webpack_require__(116);\n\tObservable_1.Observable.prototype.zip = zip_1.zipProto;\n\n\n/***/ },\n/* 334 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar zipAll_1 = __webpack_require__(335);\n\tObservable_1.Observable.prototype.zipAll = zipAll_1.zipAll;\n\n\n/***/ },\n/* 335 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar zip_1 = __webpack_require__(116);\n\t/**\n\t * @param project\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method zipAll\n\t * @owner Observable\n\t */\n\tfunction zipAll(project) {\n\t    return this.lift(new zip_1.ZipOperator(project));\n\t}\n\texports.zipAll = zipAll;\n\n\n/***/ },\n/* 336 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Notification_1 = __webpack_require__(62);\n\tvar ColdObservable_1 = __webpack_require__(337);\n\tvar HotObservable_1 = __webpack_require__(341);\n\tvar SubscriptionLog_1 = __webpack_require__(339);\n\tvar VirtualTimeScheduler_1 = __webpack_require__(342);\n\tvar TestScheduler = (function (_super) {\n\t    __extends(TestScheduler, _super);\n\t    function TestScheduler(assertDeepEqual) {\n\t        _super.call(this);\n\t        this.assertDeepEqual = assertDeepEqual;\n\t        this.hotObservables = [];\n\t        this.coldObservables = [];\n\t        this.flushTests = [];\n\t    }\n\t    TestScheduler.prototype.createTime = function (marbles) {\n\t        var indexOf = marbles.indexOf('|');\n\t        if (indexOf === -1) {\n\t            throw new Error('marble diagram for time should have a completion marker \"|\"');\n\t        }\n\t        return indexOf * TestScheduler.frameTimeFactor;\n\t    };\n\t    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n\t        if (marbles.indexOf('^') !== -1) {\n\t            throw new Error('cold observable cannot have subscription offset \"^\"');\n\t        }\n\t        if (marbles.indexOf('!') !== -1) {\n\t            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n\t        }\n\t        var messages = TestScheduler.parseMarbles(marbles, values, error);\n\t        var cold = new ColdObservable_1.ColdObservable(messages, this);\n\t        this.coldObservables.push(cold);\n\t        return cold;\n\t    };\n\t    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n\t        if (marbles.indexOf('!') !== -1) {\n\t            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n\t        }\n\t        var messages = TestScheduler.parseMarbles(marbles, values, error);\n\t        var subject = new HotObservable_1.HotObservable(messages, this);\n\t        this.hotObservables.push(subject);\n\t        return subject;\n\t    };\n\t    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n\t        var _this = this;\n\t        var messages = [];\n\t        observable.subscribe(function (value) {\n\t            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n\t        }, function (err) {\n\t            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n\t        }, function () {\n\t            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n\t        });\n\t        return messages;\n\t    };\n\t    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n\t        var _this = this;\n\t        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n\t        var actual = [];\n\t        var flushTest = { actual: actual, ready: false };\n\t        var unsubscriptionFrame = TestScheduler\n\t            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n\t        var subscription;\n\t        this.schedule(function () {\n\t            subscription = observable.subscribe(function (x) {\n\t                var value = x;\n\t                // Support Observable-of-Observables\n\t                if (x instanceof Observable_1.Observable) {\n\t                    value = _this.materializeInnerObservable(value, _this.frame);\n\t                }\n\t                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n\t            }, function (err) {\n\t                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n\t            }, function () {\n\t                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n\t            });\n\t        }, 0);\n\t        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n\t            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n\t        }\n\t        this.flushTests.push(flushTest);\n\t        return {\n\t            toBe: function (marbles, values, errorValue) {\n\t                flushTest.ready = true;\n\t                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n\t            }\n\t        };\n\t    };\n\t    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n\t        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n\t        this.flushTests.push(flushTest);\n\t        return {\n\t            toBe: function (marbles) {\n\t                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n\t                flushTest.ready = true;\n\t                flushTest.expected = marblesArray.map(function (marbles) {\n\t                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n\t                });\n\t            }\n\t        };\n\t    };\n\t    TestScheduler.prototype.flush = function () {\n\t        var hotObservables = this.hotObservables;\n\t        while (hotObservables.length > 0) {\n\t            hotObservables.shift().setup();\n\t        }\n\t        _super.prototype.flush.call(this);\n\t        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n\t        while (readyFlushTests.length > 0) {\n\t            var test = readyFlushTests.shift();\n\t            this.assertDeepEqual(test.actual, test.expected);\n\t        }\n\t    };\n\t    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n\t        if (typeof marbles !== 'string') {\n\t            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n\t        }\n\t        var len = marbles.length;\n\t        var groupStart = -1;\n\t        var subscriptionFrame = Number.POSITIVE_INFINITY;\n\t        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\t        for (var i = 0; i < len; i++) {\n\t            var frame = i * this.frameTimeFactor;\n\t            var c = marbles[i];\n\t            switch (c) {\n\t                case '-':\n\t                case ' ':\n\t                    break;\n\t                case '(':\n\t                    groupStart = frame;\n\t                    break;\n\t                case ')':\n\t                    groupStart = -1;\n\t                    break;\n\t                case '^':\n\t                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n\t                        throw new Error('found a second subscription point \\'^\\' in a ' +\n\t                            'subscription marble diagram. There can only be one.');\n\t                    }\n\t                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n\t                    break;\n\t                case '!':\n\t                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n\t                        throw new Error('found a second subscription point \\'^\\' in a ' +\n\t                            'subscription marble diagram. There can only be one.');\n\t                    }\n\t                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n\t                    break;\n\t                default:\n\t                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n\t                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n\t            }\n\t        }\n\t        if (unsubscriptionFrame < 0) {\n\t            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n\t        }\n\t        else {\n\t            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n\t        }\n\t    };\n\t    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n\t        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n\t        if (marbles.indexOf('!') !== -1) {\n\t            throw new Error('conventional marble diagrams cannot have the ' +\n\t                'unsubscription marker \"!\"');\n\t        }\n\t        var len = marbles.length;\n\t        var testMessages = [];\n\t        var subIndex = marbles.indexOf('^');\n\t        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n\t        var getValue = typeof values !== 'object' ?\n\t            function (x) { return x; } :\n\t            function (x) {\n\t                // Support Observable-of-Observables\n\t                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n\t                    return values[x].messages;\n\t                }\n\t                return values[x];\n\t            };\n\t        var groupStart = -1;\n\t        for (var i = 0; i < len; i++) {\n\t            var frame = i * this.frameTimeFactor + frameOffset;\n\t            var notification = void 0;\n\t            var c = marbles[i];\n\t            switch (c) {\n\t                case '-':\n\t                case ' ':\n\t                    break;\n\t                case '(':\n\t                    groupStart = frame;\n\t                    break;\n\t                case ')':\n\t                    groupStart = -1;\n\t                    break;\n\t                case '|':\n\t                    notification = Notification_1.Notification.createComplete();\n\t                    break;\n\t                case '^':\n\t                    break;\n\t                case '#':\n\t                    notification = Notification_1.Notification.createError(errorValue || 'error');\n\t                    break;\n\t                default:\n\t                    notification = Notification_1.Notification.createNext(getValue(c));\n\t                    break;\n\t            }\n\t            if (notification) {\n\t                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n\t            }\n\t        }\n\t        return testMessages;\n\t    };\n\t    return TestScheduler;\n\t}(VirtualTimeScheduler_1.VirtualTimeScheduler));\n\texports.TestScheduler = TestScheduler;\n\n\n/***/ },\n/* 337 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar SubscriptionLoggable_1 = __webpack_require__(338);\n\tvar applyMixins_1 = __webpack_require__(340);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ColdObservable = (function (_super) {\n\t    __extends(ColdObservable, _super);\n\t    function ColdObservable(messages, scheduler) {\n\t        _super.call(this, function (subscriber) {\n\t            var observable = this;\n\t            var index = observable.logSubscribedFrame();\n\t            subscriber.add(new Subscription_1.Subscription(function () {\n\t                observable.logUnsubscribedFrame(index);\n\t            }));\n\t            observable.scheduleMessages(subscriber);\n\t            return subscriber;\n\t        });\n\t        this.messages = messages;\n\t        this.subscriptions = [];\n\t        this.scheduler = scheduler;\n\t    }\n\t    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n\t        var messagesLength = this.messages.length;\n\t        for (var i = 0; i < messagesLength; i++) {\n\t            var message = this.messages[i];\n\t            subscriber.add(this.scheduler.schedule(function (_a) {\n\t                var message = _a.message, subscriber = _a.subscriber;\n\t                message.notification.observe(subscriber);\n\t            }, message.frame, { message: message, subscriber: subscriber }));\n\t        }\n\t    };\n\t    return ColdObservable;\n\t}(Observable_1.Observable));\n\texports.ColdObservable = ColdObservable;\n\tapplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n\n\n/***/ },\n/* 338 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar SubscriptionLog_1 = __webpack_require__(339);\n\tvar SubscriptionLoggable = (function () {\n\t    function SubscriptionLoggable() {\n\t        this.subscriptions = [];\n\t    }\n\t    SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n\t        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n\t        return this.subscriptions.length - 1;\n\t    };\n\t    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n\t        var subscriptionLogs = this.subscriptions;\n\t        var oldSubscriptionLog = subscriptionLogs[index];\n\t        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n\t    };\n\t    return SubscriptionLoggable;\n\t}());\n\texports.SubscriptionLoggable = SubscriptionLoggable;\n\n\n/***/ },\n/* 339 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar SubscriptionLog = (function () {\n\t    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {\n\t        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }\n\t        this.subscribedFrame = subscribedFrame;\n\t        this.unsubscribedFrame = unsubscribedFrame;\n\t    }\n\t    return SubscriptionLog;\n\t}());\n\texports.SubscriptionLog = SubscriptionLog;\n\n\n/***/ },\n/* 340 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction applyMixins(derivedCtor, baseCtors) {\n\t    for (var i = 0, len = baseCtors.length; i < len; i++) {\n\t        var baseCtor = baseCtors[i];\n\t        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n\t        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {\n\t            var name_1 = propertyKeys[j];\n\t            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];\n\t        }\n\t    }\n\t}\n\texports.applyMixins = applyMixins;\n\n\n/***/ },\n/* 341 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar SubscriptionLoggable_1 = __webpack_require__(338);\n\tvar applyMixins_1 = __webpack_require__(340);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar HotObservable = (function (_super) {\n\t    __extends(HotObservable, _super);\n\t    function HotObservable(messages, scheduler) {\n\t        _super.call(this);\n\t        this.messages = messages;\n\t        this.subscriptions = [];\n\t        this.scheduler = scheduler;\n\t    }\n\t    HotObservable.prototype._subscribe = function (subscriber) {\n\t        var subject = this;\n\t        var index = subject.logSubscribedFrame();\n\t        subscriber.add(new Subscription_1.Subscription(function () {\n\t            subject.logUnsubscribedFrame(index);\n\t        }));\n\t        return _super.prototype._subscribe.call(this, subscriber);\n\t    };\n\t    HotObservable.prototype.setup = function () {\n\t        var subject = this;\n\t        var messagesLength = subject.messages.length;\n\t        /* tslint:disable:no-var-keyword */\n\t        for (var i = 0; i < messagesLength; i++) {\n\t            (function () {\n\t                var message = subject.messages[i];\n\t                /* tslint:enable */\n\t                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);\n\t            })();\n\t        }\n\t    };\n\t    return HotObservable;\n\t}(Subject_1.Subject));\n\texports.HotObservable = HotObservable;\n\tapplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n\n\n/***/ },\n/* 342 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar AsyncAction_1 = __webpack_require__(81);\n\tvar AsyncScheduler_1 = __webpack_require__(83);\n\tvar VirtualTimeScheduler = (function (_super) {\n\t    __extends(VirtualTimeScheduler, _super);\n\t    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n\t        var _this = this;\n\t        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }\n\t        if (maxFrames === void 0) { maxFrames = 750; }\n\t        _super.call(this, SchedulerAction, function () { return _this.frame; });\n\t        this.maxFrames = maxFrames;\n\t        this.frame = 0;\n\t        this.index = -1;\n\t    }\n\t    /**\n\t     * Prompt the Scheduler to execute all of its queued actions, therefore\n\t     * clearing its queue.\n\t     * @return {void}\n\t     */\n\t    VirtualTimeScheduler.prototype.flush = function () {\n\t        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n\t        var error, action;\n\t        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n\t            if (error = action.execute(action.state, action.delay)) {\n\t                break;\n\t            }\n\t        }\n\t        if (error) {\n\t            while (action = actions.shift()) {\n\t                action.unsubscribe();\n\t            }\n\t            throw error;\n\t        }\n\t    };\n\t    VirtualTimeScheduler.frameTimeFactor = 10;\n\t    return VirtualTimeScheduler;\n\t}(AsyncScheduler_1.AsyncScheduler));\n\texports.VirtualTimeScheduler = VirtualTimeScheduler;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar VirtualAction = (function (_super) {\n\t    __extends(VirtualAction, _super);\n\t    function VirtualAction(scheduler, work, index) {\n\t        if (index === void 0) { index = scheduler.index += 1; }\n\t        _super.call(this, scheduler, work);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t        this.index = index;\n\t        this.index = scheduler.index = index;\n\t    }\n\t    VirtualAction.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return !this.id ?\n\t            _super.prototype.schedule.call(this, state, delay) : this.add(new VirtualAction(this.scheduler, this.work)).schedule(state, delay);\n\t    };\n\t    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        this.delay = scheduler.frame + delay;\n\t        var actions = scheduler.actions;\n\t        actions.push(this);\n\t        actions.sort(VirtualAction.sortActions);\n\t        return true;\n\t    };\n\t    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return undefined;\n\t    };\n\t    VirtualAction.sortActions = function (a, b) {\n\t        if (a.delay === b.delay) {\n\t            if (a.index === b.index) {\n\t                return 0;\n\t            }\n\t            else if (a.index > b.index) {\n\t                return 1;\n\t            }\n\t            else {\n\t                return -1;\n\t            }\n\t        }\n\t        else if (a.delay > b.delay) {\n\t            return 1;\n\t        }\n\t        else {\n\t            return -1;\n\t        }\n\t    };\n\t    return VirtualAction;\n\t}(AsyncAction_1.AsyncAction));\n\texports.VirtualAction = VirtualAction;\n\n\n/***/ },\n/* 343 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AnimationFrameAction_1 = __webpack_require__(344);\n\tvar AnimationFrameScheduler_1 = __webpack_require__(346);\n\texports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);\n\n\n/***/ },\n/* 344 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar AsyncAction_1 = __webpack_require__(81);\n\tvar AnimationFrame_1 = __webpack_require__(345);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AnimationFrameAction = (function (_super) {\n\t    __extends(AnimationFrameAction, _super);\n\t    function AnimationFrameAction(scheduler, work) {\n\t        _super.call(this, scheduler, work);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t    }\n\t    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        // If delay is greater than 0, request as an async action.\n\t        if (delay !== null && delay > 0) {\n\t            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n\t        }\n\t        // Push the action to the end of the scheduler queue.\n\t        scheduler.actions.push(this);\n\t        // If an animation frame has already been requested, don't request another\n\t        // one. If an animation frame hasn't been requested yet, request one. Return\n\t        // the current animation frame request id.\n\t        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));\n\t    };\n\t    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        // If delay exists and is greater than 0, recycle as an async action.\n\t        if (delay !== null && delay > 0) {\n\t            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n\t        }\n\t        // If the scheduler queue is empty, cancel the requested animation frame and\n\t        // set the scheduled flag to undefined so the next AnimationFrameAction will\n\t        // request its own.\n\t        if (scheduler.actions.length === 0) {\n\t            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);\n\t            scheduler.scheduled = undefined;\n\t        }\n\t        // Return undefined so the action knows to request a new async id if it's rescheduled.\n\t        return undefined;\n\t    };\n\t    return AnimationFrameAction;\n\t}(AsyncAction_1.AsyncAction));\n\texports.AnimationFrameAction = AnimationFrameAction;\n\n\n/***/ },\n/* 345 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar RequestAnimationFrameDefinition = (function () {\n\t    function RequestAnimationFrameDefinition(root) {\n\t        if (root.requestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.mozRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.webkitRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.msRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.oRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n\t        }\n\t        else {\n\t            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n\t            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n\t        }\n\t    }\n\t    return RequestAnimationFrameDefinition;\n\t}());\n\texports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\n\texports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n\n\n/***/ },\n/* 346 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar AsyncScheduler_1 = __webpack_require__(83);\n\tvar AnimationFrameScheduler = (function (_super) {\n\t    __extends(AnimationFrameScheduler, _super);\n\t    function AnimationFrameScheduler() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AnimationFrameScheduler.prototype.flush = function () {\n\t        this.active = true;\n\t        this.scheduled = undefined;\n\t        var actions = this.actions;\n\t        var error;\n\t        var index = -1;\n\t        var count = actions.length;\n\t        var action = actions.shift();\n\t        do {\n\t            if (error = action.execute(action.state, action.delay)) {\n\t                break;\n\t            }\n\t        } while (++index < count && (action = actions.shift()));\n\t        this.active = false;\n\t        if (error) {\n\t            while (++index < count && (action = actions.shift())) {\n\t                action.unsubscribe();\n\t            }\n\t            throw error;\n\t        }\n\t    };\n\t    return AnimationFrameScheduler;\n\t}(AsyncScheduler_1.AsyncScheduler));\n\texports.AnimationFrameScheduler = AnimationFrameScheduler;\n\n\n/***/ },\n/* 347 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar rxjs_1 = __webpack_require__(4);\n\tvar domain = \"https://directline.botframework.com\";\n\tvar baseUrl = domain + \"/api/conversations\";\n\texports.imageURL = function (path) { return domain + path; };\n\texports.startConversation = function (appSecret) {\n\t    return rxjs_1.Observable\n\t        .ajax({\n\t        method: \"POST\",\n\t        url: \"\" + baseUrl,\n\t        headers: {\n\t            \"Accept\": \"application/json\",\n\t            \"Authorization\": \"BotConnector \" + appSecret\n\t        }\n\t    })\n\t        .retryWhen(function (error$) { return error$.delay(1000); })\n\t        .map(function (ajaxResponse) { return ajaxResponse.response; });\n\t};\n\texports.postMessage = function (text, conversation, userId) {\n\t    return rxjs_1.Observable\n\t        .ajax({\n\t        method: \"POST\",\n\t        url: baseUrl + \"/\" + conversation.conversationId + \"/messages\",\n\t        body: {\n\t            text: text,\n\t            from: userId,\n\t            conversationId: conversation.conversationId\n\t        },\n\t        headers: {\n\t            \"Content-Type\": \"application/json\",\n\t            \"Authorization\": \"BotConnector \" + conversation.token\n\t        }\n\t    })\n\t        .retryWhen(function (error$) { return error$.delay(1000); })\n\t        .map(function (ajaxResponse) { return true; });\n\t};\n\texports.postFile = function (file, conversation) {\n\t    var formData = new FormData();\n\t    formData.append('file', file);\n\t    return rxjs_1.Observable\n\t        .ajax({\n\t        method: \"POST\",\n\t        url: baseUrl + \"/\" + conversation.conversationId + \"/upload\",\n\t        body: formData,\n\t        headers: {\n\t            \"Authorization\": \"BotConnector \" + conversation.token\n\t        }\n\t    })\n\t        .retryWhen(function (error$) { return error$.delay(1000); })\n\t        .map(function (ajaxResponse) { return true; });\n\t};\n\texports.getMessages = function (conversation) {\n\t    return new rxjs_1.Observable(function (subscriber) {\n\t        return messagesGenerator(conversation, subscriber);\n\t    })\n\t        .concatAll();\n\t};\n\tvar messagesGenerator = function (conversation, subscriber, watermark) {\n\t    getMessageGroup(conversation, watermark).subscribe(function (messageGroup) {\n\t        var someMessages = messageGroup && messageGroup.messages && messageGroup.messages.length > 0;\n\t        if (someMessages)\n\t            subscriber.next(rxjs_1.Observable.from(messageGroup.messages));\n\t        setTimeout(function () { return messagesGenerator(conversation, subscriber, messageGroup && messageGroup.watermark); }, someMessages && messageGroup.watermark ? 0 : 3000);\n\t    }, function (error) { return subscriber.error(error); });\n\t};\n\tvar getMessageGroup = function (conversation, watermark) {\n\t    if (watermark === void 0) { watermark = \"\"; }\n\t    return rxjs_1.Observable\n\t        .ajax({\n\t        method: \"GET\",\n\t        url: baseUrl + \"/\" + conversation.conversationId + \"/messages?watermark=\" + watermark,\n\t        headers: {\n\t            \"Accept\": \"application/json\",\n\t            \"Authorization\": \"BotConnector \" + conversation.token\n\t        }\n\t    })\n\t        .retryWhen(function (error$) { return error$.delay(1000); })\n\t        .map(function (ajaxResponse) { return ajaxResponse.response; });\n\t};\n\n\n/***/ },\n/* 348 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar React = __webpack_require__(2);\n\tvar Timestamp_tsx_1 = __webpack_require__(349);\n\tvar HistoryMessage_tsx_1 = __webpack_require__(350);\n\tvar History = (function (_super) {\n\t    __extends(History, _super);\n\t    function History(props) {\n\t        _super.call(this);\n\t    }\n\t    History.prototype.componentDidUpdate = function (prevProps, prevState) {\n\t        if (this.props.autoscroll)\n\t            this.scrollme.scrollTop = this.scrollme.scrollHeight;\n\t    };\n\t    History.prototype.render = function () {\n\t        var _this = this;\n\t        return (React.createElement(\"div\", {className: \"wc-message-groups\", ref: function (ref) { return _this.scrollme = ref; }, onScroll: function (e) { return _this.props.actions.setAutoscroll(e.target.scrollTop + e.target.offsetHeight >= e.target.scrollHeight); }}, this.props.messagegroups.map(function (messagegroup) {\n\t            return React.createElement(\"div\", {className: \"wc-message-group\"}, React.createElement(Timestamp_tsx_1.Timestamp, {timestamp: messagegroup.timestamp}), messagegroup.messages.map(function (message) { return React.createElement(HistoryMessage_tsx_1.HistoryMessage, {message: message, actions: _this.props.actions}); }));\n\t        })));\n\t    };\n\t    return History;\n\t}(React.Component));\n\texports.History = History;\n\n\n/***/ },\n/* 349 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar React = __webpack_require__(2);\n\tvar timeStuff = function (timestamp) {\n\t    var milliseconds = Date.now() - timestamp;\n\t    var minutes = Math.floor(milliseconds / (1000 * 60));\n\t    var hours = Math.floor(minutes / 60);\n\t    if (minutes < 1)\n\t        return [\"Now\", 60 * 1000];\n\t    if (minutes === 1)\n\t        return [\"1 minute\", 60 * 1000];\n\t    if (hours < 1)\n\t        return [(minutes + \" minutes\"), 60 * 1000];\n\t    if (hours === 1)\n\t        return [\"1 hour\", 60 * 60 * 1000];\n\t    if (hours < 5)\n\t        return [(hours + \" hours\"), 60 * 60 * 1000 * (5 - hours)];\n\t    if (hours <= 24)\n\t        return [\"today\", 60 * 60 * 1000 * (24 - hours)];\n\t    if (hours <= 48)\n\t        return [\"yesterday\", 60 * 60 * 1000 * (48 - hours)];\n\t    return [new Date(milliseconds).toLocaleDateString(), null];\n\t};\n\tvar Timestamp = (function (_super) {\n\t    __extends(Timestamp, _super);\n\t    function Timestamp(props) {\n\t        _super.call(this);\n\t        this.nextRender = null;\n\t    }\n\t    Timestamp.prototype.setNextRender = function (timestamp) {\n\t        var _this = this;\n\t        var ts = timeStuff(timestamp);\n\t        if (ts[1])\n\t            this.nextRender = setTimeout(function () {\n\t                _this.forceUpdate();\n\t                _this.setNextRender(timestamp);\n\t            }, ts[1]);\n\t    };\n\t    Timestamp.prototype.componentDidMount = function () {\n\t        this.setNextRender(this.props.timestamp);\n\t    };\n\t    Timestamp.prototype.componentWillUnmount = function () {\n\t        clearTimeout(this.nextRender);\n\t    };\n\t    Timestamp.prototype.render = function () {\n\t        return React.createElement(\"div\", {className: \"wc-time\"}, timeStuff(this.props.timestamp)[0]);\n\t    };\n\t    return Timestamp;\n\t}(React.Component));\n\texports.Timestamp = Timestamp;\n\n\n/***/ },\n/* 350 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\tvar ImageMessage_tsx_1 = __webpack_require__(351);\n\tvar TextMessage_tsx_1 = __webpack_require__(352);\n\tvar HeroCard_tsx_1 = __webpack_require__(353);\n\texports.HistoryMessage = function (props) {\n\t    var inside;\n\t    if (props.message.images && props.message.images.length > 0)\n\t        inside = React.createElement(ImageMessage_tsx_1.ImageMessage, {images: props.message.images});\n\t    else if (props.message.text.includes(\"Bender\"))\n\t        inside = React.createElement(HeroCard_tsx_1.HeroCard, {actions: props.actions});\n\t    else\n\t        inside = React.createElement(TextMessage_tsx_1.TextMessage, {text: props.message.text});\n\t    return React.createElement(\"div\", {className: 'wc-message wc-message-from-' + props.message.from}, React.createElement(\"div\", {className: \"wc-message-content\"}, React.createElement(\"svg\", {className: \"wc-message-callout\"}, React.createElement(\"path\", {className: \"point-left\", d: \"m0,0 h12 v10 z\"}), React.createElement(\"path\", {className: \"point-right\", d: \"m0,10 v-10 h12 z\"})), inside), React.createElement(\"div\", {className: \"wc-message-from\"}, props.message.from));\n\t};\n\n\n/***/ },\n/* 351 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\texports.ImageMessage = function (props) {\n\t    return React.createElement(\"div\", {class: \"imageMessage\"}, props.images.map(function (path) { return React.createElement(\"img\", {src: path}); }));\n\t};\n\n\n/***/ },\n/* 352 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\tvar textify = function (text) {\n\t    return text.split(\"\\n\").map(function (line, index) {\n\t        return React.createElement(\"span\", null, index > 0 ? React.createElement(\"br\", null) : null, line);\n\t    });\n\t};\n\texports.TextMessage = function (props) {\n\t    return React.createElement(\"div\", {class: \"textMessage\"}, textify(props.text));\n\t};\n\n\n/***/ },\n/* 353 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\tvar content = {\n\t    'images': [{\n\t            'url': 'http://thiswas.notinventedhe.re/on/2009-09-21',\n\t            'alt': 'Image alt text'\n\t        }],\n\t    'text': 'This is the hero card text',\n\t    'buttons': [{\n\t            'type': 'imBack',\n\t            'value': 'imBack value',\n\t            'title': 'imBack title'\n\t        }, {\n\t            'type': 'openUrl',\n\t            'value': 'openUrl value',\n\t            'title': 'openUrl title'\n\t        }, {\n\t            'type': 'postBack',\n\t            'value': 'postBack value',\n\t            'title': 'postBack title'\n\t        }],\n\t    'subtitle': 'Subtitle',\n\t    'title': 'Title'\n\t};\n\texports.HeroCard = function (props) {\n\t    var buttonActions = {\n\t        \"imBack\": props.actions.buttonImBack,\n\t        \"openUrl\": props.actions.buttonOpenUrl,\n\t        \"postBack\": props.actions.buttonPostBack\n\t    };\n\t    // REVIEW we need to make sure each button.type is one of these\n\t    return (React.createElement(\"div\", {class: \"imageMessage\"}, content.images.map(function (image) { return React.createElement(\"img\", {src: image.url, alt: image.url}); }), React.createElement(\"p\", null, React.createElement(\"b\", null, content.title)), React.createElement(\"p\", null, React.createElement(\"i\", null, content.subtitle)), React.createElement(\"p\", null, content.text), React.createElement(\"ul\", null, content.buttons.map(function (button) { return React.createElement(\"li\", null, React.createElement(\"button\", {onClick: function () { return buttonActions[button.type](button.value); }}, button.title)); }))));\n\t};\n\n\n/***/ },\n/* 354 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\texports.Console = function (props) {\n\t    return React.createElement(\"div\", {className: \"wc-console\"}, React.createElement(\"label\", {className: \"wc-upload\"}, React.createElement(\"input\", {type: \"file\", accept: \"image/*\", multiple: true, onChange: function (e) { return props.actions.sendFile(e.target.files); }}), React.createElement(\"svg\", {width: \"26\", height: \"18\", xmlns: \"http://www.w3.org/2000/svg\"}, React.createElement(\"path\", {d: \"M 19.9603965 4.789052 m -2 0 a 2 2 0 0 1 4 0 a 2 2 0 0 1 -4 0 z M 8.3168322 4.1917918 L 2.49505 15.5342575 L 22.455446 15.5342575 L 17.465347 8.5643945 L 14.4158421 11.1780931 L 8.3168322 4.1917918 Z M 1.04 1 L 1.04 17 L 24.96 17 L 24.96 1 L 1.04 1 Z M 1.0352753 0 L 24.9647247 0 C 25.5364915 0 26 0.444957 26 0.9934084 L 26 17.006613 C 26 17.5552514 25.5265266 18 24.9647247 18 L 1.0352753 18 C 0.4635085 18 0 17.5550644 0 17.006613 L 0 0.9934084 C 0 0.44477 0.4734734 0 1.0352753 0 Z\"}))), React.createElement(\"div\", {className: \"wc-textbox\"}, React.createElement(\"input\", {type: \"text\", autoFocus: true, value: props.text, onChange: function (e) { return props.actions.updateMessage(e.target.value); }, onKeyPress: function (e) { return e.key == 'Enter' ? props.actions.sendMessage() : null; }, disabled: !props.enableSend, placeholder: \"Type your message...\"})), React.createElement(\"label\", {className: \"wc-send\", onClick: function (e) { return props.text && props.text.length > 0 && props.enableSend && props.actions.sendMessage(); }}, React.createElement(\"svg\", {width: \"27\", height: \"18\", xmlns: \"http://www.w3.org/2000/svg\"}, React.createElement(\"path\", {d: \"M 26.7862876 9.3774996 A 0.3121028 0.3121028 0 0 0 26.7862876 8.785123 L 0.4081408 0.0226012 C 0.363153 0.0000109 0.3406591 0.0000109 0.3181652 0.0000109 C 0.1372585 0.0000109 0 0.1315165 0 0.2887646 C 0 0.3270384 0.0081316 0.3668374 0.0257445 0.4066363 L 3.4448168 9.0813113 L 0.0257445 17.7556097 A 0.288143 0.288143 0 0 0 0.0126457 17.7975417 A 0.279813 0.279813 0 0 0 0.0055133 17.8603089 C 0.0055133 18.0178895 0.138422 18.1590562 0.303205 18.1590562 A 0.3049569 0.3049569 0 0 0 0.4081408 18.1400213 L 26.7862876 9.3774996 Z M 0.8130309 0.7906714 L 24.8365128 8.7876374 L 3.9846704 8.7876374 L 0.8130309 0.7906714 Z M 3.9846704 9.3749852 L 24.8365128 9.3749852 L 0.8130309 17.3719511 L 3.9846704 9.3749852 Z\"}))));\n\t};\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** public/app.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 46492f546c16be40c899\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Observable, Subscriber, Subject } from '@reactivex/rxjs';\nimport { BotMessage, BotConversation } from './directLineTypes';\nimport { startConversation, getMessages, postMessage, postFile, imageURL } from './directLine';\nimport { History } from './History.tsx'\nimport { Console } from './Console.tsx'\n\nexport interface Message {\n    from: \"me\" | \"bot\",\n    text?: string,\n    images?: string[],\n    timestamp: number\n} \n\nexport interface MessageGroup {\n    messages: Message[],\n    timestamp: number\n}\n\nexport interface ConsoleState {\n    text?: string,\n    enableSend?: boolean\n}\n\ninterface State {\n    // user ID\n    userId?: string;\n    // conversation metadata\n    conversation?: BotConversation,\n    // message history\n    messagegroups?: MessageGroup[],\n    autoscroll: boolean,\n    // compose window\n    console?: ConsoleState\n}\n\nconst guid = () => {\n  const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\nconst outgoing$ = new Subject<Message>();\n\nconst console$ = new Subject<ConsoleState>();\nconst consoleStart = {text: \"\", enableSend: true};\n\nconst incoming$ = (conversation: BotConversation, userId: string) =>\n    getMessages(conversation)\n    .filter(botmessage => botmessage.from != userId);\n\nconst messagegroup$ = (conversation: BotConversation, userId: string) =>\n    incoming$(conversation, userId)\n    .map<Message>(botmessage => ({\n        text: botmessage.text,\n        images: botmessage.images.map(path => imageURL(path)),\n        from: \"bot\",\n        timestamp: Date.parse(botmessage.created)\n    }))\n    .merge(outgoing$)\n    .scan<MessageGroup[]>((messagegroups, message) => {\n        let ms: Message[];\n        let mgs: MessageGroup[];\n        if (messagegroups.length === 0) {\n            ms = [message];\n            mgs = [];\n        } else {\n            const latest = messagegroups[messagegroups.length - 1];        \n            if (message.timestamp - latest.timestamp < 60 * 1000) {\n                ms = latest.messages.slice();\n                ms.push(message);\n                mgs = messagegroups.slice(0, messagegroups.length - 1);\n            } else {\n                ms = [message];\n                mgs = messagegroups.slice();\n            }\n        }\n        mgs.push({ messages: ms, timestamp: message.timestamp });\n        return mgs;\n    }, []);\n\nconst autoscroll$ = new Subject<boolean>();\n\nconst state$ = (conversation: BotConversation, userId: string) => \n    messagegroup$(conversation, userId).startWith([])\n    .combineLatest(\n        autoscroll$.distinctUntilChanged().startWith(true),\n        console$.startWith(consoleStart),\n        (messagegroups, autoscroll, console) => ({\n            conversation: conversation,\n            messagegroups: messagegroups,\n            autoscroll: autoscroll,\n            console: console\n        } as State)\n    )\n    .do(state => console.log(\"state\", state));\n\nconst conversation$ = startConversation;\n\nconst getQueryParams = () => {\n    const params = {};\n    location.search.\n        substring(1).\n        split(\"&\").\n        forEach(pair => {\n            const p = pair.split(\"=\");\n            params[p[0]] = p[1];\n        });\n    return params;\n}\n\nexport interface HistoryActions {\n    buttonImBack: (text:string) => void,\n    buttonOpenUrl: (text:string) => void,\n    buttonPostBack: (text:string) => void,\n    setAutoscroll: (autoscroll:boolean) => void\n}\n\nexport interface ConsoleActions {\n    updateMessage: (text:string) => void,\n    sendMessage: () => void,\n    sendFile: (files:FileList) => void\n}\n\nclass App extends React.Component<{}, State> {\n    constructor() {\n        super();\n        this.state = {\n            userId: guid(),\n            conversation: null,\n            messagegroups: [],\n            autoscroll: true,\n            console: consoleStart\n        }\n\n        const queryParams = getQueryParams();\n        const appSecret = queryParams['s'];\n\n        conversation$(appSecret)\n        .flatMap(conversation => state$(conversation, this.state.userId))\n        .subscribe(\n            state => this.setState(state),\n            error => console.log(\"errors\", error)\n        );\n    }\n\n    private historyActions: HistoryActions = {\n        buttonImBack: (text:string) => {\n            postMessage(text, this.state.conversation, this.state.userId)\n            .retry(2)\n            .subscribe(\n                () => {\n                    outgoing$.next({\n                        text: text,\n                        from: \"me\",\n                        timestamp: Date.now()\n                    });\n                },\n                error => {\n                    console.log(\"failed to post message\");\n                }\n            );\n        },\n\n        buttonOpenUrl: (text:string) => {\n            console.log(\"open URL\", text);\n        },\n\n        buttonPostBack: (text:string) => {\n            postMessage(text, this.state.conversation, this.state.userId)\n            .retry(2)\n            .subscribe(\n                () => {\n                    console.log(\"quietly posted message to bot\", text);\n                },\n                error => {\n                    console.log(\"failed to post message\");\n                }\n            );\n        },\n\n        setAutoscroll: (autoscroll:boolean) => {\n            autoscroll$.next(autoscroll);\n        }\n    }\n\n    private consoleActions: ConsoleActions = {\n        updateMessage: (text: string) => {\n            console$.next({text: text, enableSend: this.state.console.enableSend});\n        },\n\n        sendMessage: () => {\n            console$.next({text: this.state.console.text, enableSend: false});\n            postMessage(this.state.console.text, this.state.conversation, this.state.userId)\n            .retry(2)\n            .subscribe(\n                () => {\n                    outgoing$.next({\n                        text: this.state.console.text,\n                        from: \"me\",\n                        timestamp: Date.now()\n                    });\n                    console$.next({\n                        text: \"\",\n                        enableSend: true\n                    });\n                    autoscroll$.next(true);\n                },\n                error => {\n                    console.log(\"failed to post message\");\n                    console$.next({text: this.state.console.text, enableSend: true});\n                }\n            );\n        },\n\n        sendFile: (files:FileList) => {\n            for (let i = 0, numFiles = files.length; i < numFiles; i++) {\n                const file = files[i];\n                postFile(file, this.state.conversation)\n                .retry(2)\n                .subscribe(\n                    () => {\n                        outgoing$.next({\n                            images: [window.URL.createObjectURL(file)],\n                            from: \"me\",\n                            timestamp: Date.now()\n                        });\n                    },\n                    error => {\n                        console.log(\"failed to post file\");\n                    }\n                )\n            }\n        }\n    }\n\n    render() {\n        return <div className=\"wc-app\">\n            <div className=\"wc-header\">\n                WebChat\n            </div>\n            <History messagegroups={ this.state.messagegroups } autoscroll={ this.state.autoscroll } actions={ this.historyActions }/> \n            <Console actions={ this.consoleActions } { ...this.state.console } />\n        </div>;\n    }\n}\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/App.tsx\n **/","module.exports = React;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = ReactDOM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ReactDOM\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = require('./dist/cjs/Rx');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@reactivex/rxjs/index.js\n ** module id = 4\n ** module chunks = 0\n **/","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/cache';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctKey';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {MulticastObservable} from './observable/MulticastObservable';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport {asap} from './scheduler/asap';\nimport {async} from './scheduler/async';\nimport {queue} from './scheduler/queue';\nimport {animationFrame} from './scheduler/animationFrame';\nimport {AsapScheduler} from './scheduler/AsapScheduler';\nimport {AsyncScheduler} from './scheduler/AsyncScheduler';\nimport {QueueScheduler} from './scheduler/QueueScheduler';\nimport {AnimationFrameScheduler} from './scheduler/AnimationFrameScheduler';\nimport {$$rxSubscriber as rxSubscriber} from './symbol/rxSubscriber';\nimport {$$iterator as iterator} from './symbol/iterator';\nimport {$$observable as observable} from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Rx.ts\n **/","import {Operator} from './Operator';\nimport {Observer} from './Observer';\nimport {Observable} from './Observable';\nimport {Subscriber} from './Subscriber';\nimport {ISubscription, Subscription} from './Subscription';\nimport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nimport {SubjectSubscription} from './SubjectSubscription';\nimport {$$rxSubscriber} from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  lift<T, R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Subject.ts\n **/","import {PartialObserver} from './Observer';\nimport {Operator} from './Operator';\nimport {Subscriber} from './Subscriber';\nimport {Subscription, AnonymousSubscription, TeardownLogic} from './Subscription';\nimport {root} from './util/root';\nimport {toSubscriber} from './util/toSubscriber';\nimport {IfObservable} from './observable/IfObservable';\nimport {ErrorObservable} from './observable/ErrorObservable';\nimport {$$observable} from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | Promise<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this);\n    } else {\n      sink.add(this._subscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Observable.ts\n **/","let objectTypes = {\n  'boolean': false,\n  'function': true,\n  'object': true,\n  'number': false,\n  'string': false,\n  'undefined': false\n};\n\ndeclare let global: NodeJS.Global;\ndeclare let module: any;\ndeclare let exports: any;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\nexport let root: any = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n\n/* tslint:disable:no-unused-variable */\nlet freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\nlet freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\nlet freeGlobal = objectTypes[typeof global] && global;\n\nif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n  root = freeGlobal;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/root.ts\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 9\n ** module chunks = 0\n **/","import {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {$$rxSubscriber} from '../symbol/rxSubscriber';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber();\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/toSubscriber.ts\n **/","import {isFunction} from './util/isFunction';\nimport {Observer, PartialObserver} from './Observer';\nimport {Subscription} from './Subscription';\nimport {empty as emptyObserver} from './Observer';\nimport {$$rxSubscriber} from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Subscriber.ts\n **/","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isFunction.ts\n **/","import {isArray} from './util/isArray';\nimport {isObject} from './util/isObject';\nimport {isFunction} from './util/isFunction';\nimport {tryCatch} from './util/tryCatch';\nimport {errorObject} from './util/errorObject';\nimport {UnsubscriptionError} from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        (errors = errors || []).push(errorObject.e);\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(err.errors);\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.closed || typeof sub.unsubscribe !== 'function') {\n          break;\n        } else if (this.closed) {\n          sub.unsubscribe();\n        } else {\n          ((<any> this)._subscriptions || ((<any> this)._subscriptions = [])).push(sub);\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    return sub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Subscription.ts\n **/","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isArray.ts\n **/","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isObject.ts\n **/","import {errorObject} from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/tryCatch.ts\n **/","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject: any = { e: {} };\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/errorObject.ts\n **/","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/UnsubscriptionError.ts\n **/","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Observer.ts\n **/","import {root} from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/symbol/rxSubscriber.ts\n **/","import {root} from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/symbol/observable.ts\n **/","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/ObjectUnsubscribedError.ts\n **/","import {Subject} from './Subject';\nimport {Observer} from './Observer';\nimport {Subscription} from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/SubjectSubscription.ts\n **/","import {Observable} from '../../Observable';\nimport {bindCallback as staticBindCallback} from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindCallback.ts\n **/","import { BoundCallbackObservable } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/bindCallback.ts\n **/","import {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {AsyncSubject} from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/BoundCallbackObservable.ts\n **/","import {Subject} from './Subject';\nimport {Subscriber} from './Subscriber';\nimport {Subscription} from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/AsyncSubject.ts\n **/","import {Observable} from '../../Observable';\nimport {bindNodeCallback as staticBindNodeCallback} from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindNodeCallback.ts\n **/","import { BoundNodeCallbackObservable } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/bindNodeCallback.ts\n **/","import {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {AsyncSubject} from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\nfunction dispatch<T>(state: { source: BoundNodeCallbackObservable<T>, subscriber: Subscriber<T> }) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/BoundNodeCallbackObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {combineLatest as combineLatestStatic} from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/combineLatest.ts\n **/","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from './ArrayObservable';\nimport { CombineLatestOperator } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: Scheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: Scheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | Scheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | Scheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | Scheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    Scheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: Scheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <Scheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/combineLatest.ts\n **/","import {Scheduler} from '../Scheduler';\nexport function isScheduler<T>(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isScheduler.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {ScalarObservable} from './ScalarObservable';\nimport {EmptyObservable} from './EmptyObservable';\nimport {Subscriber} from '../Subscriber';\nimport {isScheduler} from '../util/isScheduler';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: Scheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(...array: Array<T | Scheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` Scheduler, which means the `next`\n   * notifications are sent synchronously, although with a different Scheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | Scheduler>): Observable<T> {\n    let scheduler = <Scheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: Scheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: Scheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ScalarObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: Scheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/EmptyObservable.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {isArray} from '../util/isArray';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\nconst none = {};\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <any>observables[0];\n  }\n\n  observables.unshift(this);\n\n  return new ArrayObservable(observables).lift(new CombineLatestOperator(project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface CombineLatestSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<T>[]): Observable<Array<T>>;\n  <TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/combineLatest.ts\n **/","import {Subscriber} from './Subscriber';\nimport {InnerSubscriber} from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/OuterSubscriber.ts\n **/","import {root} from './root';\nimport {isArray} from './isArray';\nimport {isPromise} from './isPromise';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, ObservableInput} from '../Observable';\nimport {$$iterator} from '../symbol/iterator';\nimport {Subscription} from '../Subscription';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {$$observable} from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  }\n\n  if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new Error('invalid observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    destination.error(new TypeError('unknown type returned'));\n  }\n  return null;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/subscribeToResult.ts\n **/","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isPromise.ts\n **/","import {root} from '../util/root';\n\nexport let $$iterator: any;\n\nconst Symbol: any = root.Symbol;\n\nif (typeof Symbol === 'function') {\n  if (Symbol.iterator) {\n    $$iterator = Symbol.iterator;\n  } else if (typeof Symbol.for === 'function') {\n    $$iterator = Symbol.for('iterator');\n  }\n} else {\n    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {\n      // Bug for mozilla version\n      $$iterator = '@@iterator';\n    } else if (root.Map) {\n      // es6-shim specific logic\n      let keys = Object.getOwnPropertyNames(root.Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        if (key !== 'entries' && key !== 'size' && root.Map.prototype[key] === root.Map.prototype['entries']) {\n          $$iterator = key;\n          break;\n        }\n      }\n    } else {\n      $$iterator = '@@iterator';\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/symbol/iterator.ts\n **/","import {Subscriber} from './Subscriber';\nimport {OuterSubscriber} from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/InnerSubscriber.ts\n **/","import {Observable} from '../../Observable';\nimport {concat as concatStatic} from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/concat.ts\n **/","import { concatStatic } from '../operator/concat';\n\nexport const concat = concatStatic;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/concat.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {isScheduler} from '../util/isScheduler';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {MergeAllOperator} from './mergeAll';\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  return concatStatic<T, R>(this, ...observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ConcatSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | Scheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | Scheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  let scheduler: Scheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concat.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Observer} from '../Observer';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): T {\n  return this.lift(new MergeAllOperator<T>(concurrent));\n}\n\nexport interface MergeAllSignature<T> {\n  (concurrent?: number): T;\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeAll.ts\n **/","import {Observable} from '../../Observable';\nimport {defer as staticDefer} from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/defer.ts\n **/","import { DeferObservable } from './DeferObservable';\n\nexport const defer = DeferObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/defer.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/DeferObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {empty as staticEmpty} from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/empty.ts\n **/","import { EmptyObservable } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/empty.ts\n **/","import {Observable} from '../../Observable';\nimport {forkJoin as staticForkJoin} from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/forkJoin.ts\n **/","import { ForkJoinObservable } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/forkJoin.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {EmptyObservable} from './EmptyObservable';\nimport {isArray} from '../util/isArray';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ForkJoinObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {from as staticFrom} from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/from.ts\n **/","import { FromObservable } from './FromObservable';\n\nexport const from = FromObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/from.ts\n **/","import {isArray} from '../util/isArray';\nimport {isPromise} from '../util/isPromise';\nimport {PromiseObservable} from './PromiseObservable';\nimport {IteratorObservable} from'./IteratorObservable';\nimport {ArrayObservable} from './ArrayObservable';\nimport {ArrayLikeObservable} from './ArrayLikeObservable';\n\nimport {Scheduler} from '../Scheduler';\nimport {$$iterator} from '../symbol/iterator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {ObserveOnSubscriber} from '../operator/observeOn';\nimport {$$observable} from '../symbol/observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: Scheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: Scheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/FromObservable.ts\n **/","import {root} from '../util/root';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: Scheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/PromiseObservable.ts\n **/","import {root} from '../util/root';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {$$iterator} from '../symbol/iterator';\nimport {TeardownLogic} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: Scheduler) {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: Scheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/IteratorObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {ScalarObservable} from './ScalarObservable';\nimport {EmptyObservable} from './EmptyObservable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: Scheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayLikeObservable.ts\n **/","import {Observable} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {Operator} from '../Operator';\nimport {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport interface ObserveOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: Scheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: Scheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n     this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch,\n                                      this.delay,\n                                      new ObserveOnMessage(notification, this.destination)));\n   }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/observeOn.ts\n **/","import {PartialObserver} from './Observer';\nimport {Observable} from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public exception?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.exception);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.exception);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.exception);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` exception.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Notification.ts\n **/","import {Observable} from '../../Observable';\nimport {fromEvent as staticFromEvent} from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEvent.ts\n **/","import { FromEventObservable } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/fromEvent.ts\n **/","import {Observable} from '../Observable';\nimport {tryCatch} from '../util/tryCatch';\nimport {isFunction} from '../util/isFunction';\nimport {errorObject} from '../util/errorObject';\nimport {Subscription} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\nexport type NodeStyleEventEmmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmmitter(sourceObj: any): sourceObj is NodeStyleEventEmmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T, R> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @parm {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {fromEventPattern as staticFromEventPattern} from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEventPattern.ts\n **/","import { FromEventPatternObservable } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/fromEventPattern.ts\n **/","import {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T, R> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function): void} removeHandler A function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler: (handler: Function) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler: (handler: Function) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    this._callAddHandler(handler, subscriber);\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler);\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): void {\n    try {\n      this.addHandler(handler);\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventPatternObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {fromPromise as staticFromPromise} from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromPromise.ts\n **/","import { PromiseObservable } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/fromPromise.ts\n **/","import {Observable} from '../../Observable';\nimport {GenerateObservable} from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/generate.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Action} from '../scheduler/Action';\nimport {Observable} from '../Observable' ;\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {isScheduler} from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Inital state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * Scheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: Scheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: Scheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: Scheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: Scheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | Scheduler,\n                      scheduler?: Scheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <Scheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <Scheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/GenerateObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {_if} from '../../observable/if';\n\nObservable.if = _if;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/if.ts\n **/","import { IfObservable } from './IfObservable';\n\nexport const _if = IfObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/if.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/IfObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {interval as staticInterval} from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/interval.ts\n **/","import { IntervalObservable } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/interval.ts\n **/","import {Subscriber} from '../Subscriber';\nimport {isNumeric} from '../util/isNumeric';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {async} from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified Scheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` Scheduler to provide a notion of time, but you may pass any\n   * Scheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: Scheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: Scheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/IntervalObservable.ts\n **/","import {isArray} from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isNumeric.ts\n **/","import {AsyncAction} from './AsyncAction';\nimport {AsyncScheduler} from './AsyncScheduler';\n\nexport const async = new AsyncScheduler(AsyncAction);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/async.ts\n **/","import {root} from '../util/root';\nimport {Action} from './Action';\nimport {Subscription} from '../Subscription';\nimport {AsyncScheduler} from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsyncAction.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Subscription} from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/Action.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {AsyncAction} from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsyncScheduler.ts\n **/","import {Action} from './scheduler/Action';\nimport {Subscription} from './Subscription';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Scheduler.ts\n **/","import {Observable} from '../../Observable';\nimport {merge as mergeStatic} from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/merge.ts\n **/","import { mergeStatic } from '../operator/merge';\n\nexport const merge = mergeStatic;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/merge.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {MergeAllOperator} from './mergeAll';\nimport {isScheduler} from '../util/isScheduler';\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n  observables.unshift(this);\n  return mergeStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface MergeSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  (concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler | number>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | Scheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | Scheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: Scheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <Scheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/merge.ts\n **/","import {Observable} from '../../Observable';\nimport {raceStatic} from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/race.ts\n **/","import {Observable} from '../Observable';\nimport {isArray} from '../util/isArray';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription, TeardownLogic} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  observables.unshift(this);\n  return raceStatic.apply(this, observables);\n}\n\nexport interface RaceSignature<T> {\n  (...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\n  <R>(...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n          this.add(subscription);\n        }\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/race.ts\n **/","import {Observable} from '../../Observable';\nimport {never as staticNever} from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/never.ts\n **/","import { NeverObservable } from './NeverObservable';\n\nexport const never = NeverObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/never.ts\n **/","import {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {noop} from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/NeverObservable.ts\n **/","/* tslint:disable:no-empty */\nexport function noop() { }\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/noop.ts\n **/","import {Observable} from '../../Observable';\nimport {of as staticOf} from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/of.ts\n **/","import { ArrayObservable } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/of.ts\n **/","import {Observable} from '../../Observable';\r\nimport {onErrorResumeNextStatic} from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/onErrorResumeNext.ts\n **/","import {Observable, ObservableInput} from '../Observable';\r\nimport {FromObservable} from '../observable/FromObservable';\r\nimport {Operator} from '../Operator';\r\nimport {Subscriber} from '../Subscriber';\r\nimport {isArray} from '../util/isArray';\r\nimport {OuterSubscriber} from '../OuterSubscriber';\r\nimport {InnerSubscriber} from '../InnerSubscriber';\r\nimport {subscribeToResult} from '../util/subscribeToResult';\r\n\r\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                       Array<ObservableInput<any>> |\r\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<Observable<any>>>nextSources[0];\r\n  }\r\n\r\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\n/* tslint:disable:max-line-length */\r\nexport interface OnErrorResumeNextSignature<T> {\r\n  <R>(v: ObservableInput<R>): Observable<R>;\r\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\n  <R>(array: ObservableInput<any>[]): Observable<R>;\r\n}\r\n/* tslint:enable:max-line-length */\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\r\n/* tslint:enable:max-line-length */\r\n\r\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                              Array<ObservableInput<any>> |\r\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\r\n  let source: ObservableInput<any> = null;\r\n\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\r\n  }\r\n  source = nextSources.shift();\r\n\r\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\r\n  constructor(private nextSources: Array<ObservableInput<any>>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\r\n  }\r\n}\r\n\r\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\r\n  constructor(protected destination: Subscriber<T>,\r\n              private nextSources: Array<ObservableInput<any>>) {\r\n    super(destination);\r\n  }\r\n\r\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  private subscribeToNextSource(): void {\r\n    const next = this.nextSources.shift();\r\n    if (next) {\r\n      this.add(subscribeToResult(this, next));\r\n    } else {\r\n      this.destination.complete();\r\n    }\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/onErrorResumeNext.ts\n **/","import {Observable} from '../../Observable';\r\nimport {pairs as staticPairs} from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/pairs.ts\n **/","import { PairsObservable } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/pairs.ts\n **/","import {Scheduler} from '../Scheduler';\r\nimport {Observable} from '../Observable';\r\nimport {Subscriber} from '../Subscriber';\r\nimport {TeardownLogic} from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  (<any> this).schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional Scheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional Scheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: Scheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: Scheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/PairsObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {range as staticRange} from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/range.ts\n **/","import { RangeObservable } from './RangeObservable';\n\nexport const range = RangeObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/range.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * Scheduler and just delivers the notifications synchronously, but may use\n   * an optional Scheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: Scheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: Scheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: Scheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/RangeObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {using as staticUsing} from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/using.ts\n **/","import { UsingObservable } from './UsingObservable';\n\nexport const using = UsingObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/using.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {AnonymousSubscription, TeardownLogic} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/UsingObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {_throw} from '../../observable/throw';\n\nObservable.throw = _throw;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/throw.ts\n **/","import { ErrorObservable } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/throw.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: any, scheduler?: Scheduler) {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ErrorObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {timer as staticTimer} from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/timer.ts\n **/","import { TimerObservable } from './TimerObservable';\n\nexport const timer = TimerObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/timer.ts\n **/","import {isNumeric} from '../util/isNumeric';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {async} from '../scheduler/async';\nimport {isScheduler} from '../util/isScheduler';\nimport {isDate} from '../util/isDate';\nimport {TeardownLogic} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` Scheduler to provide a notion of time, but you\n   * may pass any Scheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | Scheduler,\n                scheduler?: Scheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: Scheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <Scheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/TimerObservable.ts\n **/","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isDate.ts\n **/","import {Observable} from '../../Observable';\nimport {zip as zipStatic} from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/zip.ts\n **/","import { zipStatic } from '../operator/zip';\n\nexport const zip = zipStatic;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/zip.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {isArray} from '../util/isArray';\nimport {Operator} from '../Operator';\nimport {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {$$iterator} from '../symbol/iterator';\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  observables.unshift(this);\n  return zipStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ZipSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: Array<ObservableInput<T>>): Observable<R>;\n  <TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private index = 0;\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    const index = this.index++;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>,\n              private index: number) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/zip.ts\n **/","import {Observable} from '../../../Observable';\nimport {ajax as staticAjax} from '../../../observable/dom/ajax';\nimport {AjaxCreationMethod} from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/ajax.ts\n **/","import { AjaxObservable, AjaxCreationMethod } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/ajax.ts\n **/","import {root} from '../../util/root';\nimport {tryCatch} from '../../util/tryCatch';\nimport {errorObject} from '../../util/errorObject';\nimport {Observable} from '../../Observable';\nimport {Subscriber} from '../../Subscriber';\nimport {TeardownLogic} from '../../Subscription';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T, R>(url: string, resultSelector?: (data: T) => R, headers?: Object): Observable<R>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers }).map(x => x.response);\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function() {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // open XHR first\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // now set up the events\n      this.setupEvents(xhr, request);\n\n      // finally send the request\n      if (body) {\n        xhr.send(body);\n      } else {\n        xhr.send();\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    xhr.ontimeout = function xhrTimeout(e) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    (<any>xhr.ontimeout).request = request;\n    (<any>xhr.ontimeout).subscriber = this;\n    (<any>xhr.ontimeout).progressSubscriber = progressSubscriber;\n\n    if (xhr.upload && 'withCredentials' in xhr && root.XDomainRequest) {\n      if (progressSubscriber) {\n        xhr.onprogress = function xhrProgress(e) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        (<any>xhr.onprogress).progressSubscriber = progressSubscriber;\n      }\n\n      xhr.onerror = function xhrError(e) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      (<any>xhr.onerror).request = request;\n      (<any>xhr.onerror).subscriber = this;\n      (<any>xhr.onerror).progressSubscriber = progressSubscriber;\n    }\n\n    xhr.onreadystatechange = function xhrReadyStateChange(e) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    (<any>xhr.onreadystatechange).subscriber = this;\n    (<any>xhr.onreadystatechange).progressSubscriber = progressSubscriber;\n    (<any>xhr.onreadystatechange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4) {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || '');\n        } else {\n          this.response = JSON.parse(xhr.responseText || '');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/AjaxObservable.ts\n **/","import {Observable} from '../../../Observable';\nimport {webSocket as staticWebSocket} from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/webSocket.ts\n **/","import { WebSocketSubject } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/webSocket.ts\n **/","import {Subject, AnonymousSubject} from '../../Subject';\nimport {Subscriber} from '../../Subscriber';\nimport {Observable} from '../../Observable';\nimport {Subscription} from '../../Subscription';\nimport {Operator} from '../../Operator';\nimport {root} from '../../util/root';\nimport {ReplaySubject} from '../../ReplaySubject';\nimport {Observer, NextObserver} from '../../Observer';\nimport {tryCatch} from '../../util/tryCatch';\nimport {errorObject} from '../../util/errorObject';\nimport {assign} from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * @param urlConfigOrSource\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const socket = this.protocol ?\n      new WebSocketCtor(this.url, this.protocol) :\n      new WebSocketCtor(this.url);\n    this.socket = socket;\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    const observer = this._output;\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => observer.error(e);\n\n    socket.onclose = (e: CloseEvent) => {\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0 && socket && socket.readyState === 1) {\n        socket.close();\n        this.socket = null;\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this.socket = null;\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/WebSocketSubject.ts\n **/","import {Subject} from './Subject';\nimport {Scheduler} from './Scheduler';\nimport {queue} from './scheduler/queue';\nimport {Subscriber} from './Subscriber';\nimport {Subscription} from './Subscription';\nimport {ObserveOnSubscriber} from './operator/observeOn';\n\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: Scheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/ReplaySubject.ts\n **/","import {QueueAction} from './QueueAction';\nimport {QueueScheduler} from './QueueScheduler';\n\nexport const queue = new QueueScheduler(QueueAction);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/queue.ts\n **/","import {AsyncAction} from './AsyncAction';\nimport {Subscription} from '../Subscription';\nimport {QueueScheduler} from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, enqueue as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueAction.ts\n **/","import {AsyncScheduler} from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueScheduler.ts\n **/","import {root} from './root';\n\nconst Object = root.Object;\n\nif (typeof (<any>Object).assign != 'function') {\n  (function () {\n    (<any>Object).assign = function assignPolyfill(target: Object, ...sources: Array<Object>): Object {\n      if (target === undefined || target === null) {\n        throw new TypeError('cannot convert undefined or null to object');\n      }\n\n      const output = Object(target);\n      const len = sources.length;\n      for (let index = 0; index < len; index++) {\n        let source = sources[index];\n        if (source !== undefined && source !== null) {\n          for (let key in source) {\n            if (source.hasOwnProperty(key)) {\n              output[key] = source[key];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  })();\n}\n\nexport const assign: (target: Object, ...sources: Array<Object>) => Object = Object.assign;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/assign.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {buffer, BufferSignature} from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: BufferSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/buffer.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nexport interface BufferSignature<T> {\n  (closingNotifier: Observable<any>): Observable<T[]>;\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/buffer.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferCount, BufferCountSignature} from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: BufferCountSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferCount.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nexport interface BufferCountSignature<T> {\n  (bufferSize: number, startBufferEvery?: number): Observable<T[]>;\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [[]];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = (this.count += 1);\n    const destination = this.destination;\n    const bufferSize = this.bufferSize;\n    const startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n    const buffers = this.buffers;\n    const len = buffers.length;\n    let remove = -1;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = 0; i < len; i++) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        remove = i;\n        destination.next(buffer);\n      }\n    }\n\n    if (remove !== -1) {\n      buffers.splice(remove, 1);\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferCount.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferTime, BufferTimeSignature} from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: BufferTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferTime.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Action} from '../scheduler/Action';\nimport {Operator} from '../Operator';\nimport {async} from '../scheduler/async';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {isScheduler} from '../util/isScheduler';\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: Scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nexport interface BufferTimeSignature<T> {\n  (bufferTimeSpan: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: Scheduler): Observable<T[]>;\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: Scheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = (<any>this).schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferToggle, BufferToggleSignature} from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: BufferToggleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferToggle.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscription} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface BufferToggleSignature<T> {\n  <O>(openings: SubscribableOrPromise<O>, closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]>;\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferToggle.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferWhen, BufferWhenSignature} from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: BufferWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nexport interface BufferWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<T[]>;\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferWhen.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {cache, CacheSignature} from '../../operator/cache';\n\nObservable.prototype.cache = cache;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    cache: CacheSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/cache.ts\n **/","import {Observable} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {ReplaySubject} from '../ReplaySubject';\nimport {Observer} from '../Observer';\nimport {Subscription} from '../Subscription';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {Observable<any>}\n * @method cache\n * @owner Observable\n */\nexport function cache<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                         windowTime: number = Number.POSITIVE_INFINITY,\n                         scheduler?: Scheduler): Observable<T> {\n  let subject: ReplaySubject<T>;\n  let source = this;\n  let refs = 0;\n  let outerSub: Subscription;\n\n  const getSubject = () => {\n    subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n    return subject;\n  };\n\n  return new Observable<T>((observer: Observer<T>) => {\n    if (!subject) {\n      subject = getSubject();\n      outerSub = source.subscribe(\n        (value: T) => subject.next(value),\n        (err: any) => {\n          let s = subject;\n          subject = null;\n          s.error(err);\n        },\n        () => subject.complete()\n      );\n    }\n\n    refs++;\n\n    if (!subject) {\n      subject = getSubject();\n    }\n    let innerSub = subject.subscribe(observer);\n\n    return () => {\n      refs--;\n      if (innerSub) {\n        innerSub.unsubscribe();\n      }\n      if (refs === 0) {\n        outerSub.unsubscribe();\n      }\n    };\n  });\n}\n\nexport interface CacheSignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/cache.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {_catch, CatchSignature} from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: CatchSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/catch.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, ObservableInput} from '../Observable';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @owner Observable\n */\nexport function _catch<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nexport interface CatchSignature<T> {\n  (selector: (err: any, caught: Observable<T>) => ObservableInput<T>): Observable<T>;\n  <R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R>;\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.unsubscribe();\n      (<any>this.destination).remove(this);\n      subscribeToResult(this, result);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/catch.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {combineAll, CombineAllSignature} from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: CombineAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineAll.ts\n **/","import {CombineLatestOperator} from './combineLatest';\nimport {Observable} from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n\nexport interface CombineAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/combineAll.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {combineLatest, CombineLatestSignature} from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: CombineLatestSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineLatest.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concat, ConcatSignature} from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: ConcatSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concat.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concatAll, ConcatAllSignature} from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: ConcatAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatAll.ts\n **/","import {Subscribable} from '../Observable';\nimport {MergeAllOperator} from './mergeAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): T {\n  return this.lift(new MergeAllOperator<T>(1));\n}\n\nexport interface ConcatAllSignature<T> {\n  (): T;\n  <R>(): Subscribable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concatAll.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concatMap, ConcatMapSignature} from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: ConcatMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMap.ts\n **/","import {MergeMapOperator} from './mergeMap';\nimport {Observable, ObservableInput} from '../Observable';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n\nexport interface ConcatMapSignature<T> {\n  <R>(project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concatMap.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source._subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concatMapTo, ConcatMapToSignature} from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: ConcatMapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMapTo.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {MergeMapToOperator} from './mergeMapTo';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n\nexport interface ConcatMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concatMapTo.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Operator} from '../Operator';\nimport {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapToSignature<T> {\n  <R>(observable: ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {count, CountSignature} from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: CountSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/count.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Observer} from '../Observer';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nexport interface CountSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number>;\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/count.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {dematerialize, DematerializeSignature} from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: DematerializeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/dematerialize.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nexport interface DematerializeSignature<T> {\n  <R>(): Observable<R>;\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source._subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/dematerialize.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {debounce, DebounceSignature} from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: DebounceSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounce.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription, TeardownLogic} from '../Subscription';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nexport interface DebounceSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/debounce.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {debounceTime, DebounceTimeSignature} from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: DebounceTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounceTime.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {Subscription, TeardownLogic} from '../Subscription';\nimport {async} from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nexport interface DebounceTimeSignature<T> {\n  (dueTime: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/debounceTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {defaultIfEmpty, DefaultIfEmptySignature} from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: DefaultIfEmptySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/defaultIfEmpty.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nexport interface DefaultIfEmptySignature<T> {\n  (defaultValue?: T): Observable<T>;\n  <R>(defaultValue?: R): Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/defaultIfEmpty.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {delay, DelaySignature} from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: DelaySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/delay.ts\n **/","import {async} from '../scheduler/async';\nimport {isDate} from '../util/isDate';\nimport {Operator} from '../Operator';\nimport {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The Scheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: Scheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nexport interface DelaySignature<T> {\n  (delay: number | Date, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: Scheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/delay.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {delayWhen, DelayWhenSignature} from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: DelayWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/delayWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subscription, TeardownLogic} from '../Subscription';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nexport interface DelayWhenSignature<T> {\n  (delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): Observable<T>;\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/delayWhen.ts\n **/","import {Observable} from '../../Observable';\nimport {distinct, DistinctSignature} from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: DistinctSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinct.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T>(compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(compare, flushes));\n}\n\nexport interface DistinctSignature<T> {\n  (compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n\nclass DistinctOperator<T> implements Operator<T, T> {\n  constructor(private compare: (x: T, y: T) => boolean, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T> extends OuterSubscriber<T, T> {\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>, compare: (x: T, y: T) => boolean, flushes: Observable<any>) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.length = 0;\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    let found = false;\n    const values = this.values;\n    const len = values.length;\n    try {\n      for (let i = 0; i < len; i++) {\n        if (this.compare(values[i], value)) {\n          found = true;\n          return;\n        }\n      }\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.values.push(value);\n    this.destination.next(value);\n  }\n\n  private compare(x: T, y: T): boolean {\n    return x === y;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinct.ts\n **/","import {Observable} from '../../Observable';\nimport {distinctKey, DistinctKeySignature} from '../../operator/distinctKey';\n\nObservable.prototype.distinctKey = distinctKey;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctKey: DistinctKeySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctKey.ts\n **/","import {distinct} from './distinct';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctKey\n * @owner Observable\n */\nexport function distinctKey<T>(key: string, compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return distinct.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  }, flushes);\n}\n\nexport interface DistinctKeySignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinctKey.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {distinctUntilChanged, DistinctUntilChangedSignature} from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: DistinctUntilChangedSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilChanged.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nexport interface DistinctUntilChangedSignature<T> {\n (compare?: (x: T, y: T) => boolean): Observable<T>;\n <K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilChanged.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {distinctUntilKeyChanged, DistinctUntilKeyChangedSignature} from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: DistinctUntilKeyChangedSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilKeyChanged.ts\n **/","import {distinctUntilChanged} from './distinctUntilChanged';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n\nexport interface DistinctUntilKeyChangedSignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilKeyChanged.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {_do, DoSignature} from '../../operator/do';\n\nObservable.prototype.do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: DoSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/do.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {PartialObserver} from '../Observer';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nexport interface DoSignature<T> {\n  (next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\n  (observer: PartialObserver<T>): Observable<T>;\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/do.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {exhaust, SwitchFirstSignature} from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: SwitchFirstSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaust.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription, TeardownLogic} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nexport interface SwitchFirstSignature<T> {\n  (): T;\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/exhaust.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {exhaustMap, SwitchFirstMapSignature} from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: SwitchFirstMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaustMap.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nexport interface SwitchFirstMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/exhaustMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {expand, ExpandSignature} from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: ExpandSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/expand.ts\n **/","import {Observable} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: Scheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport interface ExpandSignature<T> {\n  (project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/expand.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {elementAt, ElementAtSignature} from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: ElementAtSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/elementAt.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {ArgumentOutOfRangeError} from '../util/ArgumentOutOfRangeError';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nexport interface ElementAtSignature<T> {\n  (index: number, defaultValue?: T): Observable<T>;\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/elementAt.ts\n **/","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/ArgumentOutOfRangeError.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {filter, FilterSignature} from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: FilterSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/filter.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctKey}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nexport interface FilterSignature<T> {\n  (predicate: (value: T, index: number) => boolean, thisArg?: any): Observable<T>;\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/filter.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {_finally, FinallySignature} from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: FinallySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/finally.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription, TeardownLogic} from '../Subscription';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nexport interface FinallySignature<T> {\n  (callback: () => void): Observable<T>;\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/finally.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {find, FindSignature} from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: FindSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/find.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport interface FindSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<T>;\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/find.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {findIndex, FindIndexSignature} from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: FindIndexSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/findIndex.ts\n **/","import {Observable} from '../Observable';\nimport {FindValueOperator} from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return this.lift(new FindValueOperator(predicate, this, true, thisArg));\n}\n\nexport interface FindIndexSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<number>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/findIndex.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {first, FirstSignature} from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: FirstSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/first.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {EmptyError} from '../util/EmptyError';\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface FirstSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    destination.next(value);\n    destination.complete();\n    this.hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/first.ts\n **/","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/EmptyError.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {groupBy, GroupBySignature} from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: GroupBySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/groupBy.ts\n **/","import {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subject} from '../Subject';\nimport {Map} from '../util/Map';\nimport {FastMap} from '../util/FastMap';\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: (value: T) => R,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n}\n\n/* tslint:disable:max-line-length */\nexport interface GroupBySignature<T> {\n  <K>(keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\n  <K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\n  <K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\n}\n/* tslint:enable:max-line-length */\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(public source: Observable<T>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source._subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      groups.set(key, group = new Subject<R>());\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed && !this.attemptedToUnsubscribe) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/groupBy.ts\n **/","import {root} from './root';\nimport {MapPolyfill} from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/Map.ts\n **/","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/MapPolyfill.ts\n **/","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/FastMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {ignoreElements, IgnoreElementsSignature} from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: IgnoreElementsSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/ignoreElements.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {noop} from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nexport interface IgnoreElementsSignature<T> {\n  (): Observable<T>;\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/ignoreElements.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {isEmpty, IsEmptySignature} from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: IsEmptySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/isEmpty.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty(): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nexport interface IsEmptySignature<T> {\n  (): Observable<boolean>;\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/isEmpty.ts\n **/","import {Observable} from '../../Observable';\nimport {audit, AuditSignature} from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: AuditSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/audit.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscription, TeardownLogic} from '../Subscription';\n\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nexport interface AuditSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T>;\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/audit.ts\n **/","import {Observable} from '../../Observable';\nimport {auditTime, AuditTimeSignature} from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: AuditTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/auditTime.ts\n **/","import {async} from '../scheduler/async';\nimport {Operator} from '../Operator';\nimport {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subscription, TeardownLogic} from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nexport interface AuditTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/auditTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {last, LastSignature} from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: LastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/last.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {EmptyError} from '../util/EmptyError';\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface LastSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/last.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {letProto, LetSignature} from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: LetSignature<T>;\n    letBind: LetSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/let.ts\n **/","import {Observable} from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n\nexport interface LetSignature<T> {\n  <R>(func: (selector: Observable<T>) => Observable<R>): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/let.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {every, EverySignature} from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: EverySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/every.ts\n **/","import {Operator} from '../Operator';\nimport {Observer} from '../Observer';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nexport interface EverySignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<boolean>;\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/every.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {map, MapSignature} from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: MapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/map.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport interface MapSignature<T> {\n  <R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R>;\n}\n\nclass MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/map.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mapTo, MapToSignature} from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: MapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mapTo.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nexport interface MapToSignature<T> {\n  <R>(value: R): Observable<R>;\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {materialize, MaterializeSignature} from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: MaterializeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/materialize.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nexport interface MaterializeSignature<T> {\n  (): Observable<Notification<T>>;\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source._subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/materialize.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {max, MaxSignature} from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: MaxSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/max.ts\n **/","import {Observable} from '../Observable';\nimport {ReduceOperator} from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the largest number.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest number.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => T): Observable<T> {\n  const max: typeof comparer = (typeof comparer === 'function')\n    ? comparer\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n\nexport interface MaxSignature<T> {\n  (comparer?: (x: T, y: T) => T): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/max.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T) => R, seed?: R): Observable<R> {\n  return this.lift(new ReduceOperator(accumulator, seed));\n}\n\nexport interface ReduceSignature<T> {\n  (accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\n  (accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\n  <R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n\n  constructor(private accumulator: (acc: R, value: T) => R, private seed?: R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n\n  acc: T | R;\n  hasSeed: boolean;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => R,\n              seed?: R) {\n    super(destination);\n    this.acc = seed;\n    this.accumulator = accumulator;\n    this.hasSeed = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/reduce.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {merge, MergeSignature} from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: MergeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/merge.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeAll, MergeAllSignature} from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: MergeAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeAll.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeMap, MergeMapSignature} from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: MergeMapSignature<T>;\n    mergeMap: MergeMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeMapTo, MergeMapToSignature} from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: MergeMapToSignature<T>;\n    mergeMapTo: MergeMapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeScan, MergeScanSignature} from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: MergeScanSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeScan.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(project: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\n\nexport interface MergeScanSignature<T> {\n  <R>(project: (acc: R, value: T) => Observable<R>, seed: R, concurrent?: number): Observable<R>;\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeScanSubscriber(\n      subscriber, this.project, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.project)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeScan.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {min, MinSignature} from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: MinSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/min.ts\n **/","import {Observable} from '../Observable';\nimport {ReduceOperator} from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => T): Observable<T> {\n  const min: typeof comparer = (typeof comparer === 'function')\n    ? comparer\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n\nexport interface MinSignature<T> {\n  (comparer?: (x: T, y: T) => T): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/min.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {multicast, MulticastSignature} from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: MulticastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/multicast.ts\n **/","import {Subject} from '../Subject';\nimport {Observable} from '../Observable';\nimport {MulticastObservable} from '../observable/MulticastObservable';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  return !selector ?\n    new ConnectableObservable(this, subjectFactory) :\n    new MulticastObservable(this, subjectFactory, selector);\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface MulticastSignature<T> {\n  (subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\n  (SubjectFactory: () => Subject<T>, selector?: selector<T>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/multicast.ts\n **/","import {Subject} from '../Subject';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\nexport class MulticastObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>,\n              private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { selector, source } = this;\n    const connectable = new ConnectableObservable(source, this.subjectFactory);\n    const subscription = selector(connectable).subscribe(subscriber);\n    subscription.add(connectable.connect());\n    return subscription;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/MulticastObservable.ts\n **/","import {Subject, SubjectSubscriber} from '../Subject';\nimport {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription, TeardownLogic} from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source._subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ConnectableObservable.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {observeOn, ObserveOnSignature} from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: ObserveOnSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/observeOn.ts\n **/","import {Observable} from '../../Observable';\r\nimport {onErrorResumeNext, OnErrorResumeNextSignature} from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: OnErrorResumeNextSignature<T>;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/onErrorResumeNext.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {pairwise, PairwiseSignature} from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: PairwiseSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/pairwise.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nexport interface PairwiseSignature<T> {\n  (): Observable<[T, T]>;\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source._subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/pairwise.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {partition, PartitionSignature} from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: PartitionSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/partition.ts\n **/","import {not} from '../util/not';\nimport {filter} from './filter';\nimport {Observable} from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n\nexport interface PartitionSignature<T> {\n  (predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>];\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/partition.ts\n **/","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/not.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {pluck, PluckSignature} from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: PluckSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/pluck.ts\n **/","import {Observable} from '../Observable';\nimport {map} from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<R>(...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nexport interface PluckSignature<T> {\n  <R>(...properties: string[]): Observable<R>;\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/pluck.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publish, PublishSignature} from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: PublishSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publish.ts\n **/","import {Subject} from '../Subject';\nimport {Observable} from '../Observable';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface PublishSignature<T> {\n  (): ConnectableObservable<T>;\n  (selector: selector<T>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publish.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publishBehavior, PublishBehaviorSignature} from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: PublishBehaviorSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishBehavior.ts\n **/","import {BehaviorSubject} from '../BehaviorSubject';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n\nexport interface PublishBehaviorSignature<T> {\n  (value: T): ConnectableObservable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publishBehavior.ts\n **/","import {Subject} from './Subject';\nimport {Subscriber} from './Subscriber';\nimport {Subscription, ISubscription} from './Subscription';\nimport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/BehaviorSubject.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publishReplay, PublishReplaySignature} from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: PublishReplaySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishReplay.ts\n **/","import {ReplaySubject} from '../ReplaySubject';\nimport {Scheduler} from '../Scheduler';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: Scheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n\nexport interface PublishReplaySignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): ConnectableObservable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publishReplay.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publishLast, PublishLastSignature} from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: PublishLastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishLast.ts\n **/","import {AsyncSubject} from '../AsyncSubject';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n\nexport interface PublishLastSignature<T> {\n  (): ConnectableObservable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publishLast.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {race, RaceSignature} from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: RaceSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/race.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {reduce, ReduceSignature} from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: ReduceSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/reduce.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {repeat, RepeatSignature} from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: RepeatSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/repeat.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {EmptyObservable} from '../observable/EmptyObservable';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular Scheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nexport interface RepeatSignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/repeat.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {retry, RetrySignature} from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: RetrySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/retry.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nexport interface RetrySignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/retry.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {retryWhen, RetryWhenSignature} from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: RetryWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/retryWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\nimport {Subscription, TeardownLogic} from '../Subscription';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nexport interface RetryWhenSignature<T> {\n  (notifier: (errors: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/retryWhen.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {sample, SampleSignature} from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: SampleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/sample.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nexport interface SampleSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<any>, notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/sample.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {sampleTime, SampleTimeSignature} from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: SampleTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/sampleTime.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {async} from '../scheduler/async';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nexport interface SampleTimeSignature<T> {\n  (period: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  (<any>this).schedule(state, period);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/sampleTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {ReduceSignature} from '../../operator/reduce';\nimport {scan} from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: ReduceSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/scan.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  return this.lift(new ScanOperator(accumulator, seed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private accumulatorSet: boolean = false;\n  private _seed: T | R;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.accumulatorSet = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, seed?: T | R) {\n    super(destination);\n    this.seed = seed;\n    this.accumulatorSet = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T): void {\n    if (!this.accumulatorSet) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/scan.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {share, ShareSignature} from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: ShareSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/share.ts\n **/","import {Observable} from '../Observable';\nimport {multicast} from './multicast';\nimport {Subject} from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n\nexport interface ShareSignature<T> {\n  (): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/share.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {single, SingleSignature} from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: SingleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/single.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observer} from '../Observer';\nimport {EmptyError} from '../util/EmptyError';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nexport interface SingleSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/single.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {skip, SkipSignature} from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: SkipSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/skip.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nexport interface SkipSignature<T> {\n  (total: number): Observable<T>;\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/skip.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {skipUntil, SkipUntilSignature} from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: SkipUntilSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipUntil.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nexport interface SkipUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/skipUntil.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {skipWhile, SkipWhileSignature} from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: SkipWhileSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipWhile.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nexport interface SkipWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/skipWhile.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {startWith, StartWithSignature} from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: StartWithSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/startWith.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {ScalarObservable} from '../observable/ScalarObservable';\nimport {EmptyObservable} from '../observable/EmptyObservable';\nimport {concatStatic} from './concat';\nimport {isScheduler} from '../util/isScheduler';\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | Scheduler>): Observable<T> {\n  let scheduler = <Scheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n\nexport interface StartWithSignature<T> {\n  (v1: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: Scheduler): Observable<T>;\n  (...array: Array<T | Scheduler>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/startWith.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {subscribeOn, SubscribeOnSignature} from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: SubscribeOnSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/subscribeOn.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {SubscribeOnObservable} from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the Scheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return new SubscribeOnObservable<T>(this, delay, scheduler);\n}\n\nexport interface SubscribeOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/subscribeOn.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\nimport {asap} from '../scheduler/asap';\nimport {isNumeric} from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: Scheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return source.subscribe(subscriber);\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: Scheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/SubscribeOnObservable.ts\n **/","import {AsapAction} from './AsapAction';\nimport {AsapScheduler} from './AsapScheduler';\n\nexport const asap = new AsapScheduler(AsapAction);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/asap.ts\n **/","import {Immediate} from '../util/Immediate';\nimport {AsyncAction} from './AsyncAction';\nimport {AsapScheduler} from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapAction.ts\n **/","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport { root } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/Immediate.ts\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/timers-browserify/main.js\n ** module id = 288\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout.call(null, cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout.call(null, timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout.call(null, drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 289\n ** module chunks = 0\n **/","import {AsyncAction} from './AsyncAction';\nimport {AsyncScheduler} from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapScheduler.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {_switch, SwitchSignature} from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: SwitchSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/switch.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(): T {\n  return this.lift(new SwitchOperator());\n}\n\nexport interface SwitchSignature<T> {\n  (): T;\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/switch.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {switchMap, SwitchMapSignature} from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: SwitchMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMap.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nexport interface SwitchMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/switchMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {switchMapTo, SwitchMapToSignature} from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: SwitchMapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMapTo.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nexport interface SwitchMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/switchMapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {take, TakeSignature} from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: TakeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/take.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {ArgumentOutOfRangeError} from '../util/ArgumentOutOfRangeError';\nimport {EmptyObservable} from '../observable/EmptyObservable';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nexport interface TakeSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    if (++this.count <= total) {\n      this.destination.next(value);\n      if (this.count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/take.ts\n **/","import {Observable} from '../../Observable';\nimport {takeLast, TakeLastSignature} from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: TakeLastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeLast.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {ArgumentOutOfRangeError} from '../util/ArgumentOutOfRangeError';\nimport {EmptyObservable} from '../observable/EmptyObservable';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nexport interface TakeLastSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/takeLast.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {takeUntil, TakeUntilSignature} from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: TakeUntilSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeUntil.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nexport interface TakeUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/takeUntil.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {takeWhile, TakeWhileSignature} from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: TakeWhileSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeWhile.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nexport interface TakeWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/takeWhile.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {throttle, ThrottleSignature} from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: ThrottleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttle.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription, TeardownLogic} from '../Subscription';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nexport interface ThrottleSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/throttle.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {throttleTime, ThrottleTimeSignature} from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: ThrottleTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttleTime.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {Subscription, TeardownLogic} from '../Subscription';\nimport {async} from '../scheduler/async';\nimport {Observable} from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nexport interface ThrottleTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/throttleTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {timeInterval, TimeIntervalSignature} from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: TimeIntervalSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeInterval.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {async} from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(scheduler: Scheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport interface TimeIntervalSignature<T> {\n  (scheduler?: Scheduler): Observable<TimeInterval<T>>;\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: Scheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: Scheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timeInterval.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {timeout, TimeoutSignature} from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: TimeoutSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeout.ts\n **/","import {async} from '../scheduler/async';\nimport {isDate} from '../util/isDate';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * @param due\n * @param errorToSend\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           errorToSend: any = null,\n                           scheduler: Scheduler = async): Observable<T> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n}\n\nexport interface TimeoutSignature<T> {\n  (due: number | Date, errorToSend?: any, scheduler?: Scheduler): Observable<T>;\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout() {\n    this.error(this.errorToSend || new Error('timeout'));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timeout.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {timeoutWith, TimeoutWithSignature} from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: TimeoutWithSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeoutWith.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {async} from '../scheduler/async';\nimport {Subscription, TeardownLogic} from '../Subscription';\nimport {Observable} from '../Observable';\nimport {isDate} from '../util/isDate';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: Observable<R>,\n                                  scheduler: Scheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nexport interface TimeoutWithSignature<T> {\n  (due: number | Date, withObservable: Observable<T>, scheduler?: Scheduler): Observable<T>;\n  <R>(due: number | Date, withObservable: Observable<R>, scheduler?: Scheduler): Observable<T | R>;\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: Observable<any>,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: Observable<any>,\n              private scheduler: Scheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timeoutWith.ts\n **/","import {Observable} from '../../Observable';\r\nimport {timestamp, TimestampSignature} from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: TimestampSignature<T>;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timestamp.ts\n **/","import {Operator} from '../Operator';\r\nimport {Observable} from '../Observable';\r\nimport {Subscriber} from '../Subscriber';\r\nimport {Scheduler} from '../Scheduler';\r\nimport {async} from '../scheduler/async';\r\n\r\n/**\r\n * @param scheduler\r\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\r\n * @method timestamp\r\n * @owner Observable\r\n */\r\nexport function timestamp<T>(scheduler: Scheduler = async): Observable<Timestamp<T>> {\r\n  return this.lift(new TimestampOperator(scheduler));\r\n}\r\n\r\nexport interface TimestampSignature<T> {\r\n  (scheduler?: Scheduler): Observable<Timestamp<T>>;\r\n}\r\n\r\nexport class Timestamp<T> {\r\n  constructor(public value: T, public timestamp: number) {\r\n  }\r\n};\r\n\r\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\r\n  constructor(private scheduler: Scheduler) {\r\n  }\r\n\r\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\r\n    return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\r\n  }\r\n}\r\n\r\nclass TimestampSubscriber<T> extends Subscriber<T> {\r\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: Scheduler) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const now = this.scheduler.now();\r\n\r\n    this.destination.next(new Timestamp(value, now));\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timestamp.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {toArray, ToArraySignature} from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: ToArraySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/toArray.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nexport interface ToArraySignature<T> {\n  (): Observable<T[]>;\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/toArray.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {toPromise, ToPromiseSignature} from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: ToPromiseSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/toPromise.ts\n **/","import {root} from '../util/root';\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n\nexport interface ToPromiseSignature<T> {\n  (): Promise<T>;\n  (PromiseCtor: typeof Promise): Promise<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/toPromise.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {window, WindowSignature} from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: WindowSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/window.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nexport interface WindowSignature<T> {\n  (windowBoundaries: Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source._subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/window.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowCount, WindowCountSignature} from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: WindowCountSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowCount.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nexport interface WindowCountSignature<T> {\n  (windowSize: number, startWindowEvery?: number): Observable<Observable<T>>;\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowCount.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowTime, WindowTimeSignature} from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: WindowTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowTime.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Action} from '../scheduler/Action';\nimport {Subject} from '../Subject';\nimport {Operator} from '../Operator';\nimport {async} from '../scheduler/async';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: Scheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nexport interface WindowTimeSignature<T> {\n  (windowTimeSpan: number, windowCreationInterval?: number, scheduler?: Scheduler): Observable<Observable<T>>;\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: Scheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      let window = this.openWindow();\n      const closeState = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      let window = this.openWindow();\n      const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T) {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  closeWindow(window: Subject<T>) {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\ninterface TimeSpanOnlyState<T> {\n  window: Subject<any>;\n  windowTimeSpan: number;\n  subscriber: WindowTimeSubscriber<T>;\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(state: TimeSpanOnlyState<T>) {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    window.complete();\n  }\n  state.window = subscriber.openWindow();\n  (<any>this).schedule(state, windowTimeSpan);\n}\n\ninterface Context<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface DispatchArg<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: Context<T>;\n}\n\nfunction dispatchWindowCreation<T>(state: CreationState<T>) {\n  let { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  let window = subscriber.openWindow();\n  let action = <Action<CreationState<T>>>this;\n  let context: Context<T> = { action, subscription: <any>null };\n  const timeSpanState: DispatchArg<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, window, context } = arg;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowToggle, WindowToggleSignature} from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: WindowToggleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowToggle.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\nimport {Subscription} from '../Subscription';\n\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface WindowToggleSignature<T> {\n  <O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowToggle.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowWhen, WindowWhenSignature} from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: WindowWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\nimport {Subscription} from '../Subscription';\n\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nexport interface WindowWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowWhen.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {withLatestFrom, WithLatestFromSignature} from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: WithLatestFromSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/withLatestFrom.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, ObservableInput} from '../Observable';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface WithLatestFromSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<any>[]): Observable<R>;\n  <R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/withLatestFrom.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {zipProto, ZipSignature} from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: ZipSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/zip.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {zipAll, ZipAllSignature} from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: ZipAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/zipAll.ts\n **/","import {ZipOperator} from './zip';\nimport {Observable} from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n\nexport interface ZipAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/zipAll.ts\n **/","import {Observable} from '../Observable';\nimport {Notification} from '../Notification';\nimport {Subject} from '../Subject';\nimport {ColdObservable} from './ColdObservable';\nimport {HotObservable} from './HotObservable';\nimport {TestMessage} from './TestMessage';\nimport {SubscriptionLog} from './SubscriptionLog';\nimport {Subscription} from '../Subscription';\nimport {VirtualTimeScheduler} from '../scheduler/VirtualTimeScheduler';\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super();\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/TestScheduler.ts\n **/","import {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {TestMessage} from './TestMessage';\nimport {SubscriptionLog} from './SubscriptionLog';\nimport {SubscriptionLoggable} from './SubscriptionLoggable';\nimport {applyMixins} from '../util/applyMixins';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/ColdObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {SubscriptionLog} from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLoggable.ts\n **/","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLog.ts\n **/","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/applyMixins.ts\n **/","import {Subject} from '../Subject';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {TestMessage} from './TestMessage';\nimport {SubscriptionLog} from './SubscriptionLog';\nimport {SubscriptionLoggable} from './SubscriptionLoggable';\nimport {applyMixins} from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/HotObservable.ts\n **/","import {AsyncAction} from './AsyncAction';\nimport {Subscription} from '../Subscription';\nimport {AsyncScheduler} from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = 750) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return !this.id ?\n      super.schedule(state, delay) : (\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      <VirtualAction<T>> this.add(\n        new VirtualAction<T>(this.scheduler, this.work))\n      ).schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/VirtualTimeScheduler.ts\n **/","import {AnimationFrameAction} from './AnimationFrameAction';\nimport {AnimationFrameScheduler} from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/animationFrame.ts\n **/","import {AsyncAction} from './AsyncAction';\nimport {AnimationFrame} from '../util/AnimationFrame';\nimport {AnimationFrameScheduler} from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameAction.ts\n **/","import { root } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/AnimationFrame.ts\n **/","import {AsyncAction} from './AsyncAction';\nimport {AsyncScheduler} from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameScheduler.ts\n **/","import { Observable, Subscriber, AjaxResponse, AjaxRequest } from '@reactivex/rxjs';\nimport { BotConversation, BotMessage, BotMessageGroup } from './directLineTypes'; \n\nconst domain = \"https://directline.botframework.com\";\nconst baseUrl = `${domain}/api/conversations`;\n\nexport const imageURL = (path:string) => domain + path;\n\nexport const startConversation = (appSecret: string) =>\n    Observable\n        .ajax({\n            method: \"POST\",\n            url: `${baseUrl}`,\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Authorization\": `BotConnector ${appSecret}` \n            }\n        })\n//        .do(ajaxResponse => console.log(\"conversation ajaxResponse\", ajaxResponse))\n        .retryWhen(error$ => error$.delay(1000))\n        .map(ajaxResponse => ajaxResponse.response as BotConversation);\n\nexport const postMessage = (text: string, conversation: BotConversation, userId: string) =>\n    Observable\n        .ajax({\n            method: \"POST\",\n            url: `${baseUrl}/${conversation.conversationId}/messages`,\n            body: {\n                text: text,\n                from: userId,\n                conversationId: conversation.conversationId\n            },\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `BotConnector ${conversation.token}`\n            }\n        })\n//        .do(ajaxResponse => console.log(\"post message ajaxResponse\", ajaxResponse))\n        .retryWhen(error$ => error$.delay(1000))\n        .map(ajaxResponse => true);\n\nexport const postFile = (file: File, conversation: BotConversation) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return Observable\n        .ajax({\n            method: \"POST\",\n            url: `${baseUrl}/${conversation.conversationId}/upload`,\n            body: formData,\n            headers: {\n                \"Authorization\": `BotConnector ${conversation.token}`\n            }\n        })\n//        .do(ajaxResponse => console.log(\"post file ajaxResponse\", ajaxResponse))\n        .retryWhen(error$ => error$.delay(1000))\n        .map(ajaxResponse => true)\n}\n\nexport const getMessages = (conversation: BotConversation) =>\n    new Observable<Observable<BotMessage>>((subscriber:Subscriber<Observable<BotMessage>>) =>\n        messagesGenerator(conversation, subscriber)\n    )\n    .concatAll();\n\nconst messagesGenerator = (conversation: BotConversation, subscriber: Subscriber<Observable<BotMessage>>, watermark?: string) => {\n    getMessageGroup(conversation, watermark).subscribe(\n        messageGroup => {\n            const someMessages = messageGroup && messageGroup.messages && messageGroup.messages.length > 0;\n            if (someMessages)\n                subscriber.next(Observable.from(messageGroup.messages));\n\n            setTimeout(\n                () => messagesGenerator(conversation, subscriber, messageGroup && messageGroup.watermark),\n                someMessages && messageGroup.watermark ? 0 : 3000\n            );\n        },\n        error => subscriber.error(error)\n    );\n}\n\nconst getMessageGroup = (conversation: BotConversation, watermark = \"\") =>\n    Observable\n        .ajax({\n            method: \"GET\",\n            url: `${baseUrl}/${conversation.conversationId}/messages?watermark=${watermark}`,\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Authorization\": `BotConnector ${conversation.token}`\n            }\n        })\n//        .do(ajaxResponse => console.log(\"get messages ajaxResponse\", ajaxResponse))\n        .retryWhen(error$ => error$.delay(1000))\n        .map(ajaxResponse => ajaxResponse.response as BotMessageGroup);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directLine.ts\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Timestamp } from './Timestamp.tsx';\nimport { MessageGroup, HistoryActions } from './App.tsx';\nimport { HistoryMessage } from './HistoryMessage.tsx';\n\ninterface Props {\n    messagegroups: MessageGroup[],\n    autoscroll: boolean,\n    actions: HistoryActions\n}\n\nexport class History extends React.Component<Props, {}> {\n    scrollme:any;\n    constructor(props:Props) {\n        super();\n    }\n\n    componentDidUpdate(prevProps:Props, prevState:{}) {\n        if (this.props.autoscroll)\n            this.scrollme.scrollTop = this.scrollme.scrollHeight;\n    }\n\n    render() {\n        return ( \n            <div className=\"wc-message-groups\" ref={ref => this.scrollme = ref} onScroll={ e => this.props.actions.setAutoscroll(e.target.scrollTop + e.target.offsetHeight >= e.target.scrollHeight) }>\n                { this.props.messagegroups.map(messagegroup =>\n                    <div className=\"wc-message-group\">\n                        <Timestamp timestamp={ messagegroup.timestamp } />\n                        { messagegroup.messages.map(message => <HistoryMessage message={ message } actions={ this.props.actions }/>) }\n                    </div>\n                ) }\n            </div>\n        );\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/History.tsx\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\ntype TimeStuff = (timestamp:number) => [string, number];\n\nconst timeStuff:TimeStuff = (timestamp:number) => {\n    const milliseconds = Date.now() - timestamp;\n    const minutes = Math.floor(milliseconds / (1000 * 60));\n    const hours = Math.floor(minutes / 60);\n    if (minutes < 1)\n        return [\"Now\", 60 * 1000];\n    if (minutes === 1)\n        return [`1 minute`, 60 * 1000];\n    if (hours < 1)\n        return [`${minutes} minutes`, 60 * 1000];\n    if (hours === 1)\n        return [`1 hour`, 60 * 60 * 1000];\n    if (hours < 5)\n        return [`${hours} hours`, 60 * 60 * 1000 * (5 - hours)];\n    if (hours <= 24)\n        return [\"today\", 60 * 60 * 1000 * (24 - hours)];\n    if (hours <= 48)\n        return [\"yesterday\", 60 * 60 * 1000 * (48 - hours)];\n    return [new Date (milliseconds).toLocaleDateString(), null]; \n}\n\ninterface Props {\n    timestamp: number\n}\n\nexport class Timestamp extends React.Component<Props, {}> {\n    private nextRender:number;\n    constructor(props:Props) {\n        super();\n        this.nextRender = null;\n    }\n\n    private setNextRender(timestamp:number) {\n        const ts = timeStuff(timestamp);\n        if (ts[1])\n            this.nextRender = setTimeout(() => {\n                this.forceUpdate();\n                this.setNextRender(timestamp);\n            }, ts[1])\n    }\n\n    componentDidMount() {\n        this.setNextRender(this.props.timestamp);\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.nextRender);\n    }\n\n    render() {\n        return <div className=\"wc-time\">{ timeStuff(this.props.timestamp)[0] }</div>;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Timestamp.tsx\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Message, HistoryActions } from './App.tsx';\nimport { ImageMessage } from './ImageMessage.tsx';\nimport { TextMessage } from './TextMessage.tsx';\nimport { HeroCard } from './HeroCard.tsx';\n\nexport const HistoryMessage = (props: {\n    message: Message,\n    actions: HistoryActions\n}) => {\n    let inside;\n    if (props.message.images && props.message.images.length > 0)\n        inside = <ImageMessage images={ props.message.images }/>;\n    else if (props.message.text.includes(\"Bender\"))\n        inside = <HeroCard actions={ props.actions }/>\n    else\n        inside = <TextMessage text={ props.message.text }/>;\n\n    return <div className={ 'wc-message wc-message-from-' + props.message.from }>\n        <div className=\"wc-message-content\">\n            <svg className=\"wc-message-callout\">\n                <path className=\"point-left\" d=\"m0,0 h12 v10 z\" />\n                <path className=\"point-right\" d=\"m0,10 v-10 h12 z\" />\n            </svg>\n            { inside }\n        </div>\n        <div className=\"wc-message-from\">{ props.message.from }</div>\n    </div>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/HistoryMessage.tsx\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nexport const ImageMessage = (props: {\n    images: string[]\n}) =>\n    <div class=\"imageMessage\">\n        { props.images.map(path => <img src= { path }/>) }\n    </div>;\n\n\n/** WEBPACK FOOTER **\n ** ./src/ImageMessage.tsx\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nconst textify = (text:string) =>\n    text.split(\"\\n\").map((line, index) =>\n        <span>{ index > 0 ? <br/> : null }{ line }</span>\n    );\n\nexport const TextMessage = (props: {\n    text: string\n}) =>\n    <div class=\"textMessage\">\n        { textify(props.text) }\n    </div>;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TextMessage.tsx\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { HistoryActions } from './App.tsx';\n\nconst content = {\n    'images': [{\n        'url': 'http://thiswas.notinventedhe.re/on/2009-09-21',\n        'alt': 'Image alt text'\n    }],\n    'text': 'This is the hero card text',\n    'buttons': [{\n        'type': 'imBack',\n        'value': 'imBack value',\n        'title': 'imBack title'\n    }, {\n        'type': 'openUrl',\n        'value': 'openUrl value',\n        'title': 'openUrl title'\n    }, {\n        'type': 'postBack',\n        'value': 'postBack value',\n        'title': 'postBack title'\n    }],\n    'subtitle': 'Subtitle',\n    'title': 'Title'\n}\n\nexport const HeroCard = (props: {\n    actions: HistoryActions\n}) => {\n    const buttonActions = {\n        \"imBack\": props.actions.buttonImBack,\n        \"openUrl\": props.actions.buttonOpenUrl,\n        \"postBack\": props.actions.buttonPostBack\n    }\n    // REVIEW we need to make sure each button.type is one of these\n    return (\n        <div class=\"imageMessage\">\n            { content.images.map(image => <img src={ image.url } alt={ image.url } />) }\n            <p><b>{ content.title }</b></p>\n            <p><i>{ content.subtitle }</i></p>\n            <p>{ content.text }</p>\n            <ul>\n            { content.buttons.map(button => <li><button onClick={ () => buttonActions[button.type](button.value) }>{ button.title }</button></li>) }\n            </ul>\n        </div>\n    );\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/HeroCard.tsx\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ConsoleActions } from './App.tsx';\n\nexport const Console = (props: {\n    actions: ConsoleActions,\n    text: string,\n    enableSend: boolean\n}) =>\n    <div className=\"wc-console\">\n        <label className=\"wc-upload\">\n            <input type=\"file\" accept=\"image/*\" multiple onChange={ e => props.actions.sendFile(e.target.files) } />\n            <svg width=\"26\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M 19.9603965 4.789052 m -2 0 a 2 2 0 0 1 4 0 a 2 2 0 0 1 -4 0 z M 8.3168322 4.1917918 L 2.49505 15.5342575 L 22.455446 15.5342575 L 17.465347 8.5643945 L 14.4158421 11.1780931 L 8.3168322 4.1917918 Z M 1.04 1 L 1.04 17 L 24.96 17 L 24.96 1 L 1.04 1 Z M 1.0352753 0 L 24.9647247 0 C 25.5364915 0 26 0.444957 26 0.9934084 L 26 17.006613 C 26 17.5552514 25.5265266 18 24.9647247 18 L 1.0352753 18 C 0.4635085 18 0 17.5550644 0 17.006613 L 0 0.9934084 C 0 0.44477 0.4734734 0 1.0352753 0 Z\" />\n            </svg>\n        </label>\n        <div className=\"wc-textbox\">\n            <input type=\"text\" autoFocus value={ props.text } onChange={ e => props.actions.updateMessage(e.target.value) } onKeyPress = { e => e.key == 'Enter' ? props.actions.sendMessage() : null } disabled={ !props.enableSend } placeholder=\"Type your message...\" />\n        </div>\n        <label className=\"wc-send\" onClick={ e => props.text && props.text.length > 0 && props.enableSend && props.actions.sendMessage() } >\n            <svg width=\"27\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M 26.7862876 9.3774996 A 0.3121028 0.3121028 0 0 0 26.7862876 8.785123 L 0.4081408 0.0226012 C 0.363153 0.0000109 0.3406591 0.0000109 0.3181652 0.0000109 C 0.1372585 0.0000109 0 0.1315165 0 0.2887646 C 0 0.3270384 0.0081316 0.3668374 0.0257445 0.4066363 L 3.4448168 9.0813113 L 0.0257445 17.7556097 A 0.288143 0.288143 0 0 0 0.0126457 17.7975417 A 0.279813 0.279813 0 0 0 0.0055133 17.8603089 C 0.0055133 18.0178895 0.138422 18.1590562 0.303205 18.1590562 A 0.3049569 0.3049569 0 0 0 0.4081408 18.1400213 L 26.7862876 9.3774996 Z M 0.8130309 0.7906714 L 24.8365128 8.7876374 L 3.9846704 8.7876374 L 0.8130309 0.7906714 Z M 3.9846704 9.3749852 L 24.8365128 9.3749852 L 0.8130309 17.3719511 L 3.9846704 9.3749852 Z\" />\n            </svg>\n        </label>\n    </div>;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Console.tsx\n **/"],"sourceRoot":""}