{"version":3,"sources":["webpack:///public/app.js","webpack:///webpack/bootstrap b801a7369dcdc0a6404f","webpack:///./src/App.tsx","webpack:///external \"React\"","webpack:///external \"ReactDOM\"","webpack:///./~/@reactivex/rxjs/index.js","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Rx.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Subject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Observable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/root.ts","webpack:///(webpack)/buildin/module.js","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/toSubscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Subscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isFunction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Subscription.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isArray.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isObject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/tryCatch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/errorObject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/UnsubscriptionError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Observer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/symbol/rxSubscriber.ts","webpack:///./~/@reactivex/rxjs/~/symbol-observable/index.js","webpack:///./~/@reactivex/rxjs/~/symbol-observable/lib/index.js","webpack:///./~/@reactivex/rxjs/~/symbol-observable/lib/ponyfill.js","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/ObjectUnsubscribedError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/SubjectSubscription.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/bindCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/BoundCallbackObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/AsyncSubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindNodeCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/bindNodeCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/BoundNodeCallbackObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ScalarObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/EmptyObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/OuterSubscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/subscribeToResult.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/symbol/iterator.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/InnerSubscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/defer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/defer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/DeferObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/empty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/empty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/forkJoin.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/forkJoin.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ForkJoinObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/from.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/from.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/FromObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/PromiseObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/IteratorObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayLikeObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/observeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Notification.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEvent.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/fromEvent.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEventPattern.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/fromEventPattern.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventPatternObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/fromPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/generate.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/GenerateObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/if.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/if.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/IfObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/interval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/interval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/IntervalObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isNumeric.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/async.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsyncScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/FutureAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/race.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/race.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/never.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/never.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/NeverObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/noop.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/of.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/of.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/onErrorResumeNext.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/onErrorResumeNext.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/range.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/range.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/RangeObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/using.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/using.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/UsingObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/throw.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/throw.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ErrorObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/timer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/timer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/TimerObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isDate.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/ajax.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/ajax.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/AjaxObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/webSocket.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/webSocket.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/WebSocketSubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/ReplaySubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/queue.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/assign.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/buffer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/buffer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/cache.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/cache.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/catch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/catch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/combineAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concatAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concatMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concatMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/count.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/count.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/dematerialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/dematerialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/debounce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounceTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/debounceTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/defaultIfEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/defaultIfEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/delay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/delay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/delayWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/delayWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinct.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinct.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctKey.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinctKey.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilKeyChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilKeyChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/do.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/do.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaust.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/exhaust.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaustMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/exhaustMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/expand.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/expand.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/elementAt.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/elementAt.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/ArgumentOutOfRangeError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/filter.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/filter.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/finally.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/finally.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/find.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/find.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/findIndex.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/findIndex.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/first.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/first.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/EmptyError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/groupBy.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/groupBy.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/Map.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/MapPolyfill.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/FastMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/ignoreElements.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/ignoreElements.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/isEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/isEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/audit.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/audit.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/auditTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/auditTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/last.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/last.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/let.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/let.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/every.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/every.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/map.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/map.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/materialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/materialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/max.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/max.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/reduce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeScan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeScan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/min.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/min.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/multicast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/multicast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/MulticastObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ConnectableObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/observeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/onErrorResumeNext.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/pairwise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/pairwise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/partition.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/partition.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/not.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/pluck.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/pluck.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publish.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publish.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishBehavior.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publishBehavior.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/BehaviorSubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/throwError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishReplay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publishReplay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publishLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/race.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/reduce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/repeat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/repeat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/retry.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/retry.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/retryWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/retryWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/sample.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/sample.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/sampleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/sampleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/scan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/scan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/share.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/share.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/single.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/single.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/skip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/skip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/skipUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/skipWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/startWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/startWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/subscribeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/subscribeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/SubscribeOnObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/asap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/Immediate.ts","webpack:///(webpack)/~/node-libs-browser/~/timers-browserify/main.js","webpack:///(webpack)/~/node-libs-browser/~/process/browser.js","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/switch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/switch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/switchMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/switchMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/take.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/take.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/takeLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/takeUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/takeWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/throttle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/throttleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeInterval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timeInterval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeout.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timeout.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeoutWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timeoutWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timestamp.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timestamp.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/toArray.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/toArray.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/toPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/toPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/window.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/window.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/withLatestFrom.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/withLatestFrom.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/zipAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/zipAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Operator.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/TestScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/VirtualTimeScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/ColdObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLoggable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLog.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/applyMixins.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/HotObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/animationFrame.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/AnimationFrame.ts","webpack:///./src/directLine.ts","webpack:///./src/History.tsx","webpack:///./src/HistoryMessage.tsx","webpack:///./src/Outgoing.tsx"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__extends","this","d","b","__","constructor","hasOwnProperty","prototype","Object","create","React","ReactDOM","rxjs_1","directLine_1","History_tsx_1","Outgoing_tsx_1","outgoing$","Subject","outgoingMessage$","App","_super","_this","updateMessage","text","next","sendMessage","setState","enableSend","postMessage","state","outgoingMessage","from","conversationId","conversation","retry","subscribe","error","console","log","messages","startConversation","getMessages","filter","botmessage","map","merge","scan","message","concat","combineLatest","render","createElement","Outgoing","History","Component","document","getElementById","Subject_1","Observable_1","Observable","Operator_1","Operator","Subscription_1","Subscription","Subscriber_1","Subscriber","AsyncSubject_1","AsyncSubject","ReplaySubject_1","ReplaySubject","BehaviorSubject_1","BehaviorSubject","MulticastObservable_1","MulticastObservable","ConnectableObservable_1","ConnectableObservable","Notification_1","Notification","EmptyError_1","EmptyError","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ObjectUnsubscribedError_1","ObjectUnsubscribedError","UnsubscriptionError_1","UnsubscriptionError","timeInterval_1","TimeInterval","timestamp_1","Timestamp","TestScheduler_1","TestScheduler","VirtualTimeScheduler_1","VirtualTimeScheduler","AjaxObservable_1","AjaxResponse","AjaxError","AjaxTimeoutError","asap_1","async_1","queue_1","animationFrame_1","rxSubscriber_1","iterator_1","symbol_observable_1","Scheduler","asap","queue","animationFrame","async","Symbol","rxSubscriber","$$rxSubscriber","observable","iterator","$$iterator","SubjectSubscription_1","SubjectSubscriber","destination","observers","isUnsubscribed","isStopped","hasError","thrownError","lift","operator","subject","AnonymousSubject","value","len","length","copy","slice","i","err","complete","unsubscribe","_subscribe","subscriber","EMPTY","push","SubjectSubscription","asObservable","source","root_1","toSubscriber_1","_isScalar","observerOrNext","sink","toSubscriber","add","syncErrorThrowable","syncErrorThrown","syncErrorValue","forEach","PromiseCtor","root","Rx","config","Promise","Error","resolve","reject","subscription","global","objectTypes","boolean","function","object","number","string","undefined","self","window","freeGlobal","nodeType","webpackPolyfill","deprecate","paths","children","nextOrObserver","isFunction_1","Observer_1","destinationOrNext","arguments","empty","SafeSubscriber","_next","_error","_complete","_parent","context","isFunction","bind","_context","__tryOrSetError","__tryOrUnsub","fn","parent","_unsubscribe","x","isArray_1","isObject_1","tryCatch_1","errorObject_1","errors","hasErrors","_a","_subscriptions","trial","tryCatch","errorObject","e","isArray","index","sub","isObject","teardown","remove","subscriptions","subscriptionIndex","indexOf","splice","Array","tryCatcher","tryCatchTarget","apply","toString","join","name","stack","_interopRequireDefault","obj","__esModule","default","defineProperty","_ponyfill","_ponyfill2","result","symbolObservablePonyfill","_Symbol","subscriberIndex","bindCallback_1","bindCallback","BoundCallbackObservable_1","BoundCallbackObservable","dispatchNext","arg","dispatchError","callbackFunc","selector","args","scheduler","func","_i","schedule","dispatch","handler","handlerFn","innerArgs","result_1","result_2","hasNext","hasCompleted","bindNodeCallback_1","bindNodeCallback","BoundNodeCallbackObservable_1","BoundNodeCallbackObservable","shift","combineLatest_1","observables","project","isScheduler_1","isScheduler","pop","ArrayObservable_1","ArrayObservable","CombineLatestOperator","ScalarObservable_1","EmptyObservable_1","array","of","ScalarObservable","EmptyObservable","count","done","unshift","OuterSubscriber_1","subscribeToResult_1","none","CombineLatestSubscriber","active","values","toRespond","subscribeToResult","notifyComplete","unused","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","oldVal","_tryProject","OuterSubscriber","notifyError","outerSubscriber","InnerSubscriber_1","InnerSubscriber","isPromise_1","isPromise","then","setTimeout","item","obs","TypeError","Set","Map","keys","getOwnPropertyNames","key","concat_1","concatStatic","mergeAll_1","MergeAllOperator","mergeAll","concurrent","Number","POSITIVE_INFINITY","observer","MergeAllSubscriber","buffer","defer_1","defer","DeferObservable_1","DeferObservable","observableFactory","DeferSubscriber","factory","tryDefer","_callFactory","empty_1","forkJoin_1","forkJoin","ForkJoinObservable_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","total","innerSubscription","_hasValue","from_1","FromObservable_1","FromObservable","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","isArrayLike","ish","mapFnOrScheduler","thisArg","lastScheduler","mapFn","PromiseObservable","IteratorObservable","ArrayLikeObservable","ObserveOnSubscriber","promise","getIterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","Math","floor","abs","maxSafeInteger","isFinite","valueAsNumber","str","idx","charAt","arr","pow","arrayLike","observeOn","delay","ObserveOnOperator","notification","observe","scheduleMessage","ObserveOnMessage","createNext","createError","createComplete","kind","exception","hasValue","accept","toObservable","undefinedValueNotification","completeNotification","fromEvent_1","fromEvent","FromEventObservable_1","FromEventObservable","isNodeStyleEventEmmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","eventName","target","setupSubscription","source_1","source_2","source_3","fromEventPattern_1","fromEventPattern","FromEventPatternObservable_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","_callAddHandler","errorSubscriber","fromPromise_1","fromPromise","GenerateObservable_1","generate","GenerateObservable","selfSelector","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","if_1","_if","IfObservable_1","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","interval_1","interval","IntervalObservable_1","IntervalObservable","isNumeric_1","period","isNumeric","val","parseFloat","AsyncScheduler_1","AsyncScheduler","FutureAction_1","QueueScheduler_1","scheduleNow","work","FutureAction","QueueScheduler","pending","execute","_schedule","clearInterval","setInterval","actions","flush","QueueAction_1","scheduledId","now","Date","action","scheduleLater","QueueAction","merge_1","mergeStatic","last","race_1","race","raceStatic","RaceOperator","RaceSubscriber","hasFirst","never_1","never","NeverObservable_1","NeverObservable","noop_1","noop","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","range_1","range","RangeObservable_1","RangeObservable","start","_count","using_1","using","UsingObservable_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","throw_1","_throw","ErrorObservable_1","ErrorObservable","timer_1","timer","TimerObservable_1","TimerObservable","isDate_1","dueTime","isDate","initialDelay","zip_1","zip","zipStatic","zipProto","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","ajax_1","ajax","AjaxObservable","getCORSRequest","XMLHttpRequest","xhr","withCredentials","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","defaultGetResultSelector","response","ajaxGet","url","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxGetJSON","finalResultSelector","res","responseType","urlOrRequest","request","createXHR","crossDomain","timeout","prop","AjaxSubscriber","get","post","put","getJSON","FormData","serializeBody","send","_b","user","password","open","setHeaders","setupEvents","contentType","splitIndex","substring","encodeURI","JSON","stringify","setRequestHeader","progressSubscriber","ontimeout","xhrTimeout","upload","onprogress","xhrProgress","onerror","xhrError","onreadystatechange","xhrReadyStateChange","readyState","status_1","status","responseText","abort","originalEvent","parse","responseXML","webSocket_1","webSocket","WebSocketSubject_1","WebSocketSubject","assign_1","urlConfigOrSource","WebSocketCtor","WebSocket","_output","assign","data","sock","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","socket","protocol","close","onopen","openObserver","closingObserver","code","reason","onclose","closeObserver","wasClean","onmessage","bufferSize","windowTime","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","time","max","output","buffer_1","closingNotifier","BufferOperator","BufferSubscriber","bufferCount_1","bufferCount","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","bufferTime_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","spliceIndex","bufferToggle_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferWhen_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","cache_1","cache","outerSub","refs","getSubject","s","catch_1","_catch","CatchOperator","caught","CatchSubscriber","_innerSub","combineAll_1","combineAll","concatAll_1","concatAll","concatMap_1","concatMap","mergeMap_1","MergeMapOperator","mergeMap","MergeMapSubscriber","_tryNext","_notifyResultSelector","concatMapTo_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","mergeMapTo","MergeMapToSubscriber","trySelectResult","count_1","predicate","CountOperator","CountSubscriber","_tryPredicate","dematerialize_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","debounce_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","durationSubscription","emitValue","duration","debounceTime_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","defaultIfEmpty_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","delay_1","absoluteDelay","delayFor","DelayOperator","DelaySubscriber","errored","scheduleNotification","DelayMessage","delayWhen_1","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","distinct_1","distinct","compare","flushes","DistinctOperator","DistinctSubscriber","found","y","distinctKey_1","distinctKey","distinctUntilChanged_1","distinctUntilChanged","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","Boolean","distinctUntilKeyChanged_1","distinctUntilKeyChanged","do_1","_do","DoOperator","DoSubscriber","safeSubscriber","exhaust_1","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaustMap_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","expand_1","expand","ExpandOperator","ExpandSubscriber","subscribeToProjection","elementAt_1","elementAt","ElementAtOperator","ElementAtSubscriber","filter_1","FilterOperator","FilterSubscriber","finally_1","_finally","callback","FinallyOperator","FinallySubscriber","find_1","find","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex_1","findIndex","first_1","first","FirstOperator","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","groupBy_1","groupBy","elementSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap","element","group","set","groupedObservable","GroupedObservable","GroupDurationSubscriber","clear","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","MapPolyfill_1","MapPolyfill","size","_values","_keys","cb","ignoreElements_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","isEmpty_1","IsEmptyOperator","IsEmptySubscriber","audit_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","auditTime_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","last_1","LastOperator","LastSubscriber","let_1","letProto","letBind","every_1","every","EveryOperator","EverySubscriber","everyValueMatch","map_1","MapOperator","MapSubscriber","mapTo_1","mapTo","MapToOperator","MapToSubscriber","materialize_1","materialize","MaterializeOperator","MaterializeSubscriber","max_1","comparer","reduce_1","ReduceOperator","reduce","accumulator","seed","ReduceSubscriber","acc","hasSeed","_tryReduce","flatMap","flatMapTo","mergeScan_1","mergeScan","MergeScanOperator","MergeScanSubscriber","min_1","min","multicast_1","multicast","subjectOrSubjectFactory","subjectFactory","connectable","connect","_refCount","_subject","connection","_connection","ConnectableSubscriber","refCount","RefCountOperator","refCounter","RefCountSubscriber","sharedConnection","pairwise_1","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","partition_1","partition","not_1","not","pred","notPred","pluck_1","pluck","properties","plucker","props","mapper","currentProp","publish_1","publish","publishBehavior_1","publishBehavior","throwError_1","_value","getValue","throwError","enumerable","configurable","publishReplay_1","publishReplay","publishLast_1","publishLast","repeat_1","repeat","RepeatOperator","RepeatSubscriber","retry_1","RetryOperator","RetrySubscriber","retryWhen_1","retryWhen","notifier","RetryWhenOperator","RetryWhenSubscriber","retries","retriesSubscription","sample_1","sample","SampleOperator","SampleSubscriber","sampleTime_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","scan_1","ScanOperator","ScanSubscriber","accumulatorSet","_seed","share_1","share","shareSubjectFactory","single_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","skip_1","skip","SkipOperator","SkipSubscriber","skipUntil_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipWhile_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","startWith_1","startWith","subscribeOn_1","subscribeOn","SubscribeOnObservable_1","SubscribeOnObservable","delayTime","AsapScheduler_1","AsapScheduler","AsapAction_1","AsapAction","Immediate_1","Immediate","setImmediate","clearImmediate","ImmediateDefinition","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Timeout","clearFn","_id","_clearFn","immediateIds","nextImmediateId","clearTimeout","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","_onTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","cachedSetTimeout","run","cachedClearTimeout","Item","fun","title","browser","env","argv","version","versions","once","removeAllListeners","emit","binding","cwd","chdir","dir","umask","switch_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switchMap_1","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMapTo_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","take_1","take","TakeOperator","TakeSubscriber","takeLast_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeUntil_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeWhile_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","throttle_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttleTime_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","timeInterval","TimeIntervalOperator","TimeIntervalSubscriber","lastTime","span","timeout_1","due","errorToSend","absoluteTimeout","waitFor","TimeoutOperator","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeoutWith_1","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timestamp","TimestampOperator","TimestampSubscriber","toArray_1","toArray","ToArrayOperator","ToArraySubscriber","toPromise_1","toPromise","window_1","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","windowCount_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","windowTime_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","dispatchWindowTimeSpanOnly","dispatchWindowCreation","timeSpanState","dispatchWindowClose","closeWindow","WindowTimeSubscriber","window_2","window_3","window_4","windowToggle_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowWhen_1","windowWhen","unsubscribeClosingNotification","closingNotification","withLatestFrom_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","zipAll_1","zipAll","ColdObservable_1","HotObservable_1","SubscriptionLog_1","assertDeepEqual","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","ColdObservable","createHotObservable","HotObservable","materializeInnerObservable","outerFrame","frame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","unsubscribedFrame","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","setup","readyFlushTests","test","SubscriptionLog","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","sorted","maxFrames","addAction","sort","a","VirtualAction","calls","SubscriptionLoggable_1","applyMixins_1","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","applyMixins","SubscriptionLoggable","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","AnimationFrameScheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameAction","AnimationFrame_1","AnimationFrame","requestAnimationFrame","cancelAnimationFrame","RequestAnimationFrameDefinition","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","domain","baseUrl","app_secret","Accept","Authorization","ajaxResponse","Content-Type","token","messageGroupGenerator","watermark","getMessageGroup","messageGroup","someMessages","HistoryMessage_tsx_1","HistoryMessage","onChange","disabled","onClick"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,EAASH,GAE/BI,EAAOD,QAAUH,EAAoB,IAKhC,SAASI,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KEzDxEM,EAAKrB,EAAM,GACXsB,EAAQtB,EAAM,GAC1BuB,EAAAvB,EAAgD,GAEhDwB,EAAAxB,EAA4D,KAC5DyB,EAAAzB,EAAwB,KACxB0B,EAAA1B,EAAyB,KAcnB2B,EAAY,GAAIJ,GAAAK,QAChBC,EAAmB,GAAIN,GAAAK,QAE7BE,EAAA,SAAAC,GACI,QAAAD,KADJ,GAAAE,GAAApB,IAEQmB,GAAAxB,KAAAK,MAgCJA,KAAAqB,cAAgB,SAACC,GACbL,EAAiBM,KAAKD,IAG1BtB,KAAAwB,YAAc,WACVJ,EAAKK,UAAUC,YAAY,IAC3Bd,EAAAe,aACIL,KAAMF,EAAKQ,MAAMC,gBACjBC,KAAM,KACNC,eAAgBX,EAAKQ,MAAMI,aAAaD,gBACzCX,EAAKQ,MAAMI,cACbC,MAAM,GACNC,UACG,WACInB,EAAUQ,MAAMD,KAAMF,EAAKQ,MAAMC,gBAAiBC,KAAM,OACxDV,EAAKK,UAAUI,gBAAiB,GAAIH,YAAW,KAEnD,SAAAS,GACIC,QAAQC,IAAI,0BACZjB,EAAKK,UAAUC,YAAY,OAlDnC1B,KAAK4B,OACDI,aAAc,KACdM,YACAT,gBAAiB,GACjBH,YAAY,GAGhBd,EAAA2B,oBAAoBL,UAChB,SAAAF,GACIZ,EAAKK,UAAUO,aAAaA,IAE5BpB,EAAA4B,YAAYR,GACXS,OAAO,SAAAC,GAAc,MAAoB,YAApBA,EAAWZ,OAChCa,IAAa,SAAAD,GAAc,OAAGpB,KAAMoB,EAAWpB,KAAMQ,KAAM,SAC3Dc,MAAM7B,GACN8B,KAAgB,SAACP,EAAUQ,GAAY,MAAIR,GAAQS,QAAED,SACrDE,cAAc/B,EAAkB,SAACqB,EAAUT,GAAoB,OAC5DS,SAAUA,EACVT,gBAAiBA,KAEpBK,UACG,SAAAN,GAAS,MAAAR,GAAKK,SAASG,IACvB,SAAAO,GAAS,MAAAC,SAAQC,IAAI,yBAA0BF,IAC/C,WAAM,MAAAC,SAAQC,IAAI,4BAG1B,SAAAF,GAAS,MAAAC,SAAQC,IAAI,8BAA+BF,IACpD,WAAM,MAAAC,SAAQC,IAAI,gCAkC9B,MAhEkBtC,GAAAmB,EAAAC,GA0DdD,EAAAZ,UAAA2C,OAAA,WACI,MAAOxC,GAAAyC,cAAA,OAAKzD,GAAG,YACXgB,EAAAyC,cAACpC,EAAAqC,UAAS3B,YAAcxB,KAAKwB,YAAcH,cAAgBrB,KAAKqB,cAAgBK,WAAa1B,KAAK4B,MAAMF,WAAaG,gBAAkB7B,KAAK4B,MAAMC,kBAClJpB,EAAAyC,cAACrC,EAAAuC,SAAQd,SAAWtC,KAAK4B,MAAMU,aAG3CpB,GAhEkBT,EAAM4C,UAkExB3C,GAASuC,OAAOxC,EAAAyC,cAAChC,EAAG,MAAKoC,SAASC,eAAe,SFgC3C,SAAS/D,EAAQD,GGzHvBC,EAAAD,QAAAkB,OH+HM,SAASjB,EAAQD,GI/HvBC,EAAAD,QAAAmB,UJqIM,SAASlB,EAAQD,EAASH,GKrIhCI,EAAAD,QAAAH,EAAA,IL4IM,SAASI,EAAQD,EAASH,GAE/B,YM1ID,IAAAoE,GAAApE,EAAsB,EAAdG,GAAAyB,QAAAwC,EAAAxC,OAER,IAAAyC,GAAArE,EAAyB,EAAjBG,GAAAmE,WAAAD,EAAAC,WAIRtuE,GAAAvE,EAAuB,IAAfG,GAAAqE,SAAAD,EAAAC,QAER,IAAAC,GAAAzE,EAA2B,GAAnBG,GAAAuE,aAAAD,EAAAC,YACR,IAAAC,GAAA3E,EAAyB,GAAjBG,GAAAyE,WAAAD,EAAAC,UACR,IAAAC,GAAA7E,EAA2B,GAAnBG,GAAA2E,aAAAD,EAAAC,YACR,IAAAC,GAAA/E,EAA4B,IAApBG,GAAA6E,cAAAD,EAAAC,aACR,IAAAC,GAAAjF,EAA8B,IAAtBG,GAAA+E,gBAAAD,EAAAC,eACR,IAAAC,GAAAnF,EAAkC,IAA1BG,GAAAiF,oBAAAD,EAAAC,mBACR,IAAAC,GAAArF,EAAoC,IAA5BG,GAAAmF,sBAAAD,EAAAC,qBACR,IAAAC,GAAAvF,EAA2B,GAAnBG,GAAAqF,aAAAD,EAAAC,YACR,IAAAC,GAAAzF,EAAyB,IAAjBG,GAAAuF,WAAAD,EAAAC,UACR,IAAAC,GAAA3F,EAAsC,IAA9BG,GAAAyF,wBAAAD,EAAAC,uBACR,IAAAC,GAAA7F,EAAsC,GAA9BG,GAAA2F,wBAAAD,EAAAC,uBACR,IAAAC,GAAA/F,EAAkC,GAA1BG,GAAA6F,oBAAAD,EAAAC,mBACR,IAAAC,GAAAjG,EAA2B,IAAnBG,GAAA+F,aAAAD,EAAAC,YACR,IAAAC,GAAAnG,EAAwB,IAAhBG,GAAAiG,UAAAD,EAAAC,SACR,IAAAC,GAAArG,EAA4B,IAApBG,GAAAmG,cAAAD,EAAAC,aACR,IAAAC,GAAAvG,EAAmC,IAA3BG,GAAAqG,qBAAAD,EAAAC,oBACR,IAAAC,GAAAzG,EAAqE,IAAhDG,GAAAuG,aAAAD,EAAAC,aAAcvG,EAAAwG,UAAAF,EAAAE,UAAWxG,EAAAyG,iBAAAH,EAAAG,gBAE9C,IAAAC,GAAA7G,EAAmB,KACnB8G,EAAA9G,EAAoB,IACpB+G,EAAA/G,EAAoB,KACpBgH,EAAAhH,EAA6B,KAK7BiH,EAAAjH,EAA6C,IAC7CkH,EAAAlH,EAAqC,IACrCmH,EAAAnH,EAAuB,IAenBoH,GACFC,KAAAR,EAAAQ,KACAC,MAAAP,EAAAO,MACAC,eAAAP,EAAAO,eACAC,MAAAV,EAAAU,MAuBErH,GAAAiH,UAASA,CAPb,IAAIK,IACFC,aAAAT,EAAAU,eACAC,WAAAT,aACAU,SAAAX,EAAAY,WAKE3H,GAAAsH,OAAMA,GN2JJ,SAASrH,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KOtXpFsD,EAAArE,EAAyB,GACzB2E,EAAA3E,EAAyB,IACzByE,EAAAzE,EAA0C,IAC1C6F,EAAA7F,EAAsC,IACtC+H,EAAA/H,EAAkC,IAClCiH,EAAAjH,EAA6B,IAK7BgI,EAAA,SAAAjG,GACE,QAAAiG,GAAsBC,GACpBlG,EAAAxB,KAAAK,KAAMqH,GADcrH,KAAAqH,cAGxB,MAJ0CtH,GAAAqH,EAAAjG,GAI1CiG,GAJ0CrD,EAAAC,WAA7BzE,GAAA6H,kBAAiBA,CAS9B,IAAApG,GAAA,SAAAG,GAgBE,QAAAH,KACEG,EAAAxB,KAAAK,MAXFA,KAAAsH,aAEAtH,KAAAuH,gBAAiB,EAEjBvH,KAAAwH,WAAY,EAEZxH,KAAAyH,UAAW,EAEXzH,KAAA0H,YAAmB,KAsFrB,MApGgC3H,GAAAiB,EAAAG,GAE9BH,EAAAV,UAAC+F,EAAAU,gBAAD,WACE,MAAO,IAAIK,GAAkBpH,OAqB/BgB,EAAAV,UAAAqH,KAAA,SAAWC,GACT,GAAMC,GAAU,GAAIC,GAAiB9H,KAAMA,KAE3C,OADA6H,GAAQD,SAAWA,EACPC,GAGd7G,EAAAV,UAAAiB,KAAA,SAAKwG,GACH,GAAI/H,KAAKuH,eACP,KAAM,IAAItC,GAAAC,uBAEZ,KAAKlF,KAAKwH,UAIR,IAAK,GAHGF,GAAAtH,KAAAsH,UACFU,EAAMV,EAAUW,OAChBC,EAAOZ,EAAUa,QACdC,EAAI,EAAGA,EAAIJ,EAAKI,IACvBF,EAAKE,GAAG7G,KAAKwG,IAKnB/G,EAAAV,UAAA6B,MAAA,SAAMkG,GACJ,GAAIrI,KAAKuH,eACP,KAAM,IAAItC,GAAAC,uBAEZlF,MAAKyH,UAAW,EAChBzH,KAAK0H,YAAcW,EACnBrI,KAAKwH,WAAY,CAIjB,KAAK,GAHGF,GAAAtH,KAAAsH,UACFU,EAAMV,EAAUW,OAChBC,EAAOZ,EAAUa,QACdC,EAAI,EAAGA,EAAIJ,EAAKI,IACvBF,EAAKE,GAAGjG,MAAMkG,EAEhBrI,MAAKsH,UAAUW,OAAS,GAG1BjH,EAAAV,UAAAgI,SAAA,WACE,GAAItI,KAAKuH,eACP,KAAM,IAAItC,GAAAC,uBAEZlF,MAAKwH,WAAY,CAIjB,KAAK,GAHGF,GAAAtH,KAAAsH,UACFU,EAAMV,EAAUW,OAChBC,EAAOZ,EAAUa,QACdC,EAAI,EAAGA,EAAIJ,EAAKI,IACvBF,EAAKE,GAAGE,UAEVtI,MAAKsH,UAAUW,OAAS,GAG1BjH,EAAAV,UAAAiI,YAAA,WACEvI,KAAKwH,WAAY,EACjBxH,KAAKuH,gBAAiB,EACtBvH,KAAKsH,UAAY,MAGTtG,EAAAV,UAAAkI,WAAV,SAAqBC,GACnB,GAAIzI,KAAKuH,eACP,KAAM,IAAItC,GAAAC,uBACL,OAAIlF,MAAKyH,UACdgB,EAAWtG,MAAMnC,KAAK0H,aACf7D,EAAAC,aAAa4E,OACX1I,KAAKwH,WACdiB,EAAWH,WACJzE,EAAAC,aAAa4E,QAEpB1I,KAAKsH,UAAUqB,KAAKF,GACb,GAAItB,GAAAyB,oBAAoB5I,KAAMyI,KAIzCzH,EAAAV,UAAAuI,aAAA,WACE,GAAM7B,GAAa,GAAIvD,GAAAC,UAEvB,OADMsD,GAAY8B,OAAS9I,KACpBgH,GA9EFhG,EAAAR,OAAmB,SAAI6G,EAA0ByB,GACtD,MAAO,IAAIhB,GAAoBT,EAAayB,IA+EhD9H,GApGgCyC,EAAAC,WAAnBnE,GAAAyB,QAAOA,CAyGpB,IAAA8G,GAAA,SAAA3G,GACE,QAAA2G,GAAsBT,EAAqCyB,GACzD3H,EAAAxB,KAAAK,MADoBA,KAAAqH,cAAqCrH,KAAA8I,SAiC7D,MAlCyC/I,GAAA+H,EAAA3G,GAKvC2G,EAAAxH,UAAAiB,KAAA,SAAKwG,GACK,GAAAV,GAAArH,KAAAqH,WACJA,IAAeA,EAAY9F,MAC7B8F,EAAY9F,KAAKwG,IAIrBD,EAAAxH,UAAA6B,MAAA,SAAMkG,GACI,GAAAhB,GAAArH,KAAAqH,WACJA,IAAeA,EAAYlF,OAC7BnC,KAAKqH,YAAYlF,MAAMkG,IAI3BP,EAAAxH,UAAAgI,SAAA,WACU,GAAAjB,GAAArH,KAAAqH,WACJA,IAAeA,EAAYiB,UAC7BtI,KAAKqH,YAAYiB,YAIXR,EAAAxH,UAAAkI,WAAV,SAAqBC,GACX,GAAAK,GAAA9I,KAAA8I,MACR,OAAIA,GACK9I,KAAK8I,OAAO5G,UAAUuG,GAEtB5E,EAAAC,aAAa4E,OAG1BZ,GAlCyC9G,EAA5BzB,GAAAuI,iBAAgBA,GPyZvB,SAAStI,EAAQD,EAASH,GAE/B,YQrhBD,IAAA2J,GAAA3J,EAAmB,GACnB4J,EAAA5J,EAA2B,IAG3BmH,EAAAnH,EAAyB,IAiBzBsE,EAAA,WAcE,QAAAA,GAAYxB,GAZLlC,KAAAiJ,WAAqB,EAatB/G,IACFlC,KAAKwI,WAAatG,GAgIxB,MAvGEwB,GAAApD,UAAAqH,KAAA,SAAQC,GACN,GAAMZ,GAAa,GAAItD,EAGvB,OAFAsD,GAAW8B,OAAS9I,KACpBgH,EAAWY,SAAWA,EACfZ,GAcTtD,EAAApD,UAAA4B,UAAA,SAAUgH,EACA/G,EACAmG,GAEA,GAAAV,GAAA5H,KAAA4H,SACFuB,EAAOH,EAAAI,aAAaF,EAAgB/G,EAAOmG,EAQjD,IANIV,EACFA,EAASjI,KAAKwJ,EAAMnJ,MAEpBmJ,EAAKE,IAAIrJ,KAAKwI,WAAWW,IAGvBA,EAAKG,qBACPH,EAAKG,oBAAqB,EACtBH,EAAKI,iBACP,KAAMJ,GAAKK,cAIf,OAAOL,IAUTzF,EAAApD,UAAAmJ,QAAA,SAAQlI,EAA0BmI,GAAlC,GAAAtI,GAAApB,IASE,IARK0J,IACCX,EAAAY,KAAKC,IAAMb,EAAAY,KAAKC,GAAGC,QAAUd,EAAAY,KAAKC,GAAGC,OAAOC,QAC9CJ,EAAcX,EAAAY,KAAKC,GAAGC,OAAOC,QACpBf,EAAAY,KAAKG,UACdJ,EAAcX,EAAAY,KAAKG,WAIlBJ,EACH,KAAM,IAAIK,OAAM,wBAGlB,OAAO,IAAIL,GAAkB,SAACM,EAASC,GACrC,GAAMC,GAAe9I,EAAKc,UAAU,SAAC6F,GACnC,GAAImC,EAKF,IACE3I,EAAKwG,GACL,MAAOM,GACP4B,EAAO5B,GACP6B,EAAa3B,kBASfhH,GAAKwG,IAENkC,EAAQD,MAILtG,EAAApD,UAAAkI,WAAV,SAAqBC,GACnB,MAAOzI,MAAK8I,OAAO5G,UAAUuG,IAY/B/E,EAAApD,UAACiG,cAAD,WACE,MAAOvG,OAhHF0D,EAAAlD,OAAmB,SAAI0B,GAC5B,MAAO,IAAIwB,GAAcxB,IAiH7BwB,IAhJanE,GAAAmE,WAAUA,GR+oBjB,SAASlE,EAAQD,EAASH,IAEH,SAASI,EAAQ2K,GAAS,YS1qBvD,IAAIC,IACFC,WAAW,EACXC,YAAY,EACZC,QAAU,EACVC,QAAU,EACVC,QAAU,EACVC,WAAa,EAcJnL,GAAAoK,KAAaS,QAAmBO,QAASA,MAAUP,QAAmBQ,UAAWA,MAG5F,IAEIC,IAFcT,QAAmB7K,KAAYA,IAAYA,EAAQuL,UAAYvL,EAChE6K,QAAmB5K,KAAWA,IAAWA,EAAOsL,UAAYtL,EAC5D4K,QAAmBD,KAAWA,IAE3CU,GAAeA,EAAWV,SAAWU,GAAcA,EAAWD,SAAWC,IAC3EtL,EAAAoK,KAAOkB,KTgqBqBlL,KAAKJ,EAASH,EAAoB,GAAGI,GAAU,WAAa,MAAOQ,WAI3F,SAASR,EAAQD,GUhsBvBC,EAAAD,QAAA,SAAAC,GAQA,MAPAA,GAAAuL,kBACAvL,EAAAwL,UAAA,aACAxL,EAAAyL,SAEAzL,EAAA0L,YACA1L,EAAAuL,gBAAA,GAEAvL,IVwsBM,SAASA,EAAQD,EAASH,GAE/B,YW9sBD,SAAAgK,GACE+B,EACAhJ,EACAmG,GAEA,GAAI6C,EAAgB,CAClB,GAAIA,YAA0BpH,GAAAC,WAC5B,MAAwBmH,EAG1B,IAAIA,EAAe9E,EAAAU,gBACjB,MAAOoE,GAAe9E,EAAAU,kBAI1B,MAAKoE,IAAmBhJ,GAAUmG,EAI3B,GAAIvE,GAAAC,WAAWmH,EAAgBhJ,EAAOmG,GAHpC,GAAIvE,GAAAC,WAnBf,GAAAD,GAAA3E,EAAyB,IACzBiH,EAAAjH,EAA6B,GAEbG,GAAA6J,aAAYA,GXouBtB,SAAS5J,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KY9uBpFiL,EAAAhM,EAAyB,IAEzByE,EAAAzE,EAA2B,IAC3BiM,EAAAjM,EAAqC,IACrCiH,EAAAjH,EAA6B,IAY7B4E,EAAA,SAAA7C,GAsCE,QAAA6C,GAAYsH,EACAnJ,EACAmG,GAGV,OAFAnH,EAAAxB,KAAAK,MAlBKA,KAAAwJ,eAAsB,KACtBxJ,KAAAuJ,iBAA2B,EAC3BvJ,KAAAsJ,oBAA8B,EAE3BtJ,KAAAwH,WAAqB,EAgBrB+D,UAAUtD,QAChB,IAAK,GACHjI,KAAKqH,YAAcgE,EAAAG,KACnB,MACF,KAAK,GACH,IAAKF,EAAmB,CACtBtL,KAAKqH,YAAcgE,EAAAG,KACnB,OAEF,GAAiC,gBAAtBF,GAAgC,CACrCA,YAA6BtH,IAC/BhE,KAAKqH,YAAiCiE,EAC/BtL,KAAKqH,YAAagC,IAAIrJ,QAE7BA,KAAKsJ,oBAAqB,EAC1BtJ,KAAKqH,YAAc,GAAIoE,GAAkBzL,KAA6BsL,GAExE,OAEJ,QACEtL,KAAKsJ,oBAAqB,EAC1BtJ,KAAKqH,YAAc,GAAIoE,GAAkBzL,KAA6BsL,EAAmBnJ,EAAOmG,IAkExG,MAlImCvI,GAAAiE,EAAA7C,GAEjC6C,EAAA1D,UAAC+F,EAAAU,gBAAD,WAAqB,MAAO/G,OAarBgE,EAAAxD,OAAP,SAAiBe,EACAY,EACAmG,GACf,GAAMG,GAAa,GAAIzE,GAAWzC,EAAMY,EAAOmG,EAE/C,OADAG,GAAWa,oBAAqB,EACzBb,GAwDTzE,EAAA1D,UAAAiB,KAAA,SAAKwG,GACE/H,KAAKwH,WACRxH,KAAK0L,MAAM3D,IAWf/D,EAAA1D,UAAA6B,MAAA,SAAMkG,GACCrI,KAAKwH,YACRxH,KAAKwH,WAAY,EACjBxH,KAAK2L,OAAOtD,KAUhBrE,EAAA1D,UAAAgI,SAAA,WACOtI,KAAKwH,YACRxH,KAAKwH,WAAY,EACjBxH,KAAK4L,cAIT5H,EAAA1D,UAAAiI,YAAA,WACMvI,KAAKuH,iBAGTvH,KAAKwH,WAAY,EACjBrG,EAAAb,UAAMiI,YAAW5I,KAAAK,QAGTgE,EAAA1D,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAKqH,YAAY9F,KAAKwG,IAGd/D,EAAA1D,UAAAqL,OAAV,SAAiBtD,GACfrI,KAAKqH,YAAYlF,MAAMkG,GACvBrI,KAAKuI,eAGGvE,EAAA1D,UAAAsL,UAAV,WACE5L,KAAKqH,YAAYiB,WACjBtI,KAAKuI,eAETvE,GAlImCH,EAAAC,aAAtBvE,GAAAyE,WAAUA,CAyIvB,IAAAyH,GAAA,SAAAtK,GAIE,QAAAsK,GAAoBI,EACR3C,EACA/G,EACAmG,GACVnH,EAAAxB,KAAAK,MAJkBA,KAAA6L,SAMlB,IAAItK,GACAuK,EAAe9L,IAEfoL,GAAAW,WAAW7C,GACb3H,EAA+B2H,EACtBA,IACT4C,EAAU5C,EACV3H,EAA6B2H,EAAgB3H,KAC7CY,EAA8B+G,EAAgB/G,MAC9CmG,EAAiCY,EAAgBZ,SAC7C8C,EAAAW,WAAWD,EAAQvD,cACrBvI,KAAKqJ,IAAiByC,EAAQvD,YAAYyD,KAAKF,IAEjDA,EAAQvD,YAAcvI,KAAKuI,YAAYyD,KAAKhM,OAG9CA,KAAKiM,SAAWH,EAChB9L,KAAK0L,MAAQnK,EACbvB,KAAK2L,OAASxJ,EACdnC,KAAK4L,UAAYtD,EA+ErB,MA5GgCvI,GAAA0L,EAAAtK,GAgC9BsK,EAAAnL,UAAAiB,KAAA,SAAKwG,GACH,IAAK/H,KAAKwH,WAAaxH,KAAK0L,MAAO,CACzB,GAAAG,GAAA7L,KAAA6L,OACHA,GAAQvC,mBAEFtJ,KAAKkM,gBAAgBL,EAAS7L,KAAK0L,MAAO3D,IACnD/H,KAAKuI,cAFLvI,KAAKmM,aAAanM,KAAK0L,MAAO3D,KAOpC0D,EAAAnL,UAAA6B,MAAA,SAAMkG,GACJ,IAAKrI,KAAKwH,UAAW,CACX,GAAAqE,GAAA7L,KAAA6L,OACR,IAAI7L,KAAK2L,OACFE,EAAQvC,oBAIXtJ,KAAKkM,gBAAgBL,EAAS7L,KAAK2L,OAAQtD,GAC3CrI,KAAKuI,gBAJLvI,KAAKmM,aAAanM,KAAK2L,OAAQtD,GAC/BrI,KAAKuI,mBAKF,KAAKsD,EAAQvC,mBAElB,KADAtJ,MAAKuI,cACCF,CAENwD,GAAQrC,eAAiBnB,EACzBwD,EAAQtC,iBAAkB,EAC1BvJ,KAAKuI,iBAKXkD,EAAAnL,UAAAgI,SAAA,WACE,IAAKtI,KAAKwH,UAAW,CACX,GAAAqE,GAAA7L,KAAA6L,OACJ7L,MAAK4L,UACFC,EAAQvC,oBAIXtJ,KAAKkM,gBAAgBL,EAAS7L,KAAK4L,WACnC5L,KAAKuI,gBAJLvI,KAAKmM,aAAanM,KAAK4L,WACvB5L,KAAKuI,eAMPvI,KAAKuI,gBAKHkD,EAAAnL,UAAA6L,aAAR,SAAqBC,EAAcrE,GACjC,IACEqE,EAAGzM,KAAKK,KAAKiM,SAAUlE,GACvB,MAAOM,GAEP,KADArI,MAAKuI,cACCF,IAIFoD,EAAAnL,UAAA4L,gBAAR,SAAwBG,EAAuBD,EAAcrE,GAC3D,IACEqE,EAAGzM,KAAKK,KAAKiM,SAAUlE,GACvB,MAAOM,GAGP,MAFAgE,GAAO7C,eAAiBnB,EACxBgE,EAAO9C,iBAAkB,GAClB,EAET,OAAO,GAGCkC,EAAAnL,UAAAgM,aAAV,WACU,GAAAT,GAAA7L,KAAA6L,OACR7L,MAAKiM,SAAW,KAChBjM,KAAK6L,QAAU,KACfA,EAAQtD,eAEZkD,GA5GgCzH,IZ60B1B,SAASxE,EAAQD,GAEtB,Yax+BD,SAAAwM,GAA2BQ,GACzB,MAAoB,kBAANA,GADAhN,EAAAwM,WAAUA,Gbi/BpB,SAASvM,EAAQD,EAASH,GAE/B,Ycn/BD,IAAAoN,GAAApN,EAAsB,IACtBqN,EAAArN,EAAuB,IACvBgM,EAAAhM,EAAyB,IACzBsN,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAC1B+F,EAAA/F,EAAkC,IAyBlC0E,EAAA,WAgBE,QAAAA,GAAYyE,GANLvI,KAAAuH,gBAA0B,EAO3BgB,IACKvI,KAAMsM,aAAe/D,GAkIlC,MAxHEzE,GAAAxD,UAAAiI,YAAA,WACE,GACIqE,GADAC,GAAY,CAGhB,KAAI7M,KAAKuH,eAAT,CAIAvH,KAAKuH,gBAAiB,CAEtB,IAAAuF,GAAA9M,KAAQsM,EAAAQ,EAAAR,aAAcS,EAAAD,EAAAC,cAItB,IAFO/M,KAAM+M,eAAiB,KAE1B3B,EAAAW,WAAWO,GAAe,CAC5B,GAAIU,GAAQN,EAAAO,SAASX,GAAc3M,KAAKK,KACpCgN,KAAUL,EAAAO,cACZL,GAAY,GACXD,EAASA,OAAcjE,KAAKgE,EAAAO,YAAYC,IAI7C,GAAIX,EAAAY,QAAQL,GAKV,IAHA,GAAIM,MACErF,EAAM+E,EAAe9E,SAElBoF,EAAQrF,GAAK,CACpB,GAAMsF,GAAMP,EAAeM,EAC3B,IAAIZ,EAAAc,SAASD,GAAM,CACjB,GAAIN,GAAQN,EAAAO,SAASK,EAAI/E,aAAa5I,KAAK2N,EAC3C,IAAIN,IAAUL,EAAAO,YAAa,CACzBL,GAAY,EACZD,EAASA,KACT,IAAIvE,GAAMsE,EAAAO,YAAYC,CAClB9E,aAAelD,GAAAC,oBACjBwH,EAASA,EAAO7J,OAAOsF,EAAIuE,QAE3BA,EAAOjE,KAAKN,KAOtB,GAAIwE,EACF,KAAM,IAAI1H,GAAAC,oBAAoBwH,KAsBlC9I,EAAAxD,UAAA+I,IAAA,SAAImE,GACF,GAAKA,GACDA,IAAaxN,MACbwN,IAAa1J,EAAa4E,MAF9B,CAMA,GAAI4E,GAAsBE,CAE1B,cAAeA,IACb,IAAK,WACHF,EAAM,GAAIxJ,GAA6B0J,EACzC,KAAK,SACH,GAAIF,EAAI/F,gBAA6C,kBAApB+F,GAAI/E,YACnC,KACSvI,MAAKuH,eACd+F,EAAI/E,eAEIvI,KAAM+M,iBAA0B/M,KAAM+M,oBAAsBpE,KAAK2E,EAE3E,MACF,SACE,KAAM,IAAIvD,OAAM,yBAA2ByD,EAAW,2BAG1D,MAAOF,KASTxJ,EAAAxD,UAAAmN,OAAA,SAAOvD,GAGL,GAAoB,MAAhBA,GACAA,IAAiBlK,MACjBkK,IAAiBpG,EAAa4E,MAFlC,CAMA,GAAMgF,GAAuB1N,KAAM+M,cAEnC,IAAIW,EAAe,CACjB,GAAMC,GAAoBD,EAAcE,QAAQ1D,EAC5CyD,SACFD,EAAcG,OAAOF,EAAmB,MA/IhC7J,EAAA4E,MAAuB,SAAS8C,GAE5C,MADAA,GAAMjE,gBAAiB,EAChBiE,GACP,GAAI1H,IAgJRA,IApJavE,GAAAuE,aAAYA,Gd8mCnB,SAAStE,EAAQD,GAEtB,Ye9oCYA,GAAA6N,QAAUU,MAAMV,SAAW,SAAKb,GAAqB,MAAAA,IAAyB,gBAAbA,GAAEtE,SfopC1E,SAASzI,EAAQD,GAEtB,YgBtpCD,SAAAgO,GAAyBhB,GACvB,MAAY,OAALA,GAA0B,gBAANA,GADbhN,EAAAgO,SAAQA,GhB+pClB,SAAS/N,EAAQD,EAASH,GAE/B,YiB7pCD,SAAA2O,KACE,IACE,MAAOC,GAAeC,MAAMjO,KAAMuL,WAClC,MAAO4B,GAEP,MADAR,GAAAO,YAAYC,EAAIA,EACTR,EAAAO,aAIX,QAAAD,GAA6Cb,GAE3C,MADA4B,GAAiB5B,EACL2B,EAfd,GAEIC,GAFJrB,EAAAvN,EAA0B,GAaVG,GAAA0N,SAAQA,GjB0qClB,SAASzN,EAAQD,GAEtB,YkBxrCUA,GAAA2N,aAAqBC,OlB+rC1B,SAAS3N,EAAQD,GAEtB,YACA,IAAIQ,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KmBlsCpFiF,EAAA,SAAAjE,GACE,QAAAiE,GAAmBwH,GACjBzL,EAAAxB,KAAAK,MADiBA,KAAA4M,QAEjB,IAAMvE,GAAW0B,MAAMpK,KAAKK,KAAM4M,EAC7BA,EAAO3E,OAAM,8CAClB2E,EAAOjK,IAAI,SAAC0F,EAAKD,GAAM,MAAGA,GAAI,EAAC,KAAKC,EAAI6F,aAAcC,KAAK,QAAY,GAChEnO,MAAMoO,KAAO/F,EAAI+F,KAAO,sBACxBpO,KAAMqO,MAAQhG,EAAIgG,MAClBrO,KAAM8C,QAAUuF,EAAIvF,QAE/B,MAVyC/C,GAAAqF,EAAAjE,GAUzCiE,GAVyC2E,MAA5BxK,GAAA6F,oBAAmBA,GnB0tC1B,SAAS5F,EAAQD,GAEtB,YoBlsCYA,GAAAiM,OACXjE,gBAAgB,EAChBhG,KAAI,SAACwG,KACL5F,MAAK,SAACkG,GAAkB,KAAMA,IAC9BC,SAAQ,epBysCJ,SAAS9I,EAAQD,EAASH,GAE/B,YqB7uCD,IAAA2J,GAAA3J,EAAmB,GAEbyH,EAAckC,EAAAY,KAAK9C,MAEZtH,GAAAwH,eAAoC,kBAAXF,IAA+C,kBAAfA,UACpEA,SAAW,gBAAkB,kBrBivCzB,SAASrH,EAAQD,EAASH,GsBtvChCI,EAAAD,QAAAH,EAAA,KtB6vCM,SAASI,EAAQD,EAASH,IuB7vChC,SAAA+K,GAAA,YAUA,SAAAmE,GAAAC,GAAsC,MAAAA,MAAAC,WAAAD,GAAuCE,UAAAF,GAR7EhO,OAAAmO,eAAAnP,EAAA,cACAwI,OAAA,GAGA,IAAA4G,GAAAvP,EAAA,IAEAwP,EAAAN,EAAAK,GAIAhF,EAAAe,MAEA,oBAAAP,GACAR,EAAAQ,EACC,mBAAAS,UACDjB,EAAAiB,OAGA,IAAAiE,IAAA,EAAAD,cAAAjF,EACApK,cAAAsP,IvBgwC8BlP,KAAKJ,EAAU,WAAa,MAAOS,WAI3D,SAASR,EAAQD,GwBzxCvB,YAMA,SAAAuP,GAAAnF,GACA,GAAAkF,GACAE,EAAApF,EAAA9C,MAaA,OAXA,kBAAAkI,GACAA,EAAA/H,WACA6H,EAAAE,EAAA/H,YAEA6H,EAAAE,EAAA,cACAA,EAAA/H,WAAA6H,GAGAA,EAAA,eAGAA,EAnBAtO,OAAAmO,eAAAnP,EAAA,cACAwI,OAAA,IAEAxI,aAAAuP,GxBgzCM,SAAStP,EAAQD,GAEtB,YACA,IAAIQ,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KyBlzCpF+E,EAAA,SAAA/D,GACE,QAAA+D,KACE,GAAMmD,GAAWlH,EAAAxB,KAAAK,KAAM,sBAChBA,MAAMoO,KAAO/F,EAAI+F,KAAO,0BACxBpO,KAAMqO,MAAQhG,EAAIgG,MAClBrO,KAAM8C,QAAUuF,EAAIvF,QAE/B,MAP6C/C,GAAAmF,EAAA/D,GAO7C+D,GAP6C6E,MAAhCxK,GAAA2F,wBAAuBA,GzB40C9B,SAAS1F,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K0Bz1CpF0D,EAAAzE,EAA2B,IAO3BwJ,EAAA,SAAAzH,GAGE,QAAAyH,GAAmBf,EAA4BY,GAC7CtH,EAAAxB,KAAAK,MADiBA,KAAA6H,UAA4B7H,KAAAyI,aAF/CzI,KAAAuH,gBAA0B,EA4B5B,MA7B4CxH,GAAA6I,EAAAzH,GAO1CyH,EAAAtI,UAAAiI,YAAA,WACE,IAAIvI,KAAKuH,eAAT,CAIAvH,KAAKuH,gBAAiB,CAEtB,IAAMM,GAAU7H,KAAK6H,QACfP,EAAYO,EAAQP,SAI1B,IAFAtH,KAAK6H,QAAU,KAEVP,GAAkC,IAArBA,EAAUW,SAAgBJ,EAAQL,YAAaK,EAAQN,eAAzE,CAIA,GAAMyH,GAAkB1H,EAAUsG,QAAQ5N,KAAKyI,WAE3CuG,SACF1H,EAAUuG,OAAOmB,EAAiB,MAGxCpG,GA7B4C/E,EAAAC,aAA/BvE,GAAAqJ,oBAAmBA,G1By3C1B,SAASpJ,EAAQD,EAASH,GAE/B,Y2Bp4CD,IAAAqE,GAAArE,EAAyB,GACzB6P,EAAA7P,EAAiD,GAEjDqE,GAAAC,WAAWwL,aAAeD,EAAAC,c3By4CpB,SAAS1P,EAAQD,EAASH,GAE/B,Y4B94CD,IAAA+P,GAAA/P,EAAwC,GAE3BG,GAAA2P,aAAeC,EAAAC,wBAAwB5O,Q5Bm5C9C,SAAShB,EAAQD,EAASH,GAE/B,Y6BjvCD,SAAAiQ,GAAyBC,GACf,GAAAvH,GAAAuH,EAAAvH,MAAOF,EAAAyH,EAAAzH,OACfA,GAAQtG,KAAKwG,GACbF,EAAQS,WAOV,QAAAiH,GAA0BD,GAChB,GAAAjH,GAAAiH,EAAAjH,IAAKR,EAAAyH,EAAAzH,OACbA,GAAQ1F,MAAMkG,G7BsuCf,GAAItI,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K6B35CpFsD,EAAArE,EAAyB,GAIzBsN,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAC1B6E,EAAA7E,EAA2B,IAO3BgQ,EAAA,SAAAjO,GAkEE,QAAAiO,GAAoBI,EACAC,EACAC,EACAC,GAClBxO,EAAAxB,KAAAK,MAJkBA,KAAAwP,eACAxP,KAAAyP,WACAzP,KAAA0P,OACA1P,KAAA2P,YA8EtB,MAnJgD5P,GAAAqP,EAAAjO,GA0DvCiO,EAAA5O,OAAP,SAAiBoP,EACAH,EACAE,GACf,MAFe,UAAAF,MAAA/E,QAER,W7B84CE,I6B94CD,GAAAgF,MAAAG,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAH,EAAAG,EAAA,GAAAtE,UAAAsE,EACN,OAAO,IAAIT,GAA2BQ,EAAWH,EAAUC,EAAMC,KAW3DP,EAAA9O,UAAAkI,WAAV,SAAqBC,GACnB,GAAM+G,GAAexP,KAAKwP,aACpBE,EAAO1P,KAAK0P,KACZC,EAAY3P,KAAK2P,UACnB9H,EAAU7H,KAAK6H,OAEnB,IAAK8H,EA6BH,MAAOA,GAAUG,SAASV,EAAwBW,SAAU,GAAKjH,OAAQ9I,KAAMyI,cA5B/E,KAAKZ,EAAS,CACZA,EAAU7H,KAAK6H,QAAU,GAAI5D,GAAAC,YAC7B,IAAM8L,GAAU,QAAAC,K7By4CH,I6Bz4CsB,GAAAC,MAAAL,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAK,EAAAL,EAAA,GAAAtE,UAAAsE,EACjC,IAAM/G,GAAemH,EAAWnH,OACxB2G,EAAA3G,EAAA2G,SAAU5H,EAAAiB,EAAAjB,OAClB,IAAI4H,EAAU,CACZ,GAAMU,GAASzD,EAAAO,SAASwC,GAAUxB,MAAMjO,KAAMkQ,EAC1CC,KAAWxD,EAAAO,YACbrF,EAAQ1F,MAAMwK,EAAAO,YAAYC,IAE1BtF,EAAQtG,KAAK4O,GACbtI,EAAQS,gBAGVT,GAAQtG,KAA0B,IAArB2O,EAAUjI,OAAeiI,EAAU,GAAKA,GACrDrI,EAAQS,WAIN0H,GAASlH,OAAS9I,IAExB,IAAM6O,GAASnC,EAAAO,SAASuC,GAAcvB,MAAMjO,KAAM0P,EAAK3M,OAAOiN,GAC1DnB,KAAWlC,EAAAO,aACbrF,EAAQ1F,MAAMwK,EAAAO,YAAYC,GAG9B,MAAOtF,GAAQ3F,UAAUuG,IAMtB2G,EAAAW,SAAP,SAAmBnO,GACjB,GAAM+I,GAA2B3K,KACzB8I,EAAAlH,EAAAkH,OAAQL,EAAA7G,EAAA6G,WACR+G,EAAA1G,EAAA0G,aAAcE,EAAA5G,EAAA4G,KAAMC,EAAA7G,EAAA6G,UACxB9H,EAAUiB,EAAOjB,OAErB,KAAKA,EAAS,CACZA,EAAUiB,EAAOjB,QAAU,GAAI5D,GAAAC,YAE/B,IAAM8L,GAAU,QAAAC,K7B44CL,I6B54CwB,GAAAC,MAAAL,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAK,EAAAL,EAAA,GAAAtE,UAAAsE,EACjC,IAAM/G,GAAemH,EAAWnH,OACxB2G,EAAA3G,EAAA2G,SAAU5H,EAAAiB,EAAAjB,OAClB,IAAI4H,EAAU,CACZ,GAAMW,GAAS1D,EAAAO,SAASwC,GAAUxB,MAAMjO,KAAMkQ,EAC1CE,KAAWzD,EAAAO,YACbvC,EAAKtB,IAAIsG,EAAUG,SAASP,EAAe,GAAKlH,IAAKsE,EAAAO,YAAYC,EAAGtF,aAEpE8C,EAAKtB,IAAIsG,EAAUG,SAAST,EAAc,GAAKtH,MAAOqI,EAAQvI,iBAE3D,CACL,GAAME,GAA6B,IAArBmI,EAAUjI,OAAeiI,EAAU,GAAKA,CACtDvF,GAAKtB,IAAIsG,EAAUG,SAAST,EAAc,GAAKtH,QAAOF,cAIpDmI,GAASlH,OAASA,CAExB,IAAM+F,GAASnC,EAAAO,SAASuC,GAAcvB,MAAMjO,KAAM0P,EAAK3M,OAAOiN,GAC1DnB,KAAWlC,EAAAO,aACbrF,EAAQ1F,MAAMwK,EAAAO,YAAYC,GAI9BxC,EAAKtB,IAAIxB,EAAQ3F,UAAUuG,KAE/B2G,GAnJgD3L,EAAAC,WAAnCnE,GAAA6P,wBAAuBA,G7BijD9B,SAAS5P,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K8BpkDpFqD,EAAApE,EAAsB,GAEtByE,EAAAzE,EAA2B,IAK3B8E,EAAA,SAAA/C,GAAA,QAAA+C,KAAqC/C,EAAA8M,MAAAjO,KAAAuL,WACnCvL,KAAA+H,MAAW,KAEX/H,KAAAqQ,SAAmB,EAEnBrQ,KAAAsQ,cAAwB,EA2B1B,MAhCqCvQ,GAAAmE,EAAA/C,GAOzB+C,EAAA5D,UAAAkI,WAAV,SAAqBC,GACnB,MAAIzI,MAAKsQ,cAAgBtQ,KAAKqQ,SAC5B5H,EAAWlH,KAAKvB,KAAK+H,OACrBU,EAAWH,WACJzE,EAAAC,aAAa4E,OACX1I,KAAKyH,UACdgB,EAAWtG,MAAMnC,KAAK0H,aACf7D,EAAAC,aAAa4E,OAGfvH,EAAAb,UAAMkI,WAAU7I,KAAAK,KAACyI,IAG1BvE,EAAA5D,UAAAiB,KAAA,SAAKwG,GACH/H,KAAK+H,MAAQA,EACb/H,KAAKqQ,SAAU,GAGjBnM,EAAA5D,UAAAgI,SAAA,WACEtI,KAAKsQ,cAAe,EAChBtQ,KAAKqQ,SACPlP,EAAAb,UAAMiB,KAAI5B,KAAAK,KAACA,KAAK+H,OAElB5G,EAAAb,UAAMgI,SAAQ3I,KAAAK,OAElBkE,GAhCqCV,EAAAxC,QAAxBzB,GAAA2E,aAAYA,G9B0mDnB,SAAS1E,EAAQD,EAASH,GAE/B,Y+BnnDD,IAAAqE,GAAArE,EAAyB,GACzBmR,EAAAnR,EAAyD,GAEzDqE,GAAAC,WAAW8M,iBAAmBD,EAAAC,kB/BwnDxB,SAAShR,EAAQD,EAASH,GAE/B,YgC7nDD,IAAAqR,GAAArR,EAA4C,GAE/BG,GAAAiR,iBAAmBC,EAAAC,4BAA4BlQ,QhCkoDtD,SAAShB,EAAQD,EAASH,GAE/B,YiCxgDD,SAAA2Q,GAAqBnO,GACnB,GAAM+I,GAAuB3K,KACrB8I,EAAAlH,EAAAkH,OAAQL,EAAA7G,EAAA6G,WACR+G,EAAA1G,EAAA0G,aAAcE,EAAA5G,EAAA4G,KAAMC,EAAA7G,EAAA6G,UACxB9H,EAAUiB,EAAOjB,OAErB,KAAKA,EAAS,CACZA,EAAUiB,EAAOjB,QAAU,GAAI5D,GAAAC,YAE/B,IAAM8L,GAAU,QAAAC,KjCooDP,IiCpoD0B,GAAAC,MAAAL,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAK,EAAAL,EAAA,GAAAtE,UAAAsE,EACjC,IAAM/G,GAAemH,EAAWnH,OACxB2G,EAAA3G,EAAA2G,SAAU5H,EAAAiB,EAAAjB,QACZQ,EAAM6H,EAAUS,OAEtB,IAAItI,EACFR,EAAQ1F,MAAMkG,OACT,IAAIoH,EAAU,CACnB,GAAMW,GAAS1D,EAAAO,SAASwC,GAAUxB,MAAMjO,KAAMkQ,EAC1CE,KAAWzD,EAAAO,YACbvC,EAAKtB,IAAIsG,EAAUG,SAASP,EAAe,GAAKlH,IAAKsE,EAAAO,YAAYC,EAAGtF,aAEpE8C,EAAKtB,IAAIsG,EAAUG,SAAST,EAAc,GAAKtH,MAAOqI,EAAQvI,iBAE3D,CACL,GAAME,GAA6B,IAArBmI,EAAUjI,OAAeiI,EAAU,GAAKA,CACtDvF,GAAKtB,IAAIsG,EAAUG,SAAST,EAAc,GAAKtH,QAAOF,cAIpDmI,GAASlH,OAASA,CAExB,IAAM+F,GAASnC,EAAAO,SAASuC,GAAcvB,MAAMjO,KAAM0P,EAAK3M,OAAOiN,GAC1DnB,KAAWlC,EAAAO,aACbrF,EAAQ1F,MAAMwK,EAAAO,YAAYC,GAI9BxC,EAAKtB,IAAIxB,EAAQ3F,UAAUuG,IAO7B,QAAA4G,GAAyBC,GACf,GAAAvH,GAAAuH,EAAAvH,MAAOF,EAAAyH,EAAAzH,OACfA,GAAQtG,KAAKwG,GACbF,EAAQS,WAOV,QAAAiH,GAA0BD,GAChB,GAAAjH,GAAAiH,EAAAjH,IAAKR,EAAAyH,EAAAzH,OACbA,GAAQ1F,MAAMkG,GjCi9Cf,GAAItI,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KiC1oDpFsD,EAAArE,EAAyB,GAIzBsN,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAC1B6E,EAAA7E,EAA2B,IAO3BsR,EAAA,SAAAvP,GA8DE,QAAAuP,GAAoBlB,EACAC,EACAC,EACDC,GACjBxO,EAAAxB,KAAAK,MAJkBA,KAAAwP,eACAxP,KAAAyP,WACAzP,KAAA0P,OACD1P,KAAA2P,YA8CrB,MA/GoD5P,GAAA2Q,EAAAvP,GAsD3CuP,EAAAlQ,OAAP,SAAiBoP,EACAH,EACAE,GACf,MAFe,UAAAF,MAAA/E,QAER,WjCooDE,IiCpoDD,GAAAgF,MAAAG,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAH,EAAAG,EAAA,GAAAtE,UAAAsE,EACN,OAAO,IAAIa,GAA+Bd,EAAWH,EAAUC,EAAMC,KAW/De,EAAApQ,UAAAkI,WAAV,SAAqBC,GACnB,GAAM+G,GAAexP,KAAKwP,aACpBE,EAAO1P,KAAK0P,KACZC,EAAY3P,KAAK2P,UACnB9H,EAAU7H,KAAK6H,OAEnB,IAAK8H,EAiCH,MAAOA,GAAUG,SAASC,EAAU,GAAKjH,OAAQ9I,KAAMyI,cAhCvD,KAAKZ,EAAS,CACZA,EAAU7H,KAAK6H,QAAU,GAAI5D,GAAAC,YAC7B,IAAM8L,GAAU,QAAAC,KjC+nDH,IiC/nDsB,GAAAC,MAAAL,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAK,EAAAL,EAAA,GAAAtE,UAAAsE,EACjC,IAAM/G,GAAemH,EAAWnH,OACxB2G,EAAA3G,EAAA2G,SAAU5H,EAAAiB,EAAAjB,QACZQ,EAAM6H,EAAUS,OAEtB,IAAItI,EACFR,EAAQ1F,MAAMkG,OACT,IAAIoH,EAAU,CACnB,GAAMU,GAASzD,EAAAO,SAASwC,GAAUxB,MAAMjO,KAAMkQ,EAC1CC,KAAWxD,EAAAO,YACbrF,EAAQ1F,MAAMwK,EAAAO,YAAYC,IAE1BtF,EAAQtG,KAAK4O,GACbtI,EAAQS,gBAGVT,GAAQtG,KAA0B,IAArB2O,EAAUjI,OAAeiI,EAAU,GAAKA,GACrDrI,EAAQS,WAIN0H,GAASlH,OAAS9I,IAExB,IAAM6O,GAASnC,EAAAO,SAASuC,GAAcvB,MAAMjO,KAAM0P,EAAK3M,OAAOiN,GAC1DnB,KAAWlC,EAAAO,aACbrF,EAAQ1F,MAAMwK,EAAAO,YAAYC,GAG9B,MAAOtF,GAAQ3F,UAAUuG,IAK/BiI,GA/GoDjN,EAAAC,WAAvCnE,GAAAmR,4BAA2BA,GjC2yDlC,SAASlR,EAAQD,EAASH,GAE/B,YkC1zDD,IAAAqE,GAAArE,EAAyB,GACzBwR,EAAAxR,EAAmD,GAEnDqE,GAAAC,WAAWV,cAAgB4N,EAAA5N,elC+zDrB,SAASxD,EAAQD,EAASH,GAE/B,YmC3vDD,SAAA4D,KnC8yDK,ImC9yD+B,GAAA6N,MAAAhB,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAgB,EAAAhB,EAAA,GAAAtE,UAAAsE,EAIlC,IAAIiB,GAAyC,KACzCnB,EAAuB,IAgB3B,OAdIoB,GAAAC,YAAYH,EAAYA,EAAY5I,OAAS,MAC/C0H,EAAuBkB,EAAYI,OAGc,kBAAxCJ,GAAYA,EAAY5I,OAAS,KAC1C6I,EAAwCD,EAAYI,OAK3B,IAAvBJ,EAAY5I,QAAgBuE,EAAAY,QAAQyD,EAAY,MAClDA,EAAsCA,EAAY,IAG7C,GAAIK,GAAAC,gBAAgBN,EAAalB,GAAWhI,KAAK,GAAIiJ,GAAAQ,sBAA4BN,IA5F1F,GAAAC,GAAA3R,EAA4B,IAC5BoN,EAAApN,EAAwB,IACxB8R,EAAA9R,EAAgC,IAChCwR,EAAAxR,EAAsC,GAoEtBG,GAAAyD,cAAaA,GnCq0DvB,SAASxD,EAAQD,GAEtB,YoC/4DD,SAAAyR,GAA+BjJ,GAC7B,MAAOA,IAA0C,kBAApBA,GAAO+H,SADtBvQ,EAAAyR,YAAWA,GpCw5DrB,SAASxR,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KqC95DpFsD,EAAArE,EAAyB,GACzBiS,EAAAjS,EAA+B,IAC/BkS,EAAAlS,EAA8B,IAE9B2R,EAAA3R,EAA0B,IAQ1B+R,EAAA,SAAAhQ,GA0FE,QAAAgQ,GAAmBI,EAAmB5B,GACpCxO,EAAAxB,KAAAK,MADiBA,KAAAuR,QAAmBvR,KAAA2P,YAE/BA,GAA8B,IAAjB4B,EAAMtJ,SACtBjI,KAAKiJ,WAAY,EACjBjJ,KAAK+H,MAAQwJ,EAAM,IAqBzB,MAnHwCxR,GAAAoR,EAAAhQ,GAE/BgQ,EAAA3Q,OAAP,SAAiB+Q,EAAY5B,GAC3B,MAAO,IAAIwB,GAAgBI,EAAO5B,IA8C7BwB,EAAAK,GAAP,WrCg6DO,IqCh6DM,GAAAD,MAAA1B,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAA0B,EAAA1B,EAAA,GAAAtE,UAAAsE,EACX,IAAIF,GAAuB4B,EAAMA,EAAMtJ,OAAS,EAC5C8I,GAAAC,YAAYrB,GACd4B,EAAMN,MAENtB,EAAY,IAGd,IAAM3H,GAAMuJ,EAAMtJ,MAClB,OAAID,GAAM,EACD,GAAImJ,GAAwBI,EAAO5B,GACzB,IAAR3H,EACF,GAAIqJ,GAAAI,iBAAyBF,EAAM,GAAI5B,GAEvC,GAAI2B,GAAAI,gBAAmB/B,IAI3BwB,EAAApB,SAAP,SAAgBnO,GAEN,GAAA2P,GAAA3P,EAAA2P,MAAOlE,EAAAzL,EAAAyL,MAAOsE,EAAA/P,EAAA+P,MAAOlJ,EAAA7G,EAAA6G,UAE7B,OAAI4E,IAASsE,MACXlJ,GAAWH,YAIbG,EAAWlH,KAAKgQ,EAAMlE,SAElB5E,EAAWlB,iBAIf3F,EAAMyL,MAAQA,EAAQ,EAEfrN,KAAM8P,SAASlO,OAcduP,EAAA7Q,UAAAkI,WAAV,SAAqBC,GACnB,GAAI4E,GAAQ,EACNkE,EAAQvR,KAAKuR,MACbI,EAAQJ,EAAMtJ,OACd0H,EAAY3P,KAAK2P,SAEvB,IAAIA,EACF,MAAOA,GAAUG,SAASqB,EAAgBpB,SAAU,GAClDwB,QAAOlE,QAAOsE,QAAOlJ,cAGvB,KAAK,GAAIL,GAAI,EAAGA,EAAIuJ,IAAUlJ,EAAWlB,eAAgBa,IACvDK,EAAWlH,KAAKgQ,EAAMnJ,GAExBK,GAAWH,YAGjB6I,GAnHwC1N,EAAAC,WAA3BnE,GAAA4R,gBAAeA,GrC2gEtB,SAAS3R,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KsC7hEpFsD,EAAArE,EAAyB,GASzBqS,EAAA,SAAAtQ,GAwBE,QAAAsQ,GAAmB1J,EAAkB4H,GACnCxO,EAAAxB,KAAAK,MADiBA,KAAA+H,QAAkB/H,KAAA2P,YAFrC3P,KAAAiJ,WAAqB,EAIf0G,IACF3P,KAAKiJ,WAAY,GAmBvB,MA9CyClJ,GAAA0R,EAAAtQ,GAChCsQ,EAAAjR,OAAP,SAAiBuH,EAAU4H,GACzB,MAAO,IAAI8B,GAAiB1J,EAAO4H,IAG9B8B,EAAA1B,SAAP,SAAgBnO,GACN,GAAAgQ,GAAAhQ,EAAAgQ,KAAM7J,EAAAnG,EAAAmG,MAAOU,EAAA7G,EAAA6G,UAErB,OAAImJ,OACFnJ,GAAWH,YAIbG,EAAWlH,KAAKwG,QACZU,EAAWlB,iBAIf3F,EAAMgQ,MAAO,EACN5R,KAAM8P,SAASlO,OAYd6P,EAAAnR,UAAAkI,WAAV,SAAqBC,GACnB,GAAMV,GAAQ/H,KAAK+H,MACb4H,EAAY3P,KAAK2P,SAEvB,OAAIA,GACKA,EAAUG,SAAS2B,EAAiB1B,SAAU,GACnD6B,MAAM,EAAO7J,QAAOU,gBAGtBA,EAAWlH,KAAKwG,QACXU,EAAWlB,gBACdkB,EAAWH,cAInBmJ,GA9CyChO,EAAAC,WAA5BnE,GAAAkS,iBAAgBA,GtC6kEvB,SAASjS,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuC3lEpFsD,EAAArE,EAAyB,GAYzBsS,EAAA,SAAAvQ,GAgDE,QAAAuQ,GAAoB/B,GAClBxO,EAAAxB,KAAAK,MADkBA,KAAA2P,YActB,MA9DwC5P,GAAA2R,EAAAvQ,GAuC/BuQ,EAAAlR,OAAP,SAAiBmP,GACf,MAAO,IAAI+B,GAAmB/B,IAGzB+B,EAAA3B,SAAP,SAAmBT,GACT,GAAA7G,GAAA6G,EAAA7G,UACRA,GAAWH,YAOHoJ,EAAApR,UAAAkI,WAAV,SAAqBC,GAEnB,GAAMkH,GAAY3P,KAAK2P,SAEvB,OAAIA,GACKA,EAAUG,SAAS4B,EAAgB3B,SAAU,GAAKtH,mBAEzDA,GAAWH,YAGjBoJ,GA9DwCjO,EAAAC,WAA3BnE,GAAAmS,gBAAeA,GvCypEtB,SAASlS,EAAQD,EAASH,GAE/B,YwCznED,SAAA4D,KxC4qEK,IwC5qE+B,GAAA6N,MAAAhB,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAgB,EAAAhB,EAAA,GAAAtE,UAAAsE,EAGlC,IAAIiB,GAAwC,IAa5C,OAZmD,kBAAxCD,GAAYA,EAAY5I,OAAS,KAC1C6I,EAAwCD,EAAYI,OAK3B,IAAvBJ,EAAY5I,QAAgBuE,EAAAY,QAAQyD,EAAY,MAClDA,EAAmBA,EAAY,IAGjCA,EAAYgB,QAAQ7R,MAEb,GAAIkR,GAAAC,gBAAgBN,GAAalJ,KAAK,GAAIyJ,GAAsBN,IxC0mExE,GAAI/Q,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KwC5qEpF+Q,EAAA9R,EAA8B,IAC9BoN,EAAApN,EAAsB,IAGtB0S,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,IAC1B4S,IAwCUzS,GAAAyD,cAAaA,CAwC7B,IAAAoO,GAAA,WACE,QAAAA,GAAoBN,GAAA9Q,KAAA8Q,UAMtB,MAHEM,GAAA9Q,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIyJ,GAAwBxJ,EAAYzI,KAAK8Q,WAE1EM,IAPa7R,GAAA6R,sBAAqBA,CAclC,IAAAa,GAAA,SAAA9Q,GAME,QAAA8Q,GAAY5K,EAAoCyJ,GAC9C3P,EAAAxB,KAAAK,KAAMqH,GADwCrH,KAAA8Q,UALxC9Q,KAAAkS,OAAiB,EACjBlS,KAAAmS,UACAnS,KAAA6Q,eA8DV,MAjEmD9Q,GAAAkS,EAAA9Q,GAUvC8Q,EAAA3R,UAAAoL,MAAV,SAAgB1E,GACdhH,KAAKmS,OAAOxJ,KAAKqJ,GACjBhS,KAAK6Q,YAAYlI,KAAK3B,IAGdiL,EAAA3R,UAAAsL,UAAV,WACE,GAAMiF,GAAc7Q,KAAK6Q,YACnB7I,EAAM6I,EAAY5I,MACxB,IAAY,IAARD,EACFhI,KAAKqH,YAAYiB,eACZ,CACLtI,KAAKkS,OAASlK,EACdhI,KAAKoS,UAAYpK,CACjB,KAAK,GAAII,GAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAMpB,GAAa6J,EAAYzI,EAC/BpI,MAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAMgH,EAAYA,EAAYoB,OAK/D6J,EAAA3R,UAAAgS,eAAA,SAAeC,GACc,KAAtBvS,KAAKkS,QAAU,IAClBlS,KAAKqH,YAAYiB,YAIrB2J,EAAA3R,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,GAAMV,GAASnS,KAAKmS,OACdW,EAASX,EAAOQ,GAChBP,EAAapS,KAAKoS,UAEpBU,IAAWd,IAAShS,KAAKoS,UAAYpS,KAAKoS,UAD1C,CAEJD,GAAOQ,GAAcD,EAEH,IAAdN,IACEpS,KAAK8Q,QACP9Q,KAAK+S,YAAYZ,GAEjBnS,KAAKqH,YAAY9F,KAAK4Q,KAKpBF,EAAA3R,UAAAyS,YAAR,SAAoBZ,GAClB,GAAItD,EACJ,KACEA,EAAS7O,KAAK8Q,QAAQ7C,MAAMjO,KAAMmS,GAClC,MAAO9J,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAKqH,YAAY9F,KAAKsN,IAE1BoD,GAjEmDH,EAAAkB,gBAAtCzT,GAAA0S,wBAAuBA,GxCytE9B,SAASzS,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KyCr0EpF4D,EAAA3E,EAAyB,IAQzB4T,EAAA,SAAA7R,GAAA,QAAA6R,KAA2C7R,EAAA8M,MAAAjO,KAAAuL,WAc3C,MAd2CxL,GAAAiT,EAAA7R,GACzC6R,EAAA1S,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAKqH,YAAY9F,KAAKmR,IAGxBM,EAAA1S,UAAA2S,YAAA,SAAY9Q,EAAY0Q,GACtB7S,KAAKqH,YAAYlF,MAAMA,IAGzB6Q,EAAA1S,UAAAgS,eAAA,SAAeO,GACb7S,KAAKqH,YAAYiB,YAErB0K,GAd2CjP,EAAAC,WAA9BzE,GAAAyT,gBAAeA,GzC01EtB,SAASxT,EAAQD,EAASH,GAE/B,Y0Cp1ED,SAAAiT,GAAqCa,EACArE,EACA4D,EACAE,GACnC,GAAItL,GAA+B,GAAI8L,GAAAC,gBAAgBF,EAAiBT,EAAYE,EAEpF,KAAItL,EAAYE,eAAhB,CAIA,GAAIsH,YAAkBpL,GAAAC,WACpB,MAAImL,GAAO5F,WACT5B,EAAY9F,KAAWsN,EAAQ9G,WAC/BV,GAAYiB,YAGLuG,EAAO3M,UAAUmF,EAI5B,IAAImF,EAAAY,QAAQyB,GAAS,CACnB,IAAK,GAAIzG,GAAI,EAAGJ,EAAM6G,EAAO5G,OAAQG,EAAIJ,IAAQX,EAAYE,eAAgBa,IAC3Ef,EAAY9F,KAAKsN,EAAOzG,GAErBf,GAAYE,gBACfF,EAAYiB,eAET,IAAI+K,EAAAC,UAAUzE,GAcnB,MAbAA,GAAO0E,KACL,SAACxL,GACMV,EAAYE,iBACfF,EAAY9F,KAAUwG,GACtBV,EAAYiB,aAGhB,SAACD,GAAa,MAAAhB,GAAYlF,MAAMkG,KAEjCkL,KAAK,KAAM,SAAClL,GAEXU,EAAAY,KAAK6J,WAAW,WAAQ,KAAMnL,OAEzBhB,CACF,IAAkC,kBAAvBwH,GAAOvI,EAAAY,YAA4B,CACnD,IAAiB,GAAA2I,GAAA,EAAA/C,EAAK+B,EAALgB,EAAA/C,EAAA7E,OAAA4H,IAAY,CAAxB,GAAI4D,GAAI3G,EAAA+C,EAEX,IADAxI,EAAY9F,KAAUkS,GAClBpM,EAAYE,eACd,MAGCF,EAAYE,gBACfF,EAAYiB,eAET,IAAoC,kBAAzBuG,GAAOtI,cAA8B,CACrD,GAAMmN,GAAM7E,EAAOtI,eACnB,IAA6B,kBAAlBmN,GAAIxR,UAGb,MAAOwR,GAAIxR,UAAU,GAAIiR,GAAAC,gBAAgBF,EAAiBT,EAAYE,GAFtEtL,GAAYlF,MAAM,0BAKpBkF,GAAYlF,MAAM,GAAIwR,WAAU,4BA5EpC,GAAA5K,GAAA3J,EAAmB,GACnBoN,EAAApN,EAAsB,IACtBiU,EAAAjU,EAAwB,IAExBqE,EAAArE,EAA0C,GAC1CkH,EAAAlH,EAAyB,IAEzB+T,EAAA/T,EAA8B,IAG9BmH,EAAAnH,EAAyB,GAMTG,GAAA8S,kBAAiBA,G1C85E3B,SAAS7S,EAAQD,GAEtB,Y2Ch7ED,SAAA+T,GAA6BvL,GAC3B,MAAOA,IAA2C,kBAArBA,GAAO7F,WAA2D,kBAAvB6F,GAAcwL,KADxEhU,EAAA+T,UAASA,G3Cy7EnB,SAAS9T,EAAQD,EAASH,GAE/B,Y4C37ED,IAAA2J,GAAA3J,EAAmB,GAIbyH,EAAckC,EAAAY,KAAK9C,MAEzB,IAAsB,kBAAXA,GACLA,EAAOI,SACT1H,EAAA2H,WAAaL,EAAOI,SACW,kBAAfJ,YAChBtH,EAAA2H,WAAaL,SAAW,iBAGxB,IAAIkC,EAAAY,KAAKiK,KAA+C,mBAAjC,GAAI7K,GAAAY,KAAKiK,KAAM,cAEpCrU,EAAA2H,WAAa,iBACR,IAAI6B,EAAAY,KAAKkK,IAGd,IAAK,GADDC,GAAOvT,OAAOwT,oBAAoBhL,EAAAY,KAAKkK,IAAIvT,WACtC8H,EAAI,EAAGA,EAAI0L,EAAK7L,SAAUG,EAAG,CACpC,GAAI4L,GAAMF,EAAK1L,EACf,IAAY,YAAR4L,GAA6B,SAARA,GAAkBjL,EAAAY,KAAKkK,IAAIvT,UAAU0T,KAASjL,EAAAY,KAAKkK,IAAIvT,UAAmB,QAAG,CACpGf,EAAA2H,WAAa8M,CACb,YAIJzU,GAAA2H,WAAa,c5Cm8Eb,SAAS1H,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K6Cp+EpF4D,EAAA3E,EAAyB,IAQzBgU,EAAA,SAAAjS,GAGE,QAAAiS,GAAoB/G,EAAuCoG,EAAuBE,GAChFxR,EAAAxB,KAAAK,MADkBA,KAAAqM,SAAuCrM,KAAAyS,aAAuBzS,KAAA2S,aAF1E3S,KAAAqN,MAAgB,EAmB1B,MApB2CtN,GAAAqT,EAAAjS,GAO/BiS,EAAA9S,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAKqM,OAAOmG,WAAWxS,KAAKyS,WAAY1K,EAAO/H,KAAK2S,WAAY3S,KAAKqN,QAASrN,OAGtEoT,EAAA9S,UAAAqL,OAAV,SAAiBxJ,GACfnC,KAAKqM,OAAO4G,YAAY9Q,EAAOnC,MAC/BA,KAAKuI,eAGG6K,EAAA9S,UAAAsL,UAAV,WACE5L,KAAKqM,OAAOiG,eAAetS,MAC3BA,KAAKuI,eAET6K,GApB2CrP,EAAAC,WAA9BzE,GAAA6T,gBAAeA,G7C+/EtB,SAAS5T,EAAQD,EAASH,GAE/B,Y8CzgFD,IAAAqE,GAAArE,EAAyB,GACzB6U,EAAA7U,EAAqC,GAErCqE,GAAAC,WAAWX,OAASkR,EAAAlR,Q9C8gFd,SAASvD,EAAQD,EAASH,GAE/B,Y+CnhFD,IAAA6U,GAAA7U,EAA6B,GAEhBG,GAAAwD,OAASkR,EAAAC,c/CwhFhB,SAAS1U,EAAQD,EAASH,GAE/B,YgD9+ED,SAAA2D,KhD4hFK,IgD5hFwB,GAAA8N,MAAAhB,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAgB,EAAAhB,EAAA,GAAAtE,UAAAsE,EAC3B,OAAOqE,GAAYjG,MAAA,QAAOjO,MAAI+C,OAAK8N,IAmErC,QAAAqD,KhD0gFK,IgD1gF8B,GAAArD,MAAAhB,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAgB,EAAAhB,EAAA,GAAAtE,UAAAsE,EACjC,IAAIF,GAAuB,KACvBD,EAAcmB,CAKlB,OAJIE,GAAAC,YAAYtB,EAAKmB,EAAY5I,OAAS,MACxC0H,EAAYD,EAAKuB,OAGZ,GAAIC,GAAAC,gBAAgBN,EAAalB,GAAWhI,KAAK,GAAIwM,GAAAC,iBAAoB,IAvHlF,GAAArD,GAAA3R,EAA0B,IAC1B8R,EAAA9R,EAA8B,IAC9B+U,EAAA/U,EAA+B,GA0CfG,GAAAwD,OAAMA,EAoENxD,EAAA2U,aAAYA,GhDyhFtB,SAAS1U,EAAQD,EAASH,GAE/B,YiD1lFD,SAAAiV,GAA4BC,GAC1B,MAD0B,UAAAA,MAAqBC,OAAOC,mBAC/CxU,KAAK2H,KAAK,GAAIyM,GAAoBE,IjD0lF1C,GAAIvU,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KiD7oFpF2R,EAAA1S,EAA8B,IAC9B2S,EAAA3S,EAAgC,GA8ChBG,GAAA8U,SAAQA,CAQxB,IAAAD,GAAA,WACE,QAAAA,GAAoBE,GAAAtU,KAAAsU,aAMtB,MAHEF,GAAA9T,UAAAX,KAAA,SAAK8U,EAAuB3L,GAC1B,MAAOA,GAAON,WAAW,GAAIkM,GAAmBD,EAAUzU,KAAKsU,cAEnEF,IAPa7U,GAAA6U,iBAAgBA,CAc7B,IAAAM,GAAA,SAAAvT,GAKE,QAAAuT,GAAYrN,EAAkCiN,GAC5CnT,EAAAxB,KAAAK,KAAMqH,GADsCrH,KAAAsU,aAJtCtU,KAAAsQ,cAAwB,EACxBtQ,KAAA2U,UACA3U,KAAAkS,OAAiB,EAgC3B,MAnC2CnS,GAAA2U,EAAAvT,GAS/BuT,EAAApU,UAAAoL,MAAV,SAAgB1E,GACVhH,KAAKkS,OAASlS,KAAKsU,YACrBtU,KAAKkS,SACLlS,KAAKqJ,IAAI0I,EAAAM,kBAAoCrS,KAAMgH,KAEnDhH,KAAK2U,OAAOhM,KAAK3B,IAIX0N,EAAApU,UAAAsL,UAAV,WACE5L,KAAKsQ,cAAe,EACA,IAAhBtQ,KAAKkS,QAAuC,IAAvBlS,KAAK2U,OAAO1M,QACnCjI,KAAKqH,YAAYiB,YAIrBoM,EAAApU,UAAAgS,eAAA,SAAeO,GACb,GAAM8B,GAAS3U,KAAK2U,MACpB3U,MAAKyN,OAAOoF,GACZ7S,KAAKkS,SACDyC,EAAO1M,OAAS,EAClBjI,KAAK0L,MAAMiJ,EAAOhE,SACO,IAAhB3Q,KAAKkS,QAAgBlS,KAAKsQ,cACnCtQ,KAAKqH,YAAYiB,YAGvBoM,GAnC2C5C,EAAAkB,gBAA9BzT,GAAAmV,mBAAkBA,GjDsrFzB,SAASlV,EAAQD,EAASH,GAE/B,YkDjwFD,IAAAqE,GAAArE,EAAyB,GACzBwV,EAAAxV,EAAmC,GAEnCqE,GAAAC,WAAWmR,MAAQD,EAAAC,OlDswFb,SAASrV,EAAQD,EAASH,GAE/B,YmD3wFD,IAAA0V,GAAA1V,EAAgC,GAEnBG,GAAAsV,MAAQC,EAAAC,gBAAgBvU,QnDgxF/B,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KoDxxFpFsD,EAAArE,EAAgD,GAIhD2S,EAAA3S,EAAgC,IAChC0S,EAAA1S,EAA8B,IAM9B2V,EAAA,SAAA5T,GA8CE,QAAA4T,GAAoBC,GAClB7T,EAAAxB,KAAAK,MADkBA,KAAAgV,oBAOtB,MArDwCjV,GAAAgV,EAAA5T,GA0C/B4T,EAAAvU,OAAP,SAAiBwU,GACf,MAAO,IAAID,GAAgBC,IAOnBD,EAAAzU,UAAAkI,WAAV,SAAqBC,GACnB,MAAO,IAAIwM,GAAgBxM,EAAYzI,KAAKgV,oBAEhDD,GArDwCtR,EAAAC,WAA3BnE,GAAAwV,gBAAeA,CAuD5B,IAAAE,GAAA,SAAA9T,GACE,QAAA8T,GAAY5N,EACQ6N,GAClB/T,EAAAxB,KAAAK,KAAMqH,GADYrH,KAAAkV,UAElBlV,KAAKmV,WAiBT,MArBiCpV,GAAAkV,EAAA9T,GAOvB8T,EAAA3U,UAAA6U,SAAR,WACE,IACEnV,KAAKoV,eACL,MAAO/M,GACPrI,KAAK2L,OAAOtD,KAIR4M,EAAA3U,UAAA8U,aAAR,WACE,GAAMvG,GAAS7O,KAAKkV,SAChBrG,IACF7O,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAM6O,KAGvCoG,GArBiCnD,EAAAkB,kBpDkzF3B,SAASxT,EAAQD,EAASH,GAE/B,YqDt3FD,IAAAqE,GAAArE,EAAyB,GACzBiW,EAAAjW,EAAmC,GAEnCqE,GAAAC,WAAW8H,MAAQ6J,EAAA7J,OrD23Fb,SAAShM,EAAQD,EAASH,GAE/B,YsDh4FD,IAAAkS,GAAAlS,EAAgC,GAEnBG,GAAAiM,MAAQ8F,EAAAI,gBAAgBlR,QtDq4F/B,SAAShB,EAAQD,EAASH,GAE/B,YuDz4FD,IAAAqE,GAAArE,EAAyB,GACzBkW,EAAAlW,EAAyC,GAEzCqE,GAAAC,WAAW6R,SAAWD,EAAAC,UvD84FhB,SAAS/V,EAAQD,EAASH,GAE/B,YwDn5FD,IAAAoW,GAAApW,EAAmC,GAEtBG,GAAAgW,SAAWC,EAAAC,mBAAmBjV,QxDw5FrC,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KyDh6FpFsD,EAAArE,EAAgD,GAGhDkS,EAAAlS,EAA8B,IAC9BoN,EAAApN,EAAsB,IAEtB2S,EAAA3S,EAAgC,IAChC0S,EAAA1S,EAA8B,IAQ9BqW,EAAA,SAAAtU,GACE,QAAAsU,GAAoBC,EACAC,GAClBxU,EAAAxB,KAAAK,MAFkBA,KAAA0V,UACA1V,KAAA2V,iBAyDtB,MA3D2C5V,GAAA0V,EAAAtU,GA+BlCsU,EAAAjV,OAAP,WzD+4FO,IyD/4FU,GAAAkV,MAAA7F,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAA6F,EAAA7F,EAAA,GAAAtE,UAAAsE,EAGf,IAAgB,OAAZ6F,GAAyC,IAArBnK,UAAUtD,OAChC,MAAO,IAAIqJ,GAAAI,eAGb,IAAIiE,GAAiD,IAWrD,OAV2C,kBAAhCD,GAAQA,EAAQzN,OAAS,KAClC0N,EAAiDD,EAAQzE,OAKpC,IAAnByE,EAAQzN,QAAgBuE,EAAAY,QAAQsI,EAAQ,MAC1CA,EAA6CA,EAAQ,IAGhC,IAAnBA,EAAQzN,OACH,GAAIqJ,GAAAI,gBAGN,GAAI+D,GAAsDC,EAASC,IAGlEF,EAAAnV,UAAAkI,WAAV,SAAqBC,GACnB,MAAO,IAAImN,GAAmBnN,EAAYzI,KAAK0V,QAAS1V,KAAK2V,iBAEjEF,GA3D2ChS,EAAAC,WAA9BnE,GAAAkW,mBAAkBA,CAkE/B,IAAAG,GAAA,SAAAzU,GAME,QAAAyU,GAAYvO,EACQqO,EACAC,GAClBxU,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA0V,UACA1V,KAAA2V,iBAPZ3V,KAAA6V,UAAY,EAGZ7V,KAAA8V,WAAa,CAOnB,IAAM9N,GAAM0N,EAAQzN,MACpBjI,MAAK+V,MAAQ/N,EACbhI,KAAKmS,OAAS,GAAIrE,OAAM9F,EAExB,KAAK,GAAII,GAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAMU,GAAS4M,EAAQtN,GACjB4N,EAAoBjE,EAAAM,kBAAkBrS,KAAM8I,EAAQ,KAAMV,EAE5D4N,KACKA,EAAmBrD,WAAavK,EACvCpI,KAAKqJ,IAAI2M,KAsCjB,MA3DoCjW,GAAA6V,EAAAzU,GA0BlCyU,EAAAtV,UAAAkS,WAAA,SAAWC,EAAiBC,EACjBC,EAAoBC,EACpBC,GACT7S,KAAKmS,OAAOQ,GAAcD;AACfG,EAAUoD,YACbpD,EAAUoD,WAAY,EAC5BjW,KAAK8V,eAITF,EAAAtV,UAAAgS,eAAA,SAAeO,GACb,GAAMxL,GAAcrH,KAAKqH,YACzByF,EAAA9M,KAAQ8V,EAAAhJ,EAAAgJ,WAAYH,EAAA7I,EAAA6I,eAAgBxD,EAAArF,EAAAqF,OAC9BnK,EAAMmK,EAAOlK,MAEnB,KAAW4K,EAAUoD,UAEnB,WADA5O,GAAYiB,UAMd,IAFAtI,KAAK6V,YAED7V,KAAK6V,YAAc7N,EAAvB,CAIA,GAAI8N,IAAe9N,EAAK,CACtB,GAAMD,GAAQ4N,EAAiBA,EAAe1H,MAAMjO,KAAMmS,GAAUA,CACpE9K,GAAY9F,KAAKwG,GAGnBV,EAAYiB,aAEhBsN,GA3DoC9D,EAAAkB,kBzD87F9B,SAASxT,EAAQD,EAASH,GAE/B,Y0DjhGD,IAAAqE,GAAArE,EAAyB,GACzB8W,EAAA9W,EAAiC,GAEjCqE,GAAAC,WAAW5B,KAAOoU,EAAApU,M1DshGZ,SAAStC,EAAQD,EAASH,GAE/B,Y2D3hGD,IAAA+W,GAAA/W,EAA+B,GAElBG,GAAAuC,KAAOqU,EAAAC,eAAe5V,Q3DgiG7B,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K4DxiGpFqM,EAAApN,EAAsB,IACtBgM,EAAAhM,EAAyB,IACzBiU,EAAAjU,EAAwB,IACxB2R,EAAA3R,EAA0B,IAC1BiX,EAAAjX,EAAgC,IAChCkX,EAAAlX,EAAgC,IAChC8R,EAAA9R,EAA8B,IAC9BmX,EAAAnX,EAAkC,IAGlCkH,EAAAlH,EAAyB,IACzBqE,EAAArE,EAA0C,GAE1CoX,EAAApX,EAAkC,IAElCmH,EAAAnH,EAAyB,IAEnBqX,EAAc,SAAKlK,GAA8B,MAAAA,IAAyB,gBAAbA,GAAEtE,QAOrEmO,EAAA,SAAAjV,GACE,QAAAiV,GAAoBM,EAAiC/G,GACnDxO,EAAAxB,KAAAK,KAAM,MADYA,KAAA0W,MAAiC1W,KAAA2P,YAwGvD,MAzGuC5P,GAAAqW,EAAAjV,GA+D9BiV,EAAA5V,OAAP,SAAiBkW,EACAC,EACAC,EACAC,GACf,GAAIlH,GAAuB,KACvBmH,EAAkC,IAQtC,IAPI1L,EAAAW,WAAW4K,IACbhH,EAAYkH,GAAiB,KAC7BC,EAAmCH,GAC1B5F,EAAAC,YAAYrB,KACrBA,EAAwBgH,GAGf,MAAPD,EAAa,CACf,GAAiC,kBAAtBA,GAAInQ,cACb,MAAImQ,aAAejT,GAAAC,aAAeiM,EACzB+G,EAEF,GAAIN,GAAkBM,EAAK/G,EAC7B,IAAInD,EAAAY,QAAQsJ,GACjB,MAAO,IAAIxF,GAAAC,gBAAmBuF,EAAK/G,EAC9B,IAAI0D,EAAAC,UAAUoD,GACnB,MAAO,IAAIL,GAAAU,kBAAqBL,EAAK/G,EAChC,IAA+B,kBAApB+G,GAAIpQ,EAAAY,aAA6C,gBAARwP,GACzD,MAAO,IAAIJ,GAAAU,mBAA2BN,EAAK,KAAM,KAAM/G,EAClD,IAAI8G,EAAYC,GACrB,MAAO,IAAIH,GAAAU,oBAAoBP,EAAKI,EAAOF,EAASjH,GAIxD,KAAM,IAAIgE,YAAmB,OAAR+C,SAAuBA,IAAOA,GAAO,uBAGlDN,EAAA9V,UAAAkI,WAAV,SAAqBC,GACnB,GAAMiO,GAAM1W,KAAK0W,IACX/G,EAAY3P,KAAK2P,SACvB,OAAiB,OAAbA,EACK+G,EAAInQ,gBAAgBrE,UAAUuG,GAE9BiO,EAAInQ,gBAAgBrE,UAAU,GAAIsU,GAAAU,oBAAoBzO,EAAYkH,EAAW,KAG1FyG,GAzGuC3S,EAAAC,WAA1BnE,GAAA6W,eAAcA,G5DmpGrB,SAAS5W,EAAQD,EAASH,GAE/B,Y6D7jGD,SAAAiQ,GAAyBC,GACf,GAAAvH,GAAAuH,EAAAvH,MAAOU,EAAA6G,EAAA7G,UACVA,GAAWlB,iBACdkB,EAAWlH,KAAKwG,GAChBU,EAAWH,YAQf,QAAAiH,GAA0BD,GAChB,GAAAjH,GAAAiH,EAAAjH,IAAKI,EAAA6G,EAAA7G,UACRA,GAAWlB,gBACdkB,EAAWtG,MAAMkG,G7D+iGpB,GAAItI,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K6DjrGpF4I,EAAA3J,EAAmB,GAEnBqE,EAAArE,EAAyB,GASzB2X,EAAA,SAAA5V,GAkCE,QAAA4V,GAAoBI,EAA4BxH,GAAP,SAAAA,MAAA,MACvCxO,EAAAxB,KAAAK,MADkBA,KAAAmX,UAA4BnX,KAAA2P,YA6DlD,MA/F0C5P,GAAAgX,EAAA5V,GA8BjC4V,EAAAvW,OAAP,SAAiB2W,EAAqBxH,GACpC,MADoC,UAAAA,MAAA,MAC7B,GAAIoH,GAAkBI,EAASxH,IAO9BoH,EAAAzW,UAAAkI,WAAV,SAAqBC,GAArB,GAAArH,GAAApB,KACQmX,EAAUnX,KAAKmX,QACfxH,EAAY3P,KAAK2P,SAEvB,IAAiB,MAAbA,EACE3P,KAAKiJ,UACFR,EAAWlB,iBACdkB,EAAWlH,KAAKvB,KAAK+H,OACrBU,EAAWH,YAGb6O,EAAQ5D,KACN,SAACxL,GACC3G,EAAK2G,MAAQA,EACb3G,EAAK6H,WAAY,EACZR,EAAWlB,iBACdkB,EAAWlH,KAAKwG,GAChBU,EAAWH,aAGf,SAACD,GACMI,EAAWlB,gBACdkB,EAAWtG,MAAMkG,KAItBkL,KAAK,KAAM,SAAAlL,GAEVU,EAAAY,KAAK6J,WAAW,WAAQ,KAAMnL,WAIlC,IAAIrI,KAAKiJ,WACP,IAAKR,EAAWlB,eACd,MAAOoI,GAAUG,SAAST,EAAc,GAAKtH,MAAO/H,KAAK+H,MAAOU,mBAGlE0O,GAAQ5D,KACN,SAACxL,GACC3G,EAAK2G,MAAQA,EACb3G,EAAK6H,WAAY,EACZR,EAAWlB,gBACdkB,EAAWY,IAAIsG,EAAUG,SAAST,EAAc,GAAKtH,QAAOU,iBAGhE,SAACJ,GACMI,EAAWlB,gBACdkB,EAAWY,IAAIsG,EAAUG,SAASP,EAAe,GAAKlH,MAAKI,kBAG9D8K,KAAK,KAAM,SAAClL,GAEXU,EAAAY,KAAK6J,WAAW,WAAQ,KAAMnL,QAK1C0O,GA/F0CtT,EAAAC,WAA7BnE,GAAAwX,kBAAiBA,G7DgyGxB,SAASvX,EAAQD,EAASH,GAE/B,Y8D/oGD,SAAAgY,GAAqB7I,GACnB,GAAMnG,GAAImG,EAAIjI,EAAAY,WACd,KAAKkB,GAAoB,gBAARmG,GACf,MAAO,IAAI8I,GAAe9I,EAE5B,KAAKnG,GAAoBsC,SAAf6D,EAAItG,OACZ,MAAO,IAAIqP,GAAc/I,EAE3B,KAAKnG,EACH,KAAM,IAAIuL,WAAU,yBAEtB,OAAOpF,GAAIjI,EAAAY,cAKb,QAAAqQ,GAAkBC,GAChB,GAAIxP,IAAOwP,EAAEvP,MACb,OAAIwP,OAAMzP,GACC,EAEC,IAARA,GAAc0P,EAAe1P,IAGjCA,EAAM2P,EAAK3P,GAAO4P,KAAKC,MAAMD,KAAKE,IAAI9P,IAClCA,GAAO,EACA,EAEPA,EAAM+P,EACCA,EAEJ/P,GATIA,EAYb,QAAA0P,GAAwB3P,GACtB,MAAwB,gBAAVA,IAAsBgB,EAAAY,KAAKqO,SAASjQ,GAGpD,QAAA4P,GAAc5P,GACZ,GAAIkQ,IAAiBlQ,CACrB,OAAsB,KAAlBkQ,EACKA,EAELR,MAAMQ,GACDA,EAEFA,EAAgB,KAAS,E9DkmGjC,GAAIlY,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K8DjzGpF4I,EAAA3J,EAAmB,GACnBqN,EAAArN,EAAuB,IACvBsN,EAAAtN,EAAuB,IAEvBqE,EAAArE,EAAyB,GACzBgM,EAAAhM,EAAyB,IACzBkH,EAAAlH,EAAyB,IACzBuN,EAAAvN,EAA0B,IAS1B4X,EAAA,SAAA7V,GAmDE,QAAA6V,GAAY/P,EACA6J,EACA8F,EACAjH,GAGV,GAFAxO,EAAAxB,KAAAK,MAEgB,MAAZiH,EACF,KAAM,IAAI8C,OAAM,2BAGlB,IAAI0C,EAAAc,SAASuD,GACX9Q,KAAK4W,QAAU9F,EACf9Q,KAAK2P,UAAYiH,MACZ,IAAIxL,EAAAW,WAAW+E,GACpB9Q,KAAK8Q,QAAUA,EACf9Q,KAAK4W,QAAUA,EACf5W,KAAK2P,UAAYA,MACZ,IAAe,MAAXmB,EACT,KAAM,IAAI/G,OAAM,+CAGlB/J,MAAKiH,SAAWmQ,EAAYnQ,GAkChC,MA1G2ClH,GAAAiX,EAAA7V,GAGlC6V,EAAAxW,OAAP,SAAiByG,EACA6J,EACA8F,EACAjH,GACf,MAAO,IAAIqH,GAAmB/P,EAAU6J,EAAS8F,EAASjH,IAGrDqH,EAAAjH,SAAP,SAAgBnO,GAEN,GAAAyL,GAAAzL,EAAAyL,MAAO5F,EAAA7F,EAAA6F,SAAUmP,EAAAhV,EAAAgV,QAAS9F,EAAAlP,EAAAkP,QAAS7J,EAAArF,EAAAqF,SAAUwB,EAAA7G,EAAA6G,UAErD,IAAIhB,EAEF,WADAgB,GAAWtG,MAAMP,EAAMO,MAIzB,IAAI0M,GAAS5H,EAAS1F,MAEtB,OAAIsN,GAAO+C,SACTnJ,GAAWH,YAITwI,GACFjC,EAASnC,EAAAO,SAAS6D,GAASnR,KAAKiX,EAAS/H,EAAO9G,MAAOsF,GACnDwB,IAAWlC,EAAAO,aACbtL,EAAMO,MAAQwK,EAAAO,YAAYC,EAC1BvL,EAAM6F,UAAW,IAEjBgB,EAAWlH,KAAKsN,GAChBjN,EAAMyL,MAAQA,EAAQ,KAGxB5E,EAAWlH,KAAKsN,EAAO9G,OACvBnG,EAAMyL,MAAQA,EAAQ,QAGpB5E,EAAWlB,gBAIRvH,KAAM8P,SAASlO,MA+BdoV,EAAA1W,UAAAkI,WAAV,SAAqBC,GAEnB,GAAI4E,GAAQ,EACZP,EAAA9M,KAAQiH,EAAA6F,EAAA7F,SAAU6J,EAAAhE,EAAAgE,QAAS8F,EAAA9J,EAAA8J,QAASjH,EAAA7C,EAAA6C,SAEpC,IAAIA,EACF,MAAOA,GAAUG,SAASkH,EAAmBjH,SAAU,GACrD1C,QAAOuJ,UAAS9F,UAAS7J,WAAUwB,cAGrC,QAAG,CACD,GAAIoG,GAAS5H,EAAS1F,MACtB,IAAIsN,EAAO+C,KAAM,CACfnJ,EAAWH,UACX,OACK,GAAIwI,EAAS,CAElB,GADAjC,EAASnC,EAAAO,SAAS6D,GAASnR,KAAKiX,EAAS/H,EAAO9G,MAAOsF,KACnDwB,IAAWlC,EAAAO,YAAa,CAC1BzE,EAAWtG,MAAMwK,EAAAO,YAAYC,EAC7B,OAEF1E,EAAWlH,KAAKsN,OAEhBpG,GAAWlH,KAAKsN,EAAO9G,MAEzB,IAAIU,EAAWlB,eACb,QAKVyP,GA1G2CvT,EAAAC,WAA9BnE,GAAAyX,mBAAkBA,CA4G/B,IAAAK,GAAA,WACE,QAAAA,GAAoBa,EACAC,EACAnQ,GADR,SAAAmQ,MAAA,GACA,SAAAnQ,MAAsBkQ,EAAIjQ,QAFlBjI,KAAAkY,MACAlY,KAAAmY,MACAnY,KAAAgI,MAYtB,MAVEqP,GAAA/W,UAACgG,EAAAY,YAAD,WAAiB,MAAO,OACxBmQ,EAAA/W,UAAAiB,KAAA,WACE,MAAOvB,MAAKmY,IAAMnY,KAAKgI,KACnB4J,MAAM,EACN7J,MAAO/H,KAAKkY,IAAIE,OAAOpY,KAAKmY,SAE5BvG,MAAM,EACN7J,MAAO2C,SAGf2M,KAEAC,EAAA,WACE,QAAAA,GAAoBe,EACAF,EACAnQ,GADR,SAAAmQ,MAAA,GACA,SAAAnQ,MAAsBuP,EAASc,IAFvBrY,KAAAqY,MACArY,KAAAmY,MACAnY,KAAAgI,MAYtB,MAVEsP,GAAAhX,UAACgG,EAAAY,YAAD,WAAiB,MAAOlH,OACxBsX,EAAAhX,UAAAiB,KAAA,WACE,MAAOvB,MAAKmY,IAAMnY,KAAKgI,KACnB4J,MAAM,EACN7J,MAAO/H,KAAKqY,IAAIrY,KAAKmY,SAErBvG,MAAM,EACN7J,MAAO2C,SAGf4M,KAgBMS,EAAiBH,KAAKU,IAAI,EAAG,IAAM,G9Dq0GnC,SAAS9Y,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K+Dt/GpFsD,EAAArE,EAAyB,GACzBiS,EAAAjS,EAA+B,IAC/BkS,EAAAlS,EAA8B,IAS9B6X,EAAA,SAAA9V,GAsCE,QAAA8V,GAAoBsB,EAAyBzB,EAA+BF,EAAsBjH,GAChGxO,EAAAxB,KAAAK,MADkBA,KAAAuY,YAA8EvY,KAAA2P,YAE3FmH,GAAUnH,GAAkC,IAArB4I,EAAUtQ,SACpCjI,KAAKiJ,WAAY,EACjBjJ,KAAK+H,MAAQwQ,EAAU,IAErBzB,IACF9W,KAAK8W,MAAQA,EAAM9K,KAAK4K,IAqB9B,MAlE4C7W,GAAAkX,EAAA9V,GAInC8V,EAAAzW,OAAP,SAAiB+X,EAAyBzB,EAA+BF,EAAcjH,GACrF,GAAM1H,GAASsQ,EAAUtQ,MACzB,OAAe,KAAXA,EACK,GAAIqJ,GAAAI,gBACS,IAAXzJ,GAAiB6O,EAGnB,GAAIG,GAAoBsB,EAAWzB,EAAOF,EAASjH,GAFnD,GAAI0B,GAAAI,iBAAyB8G,EAAU,GAAI5I,IAM/CsH,EAAAlH,SAAP,SAAgBnO,GACN,GAAA2W,GAAA3W,EAAA2W,UAAWlL,EAAAzL,EAAAyL,MAAOpF,EAAArG,EAAAqG,OAAQ6O,EAAAlV,EAAAkV,MAAOrO,EAAA7G,EAAA6G,UAEzC,KAAIA,EAAWlB,eAAf,CAIA,GAAI8F,GAASpF,EAEX,WADAQ,GAAWH,UAIb,IAAMuG,GAASiI,EAAQA,EAAMyB,EAAUlL,GAAQA,GAASkL,EAAUlL,EAClE5E,GAAWlH,KAAKsN,GAEhBjN,EAAMyL,MAAQA,EAAQ,EAEfrN,KAAM8P,SAASlO,KAiBdqV,EAAA3W,UAAAkI,WAAV,SAAqBC,GACnB,GAAI4E,GAAQ,EACZP,EAAA9M,KAAQuY,EAAAzL,EAAAyL,UAAWzB,EAAAhK,EAAAgK,MAAOnH,EAAA7C,EAAA6C,UACpB1H,EAASsQ,EAAUtQ,MAEzB,IAAI0H,EACF,MAAOA,GAAUG,SAASmH,EAAoBlH,SAAU,GACtDwI,YAAWlL,QAAOpF,SAAQ6O,QAAOrO,cAGnC,KAAK,GAAIL,GAAI,EAAGA,EAAIH,IAAWQ,EAAWlB,eAAgBa,IAAK,CAC7D,GAAMyG,GAASiI,EAAQA,EAAMyB,EAAUnQ,GAAIA,GAAKmQ,EAAUnQ,EAC1DK,GAAWlH,KAAKsN,GAElBpG,EAAWH,YAGjB2O,GAlE4CxT,EAAAC,WAA/BnE,GAAA0X,oBAAmBA,G/DqjH1B,SAASzX,EAAQD,EAASH,GAE/B,YgEnjHD,SAAAoZ,GAA6B7I,EAAsB8I,GACjD,MADiD,UAAAA,MAAA,GAC1CzY,KAAK2H,KAAK,GAAI+Q,GAAkB/I,EAAW8I,IhEmjHnD,GAAI1Y,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KgEnkHpF4D,EAAA3E,EAAyB,IACzBuF,EAAAvF,EAA2B,GAWXG,GAAAiZ,UAASA,CAQzB,IAAAE,GAAA,WACE,QAAAA,GAAoB/I,EAA8B8I,GAAR,SAAAA,MAAA,GAAtBzY,KAAA2P,YAA8B3P,KAAAyY,QAMpD,MAHEC,GAAApY,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI0O,GAAoBzO,EAAYzI,KAAK2P,UAAW3P,KAAKyY,SAEtFC,IAPanZ,GAAAmZ,kBAAiBA,CAc9B,IAAAxB,GAAA,SAAA/V,GAME,QAAA+V,GAAY7P,EACQsI,EACA8I,GAAR,SAAAA,MAAA,GACVtX,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA2P,YACA3P,KAAAyY,QAqBtB,MA7B4C1Y,GAAAmX,EAAA/V,GACnC+V,EAAAnH,SAAP,SAAgBT,GACN,GAAAqJ,GAAArJ,EAAAqJ,aAActR,EAAAiI,EAAAjI,WACtBsR,GAAaC,QAAQvR,IASf6P,EAAA5W,UAAAuY,gBAAR,SAAwBF,GACrB3Y,KAAKqJ,IAAIrJ,KAAK2P,UAAUG,SAASoH,EAAoBnH,SACpB/P,KAAKyY,MACL,GAAIK,GAAiBH,EAAc3Y,KAAKqH,gBAGlE6P,EAAA5W,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAK6Y,gBAAgBlU,EAAAC,aAAamU,WAAWhR,KAGrCmP,EAAA5W,UAAAqL,OAAV,SAAiBtD,GACfrI,KAAK6Y,gBAAgBlU,EAAAC,aAAaoU,YAAY3Q,KAGtC6O,EAAA5W,UAAAsL,UAAV,WACE5L,KAAK6Y,gBAAgBlU,EAAAC,aAAaqU,mBAEtC/B,GA7B4CnT,EAAAC,WAA/BzE,GAAA2X,oBAAmBA,CA+BhC,IAAA4B,GAAA,WACE,QAAAA,GAAmBH,EACAtR,GADArH,KAAA2Y,eACA3Y,KAAAqH,cAErB,MAAAyR,KAJavZ,GAAAuZ,iBAAgBA,GhE4kHvB,SAAStZ,EAAQD,EAASH,GAE/B,YiElpHD,IAAAqE,GAAArE,EAAyB,GAgBzBwF,EAAA,WAGE,QAAAA,GAAmBsU,EAAqBnR,EAAkBoR,GAAvCnZ,KAAAkZ,OAAqBlZ,KAAA+H,QAAkB/H,KAAAmZ,YACxDnZ,KAAKoZ,SAAoB,MAATF,EA4GpB,MApGEtU,GAAAtE,UAAAsY,QAAA,SAAQnE,GACN,OAAQzU,KAAKkZ,MACX,IAAK,IACH,MAAOzE,GAASlT,MAAQkT,EAASlT,KAAKvB,KAAK+H,MAC7C,KAAK,IACH,MAAO0M,GAAStS,OAASsS,EAAStS,MAAMnC,KAAKmZ,UAC/C,KAAK,IACH,MAAO1E,GAASnM,UAAYmM,EAASnM,aAY3C1D,EAAAtE,UAAAsE,MAAA,SAAGrD,EAA0BY,EAA4BmG,GACvD,GAAM4Q,GAAOlZ,KAAKkZ,IAClB,QAAQA,GACN,IAAK,IACH,MAAO3X,IAAQA,EAAKvB,KAAK+H,MAC3B,KAAK,IACH,MAAO5F,IAASA,EAAMnC,KAAKmZ,UAC7B,KAAK,IACH,MAAO7Q,IAAYA,MAazB1D,EAAAtE,UAAA+Y,OAAA,SAAOlO,EAA2DhJ,EAA4BmG,GAC5F,MAAI6C,IAAuE,kBAAzBA,GAAgB5J,KACzDvB,KAAK4Y,QAA4BzN,GAEjCnL,WAA4BmL,EAAgBhJ,EAAOmG,IAS9D1D,EAAAtE,UAAAgZ,aAAA,WACE,GAAMJ,GAAOlZ,KAAKkZ,IAClB,QAAQA,GACN,IAAK,IACH,MAAOzV,GAAAC,WAAW8N,GAAGxR,KAAK+H,MAC5B,KAAK,IACH,MAAOtE,GAAAC,WAAAD,SAAiBzD,KAAKmZ,UAC/B,KAAK,IACH,MAAO1V,GAAAC,WAAW8H,UAcjB5G,EAAAmU,WAAP,SAAqBhR,GACnB,MAAqB,mBAAVA,GACF,GAAInD,GAAa,IAAKmD,GAExB/H,KAAKuZ,4BAUP3U,EAAAoU,YAAP,SAAsB3Q,GACpB,MAAO,IAAIzD,GAAa,KAAK8F,QAAWrC,IAOnCzD,EAAAqU,eAAP,WACE,MAAOjZ,MAAKwZ,sBAjCC5U,EAAA4U,qBAA0C,GAAI5U,GAAa,KAC3DA,EAAA2U,2BAAgD,GAAI3U,GAAa,KAAK8F,SAkCvF9F,IAhHarF,GAAAqF,aAAYA,GjEmwHnB,SAASpF,EAAQD,EAASH,GAE/B,YkEtxHD,IAAAqE,GAAArE,EAAyB,GACzBqa,EAAAra,EAA2C,GAE3CqE,GAAAC,WAAWgW,UAAYD,EAAAC,WlE2xHjB,SAASla,EAAQD,EAASH,GAE/B,YmEhyHD,IAAAua,GAAAva,EAAoC,GAEvBG,GAAAma,UAAYC,EAAAC,oBAAoBpZ,QnEqyHvC,SAAShB,EAAQD,EAASH,GAE/B,YoE/xHD,SAAAya,GAAkCC,GAChC,QAASA,GAA8C,kBAA1BA,GAAUC,aAAkE,kBAA7BD,GAAUE,eAOxF,QAAAC,GAAmCH,GACjC,QAASA,GAAqC,kBAAjBA,GAAUI,IAA8C,kBAAlBJ,GAAUK,IAG/E,QAAAC,GAAoBN,GAClB,QAASA,GAAsC,sBAAzBA,EAAU5L,WAGlC,QAAAmM,GAA0BP,GACxB,QAASA,GAAsC,4BAAzBA,EAAU5L,WAGlC,QAAAoM,GAAuBR,GACrB,QAASA,GAAmD,kBAA/BA,GAAUS,kBAA4E,kBAAlCT,GAAUU,oBpE2wH5F,GAAIza,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KoE7yHpFsD,EAAArE,EAAyB,GACzBsN,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAC1ByE,EAAAzE,EAA2B,IAsC3Bwa,EAAA,SAAAzY,GA2CE,QAAAyY,GAAoBE,EACAW,EACAhL,GAClBtO,EAAAxB,KAAAK,MAHkBA,KAAA8Z,YACA9Z,KAAAya,YACAza,KAAAyP,WA6CtB,MA1F+C1P,GAAA6Z,EAAAzY,GAqCtCyY,EAAApZ,OAAP,SAAiBka,EACAD,EACAhL,GACf,MAAO,IAAImK,GAAoBc,EAAQD,EAAWhL,IASrCmK,EAAAe,kBAAf,SAAoCb,EACAW,EACAzK,EACAvH,GAClC,GAAIF,EACJ,IAAI6R,EAAWN,IAAcO,EAAiBP,GAC5C,IAAK,GAAI1R,GAAI,EAAGJ,EAAM8R,EAAU7R,OAAQG,EAAIJ,EAAKI,IAC/CwR,EAAoBe,kBAAkBb,EAAU1R,GAAIqS,EAAWzK,EAASvH,OAErE,IAAI6R,EAAcR,GAAY,CACnC,GAAMc,GAASd,CACfA,GAAUS,iBAAiBE,EAA0BzK,GACrDzH,EAAc,WAAM,MAAAqS,GAAOJ,oBAAoBC,EAA0BzK,QACpE,IAAIiK,EAA0BH,GAAY,CAC/C,GAAMe,GAASf,CACfA,GAAUI,GAAGO,EAAWzK,GACxBzH,EAAc,WAAM,MAAAsS,GAAOV,IAAIM,EAAWzK,QACrC,IAAI6J,EAAyBC,GAAY,CAC9C,GAAMgB,GAAShB,CACfA,GAAUC,YAAYU,EAAWzK,GACjCzH,EAAc,WAAM,MAAAuS,GAAOd,eAAeS,EAAWzK,IAGvDvH,EAAWY,IAAI,GAAIxF,GAAAC,aAAayE,KAGxBqR,EAAAtZ,UAAAkI,WAAV,SAAqBC,GACnB,GAAMqR,GAAY9Z,KAAK8Z,UACjBW,EAAYza,KAAKya,UACjBhL,EAAWzP,KAAKyP,SAClBO,EAAUP,EAAW,WpE2xHhB,IoE3xHiB,GAAAC,MAAAG,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAH,EAAAG,EAAA,GAAAtE,UAAAsE,EACxB,IAAIhB,GAASnC,EAAAO,SAASwC,GAASxB,MAAA,OAAIyB,EAC/Bb,KAAWlC,EAAAO,YACbzE,EAAWtG,MAAMwK,EAAAO,YAAYC,GAE7B1E,EAAWlH,KAAKsN,IAEhB,SAAC1B,GAAW,MAAA1E,GAAWlH,KAAK4L,GAEhCyM,GAAoBe,kBAAkBb,EAAWW,EAAWzK,EAASvH,IAEzEmR,GA1F+CnW,EAAAC,WAAlCnE,GAAAqa,oBAAmBA,GpE83H1B,SAASpa,EAAQD,EAASH,GAE/B,YqEz6HD,IAAAqE,GAAArE,EAAyB,GACzB2b,EAAA3b,EAAyD,GAEzDqE,GAAAC,WAAWsX,iBAAmBD,EAAAC,kBrE86HxB,SAASxb,EAAQD,EAASH,GAE/B,YsEn7HD,IAAA6b,GAAA7b,EAA2C,GAE9BG,GAAAyb,iBAAmBC,EAAAC,2BAA2B1a,QtEw7HrD,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuEh8HpFsD,EAAArE,EAAyB,GACzByE,EAAAzE,EAA2B,IAQ3B8b,EAAA,SAAA/Z,GAuDE,QAAA+Z,GAAoBC,EACAC,EACA3L,GAClBtO,EAAAxB,KAAAK,MAHkBA,KAAAmb,aACAnb,KAAAob,gBACApb,KAAAyP,WAoCtB,MA7FsD1P,GAAAmb,EAAA/Z,GAiD7C+Z,EAAA1a,OAAP,SAAiB2a,EACAC,EACA3L,GACf,MAAO,IAAIyL,GAA2BC,EAAYC,EAAe3L,IASzDyL,EAAA5a,UAAAkI,WAAV,SAAqBC,GAArB,GAAArH,GAAApB,KACQob,EAAgBpb,KAAKob,cAErBpL,EAAYhQ,KAAKyP,SAAW,WvE+7HzB,IuE/7H0B,GAAAC,MAAAG,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAH,EAAAG,EAAA,GAAAtE,UAAAsE,EACjCzO,GAAKia,cAAc5S,EAAYiH,IAC7B,SAASvC,GAAU1E,EAAWlH,KAAK4L,GAEvCnN,MAAKsb,gBAAgBtL,EAASvH,GAC9BA,EAAWY,IAAI,GAAIxF,GAAAC,aAAa,WAE9BsX,EAAcpL,OAIVkL,EAAA5a,UAAA+a,cAAR,SAAsB5S,EAA2BiH,GAC/C,IACE,GAAMb,GAAY7O,KAAKyP,SAAQxB,MAAbjO,KAAiB0P,EACnCjH,GAAWlH,KAAKsN,GAElB,MAAO1B,GACL1E,EAAWtG,MAAMgL,KAIb+N,EAAA5a,UAAAgb,gBAAR,SAAwBtL,EAA2BuL,GACjD,IACEvb,KAAKmb,WAAWnL,GAElB,MAAO7C,GACLoO,EAAgBpZ,MAAMgL,KAG5B+N,GA7FsDzX,EAAAC,WAAzCnE,GAAA2b,2BAA0BA,GvEkiIjC,SAAS1b,EAAQD,EAASH,GAE/B,YwE7iID,IAAAqE,GAAArE,EAAyB,GACzBoc,EAAApc,EAA+C,GAE/CqE,GAAAC,WAAW+X,YAAcD,EAAAC,axEkjInB,SAASjc,EAAQD,EAASH,GAE/B,YyEvjID,IAAAiX,GAAAjX,EAAkC,GAErBG,GAAAkc,YAAcpF,EAAAU,kBAAkBvW,QzE4jIvC,SAAShB,EAAQD,EAASH,GAE/B,Y0EhkID,IAAAqE,GAAArE,EAAyB,GACzBsc,EAAAtc,EAAiC,GAEjCqE,GAAAC,WAAWiY,SAAWD,EAAAE,mBAAmBpb,Q1EqkInC,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K2E9kIpFsD,EAAArE,EAAyB,GAMzB2R,EAAA3R,EAA0B,IAEpByc,EAAe,SAAI9T,GAAa,MAAAA,IAiDtC6T,EAAA,SAAAza,GACE,QAAAya,GAAoBE,EACAC,EACAC,EACArG,EACAhG,GAChBxO,EAAAxB,KAAAK,MALgBA,KAAA8b,eACA9b,KAAA+b,YACA/b,KAAAgc,UACAhc,KAAA2V,iBACA3V,KAAA2P,YAyOtB,MA9O8C5P,GAAA6b,EAAAza,GAmHrCya,EAAApb,OAAP,SAAoByb,EACAF,EACAC,EACAE,EACAvM,GAClB,MAAwB,IAApBpE,UAAUtD,OACL,GAAI2T,GACeK,EAAuBH,aACvBG,EAAuBF,UACvBE,EAAuBD,QACvBC,EAAuBtG,gBAAkBkG,EACzCI,EAAuBtM,WAGhBjF,SAA/BwR,GAA4CnL,EAAAC,YAAYkL,GACnD,GAAIN,GACNK,EACHF,EACAC,EACAH,EACWK,GAGR,GAAIN,GACNK,EACHF,EACAC,EACkBE,EACPvM,IAGLiM,EAAAtb,UAAAkI,WAAV,SAAqBC,GACnB,GAAI7G,GAAQ5B,KAAK8b,YACjB,IAAI9b,KAAK2P,UACP,MAAO3P,MAAK2P,UAAUG,SAA+B8L,EAAmB7L,SAAU,GAChFtH,aACAuT,QAAShc,KAAKgc,QACdD,UAAW/b,KAAK+b,UAChBpG,eAAgB3V,KAAK2V,eACrB/T,SAGJ,KADA,GAAAkL,GAAA9M,KAAQ+b,EAAAjP,EAAAiP,UAAWpG,EAAA7I,EAAA6I,eAAgBqG,EAAAlP,EAAAkP,UAChC,CACD,GAAID,EAAW,CACb,GAAII,GAAe,MACnB,KACEA,EAAkBJ,EAAUna,GAC5B,MAAOyG,GAEP,WADAI,GAAWtG,MAAMkG,GAGnB,IAAK8T,EAAiB,CACpB1T,EAAWH,UACX,QAGJ,GAAIP,GAAK,MACT,KACEA,EAAQ4N,EAAe/T,GACvB,MAAOyG,GAEP,WADAI,GAAWtG,MAAMkG,GAInB,GADAI,EAAWlH,KAAKwG,GACZU,EAAWlB,eACb,KAEF,KACE3F,EAAQoa,EAAQpa,GAChB,MAAOyG,GAEP,WADAI,GAAWtG,MAAMkG,MAMRuT,EAAA7L,SAAf,SAA8BnO,GACpB,GAAA6G,GAAA7G,EAAA6G,WAAYsT,EAAAna,EAAAma,SACpB,KAAItT,EAAWlB,eAAf,CAGA,GAAI3F,EAAMwa,YACR,IACExa,EAAMA,MAAQA,EAAMoa,QAAQpa,EAAMA,OAClC,MAAOyG,GAEP,WADAI,GAAWtG,MAAMkG,OAInBzG,GAAMwa,aAAc,CAEtB,IAAIL,EAAW,CACb,GAAII,GAAe,MACnB,KACEA,EAAkBJ,EAAUna,EAAMA,OAClC,MAAOyG,GAEP,WADAI,GAAWtG,MAAMkG,GAGnB,IAAK8T,EAEH,WADA1T,GAAWH,UAGb,IAAIG,EAAWlB,eACb,OAGJ,GAAIQ,EACJ,KACEA,EAAQnG,EAAM+T,eAAe/T,EAAMA,OACnC,MAAOyG,GAEP,WADAI,GAAWtG,MAAMkG,GAGnB,IAAII,EAAWlB,iBAGfkB,EAAWlH,KAAKwG,IACZU,EAAWlB,gBAGf,MAA2CvH,MAAM8P,SAASlO,KAE9Dga,GA9O8CnY,EAAAC,WAAjCnE,GAAAqc,mBAAkBA,G3E2pIzB,SAASpc,EAAQD,EAASH,GAE/B,Y4EttID,IAAAqE,GAAArE,EAAyB,GACzBid,EAAAjd,EAAkB,GAElBqE,GAAAC,WAAAD,MAAgB4Y,EAAAC,K5E2tIV,SAAS9c,EAAQD,EAASH,GAE/B,Y6EhuID,IAAAmd,GAAAnd,EAA6B,GAEhBG,GAAA+c,IAAMC,EAAAC,aAAahc,Q7EquI1B,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K8E7uIpFsD,EAAArE,EAAgD,GAIhD2S,EAAA3S,EAAgC,IAChC0S,EAAA1S,EAA8B,IAM9Bod,EAAA,SAAArb,GAQE,QAAAqb,GAAoBT,EACAU,EACAC,GAClBvb,EAAAxB,KAAAK,MAHkBA,KAAA+b,YACA/b,KAAAyc,aACAzc,KAAA0c,aAStB,MAnBwC3c,GAAAyc,EAAArb,GAE/Bqb,EAAAhc,OAAP,SAAoBub,EACAU,EACAC,GAClB,MAAO,IAAIF,GAAaT,EAAWU,EAAYC,IASvCF,EAAAlc,UAAAkI,WAAV,SAAqBC,GACnB,GAAAqE,GAAA9M,KAAQ+b,EAAAjP,EAAAiP,UAAWU,EAAA3P,EAAA2P,WAAYC,EAAA5P,EAAA4P,UAE/B,OAAO,IAAIC,GAAalU,EAAYsT,EAAWU,EAAYC,IAE/DF,GAnBwC/Y,EAAAC,WAA3BnE,GAAAid,aAAYA,CAqBzB,IAAAG,GAAA,SAAAxb,GACE,QAAAwb,GAAYtV,EACQ0U,EACAU,EACAC,GAClBvb,EAAAxB,KAAAK,KAAMqH,GAHYrH,KAAA+b,YACA/b,KAAAyc,aACAzc,KAAA0c,aAElB1c,KAAK4c,QAoBT,MA1BiC7c,GAAA4c,EAAAxb,GASvBwb,EAAArc,UAAAsc,MAAR,WACE,GAEI/N,GAFJ/B,EAAA9M,KAAQ+b,EAAAjP,EAAAiP,UAAWU,EAAA3P,EAAA2P,WAAYC,EAAA5P,EAAA4P,UAG/B,KACE7N,EAAkBkN,GAClB,IAAMjT,GAAS+F,EAAS4N,EAAaC,CAEjC5T,GACF9I,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAM8I,IAEjC9I,KAAK4L,YAEP,MAAOvD,GACPrI,KAAK2L,OAAOtD,KAGlBsU,GA1BiC7K,EAAAkB,kB9EywI3B,SAASxT,EAAQD,EAASH,GAE/B,Y+E3yID,IAAAqE,GAAArE,EAAyB,GACzByd,EAAAzd,EAAyC,GAEzCqE,GAAAC,WAAWoZ,SAAWD,EAAAC,U/EgzIhB,SAAStd,EAAQD,EAASH,GAE/B,YgFrzID,IAAA2d,GAAA3d,EAAmC,GAEtBG,GAAAud,SAAWC,EAAAC,mBAAmBxc,QhF0zIrC,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KiFj0IpF8c,EAAA7d,EAAwB,IAExBqE,EAAArE,EAAyB,GACzB8G,EAAA9G,EAAoB,IAOpB4d,EAAA,SAAA7b,GAqDE,QAAA6b,GAAoBE,EACAvN,GADR,SAAAuN,MAAA,GACA,SAAAvN,MAAAzJ,EAAAU,OACVzF,EAAAxB,KAAAK,MAFkBA,KAAAkd,SACAld,KAAA2P,cAEbsN,EAAAE,UAAUD,IAAWA,EAAS,KACjCld,KAAKkd,OAAS,GAEXvN,GAA2C,kBAAvBA,GAAUG,WACjC9P,KAAK2P,UAAYzJ,EAAAU,OAavB,MAzEwC7G,GAAAid,EAAA7b,GAkC/B6b,EAAAxc,OAAP,SAAc0c,EACAvN,GACZ,MAFY,UAAAuN,MAAA,GACA,SAAAvN,MAAAzJ,EAAAU,OACL,GAAIoW,GAAmBE,EAAQvN,IAGjCqN,EAAAjN,SAAP,SAAgBnO,GACN,GAAAyL,GAAAzL,EAAAyL,MAAO5E,EAAA7G,EAAA6G,WAAYyU,EAAAtb,EAAAsb,MAE3BzU,GAAWlH,KAAK8L,GAEZ5E,EAAWlB,iBAIf3F,EAAMyL,OAAS,EAERrN,KAAM8P,SAASlO,EAAOsb,KAcrBF,EAAA1c,UAAAkI,WAAV,SAAqBC,GACnB,GAAM4E,GAAQ,EACR6P,EAASld,KAAKkd,OACdvN,EAAY3P,KAAK2P,SAEvBlH,GAAWY,IAAIsG,EAAUG,SAASkN,EAAmBjN,SAAUmN,GAC7D7P,QAAO5E,aAAYyU,aAGzBF,GAzEwCvZ,EAAAC,WAA3BnE,GAAAyd,mBAAkBA,GjF84IzB,SAASxd,EAAQD,EAASH,GAE/B,YkFz5ID,SAAA+d,GAA0BC,GAKxB,OAAQ5Q,EAAAY,QAAQgQ,IAASA,EAAMC,WAAWD,GAAO,GAAM,EAPzD,GAAA5Q,GAAApN,EAAsB,GAENG,GAAA4d,UAASA,GlFw6InB,SAAS3d,EAAQD,EAASH,GAE/B,YmF56ID,IAAAke,GAAAle,EAA6B,GAEhBG,GAAAqH,MAAQ,GAAI0W,GAAAC,gBnFi7InB,SAAS/d,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KoFx7IpFqd,EAAApe,EAA2B,IAE3Bqe,EAAAre,EAA6B,IAE7Bme,EAAA,SAAApc,GAAA,QAAAoc,KAAoCpc,EAAA8M,MAAAjO,KAAAuL,WAIpC,MAJoCxL,GAAAwd,EAAApc,GAClCoc,EAAAjd,UAAAod,YAAA,SAAeC,EAA+B/b,GAC5C,MAAO,IAAI4b,GAAAI,aAAa5d,KAAM2d,GAAM7N,SAASlO,EAAO,IAExD2b,GAJoCE,EAAAI,eAAvBte,GAAAge,eAAcA,GpFu8IrB,SAAS/d,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KqFl9IpF4I,EAAA3J,EAAmB,GAGnByE,EAAAzE,EAA2B,IAO3Bwe,EAAA,SAAAzc,GASE,QAAAyc,GAAmBjO,EACAgO,GACjBxc,EAAAxB,KAAAK,MAFiBA,KAAA2P,YACA3P,KAAA2d,OAHX3d,KAAA8d,SAAmB,EAiI7B,MAxIqC/d,GAAA6d,EAAAzc,GAcnCyc,EAAAtd,UAAAyd,QAAA,WACE,GAAI/d,KAAKuH,eACPvH,KAAKmC,MAAQ,GAAI4H,OAAM,oCAEvB,KACE/J,KAAK2d,KAAK3d,KAAK4B,OACf,MAAOuL,GACPnN,KAAKuI,cACLvI,KAAKmC,MAAQgL,IAKnByQ,EAAAtd,UAAAwP,SAAA,SAASlO,EAAW6W,GAClB,MADkB,UAAAA,MAAA,GACdzY,KAAKuH,eACAvH,KAEFA,KAAKge,UAAUpc,EAAO6W,IAGrBmF,EAAAtd,UAAA0d,UAAV,SAAoBpc,EAAW6W,GAA/B,GAAArX,GAAApB,IAA+B,UAAAyY,MAAA,GAG7BzY,KAAK4B,MAAQA,EAIb5B,KAAK8d,SAAU,CAEf,IAAMre,GAAKO,KAAKP,EAGhB,OAAU,OAANA,GAAcO,KAAKyY,QAAUA,EACxBzY,MAGTA,KAAKyY,MAAQA,EAKH,MAANhZ,IACFO,KAAKP,GAAK,KACVsJ,EAAAY,KAAKsU,cAAcxe,IA2BrBO,KAAKP,GAAKsJ,EAAAY,KAAKuU,YAAY,WAEzB9c,EAAK0c,SAAU,CACf,IAAAhR,GAAA1L,EAAO3B,EAAAqN,EAAArN,GAAIkQ,EAAA7C,EAAA6C,SACXA,GAAUwO,QAAQxV,KAAKvH,GACvBuO,EAAUyO,QAkBNhd,EAAK0c,WAAY,GAAe,MAANre,IAC5B2B,EAAK3B,GAAK,KACVsJ,EAAAY,KAAKsU,cAAcxe,KAEpBgZ,GAEIzY,OAGC4d,EAAAtd,UAAAgM,aAAV,WAEEtM,KAAK8d,SAAU,CACf,IAAAhR,GAAA9M,KAAOP,EAAAqN,EAAArN,GAAIkQ,EAAA7C,EAAA6C,UACJwO,EAAAxO,EAAAwO,QACD9Q,EAAQ8Q,EAAQvQ,QAAQ5N,KAEpB,OAANP,IACFO,KAAKP,GAAK,KACVsJ,EAAAY,KAAKsU,cAAcxe,IAGjB4N,QACF8Q,EAAQtQ,OAAOR,EAAO,GAGxBrN,KAAK2d,KAAO,KACZ3d,KAAK4B,MAAQ,KACb5B,KAAK2P,UAAY,MAErBiO,GAxIqC/Z,EAAAC,aAAxBvE,GAAAqe,aAAYA,GrF8kJnB,SAASpe,EAAQD,EAASH,GAE/B,YsFzlJD,IAAAif,GAAAjf,EAA0B,IAE1Boe,EAAApe,EAA2B,IAG3Bye,EAAA,mBAAAA,KACS7d,KAAAkS,QAAkB,EAClBlS,KAAAme,WACAne,KAAAse,YAAsB,KAoC/B,MAlCET,GAAAvd,UAAAie,IAAA,WACE,MAAOC,MAAKD,OAGdV,EAAAvd,UAAA8d,MAAA,WACE,IAAIpe,KAAKkS,SAAUlS,KAAKse,YAAxB,CAGAte,KAAKkS,QAAS,CAGd,KAAK,GAFCiM,GAAUne,KAAKme,QAEZM,EAA2B,KAAMA,EAASN,EAAQxN,SAEzD,GADA8N,EAAOV,UACHU,EAAOtc,MAET,KADAnC,MAAKkS,QAAS,EACRuM,EAAOtc,KAGjBnC,MAAKkS,QAAS,IAGhB2L,EAAAvd,UAAAwP,SAAA,SAAY6N,EAAsClF,EAAmB7W,GACnE,MADgD,UAAA6W,MAAA,GACxCA,GAAS,EACfzY,KAAK0d,YAAYC,EAAM/b,GACvB5B,KAAK0e,cAAcf,EAAMlF,EAAO7W,IAGpCic,EAAAvd,UAAAod,YAAA,SAAeC,EAAsC/b,GACnD,MAAO,IAAIyc,GAAAM,YAAY3e,KAAM2d,GAAM7N,SAASlO,IAG9Cic,EAAAvd,UAAAoe,cAAA,SAAiBf,EAAsClF,EAAe7W,GACpE,MAAO,IAAI4b,GAAAI,aAAa5d,KAAM2d,GAAM7N,SAASlO,EAAO6W,IAExDoF,IAvCate,GAAAse,eAAcA,GtFmoJrB,SAASre,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuF9oJpFqd,EAAApe,EAA2B,IAO3Buf,EAAA,SAAAxd,GAAA,QAAAwd,KAAoCxd,EAAA8M,MAAAjO,KAAAuL,WAYpC,MAZoCxL,GAAA4e,EAAAxd,GACxBwd,EAAAre,UAAA0d,UAAV,SAAoBpc,EAAW6W,GAC7B,GAD6B,SAAAA,MAAA,GACzBA,EAAQ,EACV,MAAOtX,GAAAb,UAAM0d,UAASre,KAAAK,KAAC4B,EAAO6W,EAEhCzY,MAAKyY,MAAQA,EACbzY,KAAK4B,MAAQA,CACb,IAAM+N,GAAY3P,KAAK2P,SAGvB,OAFAA,GAAUwO,QAAQxV,KAAK3I,MACvB2P,EAAUyO,QACHpe,MAEX2e,GAZoCnB,EAAAI,aAAvBre,GAAAof,YAAWA,GvFuqJlB,SAASnf,EAAQD,EAASH,GAE/B,YwFjrJD,IAAAqE,GAAArE,EAAyB,GACzBwf,EAAAxf,EAAmC,GAEnCqE,GAAAC,WAAWd,MAAQgc,EAAAhc,OxFsrJb,SAASpD,EAAQD,EAASH,GAE/B,YyF3rJD,IAAAwf,GAAAxf,EAA4B,GAEfG,GAAAqD,MAAQgc,EAAAC,azFgsJf,SAASrf,EAAQD,EAASH,GAE/B,Y0FhpJD,SAAAwD,K1FosJK,I0FpsJuB,GAAAiO,MAAAhB,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAgB,EAAAhB,EAAA,GAAAtE,UAAAsE,EAE1B,OADAgB,GAAYgB,QAAQ7R,MACb6e,EAAY5Q,MAAMjO,KAAM6Q,GAoFjC,QAAAgO,K1FsqJK,I0FtqJ6B,GAAAhO,MAAAhB,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAgB,EAAAhB,EAAA,GAAAtE,UAAAsE,EACjC,IAAIyE,GAAaC,OAAOC,kBACpB7E,EAAuB,KACtBmP,EAAYjO,EAAYA,EAAY5I,OAAS,EAUjD,OATI8I,GAAAC,YAAY8N,IACdnP,EAAuBkB,EAAYI,MAC/BJ,EAAY5I,OAAS,GAAoD,gBAAxC4I,GAAYA,EAAY5I,OAAS,KACpEqM,EAAqBzD,EAAYI,QAEV,gBAAT6N,KAChBxK,EAAqBzD,EAAYI,OAGR,IAAvBJ,EAAY5I,OACQ4I,EAAY,GAG7B,GAAIK,GAAAC,gBAAqBN,EAAalB,GAAWhI,KAAK,GAAIwM,GAAAC,iBAAoBE,IAzJvF,GAAApD,GAAA9R,EAA8B,IAC9B+U,EAAA/U,EAA+B,IAC/B2R,EAAA3R,EAA0B,GAgDVG,GAAAqD,MAAKA,EAsFLrD,EAAAsf,YAAWA,G1F+rJrB,SAASrf,EAAQD,EAASH,GAE/B,Y2F30JD,IAAAqE,GAAArE,EAAyB,GACzB2f,EAAA3f,EAAyB,GAEzBqE,GAAAC,WAAWsb,KAAOD,EAAAE,Y3Fg1JZ,SAASzf,EAAQD,EAASH,GAE/B,Y4Fn0JD,SAAA4f,K5Fu1JK,I4Fv1JmB,GAAAnO,MAAAhB,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAgB,EAAAhB,EAAA,GAAAtE,UAAAsE,EAQtB,OAL2B,KAAvBgB,EAAY5I,QAAgBuE,EAAAY,QAAQyD,EAAY,MAClDA,EAAoCA,EAAY,IAGlDA,EAAYgB,QAAQ7R,MACbif,EAAWhR,MAAMjO,KAAM6Q,GAiBhC,QAAAoO,K5F40JK,I4F50JyB,GAAApO,MAAAhB,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAgB,EAAAhB,EAAA,GAAAtE,UAAAsE,EAG5B,IAA2B,IAAvBgB,EAAY5I,OAAc,CAC5B,IAAIuE,EAAAY,QAAQyD,EAAY,IAGtB,MAAwBA,GAAY,EAFpCA,GAAsCA,EAAY,GAMtD,MAAO,IAAIK,GAAAC,gBAAwBN,GAAalJ,KAAK,GAAIuX,I5FgyJ1D,GAAInf,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K4Fx1JpFqM,EAAApN,EAAsB,IACtB8R,EAAA9R,EAA8B,IAI9B0S,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAUhBG,GAAAyf,KAAIA,EAyBJzf,EAAA0f,WAAUA,CAc1B,IAAAC,GAAA,mBAAAA,MAIA,MAHEA,GAAA5e,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI2W,GAAe1W,KAEhDyW,IAJa3f,GAAA2f,aAAYA,CAWzB,IAAAC,GAAA,SAAAhe,GAKE,QAAAge,GAAY9X,GACVlG,EAAAxB,KAAAK,KAAMqH,GALArH,KAAAof,UAAoB,EACpBpf,KAAA6Q,eACA7Q,KAAA0N,iBAkDV,MArDuC3N,GAAAof,EAAAhe,GAS3Bge,EAAA7e,UAAAoL,MAAV,SAAgB1E,GACdhH,KAAK6Q,YAAYlI,KAAK3B,IAGdmY,EAAA7e,UAAAsL,UAAV,WACE,GAAMiF,GAAc7Q,KAAK6Q,YACnB7I,EAAM6I,EAAY5I,MAExB,IAAY,IAARD,EACFhI,KAAKqH,YAAYiB,eACZ,CACL,IAAK,GAAIF,GAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAIpB,GAAa6J,EAAYzI,GACzB8B,EAAe6H,EAAAM,kBAAkBrS,KAAMgH,EAAYA,EAAYoB,EAE/DpI,MAAK0N,gBACP1N,KAAK0N,cAAc/E,KAAKuB,GACxBlK,KAAKqJ,IAAIa,IAGblK,KAAK6Q,YAAc,OAIvBsO,EAAA7e,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,IAAK7S,KAAKof,SAAU,CAClBpf,KAAKof,UAAW,CAEhB,KAAK,GAAIhX,GAAI,EAAGA,EAAIpI,KAAK0N,cAAczF,OAAQG,IAC7C,GAAIA,IAAMuK,EAAY,CACpB,GAAIzI,GAAelK,KAAK0N,cAActF,EAEtC8B,GAAa3B,cACbvI,KAAKyN,OAAOvD,GAIhBlK,KAAK0N,cAAgB,KAGvB1N,KAAKqH,YAAY9F,KAAKmR,IAE1ByM,GArDuCrN,EAAAkB,gBAA1BzT,GAAA4f,eAAcA,G5Fm4JrB,SAAS3f,EAAQD,EAASH,GAE/B,Y6Fz8JD,IAAAqE,GAAArE,EAAyB,GACzBigB,EAAAjgB,EAAmC,GAEnCqE,GAAAC,WAAW4b,MAAQD,EAAAC,O7F88Jb,SAAS9f,EAAQD,EAASH,GAE/B,Y8Fn9JD,IAAAmgB,GAAAngB,EAAgC,GAEnBG,GAAA+f,MAAQC,EAAAC,gBAAgBhf,Q9Fw9J/B,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K+Fh+JpFsD,EAAArE,EAAyB,GAEzBqgB,EAAArgB,EAAmB,IAOnBogB,EAAA,SAAAre,GAoCE,QAAAqe,KACEre,EAAAxB,KAAAK,MAMJ,MA3CwCD,GAAAyf,EAAAre,GAgC/Bqe,EAAAhf,OAAP,WACE,MAAO,IAAIgf,IAOHA,EAAAlf,UAAAkI,WAAV,SAAqBC,GACnBgX,EAAAC,QAEJF,GA3CwC/b,EAAAC,WAA3BnE,GAAAigB,gBAAeA,G/FihKtB,SAAShgB,EAAQD,GAEtB,YgG3hKD,SAAAmgB,MAAgBngB,EAAAmgB,KAAIA,GhGmiKd,SAASlgB,EAAQD,EAASH,GAE/B,YiGtiKD,IAAAqE,GAAArE,EAAyB,GACzBugB,EAAAvgB,EAA6B,GAE7BqE,GAAAC,WAAW8N,GAAKmO,EAAAnO,IjG2iKV,SAAShS,EAAQD,EAASH,GAE/B,YkGhjKD,IAAA8R,GAAA9R,EAAgC,GAEnBG,GAAAiS,GAAKN,EAAAC,gBAAgBK,IlGqjK5B,SAAShS,EAAQD,EAASH,GAE/B,YmGzjKD,IAAAqE,GAAArE,EAAyB,GACzBwgB,EAAAxgB,EAAsC,GAEtCqE,GAAAC,WAAWmc,kBAAoBD,EAAAE,yBnG8jKzB,SAAStgB,EAAQD,EAASH,GAE/B,YoG1jKD,SAAAygB,KpGskKK,IoGtkKmC,GAAAE,MAAAlQ,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAkQ,EAAAlQ,EAAA,GAAAtE,UAAAsE,EAOtC,OAJ2B,KAAvBkQ,EAAY9X,QAAgBuE,EAAAY,QAAQ2S,EAAY,MAClDA,EAAsCA,EAAY,IAG7C/f,KAAK2H,KAAK,GAAIqY,GAAgCD,IA2BvD,QAAAD,KpGgjKK,IoGhjKyC,GAAAC,MAAAlQ,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAkQ,EAAAlQ,EAAA,GAAAtE,UAAAsE,EAG5C,IAAI/G,GAA+B,IAOnC,OAL2B,KAAvBiX,EAAY9X,QAAgBuE,EAAAY,QAAQ2S,EAAY,MAClDA,EAA2CA,EAAY,IAEzDjX,EAASiX,EAAYpP,QAEd,GAAIwF,GAAAC,eAAetN,EAAQ,MAAMnB,KAAK,GAAIqY,GAAgCD,IpG+gKlF,GAAIhgB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KoGtkKpFgW,EAAA/W,EAA6B,IAG7BoN,EAAApN,EAAsB,IACtB0S,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAEhBG,GAAAsgB,kBAAiBA,EAkCjBtgB,EAAAugB,wBAAuBA,CAavC,IAAAE,GAAA,WACE,QAAAA,GAAoBD,GAAA/f,KAAA+f,cAMtB,MAHEC,GAAA1f,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIyX,GAA4BxX,EAAYzI,KAAK+f,eAE9EC,KAEAC,EAAA,SAAA9e,GACE,QAAA8e,GAAsB5Y,EACF0Y,GAClB5e,EAAAxB,KAAAK,KAAMqH,GAFcrH,KAAAqH,cACFrH,KAAA+f,cA4BtB,MA9BgDhgB,GAAAkgB,EAAA9e,GAM9C8e,EAAA3f,UAAA2S,YAAA,SAAY9Q,EAAY0Q,GACtB7S,KAAKkgB,yBAGPD,EAAA3f,UAAAgS,eAAA,SAAeO,GACb7S,KAAKkgB,yBAGGD,EAAA3f,UAAAqL,OAAV,SAAiBtD,GACfrI,KAAKkgB,yBAGGD,EAAA3f,UAAAsL,UAAV,WACE5L,KAAKkgB,yBAGCD,EAAA3f,UAAA4f,sBAAR,WACE,GAAM3e,GAAOvB,KAAK+f,YAAYpP,OAC1BpP,GACFvB,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAMuB,IAEjCvB,KAAKqH,YAAYiB,YAGvB2X,GA9BgDnO,EAAAkB,kBpGglK1C,SAASxT,EAAQD,EAASH,GAE/B,YqGnpKD,IAAAqE,GAAArE,EAAyB,GACzB+gB,EAAA/gB,EAAmC,IAEnCqE,GAAAC,WAAW0c,MAAQD,EAAAC,OrGwpKb,SAAS5gB,EAAQD,EAASH,GAE/B,YsG7pKD,IAAAihB,GAAAjhB,EAAgC,IAEnBG,GAAA6gB,MAAQC,EAAAC,gBAAgB9f,QtGkqK/B,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuGzqKpFsD,EAAArE,EAAyB,GASzBkhB,EAAA,SAAAnf,GA+DE,QAAAmf,GAAYC,EACA5O,EACAhC,GACVxO,EAAAxB,KAAAK,MACAA,KAAKugB,MAAQA,EACbvgB,KAAKwgB,OAAS7O,EACd3R,KAAK2P,UAAYA,EA0BrB,MA/FqC5P,GAAAugB,EAAAnf,GAgC5Bmf,EAAA9f,OAAP,SAAc+f,EACA5O,EACAhC,GACZ,MAHY,UAAA4Q,MAAA,GACA,SAAA5O,MAAA,GAEL,GAAI2O,GAAgBC,EAAO5O,EAAOhC,IAGpC2Q,EAAAvQ,SAAP,SAAgBnO,GAEN,GAAA2e,GAAA3e,EAAA2e,MAAOlT,EAAAzL,EAAAyL,MAAOsE,EAAA/P,EAAA+P,MAAOlJ,EAAA7G,EAAA6G,UAE7B,OAAI4E,IAASsE,MACXlJ,GAAWH,YAIbG,EAAWlH,KAAKgf,QAEZ9X,EAAWlB,iBAIf3F,EAAMyL,MAAQA,EAAQ,EACtBzL,EAAM2e,MAAQA,EAAQ,EAEfvgB,KAAM8P,SAASlO,OAgBd0e,EAAAhgB,UAAAkI,WAAV,SAAqBC,GACnB,GAAI4E,GAAQ,EACRkT,EAAQvgB,KAAKugB,MACX5O,EAAQ3R,KAAKwgB,OACb7Q,EAAY3P,KAAK2P,SAEvB,IAAIA,EACF,MAAOA,GAAUG,SAASwQ,EAAgBvQ,SAAU,GAClD1C,QAAOsE,QAAO4O,QAAO9X,cAGvB,QAAG,CACD,GAAI4E,KAAWsE,EAAO,CACpBlJ,EAAWH,UACX,OAGF,GADAG,EAAWlH,KAAKgf,KACZ9X,EAAWlB,eACb,QAKV+Y,GA/FqC7c,EAAAC,WAAxBnE,GAAA+gB,gBAAeA,GvG+vKtB,SAAS9gB,EAAQD,EAASH,GAE/B,YwG3wKD,IAAAqE,GAAArE,EAAyB,GACzBqhB,EAAArhB,EAAmC,IAEnCqE,GAAAC,WAAWgd,MAAQD,EAAAC,OxGgxKb,SAASlhB,EAAQD,EAASH,GAE/B,YyGrxKD,IAAAuhB,GAAAvhB,EAAgC,IAEnBG,GAAAmhB,MAAQC,EAAAC,gBAAgBpgB,QzG0xK/B,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K0GlyKpFsD,EAAArE,EAAgD,GAIhD2S,EAAA3S,EAAgC,IAChC0S,EAAA1S,EAA8B,IAM9BwhB,EAAA,SAAAzf,GAOE,QAAAyf,GAAoBC,EACA7L,GAClB7T,EAAAxB,KAAAK,MAFkBA,KAAA6gB,kBACA7gB,KAAAgV,oBAgBtB,MAxBwCjV,GAAA6gB,EAAAzf,GAE/Byf,EAAApgB,OAAP,SAAiBqgB,EACA7L,GACf,MAAO,IAAI4L,GAAmBC,EAAiB7L,IAQvC4L,EAAAtgB,UAAAkI,WAAV,SAAqBC,GACnB,GAEIqY,GAFJhU,EAAA9M,KAAQ6gB,EAAA/T,EAAA+T,gBAAiB7L,EAAAlI,EAAAkI,iBAIzB,KAEE,MADA8L,GAAkCD,IAC3B,GAAIE,GAAgBtY,EAAYqY,EAAU9L,GACjD,MAAO3M,GACPI,EAAWtG,MAAMkG,KAGvBuY,GAxBwCnd,EAAAC,WAA3BnE,GAAAqhB,gBAAeA,CA0B5B,IAAAG,GAAA,SAAA5f,GACE,QAAA4f,GAAY1Z,EACQyZ,EACA9L,GAClB7T,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA8gB,WACA9gB,KAAAgV,oBAElB3N,EAAYgC,IAAIyX,GAChB9gB,KAAKghB,SAaT,MAnBiCjhB,GAAAghB,EAAA5f,GASvB4f,EAAAzgB,UAAA0gB,OAAR,WACE,IACE,GAAMlY,GAAS9I,KAAKgV,kBAAkBrV,KAAKK,KAAMA,KAAK8gB,SAClDhY,IACF9I,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAM8I,IAEnC,MAAOT,GACPrI,KAAK2L,OAAOtD,KAGlB0Y,GAnBiCjP,EAAAkB,kB1GyzK3B,SAASxT,EAAQD,EAASH,GAE/B,Y2Gh2KD,IAAAqE,GAAArE,EAAyB,GACzB6hB,EAAA7hB,EAAqB,IAErBqE,GAAAC,WAAAD,SAAmBwd,EAAAC,Q3Gq2Kb,SAAS1hB,EAAQD,EAASH,GAE/B,Y4G12KD,IAAA+hB,GAAA/hB,EAAgC,IAEnBG,GAAA2hB,OAASC,EAAAC,gBAAgB5gB,Q5G+2KhC,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K6Gt3KpFsD,EAAArE,EAAyB,GAazBgiB,EAAA,SAAAjgB,GAmDE,QAAAigB,GAAmBjf,EAAoBwN,GACrCxO,EAAAxB,KAAAK,MADiBA,KAAAmC,QAAoBnC,KAAA2P,YAgBzC,MAnEqC5P,GAAAqhB,EAAAjgB,GA0C5BigB,EAAA5gB,OAAP,SAAiB2B,EAAYwN,GAC3B,MAAO,IAAIyR,GAAgBjf,EAAOwN,IAG7ByR,EAAArR,SAAP,SAAgBT,GACN,GAAAnN,GAAAmN,EAAAnN,MAAOsG,EAAA6G,EAAA7G,UACfA,GAAWtG,MAAMA,IAOTif,EAAA9gB,UAAAkI,WAAV,SAAqBC,GACnB,GAAMtG,GAAQnC,KAAKmC,MACbwN,EAAY3P,KAAK2P,SAEvB,OAAIA,GACKA,EAAUG,SAASsR,EAAgBrR,SAAU,GAClD5N,QAAOsG,mBAGTA,GAAWtG,MAAMA,IAGvBif,GAnEqC3d,EAAAC,WAAxBnE,GAAA6hB,gBAAeA,G7G07KtB,SAAS5hB,EAAQD,EAASH,GAE/B,Y8G18KD,IAAAqE,GAAArE,EAAyB,GACzBiiB,EAAAjiB,EAAmC,IAEnCqE,GAAAC,WAAW4d,MAAQD,EAAAC,O9G+8Kb,SAAS9hB,EAAQD,EAASH,GAE/B,Y+Gp9KD,IAAAmiB,GAAAniB,EAAgC,IAEnBG,GAAA+hB,MAAQC,EAAAC,gBAAgBhhB,Q/Gy9K/B,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KgHj+KpF8c,EAAA7d,EAAwB,IAExBqE,EAAArE,EAAyB,GACzB8G,EAAA9G,EAAoB,IACpB2R,EAAA3R,EAA0B,IAC1BqiB,EAAAriB,EAAqB,KASrBoiB,EAAA,SAAArgB,GAuEE,QAAAqgB,GAAYE,EACAxE,EACAvN,GAFA,SAAA+R,MAAA,GAGVvgB,EAAAxB,KAAAK,MAPMA,KAAAkd,UACAld,KAAA0hB,QAAkB,EAQpBzE,EAAAE,UAAUD,GACZld,KAAKkd,OAAS3I,OAAO2I,GAAU,GAAK,GAAK3I,OAAO2I,GACvCnM,EAAAC,YAAYkM,KACrBvN,EAAwBuN,GAGrBnM,EAAAC,YAAYrB,KACfA,EAAYzJ,EAAAU,OAGd5G,KAAK2P,UAAYA,EACjB3P,KAAK0hB,QAAUD,EAAAE,OAAOD,IAClBA,EAAU1hB,KAAK2P,UAAU4O,MACjBmD,EAWhB,MApGqC3hB,GAAAyhB,EAAArgB,GA4C5BqgB,EAAAhhB,OAAP,SAAcohB,EACA1E,EACAvN,GACZ,MAHY,UAAAiS,MAAA,GAGL,GAAIJ,GAAgBI,EAAc1E,EAAQvN,IAG5C6R,EAAAzR,SAAP,SAAgBnO,GAEN,GAAAyL,GAAAzL,EAAAyL,MAAO6P,EAAAtb,EAAAsb,OAAQzU,EAAA7G,EAAA6G,WACjBgW,EAAgBze,IAItB,IAFAyI,EAAWlH,KAAK8L,IAEZ5E,EAAWlB,eAAf,CAEO,GAAI2V,OACT,MAAOzU,GAAWH,UAGpB1G,GAAMyL,MAAQA,EAAQ,EACtBoR,EAAO3O,SAASlO,EAAOsb,KA4BfsE,EAAAlhB,UAAAkI,WAAV,SAAqBC,GACnB,GAAM4E,GAAQ,EACdP,EAAA9M,KAAQkd,EAAApQ,EAAAoQ,OAAQwE,EAAA5U,EAAA4U,QAAS/R,EAAA7C,EAAA6C,SAEzB,OAAOA,GAAUG,SAAS0R,EAAgBzR,SAAU2R,GAClDrU,QAAO6P,SAAQzU,gBAGrB+Y,GApGqC/d,EAAAC,WAAxBnE,GAAAiiB,gBAAeA,GhH6jLtB,SAAShiB,EAAQD,GAEtB,YiH7kLD,SAAAoiB,GAAuB5Z,GACrB,MAAOA,aAAiByW,QAAS/G,OAAO1P,GAD1BxI,EAAAoiB,OAAMA,GjHslLhB,SAASniB,EAAQD,EAASH,GAE/B,YkHxlLD,IAAAqE,GAAArE,EAAyB,GACzByiB,EAAAziB,EAA+B,IAE/BqE,GAAAC,WAAWoe,IAAMD,EAAAC,KlH6lLX,SAAStiB,EAAQD,EAASH,GAE/B,YmHlmLD,IAAAyiB,GAAAziB,EAA0B,IAEbG,GAAAuiB,IAAMD,EAAAE,WnHumLb,SAASviB,EAAQD,EAASH,GAE/B,YoH1lLD,SAAA4iB,KpH8mLK,IoH9mLuB,GAAAnR,MAAAhB,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAgB,EAAAhB,EAAA,GAAAtE,UAAAsE,EAE1B,OADAgB,GAAYgB,QAAQ7R,MACb+hB,EAAU9T,MAAMjO,KAAM6Q,GAuD/B,QAAAkR,KpHskLK,IoHtkL2B,GAAAlR,MAAAhB,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAgB,EAAAhB,EAAA,GAAAtE,UAAAsE,EAC9B,IAAMiB,GAAuCD,EAAYA,EAAY5I,OAAS,EAI9E,OAHuB,kBAAZ6I,IACTD,EAAYI,MAEP,GAAIC,GAAAC,gBAAgBN,GAAalJ,KAAK,GAAIsa,GAAYnR,IpH6hL9D,GAAI/Q,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KoH9mLpF+Q,EAAA9R,EAA8B,IAC9BoN,EAAApN,EAAsB,IAGtB2E,EAAA3E,EAAyB,IACzB0S,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,IAChCkH,EAAAlH,EAAyB,GAQTG,GAAAyiB,SAAQA,EAyDRziB,EAAAwiB,UAASA,CAQzB,IAAAE,GAAA,WAIE,QAAAA,GAAYnR,GACV9Q,KAAK8Q,QAAUA,EAMnB,MAHEmR,GAAA3hB,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI0Z,GAAczZ,EAAYzI,KAAK8Q,WAEhEmR,IAXa1iB,GAAA0iB,YAAWA,CAkBxB,IAAAC,GAAA,SAAA/gB,GAOE,QAAA+gB,GAAY7a,EACAyJ,EACAqB,GAAA,SAAAA,MAAc5R,OAAOC,OAAO,OACtCW,EAAAxB,KAAAK,KAAMqH,GATArH,KAAAqN,MAAQ,EAGRrN,KAAAmiB,aACAniB,KAAAkS,OAAS,EAMflS,KAAK8Q,QAA8B,kBAAZA,GAA0BA,EAAU,KAC3D9Q,KAAKmS,OAASA,EA0FlB,MAtGyCpS,GAAAmiB,EAAA/gB,GAe7B+gB,EAAA5hB,UAAAoL,MAAV,SAAgB3D,GACd,GAAMoa,GAAYniB,KAAKmiB,UACjB9U,EAAQrN,KAAKqN,OACfb,GAAAY,QAAQrF,GACVoa,EAAUxZ,KAAK,GAAIyZ,GAAoBra,IACD,kBAAtBA,GAAMzB,EAAAY,YACtBib,EAAUxZ,KAAK,GAAI0Z,GAAeta,EAAMzB,EAAAY,gBAExCib,EAAUxZ,KAAK,GAAI2Z,GAAkBtiB,KAAKqH,YAAarH,KAAM+H,EAAOsF,KAI9D6U,EAAA5hB,UAAAsL,UAAV,WACE,GAAMuW,GAAYniB,KAAKmiB,UACjBna,EAAMma,EAAUla,MACtBjI,MAAKkS,OAASlK,CACd,KAAK,GAAII,GAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAInB,GAA6Ckb,EAAU/Z,EACvDnB,GAASsb,kBACXviB,KAAKqJ,IAAIpC,EAAS/E,UAAU+E,EAAUmB,IAEtCpI,KAAKkS,WAKXgQ,EAAA5hB,UAAAkiB,eAAA,WACExiB,KAAKkS,SACe,IAAhBlS,KAAKkS,QACPlS,KAAKqH,YAAYiB,YAIrB4Z,EAAA5hB,UAAAmiB,eAAA,WAME,IAAK,GALCN,GAAYniB,KAAKmiB,UACjBna,EAAMma,EAAUla,OAChBZ,EAAcrH,KAAKqH,YAGhBe,EAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAInB,GAAWkb,EAAU/Z,EACzB,IAAiC,kBAAtBnB,GAASmS,WAA4BnS,EAASmS,WACvD,OAMJ,IAAK,GAFDsJ,IAAiB,EACfhT,KACGtH,EAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAInB,GAAWkb,EAAU/Z,GACrByG,EAAS5H,EAAS1F,MAQtB,IAJI0F,EAASqJ,iBACXoS,GAAiB,GAGf7T,EAAO+C,KAET,WADAvK,GAAYiB,UAIdoH,GAAK/G,KAAKkG,EAAO9G,OAGf/H,KAAK8Q,QACP9Q,KAAK+S,YAAYrD,GAEjBrI,EAAY9F,KAAKmO,GAGfgT,GACFrb,EAAYiB,YAIN4Z,EAAA5hB,UAAAyS,YAAV,SAAsBrD,GACpB,GAAIb,EACJ,KACEA,EAAS7O,KAAK8Q,QAAQ7C,MAAMjO,KAAM0P,GAClC,MAAOrH,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAKqH,YAAY9F,KAAKsN,IAE1BqT,GAtGyCne,EAAAC,WAA5BzE,GAAA2iB,cAAaA,CA6G1B,IAAAG,GAAA,WAGE,QAAAA,GAAoBpb,GAAAjH,KAAAiH,WAClBjH,KAAK2iB,WAAa1b,EAAS1F,OAiB/B,MAdE8gB,GAAA/hB,UAAA8Y,SAAA,WACE,OAAO,GAGTiJ,EAAA/hB,UAAAiB,KAAA,WACE,GAAMsN,GAAS7O,KAAK2iB,UAEpB,OADA3iB,MAAK2iB,WAAa3iB,KAAKiH,SAAS1F,OACzBsN,GAGTwT,EAAA/hB,UAAAgQ,aAAA,WACE,GAAMqS,GAAa3iB,KAAK2iB,UACxB,OAAOA,IAAcA,EAAW/Q,MAEpCyQ,KAEAD,EAAA,WAIE,QAAAA,GAAoB7Q,GAAAvR,KAAAuR,QAHZvR,KAAAqN,MAAQ,EACRrN,KAAAiI,OAAS,EAGfjI,KAAKiI,OAASsJ,EAAMtJ,OAoBxB,MAjBEma,GAAA9hB,UAACgG,EAAAY,YAAD,WACE,MAAOlH,OAGToiB,EAAA9hB,UAAAiB,KAAA,SAAKwG,GACH,GAAMK,GAAIpI,KAAKqN,QACTkE,EAAQvR,KAAKuR,KACnB,OAAOnJ,GAAIpI,KAAKiI,QAAWF,MAAOwJ,EAAMnJ,GAAIwJ,MAAM,IAAY7J,MAAO,KAAM6J,MAAM,IAGnFwQ,EAAA9hB,UAAA8Y,SAAA,WACE,MAAOpZ,MAAKuR,MAAMtJ,OAASjI,KAAKqN,OAGlC+U,EAAA9hB,UAAAgQ,aAAA,WACE,MAAOtQ,MAAKuR,MAAMtJ,SAAWjI,KAAKqN,OAEtC+U,KAOAE,EAAA,SAAAnhB,GAKE,QAAAmhB,GAAYjb,EACQgF,EACArF,EACAqG,GAClBlM,EAAAxB,KAAAK,KAAMqH,GAHYrH,KAAAqM,SACArM,KAAAgH,aACAhH,KAAAqN,QAPpBrN,KAAAuiB,mBAAoB,EACpBviB,KAAA2U,UACA3U,KAAA4iB,YAAa,EAmDf,MAtDsC7iB,GAAAuiB,EAAAnhB,GAYpCmhB,EAAAhiB,UAACgG,EAAAY,YAAD,WACE,MAAOlH,OAKTsiB,EAAAhiB,UAAAiB,KAAA,WACE,GAAMoT,GAAS3U,KAAK2U,MACpB,OAAsB,KAAlBA,EAAO1M,QAAgBjI,KAAK4iB,YACrB7a,MAAO,KAAM6J,MAAM,IAEnB7J,MAAO4M,EAAOhE,QAASiB,MAAM,IAI1C0Q,EAAAhiB,UAAA8Y,SAAA,WACE,MAAOpZ,MAAK2U,OAAO1M,OAAS,GAG9Bqa,EAAAhiB,UAAAgQ,aAAA,WACE,MAA8B,KAAvBtQ,KAAK2U,OAAO1M,QAAgBjI,KAAK4iB,YAG1CN,EAAAhiB,UAAAgS,eAAA,WACMtS,KAAK2U,OAAO1M,OAAS,GACvBjI,KAAK4iB,YAAa,EAClB5iB,KAAKqM,OAAOmW,kBAEZxiB,KAAKqH,YAAYiB,YAIrBga,EAAAhiB,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAK2U,OAAOhM,KAAK+J,GACjB1S,KAAKqM,OAAOoW,kBAGdH,EAAAhiB,UAAA4B,UAAA,SAAU6F,EAAYsF,GACpB,MAAO0E,GAAAM,kBAA4BrS,KAAMA,KAAKgH,WAAYhH,KAAMqN,IAEpEiV,GAtDsCxQ,EAAAkB,kBpHomLhC,SAASxT,EAAQD,EAASH,GAE/B,YqH92LD,IAAAqE,GAAArE,EAAyB,GACzByjB,EAAAzjB,EAAiC,IAGjCqE,GAAAC,WAAWof,KAAOD,EAAAC,MrHk3LZ,SAAStjB,EAAQD,EAASH,GAE/B,YsHx3LD,IAAAyG,GAAAzG,EAAmD,IAEtCG,GAAAujB,KAA2Bjd,EAAAkd,eAAeviB,QtH63LjD,SAAShB,EAAQD,EAASH,GAE/B,YuHx2LD,SAAA4jB,KACE,GAAIja,EAAAY,KAAKsZ,eAAgB,CACvB,GAAMC,GAAM,GAAIna,GAAAY,KAAKsZ,cAIrB,OAHI,mBAAqBC,KACvBA,EAAIC,kBAAoBnjB,KAAKmjB,iBAExBD,EACF,GAAMna,EAAAY,KAAKyZ,eAChB,MAAO,IAAIra,GAAAY,KAAKyZ,cAEhB,MAAM,IAAIrZ,OAAM,yCAIpB,QAAAsZ,KACE,GAAIta,EAAAY,KAAKsZ,eACP,MAAO,IAAIla,GAAAY,KAAKsZ,cAEhB,IAAIK,GAAM,MACV,KAEE,IAAK,GADCC,IAAW,iBAAkB,oBAAqB,sBAC/Cnb,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAEE,GADAkb,EAASC,EAAQnb,GACb,GAAIW,GAAAY,KAAK6Z,cAAcF,GACzB,MAEF,MAAOnW,IAIX,MAAO,IAAIpE,GAAAY,KAAK6Z,cAAcF,GAC9B,MAAOnW,GACP,KAAM,IAAIpD,OAAM,oDActB,QAAA0Z,GAAqCC,GACnC,MAAOA,GAASA,SAGlB,QAAAC,GAA2BC,EAAajO,EAA0EkO,GAChH,MADsC,UAAAlO,MAAA8N,GAA0E,SAAAI,MAAA,MACzG,GAAId,IAAoBe,OAAQ,MAAOF,MAAKjO,iBAAgBkO,YAGrE,QAAAE,GAA4BH,EAAaI,EAAYH,GACnD,MAAO,IAAId,IAAoBe,OAAQ,OAAQF,MAAKI,OAAMH,YAG5D,QAAAI,GAA8BL,EAAaC,GACzC,MAAO,IAAId,IAAoBe,OAAQ,SAAUF,MAAKC,YAGxD,QAAAK,GAA2BN,EAAaI,EAAYH,GAClD,MAAO,IAAId,IAAoBe,OAAQ,MAAOF,MAAKI,OAAMH,YAG3D,QAAAM,GAAkCP,EAAajO,EAAiCkO,GAC9E,GAAMO,GAAsBzO,EAAiB,SAAC0O,GAAsB,MAAA1O,GAAe0O,EAAIX,WAAY,SAACW;AAAsB,MAAAA,GAAIX,SAC9H,OAAO,IAAIX,IAAoBe,OAAQ,MAAOF,MAAKU,aAAc,OAAQ3O,eAAgByO,EAAqBP,YvHoyL/G,GAAI9jB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuHr4LpF4I,EAAA3J,EAAmB,GACnBsN,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAC1BqE,EAAArE,EAAyB,GACzB2E,EAAA3E,EAAyB,GAwETG,GAAAokB,QAAOA,EAIPpkB,EAAAwkB,SAAQA,EAIRxkB,EAAA0kB,WAAUA,EAIV1kB,EAAA2kB,QAAOA,EAIP3kB,EAAA4kB,YAAWA,CAU3B,IAAApB,GAAA,SAAA5hB,GA2CE,QAAA4hB,GAAYwB,GACVpjB,EAAAxB,KAAAK,KAEA,IAAMwkB,IACJ5d,OAAO,EACP6d,UAAW,WACT,MAAOzkB,MAAK0kB,YAAc1B,EAAerjB,KAAKK,MAAQqjB,KAExDqB,aAAa,EACbvB,iBAAiB,EACjBU,WACAC,OAAQ,MACRQ,aAAc,OACdK,QAAS,EAGX,IAA4B,gBAAjBJ,GACTC,EAAQZ,IAAMW,MAEd,KAAK,GAAMK,KAAQL,GACbA,EAAalkB,eAAeukB,KAC9BJ,EAAQI,GAAQL,EAAaK,GAKnC5kB,MAAKwkB,QAAUA,EAMnB,MA3EuCzkB,GAAAgjB,EAAA5hB,GAwE3B4hB,EAAAziB,UAAAkI,WAAV,SAAqBC,GACnB,MAAO,IAAIoc,GAAepc,EAAYzI,KAAKwkB,UA9CtCzB,EAAAviB,OAA6B,WAClC,GAAMA,GAAc,SAAC+jB,GACnB,MAAO,IAAIxB,GAAewB,GAS5B,OANA/jB,GAAOskB,IAAMnB,EACbnjB,EAAOukB,KAAOhB,EACdvjB,YAAgByjB,EAChBzjB,EAAOwkB,IAAMd,EACb1jB,EAAOykB,QAAUd,EAEU3jB,KAqC/BuiB,GA3EuCtf,EAAAC,WAA1BnE,GAAAwjB,eAAcA,CAkF3B,IAAA8B,GAAA,SAAA1jB,GAKE,QAAA0jB,GAAYxd,EAAmCmd,GAC7CrjB,EAAAxB,KAAAK,KAAMqH,GADuCrH,KAAAwkB,UAFvCxkB,KAAA4R,MAAgB,CAKtB,IAAMiS,GAAUW,EAAQX,QAAUW,EAAQX,WAGrCW,GAAQE,aAAgBb,EAAQ,sBACnCA,EAAQ,oBAAsB,kBAI1B,gBAAkBA,IAAc9a,EAAAY,KAAKub,UAAYV,EAAQR,eAAgBjb,GAAAY,KAAKub,WAClFrB,EAAQ,gBAAkB,oDAI5BW,EAAQR,KAAOhkB,KAAKmlB,cAAcX,EAAQR,KAAMQ,EAAQX,QAAQ,iBAEhE7jB,KAAK2V,eAAiB6O,EAAQ7O,eAC9B3V,KAAKolB,OA6KT,MArMuCrlB,GAAA8kB,EAAA1jB,GA2BrC0jB,EAAAvkB,UAAAiB,KAAA,SAAK4L,GACHnN,KAAK4R,MAAO,CACZ,IAAA9E,GAAA9M,KAAQ2V,EAAA7I,EAAA6I,eAAgBuN,EAAApW,EAAAoW,IAAKsB,EAAA1X,EAAA0X,QAASnd,EAAAyF,EAAAzF,YAChCqc,EAAW,GAAI5d,GAAaqH,EAAG+V,EAAKsB,EAE1C,IAAI7O,EAAgB,CAClB,GAAM9G,GAASnC,EAAAO,SAAS0I,GAAgB+N,EACpC7U,KAAWlC,EAAAO,YACblN,KAAKmC,MAAMwK,EAAAO,YAAYC,GAEvB9F,EAAY9F,KAAKsN,OAGnBxH,GAAY9F,KAAKmiB,IAIbmB,EAAAvkB,UAAA8kB,KAAR,WACE,GAAAtY,GAAA9M,KACEwkB,EAAA1X,EAAA0X,QACAa,EAAAvY,EAAA0X,QAAWc,EAAAD,EAAAC,KAAMxB,EAAAuB,EAAAvB,OAAQF,EAAAyB,EAAAzB,IAAKhd,EAAAye,EAAAze,MAAO2e,EAAAF,EAAAE,SAAU1B,EAAAwB,EAAAxB,QAASG,EAAAqB,EAAArB,KAEpDS,EAAYD,EAAQC,UACpBvB,EAAsBxW,EAAAO,SAASwX,GAAW9kB,KAAK6kB,EAErD,IAAStB,IAAQvW,EAAAO,YACflN,KAAKmC,MAAMwK,EAAAO,YAAYC,OAClB,CACLnN,KAAKkjB,IAAMA,CAGX,IAAIrU,GAAM,MAOV,IALEA,EADEyW,EACO5Y,EAAAO,SAASiW,EAAIsC,MAAM7lB,KAAKujB,EAAKY,EAAQF,EAAKhd,EAAO0e,EAAMC,GAEvD7Y,EAAAO,SAASiW,EAAIsC,MAAM7lB,KAAKujB,EAAKY,EAAQF,EAAKhd,GAGjDiI,IAAWlC,EAAAO,YAEb,WADAlN,MAAKmC,MAAMwK,EAAAO,YAAYC,EAKzB+V,GAAIyB,QAAUH,EAAQG,QACtBzB,EAAIoB,aAAeE,EAAQF,aAG3BtkB,KAAKylB,WAAWvC,EAAKW,GAGrB7jB,KAAK0lB,YAAYxC,EAAKsB,GAGlBR,EACFd,EAAIkC,KAAKpB,GAETd,EAAIkC,SAKFP,EAAAvkB,UAAA6kB,cAAR,SAAsBnB,EAAW2B,GAC/B,IAAK3B,GAAwB,gBAATA,GAClB,MAAOA,EACF,IAAIjb,EAAAY,KAAKub,UAAYlB,YAAgBjb,GAAAY,KAAKub,SAC/C,MAAOlB,EAGT,IAAI2B,EAAa,CACf,GAAMC,GAAaD,EAAY/X,QAAQ,IACnCgY,UACFD,EAAcA,EAAYE,UAAU,EAAGD,IAI3C,OAAQD,GACN,IAAK,oCACH,MAAOplB,QAAOuT,KAAKkQ,GAAMrhB,IAAI,SAAAqR,GAAO,MAAG8R,WAAU9R,GAAI,IAAI8R,UAAU9B,EAAKhQ,MAAS7F,KAAK,IACxF,KAAK,mBACH,MAAO4X,MAAKC,UAAUhC,EACxB,SACE,MAAOA,KAILa,EAAAvkB,UAAAmlB,WAAR,SAAmBvC,EAAqBW,GACtC,IAAK,GAAI7P,KAAO6P,GACVA,EAAQxjB,eAAe2T,IACzBkP,EAAI+C,iBAAiBjS,EAAK6P,EAAQ7P,KAKhC6Q,EAAAvkB,UAAAolB,YAAR,SAAoBxC,EAAqBsB,GACvC,GAAM0B,GAAqB1B,EAAQ0B,kBAEnChD,GAAIiD,UAAY,QAAAC,GAAoBjZ,GAClC,GAAAL,GAAAsZ,EAAO3d,EAAAqE,EAAArE,WAAYyd,EAAApZ,EAAAoZ,mBAAoB1B,EAAA1X,EAAA0X,OACnC0B,IACFA,EAAmB/jB,MAAMgL,GAE3B1E,EAAWtG,MAAM,GAAI6D,GAAiBhG,KAAMwkB,KAExCtB,EAAIiD,UAAW3B,QAAUA,EACzBtB,EAAIiD,UAAW1d,WAAazI,KAC5BkjB,EAAIiD,UAAWD,mBAAqBA,EAEtChD,EAAImD,QAAU,mBAAqBnD,IAAOna,EAAAY,KAAKyZ,iBAC7C8C,IACFhD,EAAIoD,WAAa,QAAAC,GAAqBpZ,GAC5B,GAAA+Y,GAAAK,EAAAL,kBACRA,GAAmB3kB,KAAK4L,IAEpB+V,EAAIoD,WAAYJ,mBAAqBA,GAG7ChD,EAAIsD,QAAU,QAAAC,GAAkBtZ,GAC9B,GAAAL,GAAA2Z,EAAQP,EAAApZ,EAAAoZ,mBAAoBzd,EAAAqE,EAAArE,WAAY+b,EAAA1X,EAAA0X,OACpC0B,IACFA,EAAmB/jB,MAAMgL,GAE3B1E,EAAWtG,MAAM,GAAI4D,GAAU,aAAc/F,KAAMwkB,KAE/CtB,EAAIsD,QAAShC,QAAUA,EACvBtB,EAAIsD,QAAS/d,WAAazI,KAC1BkjB,EAAIsD,QAASN,mBAAqBA,GAG1ChD,EAAIwD,mBAAqB,QAAAC,GAA6BxZ,GACpD,GAAAL,GAAA6Z,EAAQle,EAAAqE,EAAArE,WAAYyd,EAAApZ,EAAAoZ,mBAAoB1B,EAAA1X,EAAA0X,OACxC,IAAwB,IAApBxkB,KAAK4mB,WAAkB,CAEzB,GAAIC,GAAiC,OAAhB7mB,KAAK8mB,OAAkB,IAAM9mB,KAAK8mB,OACnDpD,EAAuC,SAAtB1jB,KAAKskB,aACxBtkB,KAAK0jB,UAAY1jB,KAAK+mB,aAAgB/mB,KAAK0jB,QAK9B,KAAXmD,IACFA,EAASnD,EAAW,IAAM,GAGxB,KAAOmD,GAAUA,EAAS,KACxBX,GACFA,EAAmB5d,WAErBG,EAAWlH,KAAK4L,GAChB1E,EAAWH,aAEP4d,GACFA,EAAmB/jB,MAAMgL,GAE3B1E,EAAWtG,MAAM,GAAI4D,GAAU,cAAgB8gB,EAAQ7mB,KAAMwkB,OAI7DtB,EAAIwD,mBAAoBje,WAAazI,KACrCkjB,EAAIwD,mBAAoBR,mBAAqBA,EAC7ChD,EAAIwD,mBAAoBlC,QAAUA,GAG1CK,EAAAvkB,UAAAiI,YAAA,WACE,GAAAuE,GAAA9M,KAAQ4R,EAAA9E,EAAA8E,KAAMsR,EAAApW,EAAAoW,KACTtR,GAAQsR,GAA0B,IAAnBA,EAAI0D,YACtB1D,EAAI8D,QAEN7lB,EAAAb,UAAMiI,YAAW5I,KAAAK,OAErB6kB,GArMuC9gB,EAAAC,WAA1BzE,GAAAslB,eAAcA,CA8M3B,IAAA/e,GAAA,WAaE,QAAAA,GAAmBmhB,EAA6B/D,EAA4BsB,GAI1E,OAJiBxkB,KAAAinB,gBAA6BjnB,KAAAkjB,MAA4BljB,KAAAwkB,UAC1ExkB,KAAK8mB,OAAS5D,EAAI4D,OAClB9mB,KAAKskB,aAAepB,EAAIoB,cAAgBE,EAAQF,aAExCtkB,KAAKskB,cACX,IAAK,OACC,YAAcpB,GAEhBljB,KAAK0jB,SAAWR,EAAIoB,aAAepB,EAAIQ,SAAWqC,KAAKmB,MAAMhE,EAAIQ,UAAYR,EAAI6D,cAAgB,IAEjG/mB,KAAK0jB,SAAWqC,KAAKmB,MAAMhE,EAAI6D,cAAgB,GAEjD,MACF,KAAK,MACH/mB,KAAK0jB,SAAWR,EAAIiE,WACpB,MACF,KAAK,OACL,QACEnnB,KAAK0jB,SAAY,YAAcR,GAAOA,EAAIQ,SAAWR,EAAI6D,cAIjE,MAAAjhB,KAnCavG,GAAAuG,aAAYA,CA4CzB,IAAAC,GAAA,SAAA5E,GAUE,QAAA4E,GAAYjD,EAAiBogB,EAAqBsB,GAChDrjB,EAAAxB,KAAAK,KAAM8C,GACN9C,KAAK8C,QAAUA,EACf9C,KAAKkjB,IAAMA,EACXljB,KAAKwkB,QAAUA,EACfxkB,KAAK8mB,OAAS5D,EAAI4D,OAEtB,MAjB+B/mB,GAAAgG,EAAA5E,GAiB/B4E,GAjB+BgE,MAAlBxK,GAAAwG,UAASA,CAwBtB,IAAAC,GAAA,SAAA7E,GACE,QAAA6E,GAAYkd,EAAqBsB,GAC/BrjB,EAAAxB,KAAAK,KAAM,eAAgBkjB,EAAKsB,GAE/B,MAJsCzkB,GAAAiG,EAAA7E,GAItC6E,GAJsCD,EAAzBxG,GAAAyG,iBAAgBA,GvHi1LvB,SAASxG,EAAQD,EAASH,GAE/B,YwH7xMD,IAAAqE,GAAArE,EAAyB,GACzBgoB,EAAAhoB,EAA2C,IAE3CqE,GAAAC,WAAW2jB,UAAYD,EAAAC,WxHkyMjB,SAAS7nB,EAAQD,EAASH,GAE/B,YyHvyMD,IAAAkoB,GAAAloB,EAAiC,IAEpBG,GAAA8nB,UAAYC,EAAAC,iBAAiB/mB,QzH4yMpC,SAAShB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K0HpzMpFqD,EAAApE,EAAwC,GACxC2E,EAAA3E,EAAyB,IACzBqE,EAAArE,EAAyB,GACzByE,EAAAzE,EAA2B,IAE3B2J,EAAA3J,EAAmB,GACnB+E,EAAA/E,EAA4B,KAE5BsN,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAC1BooB,EAAApoB,EAAqB,KAiBrBmoB,EAAA,SAAApmB,GA2BE,QAAAomB,GAAYE,EAAoEpgB,GAC9E,GAAIogB,YAA6BhkB,GAAAC,WAC/BvC,EAAAxB,KAAAK,KAAMqH,EAA6BogB,OAC9B,CAUL,GATAtmB,EAAAxB,KAAAK,MACAA,KAAK0nB,cAAgB3e,EAAAY,KAAKge,UAC1B3nB,KAAK4nB,QAAU,GAAIpkB,GAAAxC,QACc,gBAAtBymB,GACTznB,KAAK4jB,IAAM6D,EAGXD,EAAAK,OAAO7nB,KAAMynB,IAEVznB,KAAK0nB,cACR,KAAM,IAAI3d,OAAM,wCAElB/J,MAAKqH,YAAc,GAAIlD,GAAAC,eA0J7B,MArMyCrE,GAAAwnB,EAAApmB,GAYvComB,EAAAjnB,UAAAqV,eAAA,SAAexI,GACb,MAAO4Y,MAAKmB,MAAM/Z,EAAE2a,OAUfP,EAAA/mB,OAAP,SAAiBinB,GACf,MAAO,IAAIF,GAAoBE,IAuBjCF,EAAAjnB,UAAAqH,KAAA,SAAQC,GACN,GAAMmgB,GAAO,GAAIR,GAAoBvnB,KAAYA,KAAKqH,YAEtD,OADA0gB,GAAKngB,SAAWA,EACTmgB,GAITR,EAAAjnB,UAAA0nB,UAAA,SAAUC,EAAmBC,EAAqBC,GAChD,GAAMxd,GAAO3K,IACb,OAAO,IAAIyD,GAAAC,WAAW,SAAC+Q,GACrB,GAAM5F,GAASnC,EAAAO,SAASgb,IACpBpZ,KAAWlC,EAAAO,YACbuH,EAAStS,MAAMwK,EAAAO,YAAYC,GAE3BxC,EAAKpJ,KAAKsN,EAGZ,IAAI3E,GAAeS,EAAKzI,UAAU,SAAAqK,GAChC,GAAMsC,GAASnC,EAAAO,SAASkb,GAAe5b,EACnCsC,KAAWlC,EAAAO,YACbuH,EAAStS,MAAMwK,EAAAO,YAAYC,GAClB0B,GACT4F,EAASlT,KAAKgL,IAGhB,SAAAlE,GAAO,MAAAoM,GAAStS,MAAMkG,IACtB,WAAM,MAAAoM,GAASnM,YAEjB,OAAO,YACL,GAAMuG,GAASnC,EAAAO,SAASib,IACpBrZ,KAAWlC,EAAAO,YACbuH,EAAStS,MAAMwK,EAAAO,YAAYC,GAE3BxC,EAAKpJ,KAAKsN,GAEZ3E,EAAa3B,kBAKXgf,EAAAjnB,UAAA8nB,eAAR,cAAAhnB,GAAApB,KACU0nB,EAAA1nB,KAAA0nB,cACFW,EAASroB,KAAKsoB,SAClB,GAAIZ,GAAc1nB,KAAK4jB,IAAK5jB,KAAKsoB,UACjC,GAAIZ,GAAc1nB,KAAK4jB,IACzB5jB,MAAKqoB,OAASA,CACd,IAAMne,GAAe,GAAIrG,GAAAC,aAAa,WACpC1C,EAAKinB,OAAS,KACVA,GAAgC,IAAtBA,EAAOzB,YACnByB,EAAOE,UAIL9T,EAAWzU,KAAK4nB,OAEtBS,GAAOG,OAAS,SAACrb,GACf,GAAMsb,GAAernB,EAAKqnB,YACtBA,IACFA,EAAalnB,KAAK4L,EAGpB,IAAMzG,GAAQtF,EAAKiG,WAEnBjG,GAAKiG,YAActD,EAAAC,WAAWxD,OAC5B,SAAC+L,GAAM,MAAsB,KAAtB8b,EAAOzB,YAAoByB,EAAOjD,KAAK7Y,IAC9C,SAACY,GACC,GAAMub,GAAkBtnB,EAAKsnB,eACzBA,IACFA,EAAgBnnB,KAAKmJ,QAEnByC,GAAKA,EAAEwb,KACTN,EAAOE,MAAMpb,EAAEwb,KAAMxb,EAAEyb,QAEvBnU,EAAStS,MAAM,GAAIwR,WAAU,sIAG/BvS,EAAKiG,YAAc,GAAIlD,GAAAC,cACvBhD,EAAKinB,OAAS,MAEhB,WACE,GAAMK,GAAkBtnB,EAAKsnB,eACzBA,IACFA,EAAgBnnB,KAAKmJ,QAEvB2d,EAAOE,QACPnnB,EAAKiG,YAAc,GAAIlD,GAAAC,cACvBhD,EAAKinB,OAAS,OAId3hB,GAASA,YAAiBvC,GAAAC,eAC5B8F,EAAab,IAAuB3C,EAAOxE,UAAUd,EAAKiG,eAI9DghB,EAAO7B,QAAU,SAACrZ,GAAa,MAAAsH,GAAStS,MAAMgL,IAE9Ckb,EAAOQ,QAAU,SAAC1b,GAChB,GAAM2b,GAAgB1nB,EAAK0nB,aACvBA,IACFA,EAAcvnB,KAAK4L,GAEjBA,EAAE4b,SACJtU,EAASnM,WAETmM,EAAStS,MAAMgL,IAInBkb,EAAOW,UAAY,SAAC7b,GAClB,GAAM0B,GAASnC,EAAAO,SAAS7L,EAAKuU,gBAAgBxI,EACzC0B,KAAWlC,EAAAO,YACbuH,EAAStS,MAAMwK,EAAAO,YAAYC,GAE3BsH,EAASlT,KAAKsN,KAKV0Y,EAAAjnB,UAAAkI,WAAV,SAAqBC,GAArB,GAAArH,GAAApB,KACU8I,EAAA9I,KAAA8I,MACR,IAAIA,EACF,MAAOA,GAAO5G,UAAUuG,EAErBzI,MAAKqoB,QACRroB,KAAKooB,gBAEP,IAAIle,GAAe,GAAIrG,GAAAC,YASvB,OARAoG,GAAab,IAAIrJ,KAAK4nB,QAAQ1lB,UAAUuG,IACxCyB,EAAab,IAAI,WACP,GAAAgf,GAAAjnB,EAAAinB,MACJA,IAAgC,IAAtBA,EAAOzB,aACnByB,EAAOE,QACPnnB,EAAKinB,OAAS,QAGXne,GAGTqd,EAAAjnB,UAAAiI,YAAA,WACE,GAAAuE,GAAA9M,KAAQ8I,EAAAgE,EAAAhE,OAAQuf,EAAAvb,EAAAub,MACZA,IAAgC,IAAtBA,EAAOzB,aACnByB,EAAOE,QACPvoB,KAAKqoB,OAAS,MAEhBlnB,EAAAb,UAAMiI,YAAW5I,KAAAK,MACZ8I,IACH9I,KAAKqH,YAAc,GAAIlD,GAAAC,gBAG7BmjB,GArMyC/jB,EAAAsE,iBAA5BvI,GAAAgoB,iBAAgBA,G1H89MvB,SAAS/nB,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K2H//MpFqD,EAAApE,EAAsB,GAEtB+G,EAAA/G,EAAoB,KAGpBoX,EAAApX,EAAkC,IAKlCgF,EAAA,SAAAjD,GAKE,QAAAiD,GAAY6kB,EACAC,EACQvZ,GAFR,SAAAsZ,MAAqB1U,OAAOC,mBAC5B,SAAA0U,MAAqB3U,OAAOC,mBAEtCrT,EAAAxB,KAAAK,MADkBA,KAAA2P,YANZ3P,KAAAmpB,WAQNnpB,KAAKopB,YAAcH,EAAa,EAAI,EAAIA,EACxCjpB,KAAKqpB,YAAcH,EAAa,EAAI,EAAIA,EA2D5C,MArEsCnpB,GAAAqE,EAAAjD,GAapCiD,EAAA9D,UAAAiB,KAAA,SAAKwG,GACH,GAAMwW,GAAMve,KAAKspB,SACjBtpB,MAAKmpB,QAAQxgB,KAAK,GAAI4gB,GAAYhL,EAAKxW,IACvC/H,KAAKwpB,2BACLroB,EAAAb,UAAMiB,KAAI5B,KAAAK,KAAC+H,IAGH3D,EAAA9D,UAAAkI,WAAV,SAAqBC,GACnB,GAAM0gB,GAAUnpB,KAAKwpB,2BACf7Z,EAAY3P,KAAK2P,SAEnBA,IACFlH,EAAWY,IAAIZ,EAAa,GAAI+N,GAAAU,oBAAuBzO,EAAYkH,GAIrE,KAAK,GADC3H,GAAMmhB,EAAQlhB,OACXG,EAAI,EAAGA,EAAIJ,IAAQS,EAAWlB,eAAgBa,IACrDK,EAAWlH,KAAK4nB,EAAQ/gB,GAAGL,MAG7B,OAAO5G,GAAAb,UAAMkI,WAAU7I,KAAAK,KAACyI,IAG1BrE,EAAA9D,UAAAgpB,QAAA,WACE,OAAQtpB,KAAK2P,WAAaxJ,EAAAO,OAAO6X,OAG3Bna,EAAA9D,UAAAkpB,yBAAR,WAYE,IAXA,GAAMjL,GAAMve,KAAKspB,UACXF,EAAcppB,KAAKopB,YACnBC,EAAcrpB,KAAKqpB,YACnBF,EAAUnpB,KAAKmpB,QAEjBM,EAAcN,EAAQlhB,OACtByhB,EAAc,EAKXA,EAAcD,KACdlL,EAAM4K,EAAQO,GAAaC,KAAQN,IAGxCK,GAWF,OARID,GAAcL,IAChBM,EAAc9R,KAAKgS,IAAIF,EAAaD,EAAcL,IAGhDM,EAAc,GAChBP,EAAQtb,OAAO,EAAG6b,GAGbP,GAEX/kB,GArEsCZ,EAAAxC,QAAzBzB,GAAA6E,cAAaA,CAuE1B,IAAAmlB,GAAA,WACE,QAAAA,GAAmBI,EAAqB5hB,GAArB/H,KAAA2pB,OAAqB3pB,KAAA+H,QAE1C,MAAAwhB,O3Hy/MM,SAAS/pB,EAAQD,EAASH,GAE/B,Y4H/kND,IAAAqe,GAAAre,EAA6B,GAEhBG,GAAAmH,MAAQ,GAAI+W,GAAAI,gB5HolNnB,SAASre,EAAQD,EAASH,GAE/B,Y6HxlND,IAAA2J,GAAA3J,EAAmB,GAEbmB,EAASwI,EAAAY,KAAKpJ,MAEe,mBAAlBA,GAAQsnB,SACvB,WACQtnB,EAAQsnB,OAAS,SAAwBnN,G7HylNtC,I6HzlNsD,GAAAhF,MAAA7F,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAA6F,EAAA7F,EAAA,GAAAtE,UAAAsE,EAC7D,IAAenF,SAAXgQ,GAAmC,OAAXA,EAC1B,KAAM,IAAI/G,WAAU,6CAKtB,KAAK,GAFCkW,GAAStpB,EAAOma,GAChB1S,EAAM0N,EAAQzN,OACXoF,EAAQ,EAAGA,EAAQrF,EAAKqF,IAAS,CACxC,GAAIvE,GAAS4M,EAAQrI,EACrB,IAAe3C,SAAX5B,GAAmC,OAAXA,EAC1B,IAAK,GAAIkL,KAAOlL,GACVA,EAAOzI,eAAe2T,KACxB6V,EAAO7V,GAAOlL,EAAOkL,IAM7B,MAAO6V,OAKAtqB,EAAAsoB,OAAgEtnB,EAAOsnB,Q7H6lN9E,SAASroB,EAAQD,EAASH,GAE/B,Y8H3nND,IAAAqE,GAAArE,EAAyB,GACzB0qB,EAAA1qB,EAAsC,IAEtCqE,GAAAC,WAAWpD,UAAUqU,OAASmV,EAAAnV,Q9HgoNxB,SAASnV,EAAQD,EAASH,GAE/B,Y+H9lND,SAAAuV,GAA0BoV,GACxB,MAAO/pB,MAAK2H,KAAK,GAAIqiB,GAAkBD,I/H8lNxC,GAAIhqB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K+HtoNpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAkChBG,GAAAoV,OAAMA,CAQtB,IAAAqV,GAAA,WAEE,QAAAA,GAAoBD,GAAA/pB,KAAA+pB,kBAMtB,MAHEC,GAAA1pB,UAAAX,KAAA,SAAK8I,EAA6BK,GAChC,MAAOA,GAAON,WAAW,GAAIyhB,GAAiBxhB,EAAYzI,KAAK+pB,mBAEnEC,KAOAC,EAAA,SAAA9oB,GAGE,QAAA8oB,GAAY5iB,EAA8B0iB,GACxC5oB,EAAAxB,KAAAK,KAAMqH,GAHArH,KAAA2U,UAIN3U,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAM+pB,IAcrC,MAnBkChqB,GAAAkqB,EAAA9oB,GAQtB8oB,EAAA3pB,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAK2U,OAAOhM,KAAKZ,IAGnBkiB,EAAA3pB,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,GAAM8B,GAAS3U,KAAK2U,MACpB3U,MAAK2U,UACL3U,KAAKqH,YAAY9F,KAAKoT,IAE1BsV,GAnBkCnY,EAAAkB,kB/HspN5B,SAASxT,EAAQD,EAASH,GAE/B,YgIttND,IAAAqE,GAAArE,EAAyB,GACzB8qB,EAAA9qB,EAAgD,IAEhDqE,GAAAC,WAAWpD,UAAU6pB,YAAcD,EAAAC,ahI2tN7B,SAAS3qB,EAAQD,EAASH,GAE/B,YiIprND,SAAA+qB,GAA+BlB,EAAoBmB,GACjD,MADiD,UAAAA,MAAA,MAC1CpqB,KAAK2H,KAAK,GAAI0iB,GAAuBpB,EAAYmB,IjIorNzD,GAAIrqB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KiIpuNpF4D,EAAA3E,EAAyB,GA4CTG,GAAA4qB,YAAWA,CAQ3B,IAAAE,GAAA,WACE,QAAAA,GAAoBpB,EAA4BmB,GAA5BpqB,KAAAipB,aAA4BjpB,KAAAoqB,mBAMlD,MAHEC,GAAA/pB,UAAAX,KAAA,SAAK8I,EAA6BK,GAChC,MAAOA,GAAON,WAAW,GAAI8hB,GAAsB7hB,EAAYzI,KAAKipB,WAAYjpB,KAAKoqB,oBAEzFC,KAOAC,EAAA,SAAAnpB,GAIE,QAAAmpB,GAAYjjB,EAAsC4hB,EAA4BmB,GAC5EjpB,EAAAxB,KAAAK,KAAMqH,GAD0CrH,KAAAipB,aAA4BjpB,KAAAoqB,mBAHtEpqB,KAAAuqB,aACAvqB,KAAA2R,MAAgB,EA4C1B,MA9CuC5R,GAAAuqB,EAAAnpB,GAQ3BmpB,EAAAhqB,UAAAoL,MAAV,SAAgB3D,GACd,GAAM4J,GAAS3R,KAAK2R,OAAS,EACvBtK,EAAcrH,KAAKqH,YACnB4hB,EAAajpB,KAAKipB,WAClBmB,EAA6C,MAAzBpqB,KAAKoqB,iBAA4BnB,EAAajpB,KAAKoqB,iBACvEG,EAAUvqB,KAAKuqB,QACfviB,EAAMuiB,EAAQtiB,OAChBwF,IAEAkE,GAAQyY,IAAqB,GAC/BG,EAAQ5hB,QAGV,KAAK,GAAIP,GAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAMuM,GAAS4V,EAAQniB,EACvBuM,GAAOhM,KAAKZ,GACR4M,EAAO1M,SAAWghB,IACpBxb,EAASrF,EACTf,EAAY9F,KAAKoT,IAIjBlH,QACF8c,EAAQ1c,OAAOJ,EAAQ,IAIjB6c,EAAAhqB,UAAAsL,UAAV,WAGE,IAFA,GAAMvE,GAAcrH,KAAKqH,YACnBkjB,EAAUvqB,KAAKuqB,QACdA,EAAQtiB,OAAS,GAAG,CACzB,GAAI0M,GAAS4V,EAAQ5Z,OACjBgE,GAAO1M,OAAS,GAClBZ,EAAY9F,KAAKoT,GAGrBxT,EAAAb,UAAMsL,UAASjM,KAAAK,OAEnBsqB,GA9CuCvmB,EAAAC,ajImxNjC,SAASxE,EAAQD,EAASH,GAE/B,YkIv1ND,IAAAqE,GAAArE,EAAyB,GACzBorB,EAAAprB,EAA8C,IAE9CqE,GAAAC,WAAWpD,UAAUmqB,WAAaD,EAAAC,YlI41N5B,SAASjrB,EAAQD,EAASH,GAE/B,YmI9yND,SAAAqrB,GAA8BC,GAC5B,GAAIziB,GAAiBsD,UAAUtD,OAE3B0H,EAAuBzJ,EAAAU,KACvBmK,GAAAC,YAAYzF,UAAUA,UAAUtD,OAAS,MAC3C0H,EAAYpE,UAAUA,UAAUtD,OAAS,GACzCA,IAGF,IAAI0iB,GAAiC,IACjC1iB,IAAU,IACZ0iB,EAAyBpf,UAAU,GAGrC,IAAIqf,GAAwBrW,OAAOC,iBAKnC,OAJIvM,IAAU,IACZ2iB,EAAgBrf,UAAU,IAGrBvL,KAAK2H,KAAK,GAAIkjB,GAAsBH,EAAgBC,EAAwBC,EAAejb,IAkIpG,QAAAmb,GAAoClpB,GAClC,GAAM6G,GAAwC7G,EAAM6G,WAE9CsiB,EAAcnpB,EAAMkK,OACtBif,IACFtiB,EAAWuiB,aAAaD,GAGrBtiB,EAAWlB,iBACd3F,EAAMkK,QAAUrD,EAAWwiB,cAC3BrpB,EAAMkK,QAAQof,YAAoBlrB,KAAM8P,SAASlO,EAAOA,EAAM8oB,iBASlE,QAAAS,GAAmCvpB,GACzB,GAAA+oB,GAAA/oB,EAAA+oB,uBAAwBD,EAAA9oB,EAAA8oB,eAAgBjiB,EAAA7G,EAAA6G,WAAYkH,EAAA/N,EAAA+N,UACtD7D,EAAUrD,EAAWwiB,cACrBxM,EAAmCze,IACpCyI,GAAWlB,iBACdkB,EAAWY,IAAIyC,EAAQof,YAAcvb,EAAUG,SAAyBsb,EAAqBV,GAAkBjiB,aAAYqD,aAC3H2S,EAAO3O,SAASlO,EAAO+oB,IAI3B,QAAAS,GAAgC9b,GACtB,GAAA7G,GAAA6G,EAAA7G,WAAYqD,EAAAwD,EAAAxD,OACpBrD,GAAWuiB,aAAalf,GnI2nNzB,GAAI/L,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KmIr2NpF4D,EAAA3E,EAAyB,IAKzB8G,EAAA9G,EAAoB,IACpB2R,EAAA3R,EAA0B,GA6CVG,GAAAkrB,WAAUA,CA4B1B,IAAAI,GAAA,WACE,QAAAA,GAAoBH,EACAC,EACAC,EACAjb,GAHA3P,KAAA0qB,iBACA1qB,KAAA2qB,yBACA3qB,KAAA4qB,gBACA5qB,KAAA2P,YAQtB,MALEkb,GAAAvqB,UAAAX,KAAA,SAAK8I,EAA6BK,GAChC,MAAOA,GAAON,WAAW,GAAI6iB,GAC3B5iB,EAAYzI,KAAK0qB,eAAgB1qB,KAAK2qB,uBAAwB3qB,KAAK4qB,cAAe5qB,KAAK2P,aAG7Fkb,KAEAS,EAAA,mBAAAA,KACEtrB,KAAA2U,UAEF,MAAA2W,MAcAD,EAAA,SAAAlqB,GAIE,QAAAkqB,GAAYhkB,EACQqjB,EACAC,EACAC,EACAjb,GAClBxO,EAAAxB,KAAAK,KAAMqH,GAJYrH,KAAA0qB,iBACA1qB,KAAA2qB,yBACA3qB,KAAA4qB,gBACA5qB,KAAA2P,YAPZ3P,KAAAurB,WASN,IAAMzf,GAAU9L,KAAKirB,aAErB,IADAjrB,KAAKwrB,aAAyC,MAA1Bb,GAAkCA,EAAyB,EAC3E3qB,KAAKwrB,aAAc,CACrB,GAAMC,IAAsBhjB,WAAYzI,KAAM8L,UAAS4e,iBACvD1qB,MAAKqJ,IAAIyC,EAAQof,YAAcvb,EAAUG,SAASgb,EAA4BJ,EAAgBe,QACzF,CACL,GAAMC,IAAejjB,WAAYzI,KAAM8L,WACjC6f,GAAoCjB,iBAAgBC,yBAAwBliB,WAAYzI,KAAM2P,YACpG3P,MAAKqJ,IAAIyC,EAAQof,YAAcvb,EAAUG,SAASsb,EAAqBV,EAAgBgB,IACvF1rB,KAAKqJ,IAAIsG,EAAUG,SAASqb,EAAwBR,EAAwBgB,KAqElF,MAxFsC5rB,GAAAsrB,EAAAlqB,GAuB1BkqB,EAAA/qB,UAAAoL,MAAV,SAAgB3D,GAId,IAAK,GADD6jB,GAFEL,EAAWvrB,KAAKurB,SAChBvjB,EAAMujB,EAAStjB,OAEZG,EAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAM0D,GAAUyf,EAASnjB,GACnBuM,EAAS7I,EAAQ6I,MACvBA,GAAOhM,KAAKZ,GACR4M,EAAO1M,QAAUjI,KAAK4qB,gBACxBgB,EAAsB9f,GAItB8f,GACF5rB,KAAK6rB,aAAaD,IAIZP,EAAA/qB,UAAAqL,OAAV,SAAiBtD,GACfrI,KAAKurB,SAAStjB,OAAS,EACvB9G,EAAAb,UAAMqL,OAAMhM,KAAAK,KAACqI,IAGLgjB,EAAA/qB,UAAAsL,UAAV,WAEE,IADA,GAAAkB,GAAA9M,KAAQurB,EAAAze,EAAAye,SAAUlkB,EAAAyF,EAAAzF,YACXkkB,EAAStjB,OAAS,GAAG,CAC1B,GAAM6D,GAAUyf,EAAS5a,OACzBtJ,GAAY9F,KAAKuK,EAAQ6I,QAE3BxT,EAAAb,UAAMsL,UAASjM,KAAAK,OAGPqrB,EAAA/qB,UAAAgM,aAAV,WACEtM,KAAKurB,SAAW,MAGRF,EAAA/qB,UAAAurB,aAAV,SAAuB/f,GACrB9L,KAAKgrB,aAAalf,EAClB,IAAMof,GAAcpf,EAAQof,WAI5B,IAHAA,EAAY3iB,cACZvI,KAAKyN,OAAOyd,GAERlrB,KAAKwrB,aAAc,CACrB1f,EAAU9L,KAAKirB,aACf,IAAMP,GAAiB1qB,KAAK0qB,eACtBe,GAAsBhjB,WAAYzI,KAAM8L,UAAS4e,iBACvD1qB,MAAKqJ,IAAIyC,EAAQof,YAAclrB,KAAK2P,UAAUG,SAASgb,EAA4BJ,EAAgBe,MAIvGJ,EAAA/qB,UAAA2qB,YAAA,WACE,GAAMnf,GAAsB,GAAIwf,EAEhC,OADAtrB,MAAKurB,SAAS5iB,KAAKmD,GACZA,GAGTuf,EAAA/qB,UAAA0qB,aAAA,SAAalf,GACX9L,KAAKqH,YAAY9F,KAAKuK,EAAQ6I,OAC9B,IAAM4W,GAAWvrB,KAAKurB,SAEhBO,EAAcP,EAAWA,EAAS3d,QAAQ9B,KAC5CggB,IAAe,GACjBP,EAAS1d,OAAO0d,EAAS3d,QAAQ9B,GAAU,IAGjDuf,GAxFsCtnB,EAAAC,anI47NhC,SAASxE,EAAQD,EAASH,GAE/B,YoI5iOD,IAAAqE,GAAArE,EAAyB,GACzB2sB,EAAA3sB,EAAkD,IAElDqE,GAAAC,WAAWpD,UAAU0rB,aAAeD,EAAAC,cpIijO9B,SAASxsB,EAAQD,EAASH,GAE/B,YqIxgOD,SAAA4sB,GAAmCC,EACAC,GACjC,MAAOlsB,MAAK2H,KAAK,GAAIwkB,GAA2BF,EAAUC,IrIugO3D,GAAInsB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KqIxjOpF0D,EAAAzE,EAA2B,IAE3B2S,EAAA3S,EAAgC,IAChC0S,EAAA1S,EAA8B,GAyCdG,GAAAysB,aAAYA,CAS5B,IAAAG,GAAA,WAEE,QAAAA,GAAoBF,EACAC,GADAlsB,KAAAisB,WACAjsB,KAAAksB,kBAMtB,MAHEC,GAAA7rB,UAAAX,KAAA,SAAK8I,EAA6BK,GAChC,MAAOA,GAAON,WAAW,GAAI4jB,GAAuB3jB,EAAYzI,KAAKisB,SAAUjsB,KAAKksB,mBAExFC,KAYAC,EAAA,SAAAjrB,GAGE,QAAAirB,GAAY/kB,EACQ4kB,EACAC,GAClB/qB,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAAisB,WACAjsB,KAAAksB,kBAJZlsB,KAAAurB,YAMNvrB,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAMisB,IAyFrC,MAhG2ClsB,GAAAqsB,EAAAjrB,GAU/BirB,EAAA9rB,UAAAoL,MAAV,SAAgB3D,GAGd,IAAK,GAFCwjB,GAAWvrB,KAAKurB,SAChBvjB,EAAMujB,EAAStjB,OACZG,EAAI,EAAGA,EAAIJ,EAAKI,IACvBmjB,EAASnjB,GAAGuM,OAAOhM,KAAKZ,IAIlBqkB,EAAA9rB,UAAAqL,OAAV,SAAiBtD,GAEf,IADA,GAAMkjB,GAAWvrB,KAAKurB,SACfA,EAAStjB,OAAS,GAAG,CAC1B,GAAM6D,GAAUyf,EAAS5a,OACzB7E,GAAQ5B,aAAa3B,cACrBuD,EAAQ6I,OAAS,KACjB7I,EAAQ5B,aAAe,KAEzBlK,KAAKurB,SAAW,KAChBpqB,EAAAb,UAAMqL,OAAMhM,KAAAK,KAACqI,IAGL+jB,EAAA9rB,UAAAsL,UAAV,WAEE,IADA,GAAM2f,GAAWvrB,KAAKurB,SACfA,EAAStjB,OAAS,GAAG,CAC1B,GAAM6D,GAAUyf,EAAS5a,OACzB3Q,MAAKqH,YAAY9F,KAAKuK,EAAQ6I,QAC9B7I,EAAQ5B,aAAa3B,cACrBuD,EAAQ6I,OAAS,KACjB7I,EAAQ5B,aAAe,KAEzBlK,KAAKurB,SAAW,KAChBpqB,EAAAb,UAAMsL,UAASjM,KAAAK,OAGjBosB,EAAA9rB,UAAAkS,WAAA,SAAWC,EAAiBC,EACjBC,EAAoBC,EACpBC,GACTJ,EAAazS,KAAKqsB,YAAY5Z,GAAczS,KAAKssB,WAAW5Z,IAG9D0Z,EAAA9rB,UAAAgS,eAAA,SAAeO,GACb7S,KAAKqsB,YAAmBxZ,EAAU/G,UAG5BsgB,EAAA9rB,UAAAgsB,WAAR,SAAmBvkB,GACjB,IACE,GAAMmkB,GAAkBlsB,KAAKksB,gBACvBnC,EAAkBmC,EAAgBvsB,KAAKK,KAAM+H,EAC/CgiB,IACF/pB,KAAKusB,aAAaxC,GAEpB,MAAO1hB,GACPrI,KAAK2L,OAAOtD,KAIR+jB,EAAA9rB,UAAA+rB,YAAR,SAAoBvgB,GAClB,GAAMyf,GAAWvrB,KAAKurB,QAEtB,IAAIA,GAAYzf,EAAS,CACf,GAAA6I,GAAA7I,EAAA6I,OAAQzK,EAAA4B,EAAA5B,YAChBlK,MAAKqH,YAAY9F,KAAKoT,GACtB4W,EAAS1d,OAAO0d,EAAS3d,QAAQ9B,GAAU,GAC3C9L,KAAKyN,OAAOvD,GACZA,EAAa3B,gBAIT6jB,EAAA9rB,UAAAisB,aAAR,SAAqBxC,GACnB,GAAMwB,GAAWvrB,KAAKurB,SAEhB5W,KACAzK,EAAe,GAAIrG,GAAAC,aACnBgI,GAAY6I,SAAQzK,eAC1BqhB,GAAS5iB,KAAKmD,EAEd,IAAMkK,GAAoBjE,EAAAM,kBAAkBrS,KAAM+pB,EAAsBje,IAEnEkK,GAAqBA,EAAkBzO,eAC1CvH,KAAKqsB,YAAYvgB,IAEVkK,EAAmBlK,QAAUA,EAEpC9L,KAAKqJ,IAAI2M,GACT9L,EAAab,IAAI2M,KAGvBoW,GAhG2Cta,EAAAkB,kBrIqoOrC,SAASxT,EAAQD,EAASH,GAE/B,YsIntOD,IAAAqE,GAAArE,EAAyB,GACzBotB,EAAAptB,EAA8C,IAE9CqE,GAAAC,WAAWpD,UAAUmsB,WAAaD,EAAAC,YtIwtO5B,SAASjtB,EAAQD,EAASH,GAE/B,YuIlrOD,SAAAqtB,GAA8BP,GAC5B,MAAOlsB,MAAK2H,KAAK,GAAI+kB,GAAsBR,IvIkrO5C,GAAInsB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuI/tOpF0D,EAAAzE,EAA2B,IAC3BsN,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAE1B0S,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAmChBG,GAAAktB,WAAUA,CAQ1B,IAAAC,GAAA,WAEE,QAAAA,GAAoBR,GAAAlsB,KAAAksB,kBAMtB,MAHEQ,GAAApsB,UAAAX,KAAA,SAAK8I,EAA6BK,GAChC,MAAOA,GAAON,WAAW,GAAImkB,GAAqBlkB,EAAYzI,KAAKksB,mBAEvEQ,KAOAC,EAAA,SAAAxrB,GAKE,QAAAwrB,GAAYtlB,EAAsC6kB,GAChD/qB,EAAAxB,KAAAK,KAAMqH,GAD0CrH,KAAAksB,kBAH1ClsB,KAAA4sB,aAAuB,EAK7B5sB,KAAKssB,aA+DT,MAtEsCvsB,GAAA4sB,EAAAxrB,GAU1BwrB,EAAArsB,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAK2U,OAAOhM,KAAKZ,IAGT4kB,EAAArsB,UAAAsL,UAAV,WACE,GAAM+I,GAAS3U,KAAK2U,MAChBA,IACF3U,KAAKqH,YAAY9F,KAAKoT,GAExBxT,EAAAb,UAAMsL,UAASjM,KAAAK,OAGP2sB,EAAArsB,UAAAgM,aAAV,WACEtM,KAAK2U,OAAS,KACd3U,KAAK4sB,aAAc,GAGrBD,EAAArsB,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAKssB,cAGPK,EAAArsB,UAAAgS,eAAA,WACMtS,KAAK4sB,YACP5sB,KAAKsI,WAELtI,KAAKssB,cAITK,EAAArsB,UAAAgsB,WAAA,WAEQ,GAAAO,GAAA7sB,KAAA6sB,mBAEFA,KACF7sB,KAAKyN,OAAOof,GACZA,EAAoBtkB,cAGtB,IAAMoM,GAAS3U,KAAK2U,MAChB3U,MAAK2U,QACP3U,KAAKqH,YAAY9F,KAAKoT,GAGxB3U,KAAK2U,SAEL,IAAMoV,GAAkBrd,EAAAO,SAASjN,KAAKksB,kBAElCnC,KAAoBpd,EAAAO,YACtBlN,KAAKmC,MAAMwK,EAAAO,YAAYC,IAEvB0f,EAAsB,GAAIhpB,GAAAC,aAC1B9D,KAAK6sB,oBAAsBA,EAC3B7sB,KAAKqJ,IAAIwjB,GACT7sB,KAAK4sB,aAAc,EACnBC,EAAoBxjB,IAAI0I,EAAAM,kBAAkBrS,KAAM+pB,IAChD/pB,KAAK4sB,aAAc,IAGzBD,GAtEsC7a,EAAAkB,kBvIwxOhC,SAASxT,EAAQD,EAASH,GAE/B,YwI51OD,IAAAqE,GAAArE,EAAyB,GACzB0tB,EAAA1tB,EAAoC,IAEpCqE,GAAAC,WAAWpD,UAAUysB,MAAQD,EAAAC,OxIi2OvB,SAASvtB,EAAQD,EAASH,GAE/B,YyIz1OD,SAAA2tB,GAAyB9D,EACAC,EACAvZ,GAFA,SAAAsZ,MAAqB1U,OAAOC,mBAC5B,SAAA0U,MAAqB3U,OAAOC,kBAEnD,IAAI3M,GAGAmlB,EAFAlkB,EAAS9I,KACTitB,EAAO,EAGLC,EAAa,WAEjB,MADArlB,GAAU,GAAI1D,GAAAC,cAAiB6kB,EAAYC,EAAYvZ,GAIzD,OAAO,IAAIlM,GAAAC,WAAc,SAAC+Q,GACnB5M,IACHA,EAAUqlB,IACVF,EAAWlkB,EAAO5G,UAChB,SAAC6F,GAAa,MAAAF,GAAQtG,KAAKwG,IAC3B,SAACM,GACC,GAAI8kB,GAAItlB,CACRA,GAAU,KACVslB,EAAEhrB,MAAMkG,IAEV,WAAM,MAAAR,GAAQS,cAIlB2kB,IAEKplB,IACHA,EAAUqlB,IAEZ,IAAIra,GAAWhL,EAAQ3F,UAAUuS,EAEjC,OAAO,YACLwY,IACIpa,GACFA,EAAStK,cAEE,IAAT0kB,GACFD,EAASzkB,iBAtDjB,GAAA9E,GAAArE,EAAyB,GAEzB+E,EAAA/E,EAA4B,IAYZG,GAAAwtB,MAAKA,GzI64Of,SAASvtB,EAAQD,EAASH,GAE/B,Y0I55OD,IAAAqE,GAAArE,EAAyB,GACzBguB,EAAAhuB,EAAqC,IAErCqE,GAAAC,WAAWpD,UAAXmD,SAA6B2pB,EAAAC,Q1Ii6OvB,SAAS7tB,EAAQD,EAASH,GAE/B,Y2Iz5OD,SAAAiuB,GAA6B5d,GAC3B,GAAM7H,GAAW,GAAI0lB,GAAc7d,GAC7B8d,EAASvtB,KAAK2H,KAAKC,EACzB,OAAQA,GAAS2lB,OAASA,E3Iu5O3B,GAAIxtB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K2I16OpF4D,EAAA3E,EAAyB,GAaTG,GAAA8tB,OAAMA,CAWtB,IAAAC,GAAA,WAGE,QAAAA,GAAoB7d,GAAAzP,KAAAyP,WAMtB,MAHE6d,GAAAhtB,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIglB,GAAgB/kB,EAAYzI,KAAKyP,SAAUzP,KAAKutB,UAEjFD,KAOAE,EAAA,SAAArsB,GAEE,QAAAqsB,GAAYnmB,EACQoI,EACA8d,GAClBpsB,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAAyP,WACAzP,KAAAutB,SA0BtB,MA9BiCxtB,GAAAytB,EAAArsB,GAU/BqsB,EAAAltB,UAAA6B,MAAA,SAAMkG,GACJ,IAAKrI,KAAKwH,UAAW,CACnB,GAAIqH,GAAM,MAEV,KACEA,EAAS7O,KAAKyP,SAASpH,EAAKrI,KAAKutB,QACjC,MAAOllB,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAIzBrI,KAAKytB,UAAU5e,KAIX2e,EAAAltB,UAAAmtB,UAAR,SAAkB5e,GAChB7O,KAAKuI,cACCvI,KAAKqH,YAAaoG,OAAOzN,MAC/B6O,EAAO3M,UAAUlC,KAAKqH,cAE1BmmB,GA9BiCzpB,EAAAC,a3Io8O3B,SAASxE,EAAQD,EAASH,GAE/B,Y4I9+OD,IAAAqE,GAAArE,EAAyB,GACzBsuB,EAAAtuB,EAA8C,IAE9CqE,GAAAC,WAAWpD,UAAUqtB,WAAaD,EAAAC,Y5Im/O5B,SAASnuB,EAAQD,EAASH,GAE/B,Y6I98OD,SAAAuuB,GAA8B7c,GAC5B,MAAO9Q,MAAK2H,KAAK,GAAIiJ,GAAAQ,sBAAsBN,IA5C7C,GAAAF,GAAAxR,EAAoC,GA2CpBG,GAAAouB,WAAUA,G7IggPpB,SAASnuB,EAAQD,EAASH,GAE/B,Y8I5iPD,IAAAqE,GAAArE,EAAyB,GACzBwR,EAAAxR,EAAoD,GAEpDqE,GAAAC,WAAWpD,UAAU0C,cAAgB4N,EAAA5N,e9IijP/B,SAASxD,EAAQD,EAASH,GAE/B,Y+ItjPD,IAAAqE,GAAArE,EAAyB,GACzB6U,EAAA7U,EAAsC,GAEtCqE,GAAAC,WAAWpD,UAAUyC,OAASkR,EAAAlR,Q/I2jPxB,SAASvD,EAAQD,EAASH,GAE/B,YgJhkPD,IAAAqE,GAAArE,EAAyB,GACzBwuB,EAAAxuB,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUutB,UAAYD,EAAAC,WhJqkP3B,SAASruB,EAAQD,EAASH,GAE/B,YiJ9hPD,SAAAyuB,KACE,MAAO7tB,MAAK2H,KAAK,GAAIwM,GAAAC,iBAAoB,IA7C3C,GAAAD,GAAA/U,EAA+B,GA4CfG,GAAAsuB,UAASA,GjJklPnB,SAASruB,EAAQD,EAASH,GAE/B,YkJhoPD,IAAAqE,GAAArE,EAAyB,GACzB0uB,EAAA1uB,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUytB,UAAYD,EAAAC,WlJqoP3B,SAASvuB,EAAQD,EAASH,GAE/B,YmJhlPD,SAAA2uB,GAAmCjd,EACA6E,GACjC,MAAO3V,MAAK2H,KAAK,GAAIqmB,GAAAC,iBAAiBnd,EAAS6E,EAAgB,IA7DjE,GAAAqY,GAAA5uB,EAA+B,IA2DfG,GAAAwuB,UAASA,GnJkpPnB,SAASvuB,EAAQD,EAASH,GAE/B,YoJtpPD,SAAA8uB,GAAkCpd,EACA6E,EACArB,GAKhC,MALgC,UAAAA,MAAqBC,OAAOC,mBAC9B,gBAAnBmB,KACTrB,EAAqBqB,EACrBA,EAAiB,MAEZ3V,KAAK2H,KAAK,GAAIsmB,GAAiBnd,EAAc6E,EAAgBrB,IpJgpPrE,GAAIvU,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KoJ/sPpF4R,EAAA3S,EAAgC,IAChC0S,EAAA1S,EAA8B,GAoDdG,GAAA2uB,SAAQA,CAiBxB,IAAAD,GAAA,WACE,QAAAA,GAAoBnd,EACA6E,EACArB,GAAR,SAAAA,MAA6BC,OAAOC,mBAF5BxU,KAAA8Q,UACA9Q,KAAA2V,iBACA3V,KAAAsU,aAQtB,MALE2Z,GAAA3tB,UAAAX,KAAA,SAAK8U,EAAyB3L,GAC5B,MAAOA,GAAON,WAAW,GAAI2lB,GAC3B1Z,EAAUzU,KAAK8Q,QAAS9Q,KAAK2V,eAAgB3V,KAAKsU,cAGxD2Z,IAXa1uB,GAAA0uB,iBAAgBA,CAkB7B,IAAAE,GAAA,SAAAhtB,GAME,QAAAgtB,GAAY9mB,EACQyJ,EACA6E,EACArB,GAAR,SAAAA,MAA6BC,OAAOC,mBAC9CrT,EAAAxB,KAAAK,KAAMqH,GAHYrH,KAAA8Q,UACA9Q,KAAA2V,iBACA3V,KAAAsU,aARZtU,KAAAsQ,cAAwB,EACxBtQ,KAAA2U,UACA3U,KAAAkS,OAAiB,EACflS,KAAAqN,MAAgB,EAwE5B,MA5EiDtN,GAAAouB,EAAAhtB,GAarCgtB,EAAA7tB,UAAAoL,MAAV,SAAgB3D,GACV/H,KAAKkS,OAASlS,KAAKsU,WACrBtU,KAAKouB,SAASrmB,GAEd/H,KAAK2U,OAAOhM,KAAKZ,IAIXomB,EAAA7tB,UAAA8tB,SAAV,SAAmBrmB,GACjB,GAAI8G,GACExB,EAAQrN,KAAKqN,OACnB,KACEwB,EAAS7O,KAAK8Q,QAAQ/I,EAAOsF,GAC7B,MAAOhF,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAKkS,SACLlS,KAAKytB,UAAU5e,EAAQ9G,EAAOsF,IAGxB8gB,EAAA7tB,UAAAmtB,UAAR,SAAkB/W,EAAyB3O,EAAUsF,GACnDrN,KAAKqJ,IAAI0I,EAAAM,kBAAwBrS,KAAM0W,EAAK3O,EAAOsF,KAG3C8gB,EAAA7tB,UAAAsL,UAAV,WACE5L,KAAKsQ,cAAe,EACA,IAAhBtQ,KAAKkS,QAAuC,IAAvBlS,KAAK2U,OAAO1M,QACnCjI,KAAKqH,YAAYiB,YAIrB6lB,EAAA7tB,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACL7S,KAAK2V,eACP3V,KAAKquB,sBAAsB5b,EAAYC,EAAYC,EAAYC,GAE/D5S,KAAKqH,YAAY9F,KAAKmR,IAIlByb,EAAA7tB,UAAA+tB,sBAAR,SAA8B5b,EAAeC,EAAeC,EAAoBC,GAC9E,GAAI/D,EACJ,KACEA,EAAS7O,KAAK2V,eAAelD,EAAYC,EAAYC,EAAYC,GACjE,MAAOvK,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAKqH,YAAY9F,KAAKsN,IAGxBsf,EAAA7tB,UAAAgS,eAAA,SAAeO,GACb,GAAM8B,GAAS3U,KAAK2U,MACpB3U,MAAKyN,OAAOoF,GACZ7S,KAAKkS,SACDyC,EAAO1M,OAAS,EAClBjI,KAAK0L,MAAMiJ,EAAOhE,SACO,IAAhB3Q,KAAKkS,QAAgBlS,KAAKsQ,cACnCtQ,KAAKqH,YAAYiB,YAGvB6lB,GA5EiDrc,EAAAkB,gBAApCzT,GAAA4uB,mBAAkBA,GpJuxPzB,SAAS3uB,EAAQD,EAASH,GAE/B,YqJp3PD,IAAAqE,GAAArE,EAAyB,GACzBkvB,EAAAlvB,EAAgD,IAEhDqE,GAAAC,WAAWpD,UAAUiuB,YAAcD,EAAAC,arJy3P7B,SAAS/uB,EAAQD,EAASH,GAE/B,YsJ10PD,SAAAmvB,GAAqCC,EACA7Y,GACnC,MAAO3V,MAAK2H,KAAK,GAAI8mB,GAAAC,mBAAmBF,EAAiB7Y,EAAgB,IAtD3E,GAAA8Y,GAAArvB,EAAiC,IAoDjBG,GAAAgvB,YAAWA,GtJs4PrB,SAAS/uB,EAAQD,EAASH,GAE/B,YuJz4PD,SAAAuvB,GAAoCH,EACA7Y,EACArB,GAKlC,MALkC,UAAAA,MAAqBC,OAAOC,mBAChC,gBAAnBmB,KACTrB,EAAqBqB,EACrBA,EAAiB,MAEZ3V,KAAK2H,KAAK,GAAI+mB,GAAmBF,EAAsB7Y,EAAgBrB,IvJm4P/E,GAAIvU,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuJ57PpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GA6ChBG,GAAAovB,WAAUA,CAmB1B,IAAAD,GAAA,WACE,QAAAA,GAAoBhY,EACAf,EACArB,GAAR,SAAAA,MAA6BC,OAAOC,mBAF5BxU,KAAA0W,MACA1W,KAAA2V,iBACA3V,KAAAsU,aAMtB,MAHEoa,GAAApuB,UAAAX,KAAA,SAAK8U,EAAyB3L,GAC5B,MAAOA,GAAON,WAAW,GAAIomB,GAAqBna,EAAUzU,KAAK0W,IAAK1W,KAAK2V,eAAgB3V,KAAKsU,cAEpGoa,IATanvB,GAAAmvB,mBAAkBA,CAgB/B,IAAAE,GAAA,SAAAztB,GAME,QAAAytB,GAAYvnB,EACQqP,EACAf,EACArB,GAAR,SAAAA,MAA6BC,OAAOC,mBAC9CrT,EAAAxB,KAAAK,KAAMqH,GAHYrH,KAAA0W,MACA1W,KAAA2V,iBACA3V,KAAAsU,aARZtU,KAAAsQ,cAAwB,EACxBtQ,KAAA2U,UACA3U,KAAAkS,OAAiB,EACflS,KAAAqN,MAAgB,EA6E5B,MAjFmDtN,GAAA6uB,EAAAztB,GAavCytB,EAAAtuB,UAAAoL,MAAV,SAAgB3D,GACd,GAAI/H,KAAKkS,OAASlS,KAAKsU,WAAY,CACjC,GAAMqB,GAAiB3V,KAAK2V,eACtBtI,EAAQrN,KAAKqN,QACbqJ,EAAM1W,KAAK0W,IACXrP,EAAcrH,KAAKqH,WAEzBrH,MAAKkS,SACLlS,KAAKytB,UAAU/W,EAAKrP,EAAasO,EAAgB5N,EAAOsF,OAExDrN,MAAK2U,OAAOhM,KAAKZ,IAIb6mB,EAAAtuB,UAAAmtB,UAAR,SAAkB/W,EACArP,EACAsO,EACA5N,EACAsF,GAChBrN,KAAKqJ,IAAI0I,EAAAM,kBAAwBrS,KAAM0W,EAAK3O,EAAOsF,KAG3CuhB,EAAAtuB,UAAAsL,UAAV,WACE5L,KAAKsQ,cAAe,EACA,IAAhBtQ,KAAKkS,QAAuC,IAAvBlS,KAAK2U,OAAO1M,QACnCjI,KAAKqH,YAAYiB,YAIrBsmB,EAAAtuB,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,GAAA/F,GAAA9M,KAAQ2V,EAAA7I,EAAA6I,eAAgBtO,EAAAyF,EAAAzF,WACpBsO,GACF3V,KAAK6uB,gBAAgBpc,EAAYC,EAAYC,EAAYC,GAEzDvL,EAAY9F,KAAKmR,IAIbkc,EAAAtuB,UAAAuuB,gBAAR,SAAwBpc,EAAeC,EACfC,EAAoBC,GAC1C,GACI/D,GADJ/B,EAAA9M,KAAQ2V,EAAA7I,EAAA6I,eAAgBtO,EAAAyF,EAAAzF,WAExB,KACEwH,EAAS8G,EAAelD,EAAYC,EAAYC,EAAYC,GAC5D,MAAOvK,GAEP,WADAhB,GAAYlF,MAAMkG,GAIpBhB,EAAY9F,KAAKsN,IAGnB+f,EAAAtuB,UAAA2S,YAAA,SAAY5K,GACVrI,KAAKqH,YAAYlF,MAAMkG,IAGzBumB,EAAAtuB,UAAAgS,eAAA,SAAeO,GACb,GAAM8B,GAAS3U,KAAK2U,MACpB3U,MAAKyN,OAAOoF,GACZ7S,KAAKkS,SACDyC,EAAO1M,OAAS,EAClBjI,KAAK0L,MAAMiJ,EAAOhE,SACO,IAAhB3Q,KAAKkS,QAAgBlS,KAAKsQ,cACnCtQ,KAAKqH,YAAYiB,YAGvBsmB,GAjFmD9c,EAAAkB,gBAAtCzT,GAAAqvB,qBAAoBA,GvJmgQ3B,SAASpvB,EAAQD,EAASH,GAE/B,YwJ3lQD,IAAAqE,GAAArE,EAAyB,GACzB0vB,EAAA1vB,EAAoC,IAEpCqE,GAAAC,WAAWpD,UAAUqR,MAAQmd,EAAAnd,OxJgmQvB,SAASnS,EAAQD,EAASH,GAE/B,YyJpjQD,SAAAuS,GAAyBod,GACvB,MAAO/uB,MAAK2H,KAAK,GAAIqnB,GAAcD,EAAW/uB,OzJojQ/C,GAAID,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KyJvmQpF4D,EAAA3E,EAAyB,GA+CTG,GAAAoS,MAAKA,CAQrB,IAAAqd,GAAA,WACE,QAAAA,GAAoBD,EACAjmB,GADA9I,KAAA+uB,YACA/uB,KAAA8I,SAMtB,MAHEkmB,GAAA1uB,UAAAX,KAAA,SAAK8I,EAAgCK,GACnC,MAAOA,GAAON,WAAW,GAAIymB,GAAgBxmB,EAAYzI,KAAK+uB,UAAW/uB,KAAK8I,UAElFkmB,KAOAC,EAAA,SAAA9tB,GAIE,QAAA8tB,GAAY5nB,EACQ0nB,EACAjmB,GAClB3H,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA+uB,YACA/uB,KAAA8I,SALZ9I,KAAA2R,MAAgB,EAChB3R,KAAAqN,MAAgB,EAmC1B,MArCiCtN,GAAAkvB,EAAA9tB,GAUrB8tB,EAAA3uB,UAAAoL,MAAV,SAAgB3D,GACV/H,KAAK+uB,UACP/uB,KAAKkvB,cAAcnnB,GAEnB/H,KAAK2R,SAIDsd,EAAA3uB,UAAA4uB,cAAR,SAAsBnnB,GACpB,GAAI8G,EAEJ,KACEA,EAAS7O,KAAK+uB,UAAUhnB,EAAO/H,KAAKqN,QAASrN,KAAK8I,QAClD,MAAOT,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAIrBwG,GACF7O,KAAK2R,SAICsd,EAAA3uB,UAAAsL,UAAV,WACE5L,KAAKqH,YAAY9F,KAAKvB,KAAK2R,OAC3B3R,KAAKqH,YAAYiB,YAErB2mB,GArCiClrB,EAAAC,azJ4oQ3B,SAASxE,EAAQD,EAASH,GAE/B,Y0JttQD,IAAAqE,GAAArE,EAAyB,GACzB+vB,EAAA/vB,EAAoD,IAEpDqE,GAAAC,WAAWpD,UAAU8uB,cAAgBD,EAAAC,e1J2tQ/B,SAAS5vB,EAAQD,EAASH,GAE/B,Y2JzrQD,SAAAgwB,KACE,MAAOpvB,MAAK2H,KAAK,GAAI0nB,I3JyrQtB,GAAItvB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K2JnuQpF4D,EAAA3E,EAAyB,GAsCTG,GAAA6vB,cAAaA,CAQ7B,IAAAC,GAAA,mBAAAA,MAIA,MAHEA,GAAA/uB,UAAAX,KAAA,SAAK8I,EAA6BK,GAChC,MAAOA,GAAON,WAAW,GAAI8mB,GAAwB7mB,KAEzD4mB,KAOAC,EAAA,SAAAnuB,GACE,QAAAmuB,GAAYjoB,GACVlG,EAAAxB,KAAAK,KAAMqH,GAMV,MARmEtH,GAAAuvB,EAAAnuB,GAKvDmuB,EAAAhvB,UAAAoL,MAAV,SAAgB3D,GACdA,EAAM6Q,QAAQ5Y,KAAKqH,cAEvBioB,GARmEvrB,EAAAC,a3J+uQ7D,SAASxE,EAAQD,EAASH,GAE/B,Y4J3yQD,IAAAqE,GAAArE,EAAyB,GACzBmwB,EAAAnwB,EAA0C,IAE1CqE,GAAAC,WAAWpD,UAAUkvB,SAAWD,EAAAC,U5JgzQ1B,SAAShwB,EAAQD,EAASH,GAE/B,Y6JnwQD,SAAAowB,GAA4BC,GAC1B,MAAOzvB,MAAK2H,KAAK,GAAI+nB,GAAiBD,I7JmwQvC,GAAI1vB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K6JrzQpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GA4ChBG,GAAAiwB,SAAQA,CAQxB,IAAAE,GAAA,WACE,QAAAA,GAAoBD,GAAAzvB,KAAAyvB,mBAMtB,MAHEC,GAAApvB,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAImnB,GAAmBlnB,EAAYzI,KAAKyvB,oBAErEC,KAOAC,EAAA,SAAAxuB,GAKE,QAAAwuB,GAAYtoB,EACQooB,GAClBtuB,EAAAxB,KAAAK,KAAMqH,GADYrH,KAAAyvB,mBAJZzvB,KAAAoZ,UAAoB,EACpBpZ,KAAA4vB,qBAAqC,KA+D/C,MAlEuC7vB,GAAA4vB,EAAAxuB,GAU3BwuB,EAAArvB,UAAAoL,MAAV,SAAgB3D,GACd,IACE,GAAM8G,GAAS7O,KAAKyvB,iBAAiB9vB,KAAKK,KAAM+H,EAE5C8G,IACF7O,KAAKouB,SAASrmB,EAAO8G,GAEvB,MAAOxG,GACPrI,KAAKqH,YAAYlF,MAAMkG,KAIjBsnB,EAAArvB,UAAAsL,UAAV,WACE5L,KAAK6vB,YACL7vB,KAAKqH,YAAYiB,YAGXqnB,EAAArvB,UAAA8tB,SAAR,SAAiBrmB,EAAU+nB,GACzB,GAAI5lB,GAAelK,KAAK4vB,oBACxB5vB,MAAK+H,MAAQA,EACb/H,KAAKoZ,UAAW,EACZlP,IACFA,EAAa3B,cACbvI,KAAKyN,OAAOvD,IAGdA,EAAe6H,EAAAM,kBAAkBrS,KAAM8vB,GAClC5lB,EAAa3C,gBAChBvH,KAAKqJ,IAAIrJ,KAAK4vB,qBAAuB1lB,IAIzCylB,EAAArvB,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAK6vB,aAGPF,EAAArvB,UAAAgS,eAAA,WACEtS,KAAK6vB,aAGPF,EAAArvB,UAAAuvB,UAAA,WACE,GAAI7vB,KAAKoZ,SAAU,CACjB,GAAMrR,GAAQ/H,KAAK+H,MACbmC,EAAelK,KAAK4vB,oBACtB1lB,KACFlK,KAAK4vB,qBAAuB,KAC5B1lB,EAAa3B,cACbvI,KAAKyN,OAAOvD,IAEdlK,KAAK+H,MAAQ,KACb/H,KAAKoZ,UAAW,EAChBjY,EAAAb,UAAMoL,MAAK/L,KAAAK,KAAC+H,KAGlB4nB,GAlEuC7d,EAAAkB,kB7J+2QjC,SAASxT,EAAQD,EAASH,GAE/B,Y8Jz7QD,IAAAqE,GAAArE,EAAyB,GACzB2wB,EAAA3wB,EAAkD,IAElDqE,GAAAC,WAAWpD,UAAU0vB,aAAeD,EAAAC,c9J87Q9B,SAASxwB,EAAQD,EAASH,GAE/B,Y+J/4QD,SAAA4wB,GAAgCtO,EAAiB/R,GAC/C,MAD+C,UAAAA,MAAAzJ,EAAAU,OACxC5G,KAAK2H,KAAK,GAAIsoB,GAAqBvO,EAAS/R,IAiErD,QAAAN,GAAsB5G,GACpBA,EAAWynB,gB/J60QZ,GAAInwB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K+Jt8QpF4D,EAAA3E,EAAyB,IAGzB8G,EAAA9G,EAAoB,GAgDJG,GAAAywB,aAAYA,CAQ5B,IAAAC,GAAA,WACE,QAAAA,GAAoBvO,EAAyB/R,GAAzB3P,KAAA0hB,UAAyB1hB,KAAA2P,YAM/C,MAHEsgB,GAAA3vB,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI2nB,GAAuB1nB,EAAYzI,KAAK0hB,QAAS1hB,KAAK2P,aAEvFsgB,KAOAE,EAAA,SAAAhvB,GAKE,QAAAgvB,GAAY9oB,EACQqa,EACA/R,GAClBxO,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA0hB,UACA1hB,KAAA2P,YANZ3P,KAAAowB,sBAAsC,KACtCpwB,KAAAqwB,UAAe,KACfrwB,KAAAoZ,UAAoB,EAuC9B,MA1CwCrZ,GAAAowB,EAAAhvB,GAW5BgvB,EAAA7vB,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAKswB,gBACLtwB,KAAKqwB,UAAYtoB,EACjB/H,KAAKoZ,UAAW,EAChBpZ,KAAKqJ,IAAIrJ,KAAKowB,sBAAwBpwB,KAAK2P,UAAUG,SAAST,EAAcrP,KAAK0hB,QAAS1hB,QAGlFmwB,EAAA7vB,UAAAsL,UAAV,WACE5L,KAAKkwB,gBACLlwB,KAAKqH,YAAYiB,YAGnB6nB,EAAA7vB,UAAA4vB,cAAA,WACElwB,KAAKswB,gBAEDtwB,KAAKoZ,WACPpZ,KAAKqH,YAAY9F,KAAKvB,KAAKqwB,WAC3BrwB,KAAKqwB,UAAY,KACjBrwB,KAAKoZ,UAAW,IAIZ+W,EAAA7vB,UAAAgwB,cAAR,WACE,GAAMF,GAAwBpwB,KAAKowB,qBAEL,QAA1BA,IACFpwB,KAAKyN,OAAO2iB,GACZA,EAAsB7nB,cACtBvI,KAAKowB,sBAAwB,OAGnCD,GA1CwCpsB,EAAAC,a/Jg/QlC,SAASxE,EAAQD,EAASH,GAE/B,YgK5jRD,IAAAqE,GAAArE,EAAyB,GACzBmxB,EAAAnxB,EAAsD,IAEtDqE,GAAAC,WAAWpD,UAAUkwB,eAAiBD,EAAAC,gBhKikRhC,SAAShxB,EAAQD,EAASH,GAE/B,YiKriRD,SAAAoxB,GAAqCC,GACnC,MADmC,UAAAA,MAAA,MAC5BzwB,KAAK2H,KAAK,GAAI+oB,GAAuBD,IjKqiR7C,GAAI1wB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KiKzkRpF4D,EAAA3E,EAAyB,GAgCTG,GAAAixB,eAAcA,CAS9B,IAAAE,GAAA,WAEE,QAAAA,GAAoBD,GAAAzwB,KAAAywB,eAMtB,MAHEC,GAAApwB,UAAAX,KAAA,SAAK8I,EAA+BK,GAClC,MAAOA,GAAON,WAAW,GAAImoB,GAAyBloB,EAAYzI,KAAKywB,gBAE3EC,KAOAC,EAAA,SAAAxvB,GAGE,QAAAwvB,GAAYtpB,EAAwCopB,GAClDtvB,EAAAxB,KAAAK,KAAMqH,GAD4CrH,KAAAywB,eAF5CzwB,KAAA4wB,SAAmB,EAiB7B,MAlB6C7wB,GAAA4wB,EAAAxvB,GAOjCwvB,EAAArwB,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAK4wB,SAAU,EACf5wB,KAAKqH,YAAY9F,KAAKwG,IAGd4oB,EAAArwB,UAAAsL,UAAV,WACM5L,KAAK4wB,SACP5wB,KAAKqH,YAAY9F,KAAKvB,KAAKywB,cAE7BzwB,KAAKqH,YAAYiB,YAErBqoB,GAlB6C5sB,EAAAC,ajK4lRvC,SAASxE,EAAQD,EAASH,GAE/B,YkKvpRD,IAAAqE,GAAArE,EAAyB,GACzByxB,EAAAzxB,EAAoC,IAEpCqE,GAAAC,WAAWpD,UAAUmY,MAAQoY,EAAApY,OlK4pRvB,SAASjZ,EAAQD,EAASH,GAE/B,YmKnnRD,SAAAqZ,GAAyBA,EACA9I,GAAA,SAAAA,MAAAzJ,EAAAU,MACvB,IAAMkqB,GAAgBrP,EAAAE,OAAOlJ,GACvBsY,EAAWD,GAAkBrY,EAAQ9I,EAAU4O,MAAS3G,KAAKE,IAAYW,EAC/E,OAAOzY,MAAK2H,KAAK,GAAIqpB,GAAcD,EAAUphB,InKgnR9C,GAAI5P,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KmKtqRpF+F,EAAA9G,EAAoB,IACpBqiB,EAAAriB,EAAqB,KAGrB2E,EAAA3E,EAAyB,IACzBuF,EAAAvF,EAA2B,GA0CXG,GAAAkZ,MAAKA,CAWrB,IAAAuY,GAAA,WACE,QAAAA,GAAoBvY,EACA9I,GADA3P,KAAAyY,QACAzY,KAAA2P,YAMtB,MAHEqhB,GAAA1wB,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIyoB,GAAgBxoB,EAAYzI,KAAKyY,MAAOzY,KAAK2P,aAE9EqhB,KAOAC,EAAA,SAAA9vB,GAuBE,QAAA8vB,GAAY5pB,EACQoR,EACA9I,GAClBxO,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAAyY,QACAzY,KAAA2P,YAxBZ3P,KAAA0G,SACA1G,KAAAkS,QAAkB,EAClBlS,KAAAkxB,SAAmB,EA4D7B,MA/DiCnxB,GAAAkxB,EAAA9vB,GAKhB8vB,EAAAlhB,SAAf,SAAwBnO,GAMtB,IALA,GAAMkH,GAASlH,EAAMkH,OACfpC,EAAQoC,EAAOpC,MACfiJ,EAAY/N,EAAM+N,UAClBtI,EAAczF,EAAMyF,YAEnBX,EAAMuB,OAAS,GAAMvB,EAAM,GAAGijB,KAAOha,EAAU4O,OAAU,GAC9D7X,EAAMiK,QAAQgI,aAAaC,QAAQvR,EAGrC,IAAIX,EAAMuB,OAAS,EAAG,CACpB,GAAM4oB,GAAQjZ,KAAKgS,IAAI,EAAGljB,EAAM,GAAGijB,KAAOha,EAAU4O,MAC7Cve,MAAM8P,SAASlO,EAAOivB,OAE7B/nB,GAAOoJ,QAAS,GAUZ+e,EAAA3wB,UAAA0d,UAAR,SAAkBrO,GAChB3P,KAAKkS,QAAS,EACdlS,KAAKqJ,IAAIsG,EAAUG,SAASmhB,EAAgBlhB,SAAU/P,KAAKyY,OACzD3P,OAAQ9I,KAAMqH,YAAarH,KAAKqH,YAAasI,UAAWA,MAIpDshB,EAAA3wB,UAAA6wB,qBAAR,SAA6BxY,GAC3B,GAAI3Y,KAAKkxB,WAAY,EAArB,CAIA,GAAMvhB,GAAY3P,KAAK2P,UACjB7M,EAAU,GAAIsuB,GAAazhB,EAAU4O,MAAQve,KAAKyY,MAAOE,EAC/D3Y,MAAK0G,MAAMiC,KAAK7F,GAEZ9C,KAAKkS,UAAW,GAClBlS,KAAKge,UAAUrO,KAITshB,EAAA3wB,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAKmxB,qBAAqBxsB,EAAAC,aAAamU,WAAWhR,KAG1CkpB,EAAA3wB,UAAAqL,OAAV,SAAiBtD,GACfrI,KAAKkxB,SAAU,EACflxB,KAAK0G,SACL1G,KAAKqH,YAAYlF,MAAMkG,IAGf4oB,EAAA3wB,UAAAsL,UAAV,WACE5L,KAAKmxB,qBAAqBxsB,EAAAC,aAAaqU,mBAE3CgY,GA/DiCltB,EAAAC,YAiEjCotB,EAAA,WACE,QAAAA,GAAoBzH,EACAhR,GADA3Y,KAAA2pB,OACA3pB,KAAA2Y,eAEtB,MAAAyY,OnK8pRM,SAAS5xB,EAAQD,EAASH,GAE/B,YoK7yRD,IAAAqE,GAAArE,EAAyB,GACzBiyB,EAAAjyB,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUgxB,UAAYD,EAAAC,WpKkzR3B,SAAS9xB,EAAQD,EAASH,GAE/B,YqKlwRD,SAAAkyB,GAA6BC,EACAC,GAC3B,MAAIA,GACK,GAAIC,GAA4BzxB,KAAMwxB,GACpC7pB,KAAK,GAAI+pB,GAAkBH,IAE/BvxB,KAAK2H,KAAK,GAAI+pB,GAAkBH,IrK6vRxC,GAAIxxB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KqK3zRpF4D,EAAA3E,EAAyB,IACzBqE,EAAArE,EAAyB,GAGzB0S,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GA+ChBG,GAAA+xB,UAASA,CAazB,IAAAI,GAAA,WACE,QAAAA,GAAoBH,GAAAvxB,KAAAuxB,wBAMtB,MAHEG,GAAApxB,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAImpB,GAAoBlpB,EAAYzI,KAAKuxB,yBAEtEG,KAOAC,EAAA,SAAAxwB,GAKE,QAAAwwB,GAAYtqB,EACQkqB,GAClBpwB,EAAAxB,KAAAK,KAAMqH,GADYrH,KAAAuxB,wBALZvxB,KAAA6V,WAAqB,EACrB7V,KAAA4xB,8BACA5xB,KAAAmS,UAuEV,MA1EwCpS,GAAA4xB,EAAAxwB,GAUtCwwB,EAAArxB,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAKqH,YAAY9F,KAAKkR,GACtBzS,KAAK6xB,mBAAmBhf;AACxB7S,KAAK8xB,eAGPH,EAAArxB,UAAA2S,YAAA,SAAY9Q,EAAY0Q,GACtB7S,KAAK2L,OAAOxJ,IAGdwvB,EAAArxB,UAAAgS,eAAA,SAAeO,GACb,GAAM9K,GAAQ/H,KAAK6xB,mBAAmBhf,EAClC9K,IACF/H,KAAKqH,YAAY9F,KAAKwG,GAExB/H,KAAK8xB,eAGGH,EAAArxB,UAAAoL,MAAV,SAAgB3D,GACd,IACE,GAAMgqB,GAAgB/xB,KAAKuxB,sBAAsBxpB,EAC7CgqB,IACF/xB,KAAKgyB,SAASD,EAAehqB,GAE/B,MAAOM,GACLrI,KAAKqH,YAAYlF,MAAMkG,KAInBspB,EAAArxB,UAAAsL,UAAV,WACE5L,KAAK6V,WAAY,EACjB7V,KAAK8xB,eAGCH,EAAArxB,UAAAuxB,mBAAR,SAA2B3nB,GACzBA,EAAa3B,aAEb,IAAM0pB,GAAkBjyB,KAAK4xB,2BAA2BhkB,QAAQ1D,GAC5DnC,EAAW,IAQf,OANIkqB,UACFlqB,EAAQ/H,KAAKmS,OAAO8f,GACpBjyB,KAAK4xB,2BAA2B/jB,OAAOokB,EAAiB,GACxDjyB,KAAKmS,OAAOtE,OAAOokB,EAAiB,IAG/BlqB,GAGD4pB,EAAArxB,UAAA0xB,SAAR,SAAiBD,EAAgChqB,GAC/C,GAAMmqB,GAAuBngB,EAAAM,kBAAkBrS,KAAM+xB,EAAehqB,EACpE/H,MAAKqJ,IAAI6oB,GAETlyB,KAAK4xB,2BAA2BjpB,KAAKupB,GACrClyB,KAAKmS,OAAOxJ,KAAKZ,IAGX4pB,EAAArxB,UAAAwxB,YAAR,WACM9xB,KAAK6V,WAAwD,IAA3C7V,KAAK4xB,2BAA2B3pB,QACpDjI,KAAKqH,YAAYiB,YAGvBqpB,GA1EwC7f,EAAAkB,iBAiFxCye,EAAA,SAAAtwB,GACE,QAAAswB,GAAsB3oB,EAA+B0oB,GACnDrwB,EAAAxB,KAAAK,MADoBA,KAAA8I,SAA+B9I,KAAAwxB,oBAOvD,MAR6CzxB,GAAA0xB,EAAAtwB,GAKjCswB,EAAAnxB,UAAAkI,WAAV,SAAqBC,GACnBzI,KAAKwxB,kBAAkBtvB,UAAU,GAAIiwB,GAA4B1pB,EAAYzI,KAAK8I,UAEtF2oB,GAR6ChuB,EAAAC,YAe7CyuB,EAAA,SAAAhxB,GAGE,QAAAgxB,GAAoB9lB,EAA+BvD,GACjD3H,EAAAxB,KAAAK,MADkBA,KAAAqM,SAA+BrM,KAAA8I,SAF3C9I,KAAAoyB,kBAA4B,EA0BtC,MA3B6CryB,GAAAoyB,EAAAhxB,GAOjCgxB,EAAA7xB,UAAAoL,MAAV,SAAgB6G,GACdvS,KAAKqyB,qBAGGF,EAAA7xB,UAAAqL,OAAV,SAAiBtD,GACfrI,KAAKuI,cACLvI,KAAKqM,OAAOlK,MAAMkG,IAGV8pB,EAAA7xB,UAAAsL,UAAV,WACE5L,KAAKqyB,qBAGCF,EAAA7xB,UAAA+xB,kBAAR,WACOryB,KAAKoyB,mBACRpyB,KAAKoyB,kBAAmB,EACxBpyB,KAAKuI,cACLvI,KAAK8I,OAAO5G,UAAUlC,KAAKqM,UAGjC8lB,GA3B6CpuB,EAAAC,arKw0RvC,SAASxE,EAAQD,EAASH,GAE/B,YsK3/RD,IAAAqE,GAAArE,EAAyB,GACzBkzB,EAAAlzB,EAA0C,IAE1CqE,GAAAC,WAAWpD,UAAUiyB,SAAWD,EAAAC,UtKggS1B,SAAS/yB,EAAQD,EAASH,GAE/B,YuKj/RD,SAAAmzB,GAA4BC,EAAmCC,GAC7D,MAAOzyB,MAAK2H,KAAK,GAAI+qB,GAAiBF,EAASC,IvKi/RhD,GAAI1yB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuKrgSpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAchBG,GAAAgzB,SAAQA,CAQxB,IAAAG,GAAA,WACE,QAAAA,GAAoBF,EAA0CC,GAA1CzyB,KAAAwyB,UAA0CxyB,KAAAyyB,UAMhE,MAHEC,GAAApyB,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAImqB,GAAmBlqB,EAAYzI,KAAKwyB,QAASxyB,KAAKyyB,WAEnFC,KAOAC,EAAA,SAAAxxB,GAGE,QAAAwxB,GAAYtrB,EAA4BmrB,EAAkCC,GACxEtxB,EAAAxB,KAAAK,KAAMqH,GAHArH,KAAAmS,UAIiB,kBAAZqgB,KACTxyB,KAAKwyB,QAAUA,GAGbC,GACFzyB,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAMyyB,IAoCvC,MA9C2C1yB,GAAA4yB,EAAAxxB,GAczCwxB,EAAAryB,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAKmS,OAAOlK,OAAS,GAGvB0qB,EAAAryB,UAAA2S,YAAA,SAAY9Q,EAAY0Q,GACtB7S,KAAK2L,OAAOxJ,IAGJwwB,EAAAryB,UAAAoL,MAAV,SAAgB3D,GACd,GAAI6qB,IAAQ,EACNzgB,EAASnS,KAAKmS,OACdnK,EAAMmK,EAAOlK,MACnB,KACE,IAAK,GAAIG,GAAI,EAAGA,EAAIJ,EAAKI,IACvB,GAAIpI,KAAKwyB,QAAQrgB,EAAO/J,GAAIL,GAE1B,YADA6qB,GAAQ,GAIZ,MAAOvqB,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAKmS,OAAOxJ,KAAKZ,GACjB/H,KAAKqH,YAAY9F,KAAKwG,IAGhB4qB,EAAAryB,UAAAkyB,QAAR,SAAgBjmB,EAAMsmB,GACpB,MAAOtmB,KAAMsmB,GAEjBF,GA9C2C7gB,EAAAkB,gBAA9BzT,GAAAozB,mBAAkBA,GvKijSzB,SAASnzB,EAAQD,EAASH,GAE/B,YwK7lSD,IAAAqE,GAAArE,EAAyB,GACzB0zB,EAAA1zB,EAAgD,IAEhDqE,GAAAC,WAAWpD,UAAUyyB,YAAcD,EAAAC,axKkmS7B,SAASvzB,EAAQD,EAASH,GAE/B,YyKtlSD,SAAA2zB,GAA+B/e,EAAawe,EAAmCC,GAC7E,MAAOH,GAAAC,SAAS5yB,KAAKK,KAAM,SAASuM,EAAMsmB,GACxC,MAAIL,GACKA,EAAQjmB,EAAEyH,GAAM6e,EAAE7e,IAEpBzH,EAAEyH,KAAS6e,EAAE7e,IACnBye,GAvBL,GAAAH,GAAAlzB,EAAuB,IAiBPG,GAAAwzB,YAAWA,GzKmnSrB,SAASvzB,EAAQD,EAASH,GAE/B,Y0KroSD,IAAAqE,GAAArE,EAAyB,GACzB4zB,EAAA5zB,EAAkE,IAElEqE,GAAAC,WAAWpD,UAAU2yB,qBAAuBD,EAAAC,sB1K0oStC,SAASzzB,EAAQD,EAASH,GAE/B,Y2KjoSD,SAAA6zB,GAA2CT,EAAmCU,GAC5E,MAAOlzB,MAAK2H,KAAK,GAAIwrB,GAAmCX,EAASU,I3KioSlE,GAAInzB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K2KnpSpF4D,EAAA3E,EAAyB,IACzBsN,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,GAYVG,GAAA0zB,qBAAoBA,CASpC,IAAAE,GAAA,WACE,QAAAA,GAAoBX,EACAU,GADAlzB,KAAAwyB,UACAxyB,KAAAkzB,cAMtB,MAHEC,GAAA7yB,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI4qB,GAA+B3qB,EAAYzI,KAAKwyB,QAASxyB,KAAKkzB,eAE/FC,KAOAC,EAAA,SAAAjyB,GAIE,QAAAiyB,GAAY/rB,EACAmrB,EACQU,GAClB/xB,EAAAxB,KAAAK,KAAMqH,GADYrH,KAAAkzB,cAJZlzB,KAAAqzB,QAAkB,EAMD,kBAAZb,KACTxyB,KAAKwyB,QAAUA,GAoCrB,MA7CmDzyB,GAAAqzB,EAAAjyB,GAazCiyB,EAAA9yB,UAAAkyB,QAAR,SAAgBjmB,EAAQsmB,GACtB,MAAOtmB,KAAMsmB,GAGLO,EAAA9yB,UAAAoL,MAAV,SAAgB3D,GAEd,GAAMmrB,GAAclzB,KAAKkzB,YACrBlf,EAAWjM,CAEf,IAAImrB,IACFlf,EAAMtH,EAAAO,SAASjN,KAAKkzB,aAAanrB,GAC7BiM,IAAQrH,EAAAO,aACV,MAAOlN,MAAKqH,YAAYlF,MAAMwK,EAAAO,YAAYC,EAI9C,IAAI0B,IAAc,CAElB,IAAI7O,KAAKqzB,QAEP,GADAxkB,EAASnC,EAAAO,SAASjN,KAAKwyB,SAASxyB,KAAKgU,IAAKA,GACtCnF,IAAWlC,EAAAO,YACb,MAAOlN,MAAKqH,YAAYlF,MAAMwK,EAAAO,YAAYC,OAG5CnN,MAAKqzB,QAAS,CAGZC,SAAQzkB,MAAY,IACtB7O,KAAKgU,IAAMA,EACXhU,KAAKqH,YAAY9F,KAAKwG,KAG5BqrB,GA7CmDrvB,EAAAC,a3KyrS7C,SAASxE,EAAQD,EAASH,GAE/B,Y4KjuSD,IAAAqE,GAAArE,EAAyB,GACzBm0B,EAAAn0B,EAAwE,IAExEqE,GAAAC,WAAWpD,UAAUkzB,wBAA0BD,EAAAC,yB5KsuSzC,SAASh0B,EAAQD,EAASH,GAE/B,Y6K9tSD,SAAAo0B,GAA2Cxf,EAAawe,GACtD,MAAOQ,GAAAC,qBAAqBtzB,KAAKK,KAAM,SAASuM,EAAMsmB,GACpD,MAAIL,GACKA,EAAQjmB,EAAEyH,GAAM6e,EAAE7e,IAEpBzH,EAAEyH,KAAS6e,EAAE7e,KAnBxB,GAAAgf,GAAA5zB,EAAmC,IAcnBG,GAAAi0B,wBAAuBA,G7KwvSjC,SAASh0B,EAAQD,EAASH,GAE/B,Y8KvwSD,IAAAqE,GAAArE,EAAyB,GACzBq0B,EAAAr0B,EAA+B,IAE/BqE,GAAAC,WAAWpD,UAAXmD,MAA0BgwB,EAAAC,K9K4wSpB,SAASl0B,EAAQD,EAASH,GAE/B,Y+KluSD,SAAAs0B,GAAuBvoB,EACAhJ,EACAmG,GACrB,MAAOtI,MAAK2H,KAAK,GAAIgsB,GAAWxoB,EAAgBhJ,EAAOmG,I/KguSxD,GAAIvI,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K+KrxSpF4D,EAAA3E,EAAyB,GA+CTG,GAAAm0B,IAAGA,CAWnB,IAAAC,GAAA,WACE,QAAAA,GAAoBxoB,EACAhJ,EACAmG,GAFAtI,KAAAmL,iBACAnL,KAAAmC,QACAnC,KAAAsI,WAKtB,MAHEqrB,GAAArzB,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIorB,GAAanrB,EAAYzI,KAAKmL,eAAgBnL,KAAKmC,MAAOnC,KAAKsI,YAEhGqrB,KAOAC,EAAA,SAAAzyB,GAIE,QAAAyyB,GAAYvsB,EACA8D,EACAhJ,EACAmG,GACVnH,EAAAxB,KAAAK,KAAMqH,EAEN,IAAMwsB,GAAiB,GAAI9vB,GAAAC,WAAcmH,EAAgBhJ,EAAOmG,EAChEurB,GAAevqB,oBAAqB,EACpCtJ,KAAKqJ,IAAIwqB,GACT7zB,KAAK6zB,eAAiBA,EAgC1B,MA7C8B9zB,GAAA6zB,EAAAzyB,GAgBlByyB,EAAAtzB,UAAAoL,MAAV,SAAgB3D,GACN,GAAA8rB,GAAA7zB,KAAA6zB,cACRA,GAAetyB,KAAKwG,GAChB8rB,EAAetqB,gBACjBvJ,KAAKqH,YAAYlF,MAAM0xB,EAAerqB,gBAEtCxJ,KAAKqH,YAAY9F,KAAKwG,IAIhB6rB,EAAAtzB,UAAAqL,OAAV,SAAiBtD,GACP,GAAAwrB,GAAA7zB,KAAA6zB,cACRA,GAAe1xB,MAAMkG,GACjBwrB,EAAetqB,gBACjBvJ,KAAKqH,YAAYlF,MAAM0xB,EAAerqB,gBAEtCxJ,KAAKqH,YAAYlF,MAAMkG,IAIjBurB,EAAAtzB,UAAAsL,UAAV,WACU,GAAAioB,GAAA7zB,KAAA6zB,cACRA,GAAevrB,WACXurB,EAAetqB,gBACjBvJ,KAAKqH,YAAYlF,MAAM0xB,EAAerqB,gBAEtCxJ,KAAKqH,YAAYiB,YAGvBsrB,GA7C8B7vB,EAAAC,a/K2zSxB,SAASxE,EAAQD,EAASH,GAE/B,YgLt4SD,IAAAqE,GAAArE,EAAyB,GACzB00B,EAAA10B,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUyzB,QAAUD,EAAAC,ShL24SzB,SAASv0B,EAAQD,EAASH,GAE/B,YiLt2SD,SAAA20B,KACE,MAAO/zB,MAAK2H,KAAK,GAAIqsB,IjLs2StB,GAAIj0B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KiLj5SpF2R,EAAA1S,EAA8B,IAC9B2S,EAAA3S,EAAgC,GAsChBG,GAAAw0B,QAAOA,CAQvB,IAAAC,GAAA,mBAAAA,MAIA,MAHEA,GAAA1zB,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIyrB,GAAsBxrB,KAEvDurB,KAOAC,EAAA,SAAA9yB,GAIE,QAAA8yB,GAAY5sB,GACVlG,EAAAxB,KAAAK,KAAMqH,GAJArH,KAAAsQ,cAAwB,EACxBtQ,KAAAk0B,iBAA2B,EA2BrC,MA7BuCn0B,GAAAk0B,EAAA9yB,GAQ3B8yB,EAAA3zB,UAAAoL,MAAV,SAAgB3D,GACT/H,KAAKk0B,kBACRl0B,KAAKk0B,iBAAkB,EACvBl0B,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAM+H,MAI3BksB,EAAA3zB,UAAAsL,UAAV,WACE5L,KAAKsQ,cAAe,EACftQ,KAAKk0B,iBACRl0B,KAAKqH,YAAYiB,YAIrB2rB,EAAA3zB,UAAAgS,eAAA,SAAeO,GACb7S,KAAKyN,OAAOoF,GACZ7S,KAAKk0B,iBAAkB,EACnBl0B,KAAKsQ,cACPtQ,KAAKqH,YAAYiB,YAGvB2rB,GA7BuCniB,EAAAkB,kBjLg7SjC,SAASxT,EAAQD,EAASH,GAE/B,YkL/+SD,IAAAqE,GAAArE,EAAyB,GACzB+0B,EAAA/0B,EAAkD,IAElDqE,GAAAC,WAAWpD,UAAU8zB,WAAaD,EAAAC,YlLo/S5B,SAAS50B,EAAQD,EAASH,GAE/B,YmLr8SD,SAAAg1B,GAAoCtjB,EACA6E,GAClC,MAAO3V,MAAK2H,KAAK,GAAI0sB,GAAuBvjB,EAAS6E,InLo8StD,GAAI5V,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KmL1/SpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GA+ChBG,GAAA60B,WAAUA,CAW1B,IAAAC,GAAA,WACE,QAAAA,GAAoBvjB,EACA6E,GADA3V,KAAA8Q,UACA9Q,KAAA2V,iBAMtB,MAHE0e,GAAA/zB,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI8rB,GAAyB7rB,EAAYzI,KAAK8Q,QAAS9Q,KAAK2V,kBAEzF0e,KAOAC,EAAA,SAAAnzB,GAKE,QAAAmzB,GAAYjtB,EACQyJ,EACA6E,GAClBxU,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA8Q,UACA9Q,KAAA2V,iBANZ3V,KAAAk0B,iBAA2B,EAC3Bl0B,KAAAsQ,cAAwB,EACxBtQ,KAAAqN,MAAgB,EAmE1B,MAtEgDtN,GAAAu0B,EAAAnzB,GAWpCmzB,EAAAh0B,UAAAoL,MAAV,SAAgB3D,GACT/H,KAAKk0B,iBACRl0B,KAAKu0B,QAAQxsB,IAITusB,EAAAh0B,UAAAi0B,QAAR,SAAgBxsB,GACd,GAAMsF,GAAQrN,KAAKqN,QACbhG,EAAcrH,KAAKqH,WACzB,KACE,GAAMwH,GAAS7O,KAAK8Q,QAAQ/I,EAAOsF,EACnCrN,MAAKk0B,iBAAkB,EACvBl0B,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAM6O,EAAQ9G,EAAOsF,IAChD,MAAOhF,GACPhB,EAAYlF,MAAMkG,KAIZisB,EAAAh0B,UAAAsL,UAAV,WACE5L,KAAKsQ,cAAe,EACftQ,KAAKk0B,iBACRl0B,KAAKqH,YAAYiB,YAIrBgsB,EAAAh0B,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,GAAA/F,GAAA9M,KAAQ2V,EAAA7I,EAAA6I,eAAgBtO,EAAAyF,EAAAzF,WACpBsO,GACF3V,KAAK6uB,gBAAgBpc,EAAYC,EAAYC,EAAYC,GAEzDvL,EAAY9F,KAAKmR,IAIb4hB,EAAAh0B,UAAAuuB,gBAAR,SAAwBpc,EAAeC,EACfC,EAAoBC,GAC1C,GAAA9F,GAAA9M,KAAQ2V,EAAA7I,EAAA6I,eAAgBtO,EAAAyF,EAAAzF,WACxB,KACE,GAAMwH,GAAS8G,EAAelD,EAAYC,EAAYC,EAAYC,EAClEvL,GAAY9F,KAAKsN,GACjB,MAAOxG,GACPhB,EAAYlF,MAAMkG,KAItBisB,EAAAh0B,UAAA2S,YAAA,SAAY5K,GACVrI,KAAKqH,YAAYlF,MAAMkG,IAGzBisB,EAAAh0B,UAAAgS,eAAA,SAAeO,GACb7S,KAAKyN,OAAOoF,GAEZ7S,KAAKk0B,iBAAkB,EACnBl0B,KAAKsQ,cACPtQ,KAAKqH,YAAYiB,YAGvBgsB,GAtEgDxiB,EAAAkB,kBnLujT1C,SAASxT,EAAQD,EAASH,GAE/B,YoLvoTD,IAAAqE,GAAArE,EAAyB,GACzBo1B,EAAAp1B,EAAsC,IAEtCqE,GAAAC,WAAWpD,UAAUm0B,OAASD,EAAAC,QpL4oTxB,SAASj1B,EAAQD,EAASH,GAE/B,YqL7nTD,SAAAq1B,GAA6B3jB,EACAwD,EACA3E,GAG3B,MAJ2B,UAAA2E,MAAqBC,OAAOC,mBAC5B,SAAA7E,MAAAjF,QAC3B4J,GAAcA,GAAc,GAAK,EAAIC,OAAOC,kBAAoBF,EAEzDtU,KAAK2H,KAAK,GAAI+sB,GAAe5jB,EAASwD,EAAY3E,IrLynT1D,GAAI5P,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KqLlpTpFuM,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAE1B0S,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAYhBG,GAAAk1B,OAAMA,CAatB,IAAAC,GAAA,WACE,QAAAA,GAAoB5jB,EACAwD,EACA3E,GAFA3P,KAAA8Q,UACA9Q,KAAAsU,aACAtU,KAAA2P,YAMtB,MAHE+kB,GAAAp0B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAImsB,GAAiBlsB,EAAYzI,KAAK8Q,QAAS9Q,KAAKsU,WAAYtU,KAAK2P,aAElG+kB,IATan1B,GAAAm1B,eAAcA,CAuB3B,IAAAC,GAAA,SAAAxzB,GAME,QAAAwzB,GAAYttB,EACQyJ,EACAwD,EACA3E,GAClBxO,EAAAxB,KAAAK,KAAMqH,GAHYrH,KAAA8Q,UACA9Q,KAAAsU,aACAtU,KAAA2P,YARZ3P,KAAAqN,MAAgB,EAChBrN,KAAAkS,OAAiB,EACjBlS,KAAAsQ,cAAwB,EAQ1BgE,EAAaC,OAAOC,oBACtBxU,KAAK2U,WA+DX,MA3E4C5U,GAAA40B,EAAAxzB,GAgB3BwzB,EAAA5kB,SAAf,SAA8BT,GACrB,GAAA7G,GAAA6G,EAAA7G,WAAYoG,EAAAS,EAAAT,OAAQ9G,EAAAuH,EAAAvH,MAAOsF,EAAAiC,EAAAjC,KAClC5E,GAAWmsB,sBAAsB/lB,EAAQ9G,EAAOsF,IAGxCsnB,EAAAr0B,UAAAoL,MAAV,SAAgB3D,GACd,GAAMV,GAAcrH,KAAKqH,WAEzB,IAAIA,EAAYE,eAEd,WADAvH,MAAK4L,WAIP,IAAMyB,GAAQrN,KAAKqN,OACnB,IAAIrN,KAAKkS,OAASlS,KAAKsU,WAAY,CACjCjN,EAAY9F,KAAKwG,EACjB,IAAI8G,GAASnC,EAAAO,SAASjN,KAAK8Q,SAAS/I,EAAOsF,EAC3C,IAAIwB,IAAWlC,EAAAO,YACb7F,EAAYlF,MAAMwK,EAAAO,YAAYC,OACzB,IAAKnN,KAAK2P,UAEV,CACL,GAAM/N,IAA6B6G,WAAYzI,KAAM6O,SAAQ9G,QAAOsF,QACpErN,MAAKqJ,IAAIrJ,KAAK2P,UAAUG,SAAS6kB,EAAiB5kB,SAAU,EAAGnO,QAH/D5B,MAAK40B,sBAAsB/lB,EAAQ9G,EAAOsF,OAM5CrN,MAAK2U,OAAOhM,KAAKZ,IAIb4sB,EAAAr0B,UAAAs0B,sBAAR,SAA8B/lB,EAAa9G,EAAUsF,GACnDrN,KAAKkS,SACLlS,KAAKqJ,IAAI0I,EAAAM,kBAAwBrS,KAAM6O,EAAQ9G,EAAOsF,KAG9CsnB,EAAAr0B,UAAAsL,UAAV,WACE5L,KAAKsQ,cAAe,EAChBtQ,KAAKsQ,cAAgC,IAAhBtQ,KAAKkS,QAC5BlS,KAAKqH,YAAYiB,YAIrBqsB,EAAAr0B,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAK0L,MAAMgH,IAGbiiB,EAAAr0B,UAAAgS,eAAA,SAAeO,GACb,GAAM8B,GAAS3U,KAAK2U,MACpB3U,MAAKyN,OAAOoF,GACZ7S,KAAKkS,SACDyC,GAAUA,EAAO1M,OAAS,GAC5BjI,KAAK0L,MAAMiJ,EAAOhE,SAEhB3Q,KAAKsQ,cAAgC,IAAhBtQ,KAAKkS,QAC5BlS,KAAKqH,YAAYiB,YAGvBqsB,GA3E4C7iB,EAAAkB,gBAA/BzT,GAAAo1B,iBAAgBA,GrL+sTvB,SAASn1B,EAAQD,EAASH,GAE/B,YsLzwTD,IAAAqE,GAAArE,EAAyB,GACzBy1B,EAAAz1B,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUw0B,UAAYD,EAAAC,WtL8wT3B,SAASt1B,EAAQD,EAASH,GAE/B,YuL1uTD,SAAA01B,GAA6BznB,EAAeojB,GAC1C,MAAOzwB,MAAK2H,KAAK,GAAIotB,GAAkB1nB,EAAOojB,IvL0uT/C,GAAI1wB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuLvxTpF4D,EAAA3E,EAAyB,IACzB2F,EAAA3F,EAAsC,IAwCtBG,GAAAu1B,UAASA,CAQzB,IAAAC,GAAA,WAEE,QAAAA,GAAoB1nB,EAAuBojB,GACzC,GADkBzwB,KAAAqN,QAAuBrN,KAAAywB,eACrCpjB,EAAQ,EACV,KAAM,IAAItI,GAAAC,wBAOhB,MAHE+vB,GAAAz0B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIwsB,GAAoBvsB,EAAYzI,KAAKqN,MAAOrN,KAAKywB,gBAElFsE,KAOAC,EAAA,SAAA7zB,GAEE,QAAA6zB,GAAY3tB,EAAoCgG,EAAuBojB,GACrEtvB,EAAAxB,KAAAK,KAAMqH,GADwCrH,KAAAqN,QAAuBrN,KAAAywB,eAsBzE,MAxBqC1wB,GAAAi1B,EAAA7zB,GAMzB6zB,EAAA10B,UAAAoL,MAAV,SAAgBa,GACO,IAAjBvM,KAAKqN,UACPrN,KAAKqH,YAAY9F,KAAKgL,GACtBvM,KAAKqH,YAAYiB,aAIX0sB,EAAA10B,UAAAsL,UAAV,WACE,GAAMvE,GAAcrH,KAAKqH,WACrBrH,MAAKqN,OAAS,IACiB,mBAAtBrN,MAAKywB,aACdppB,EAAY9F,KAAKvB,KAAKywB,cAEtBppB,EAAYlF,MAAM,GAAI4C,GAAAC,0BAG1BqC,EAAYiB,YAEhB0sB,GAxBqCjxB,EAAAC,avLkzT/B,SAASxE,EAAQD,GAEtB,YACA,IAAIQ,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KwLl3TpF6E,EAAA,SAAA7D,GACE,QAAA6D,KACE,GAAMqD,GAAWlH,EAAAxB,KAAAK,KAAM,wBAChBA,MAAMoO,KAAO/F,EAAI+F,KAAO,0BACxBpO,KAAMqO,MAAQhG,EAAIgG,MAClBrO,KAAM8C,QAAUuF,EAAIvF,QAE/B,MAP6C/C,GAAAiF,EAAA7D,GAO7C6D,GAP6C+E,MAAhCxK,GAAAyF,wBAAuBA,GxL64T9B,SAASxF,EAAQD,EAASH,GAE/B,YyLx5TD,IAAAqE,GAAArE,EAAyB,GACzB61B,EAAA71B,EAAsC,IAEtCqE,GAAAC,WAAWpD,UAAUmC,OAASwyB,EAAAxyB,QzL65TxB,SAASjD,EAAQD,EAASH,GAE/B,Y0Lv3TD,SAAAqD,GAA0BssB,EACAnY,GACxB,MAAO5W,MAAK2H,KAAK,GAAIutB,GAAenG,EAAWnY,I1Ls3ThD,GAAI7W,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K0Lt6TpF4D,EAAA3E,EAAyB,GA2CTG,GAAAkD,OAAMA,CAStB,IAAAyyB,GAAA,WACE,QAAAA,GAAoBnG,EACAnY,GADA5W,KAAA+uB,YACA/uB,KAAA4W,UAMtB,MAHEse,GAAA50B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI2sB,GAAiB1sB,EAAYzI,KAAK+uB,UAAW/uB,KAAK4W,WAEnFse,KAOAC,EAAA,SAAAh0B,GAIE,QAAAg0B,GAAY9tB,EACQ0nB,EACAnY,GAClBzV,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA+uB,YACA/uB,KAAA4W,UAJpB5W,KAAA2R,MAAgB,EAMd3R,KAAK+uB,UAAYA,EAiBrB,MAzBkChvB,GAAAo1B,EAAAh0B,GAatBg0B,EAAA70B,UAAAoL,MAAV,SAAgB3D,GACd,GAAI8G,EACJ,KACEA,EAAS7O,KAAK+uB,UAAUpvB,KAAKK,KAAK4W,QAAS7O,EAAO/H,KAAK2R,SACvD,MAAOtJ,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGrBwG,GACF7O,KAAKqH,YAAY9F,KAAKwG,IAG5BotB,GAzBkCpxB,EAAAC,a1L+7T5B,SAASxE,EAAQD,EAASH,GAE/B,Y2LpgUD,IAAAqE,GAAArE,EAAyB,GACzBg2B,EAAAh2B,EAAyC,IAEzCqE,GAAAC,WAAWpD,UAAXmD,WAA+B2xB,EAAAC,U3LygUzB,SAAS71B,EAAQD,EAASH,GAE/B,Y4LlgUD,SAAAi2B,GAA4BC,GAC1B,MAAOt1B,MAAK2H,KAAK,GAAI4tB,GAAgBD,I5LkgUtC,GAAIv1B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K4LlhUpF4D,EAAA3E,EAAyB,IACzByE,EAAAzE,EAA2B,GAWXG,GAAA81B,SAAQA,CAQxB,IAAAE,GAAA,WACE,QAAAA,GAAoBD,GAAAt1B,KAAAs1B,WAMtB,MAHEC,GAAAj1B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIgtB,GAAkB/sB,EAAYzI,KAAKs1B,YAEpEC,KAOAC,EAAA,SAAAr0B,GACE,QAAAq0B,GAAYnuB,EAA4BiuB,GACtCn0B,EAAAxB,KAAAK,KAAMqH,GACNrH,KAAKqJ,IAAI,GAAIxF,GAAAC,aAAawxB,IAE9B,MALmCv1B,GAAAy1B,EAAAr0B,GAKnCq0B,GALmCzxB,EAAAC,a5L0hU7B,SAASxE,EAAQD,EAASH,GAE/B,Y6L9jUD,IAAAqE,GAAArE,EAAyB,GACzBq2B,EAAAr2B,EAAkC,IAElCqE,GAAAC,WAAWpD,UAAUo1B,KAAOD,EAAAC,M7LmkUtB,SAASl2B,EAAQD,EAASH,GAE/B,Y8LpiUD,SAAAs2B,GAAwB3G,EACAnY,GACtB,GAAyB,kBAAdmY,GACT,KAAM,IAAIpb,WAAU,8BAEtB,OAAO3T,MAAK2H,KAAK,GAAIguB,GAAkB5G,EAAW/uB,OAAM,GAAO4W,I9LgiUhE,GAAI7W,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K8L3kUpF4D,EAAA3E,EAAyB,GAmCTG,GAAAm2B,KAAIA,CAYpB,IAAAC,GAAA,WACE,QAAAA,GAAoB5G,EACAjmB,EACA8sB,EACAhf,GAHA5W,KAAA+uB,YACA/uB,KAAA8I,SACA9I,KAAA41B,aACA51B,KAAA4W,UAMtB,MAHE+e,GAAAr1B,UAAAX,KAAA,SAAK8U,EAAyB3L,GAC5B,MAAOA,GAAON,WAAW,GAAIqtB,GAAoBphB,EAAUzU,KAAK+uB,UAAW/uB,KAAK8I,OAAQ9I,KAAK41B,WAAY51B,KAAK4W,WAElH+e,IAVap2B,GAAAo2B,kBAAiBA,CAiB9B,IAAAE,GAAA,SAAA10B,GAGE,QAAA00B,GAAYxuB,EACQ0nB,EACAjmB,EACA8sB,EACAhf,GAClBzV,EAAAxB,KAAAK,KAAMqH,GAJYrH,KAAA+uB,YACA/uB,KAAA8I,SACA9I,KAAA41B,aACA51B,KAAA4W,UANZ5W,KAAAqN,MAAgB,EAiC1B,MAlC4CtN,GAAA81B,EAAA10B,GAWlC00B,EAAAv1B,UAAAgS,eAAR,SAAuBvK,GACrB,GAAMV,GAAcrH,KAAKqH,WAEzBA,GAAY9F,KAAKwG,GACjBV,EAAYiB,YAGJutB,EAAAv1B,UAAAoL,MAAV,SAAgB3D,GACd,GAAA+E,GAAA9M,KAAQ+uB,EAAAjiB,EAAAiiB,UAAWnY,EAAA9J,EAAA8J,QACbvJ,EAAQrN,KAAKqN,OACnB,KACE,GAAMwB,GAASkgB,EAAUpvB,KAAKiX,GAAW5W,KAAM+H,EAAOsF,EAAOrN,KAAK8I,OAC9D+F,IACF7O,KAAKsS,eAAetS,KAAK41B,WAAavoB,EAAQtF,GAEhD,MAAOM,GACPrI,KAAKqH,YAAYlF,MAAMkG,KAIjBwtB,EAAAv1B,UAAAsL,UAAV,WACE5L,KAAKsS,eAAetS,KAAK41B,cAAkBlrB,SAE/CmrB,GAlC4C9xB,EAAAC,WAA/BzE,GAAAs2B,oBAAmBA,G9L8mU1B,SAASr2B,EAAQD,EAASH,GAE/B,Y+LjrUD,IAAAqE,GAAArE,EAAyB,GACzB02B,EAAA12B,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUy1B,UAAYD,EAAAC,W/LsrU3B,SAASv2B,EAAQD,EAASH,GAE/B,YgMvpUD,SAAA22B,GAA6BhH,EACAnY,GAC3B,MAAO5W,MAAK2H,KAAK,GAAI8tB,GAAAE,kBAAkB5G,EAAW/uB,OAAM,GAAM4W,IAtChE,GAAA6e,GAAAr2B,EAAgC,IAoChBG,GAAAw2B,UAASA,GhMmsUnB,SAASv2B,EAAQD,EAASH,GAE/B,YiMzuUD,IAAAqE,GAAArE,EAAyB,GACzB42B,EAAA52B,EAAoC,IAEpCqE,GAAAC,WAAWpD,UAAU21B,MAAaD,EAAAC,OjM8uU5B,SAASz2B,EAAQD,EAASH,GAE/B,YkM9rUD,SAAA62B,GAA4BlH,EACApZ,EACA8a,GAC1B,MAAOzwB,MAAK2H,KAAK,GAAIuuB,GAAcnH,EAAWpZ,EAAgB8a,EAAczwB,OlM4rU7E,GAAID,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KkMtvUpF4D,EAAA3E,EAAyB,IACzByF,EAAAzF,EAAyB,IAmDTG,GAAA02B,MAAKA,CAarB,IAAAC,GAAA,WACE,QAAAA,GAAoBnH,EACApZ,EACA8a,EACA3nB,GAHA9I,KAAA+uB,YACA/uB,KAAA2V,iBACA3V,KAAAywB,eACAzwB,KAAA8I,SAMtB,MAHEotB,GAAA51B,UAAAX,KAAA,SAAK8U,EAAyB3L,GAC5B,MAAOA,GAAON,WAAW,GAAI2tB,GAAgB1hB,EAAUzU,KAAK+uB,UAAW/uB,KAAK2V,eAAgB3V,KAAKywB,aAAczwB,KAAK8I,UAExHotB,KAOAC,EAAA,SAAAh1B,GAIE,QAAAg1B,GAAY9uB,EACQ0nB,EACApZ,EACA8a,EACA3nB,GAClB3H,EAAAxB,KAAAK,KAAMqH,GAJYrH,KAAA+uB,YACA/uB,KAAA2V,iBACA3V,KAAAywB,eACAzwB,KAAA8I,SAPZ9I,KAAAqN,MAAgB,EAChBrN,KAAAsQ,cAAwB,EAmElC,MArEoCvQ,GAAAo2B,EAAAh1B,GAYxBg1B,EAAA71B,UAAAoL,MAAV,SAAgB3D,GACd,GAAMsF,GAAQrN,KAAKqN,OACfrN,MAAK+uB,UACP/uB,KAAKkvB,cAAcnnB,EAAOsF,GAE1BrN,KAAKo2B,MAAMruB,EAAOsF,IAId8oB,EAAA71B,UAAA4uB,cAAR,SAAsBnnB,EAAUsF,GAC9B,GAAIwB,EACJ,KACEA,EAAS7O,KAAK+uB,UAAUhnB,EAAOsF,EAAOrN,KAAK8I,QAC3C,MAAOT,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGrBwG,GACF7O,KAAKo2B,MAAMruB,EAAOsF,IAId8oB,EAAA71B,UAAA81B,MAAR,SAAcruB,EAAYsF,GACxB,MAAIrN,MAAK2V,mBACP3V,MAAKq2B,mBAAmBtuB,EAAOsF,OAGjCrN,MAAKs2B,WAAWvuB,IAGVouB,EAAA71B,UAAA+1B,mBAAR,SAA2BtuB,EAAUsF,GACnC,GAAIwB,EACJ,KACEA,EAAS7O,KAAK2V,eAAe5N,EAAOsF,GACpC,MAAOhF,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAKs2B,WAAWznB,IAGVsnB,EAAA71B,UAAAg2B,WAAR,SAAmBvuB,GACjB,GAAMV,GAAcrH,KAAKqH,WACzBA,GAAY9F,KAAKwG,GACjBV,EAAYiB,WACZtI,KAAKsQ,cAAe,GAGZ6lB,EAAA71B,UAAAsL,UAAV,WACE,GAAMvE,GAAcrH,KAAKqH,WACpBrH,MAAKsQ,cAA6C,mBAAtBtQ,MAAKywB,aAG1BzwB,KAAKsQ,cACfjJ,EAAYlF,MAAM,GAAI0C,GAAAC,aAHtBuC,EAAY9F,KAAKvB,KAAKywB,cACtBppB,EAAYiB,aAKlB6tB,GArEoCpyB,EAAAC,alMuzU9B,SAASxE,EAAQD,GAEtB,YACA,IAAIQ,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KmMv4UpF2E,EAAA,SAAA3D,GACE,QAAA2D,KACE,GAAMuD,GAAWlH,EAAAxB,KAAAK,KAAM,0BAChBA,MAAMoO,KAAO/F,EAAI+F,KAAO,aACxBpO,KAAMqO,MAAQhG,EAAIgG,MAClBrO,KAAM8C,QAAUuF,EAAIvF,QAE/B,MAPgC/C,GAAA+E,EAAA3D,GAOhC2D,GAPgCiF,MAAnBxK,GAAAuF,WAAUA,GnMk6UjB,SAAStF,EAAQD,EAASH,GAE/B,YoM76UD,IAAAqE,GAAArE,EAAyB,GACzBm3B,EAAAn3B,EAAwC,IAExCqE,GAAAC,WAAWpD,UAAUk2B,QAAeD,EAAAC,SpMk7U9B,SAASh3B,EAAQD,EAASH,GAE/B,YqM35UD,SAAAo3B,GAAiCtD,EACAuD,EACAhH,GAC/B,MAAOzvB,MAAK2H,KAAK,GAAI+uB,GAAgB12B,KAAMkzB,EAAauD,EAAiBhH,IrMy5U1E,GAAI1vB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KqM57UpF4D,EAAA3E,EAAyB,IACzByE,EAAAzE,EAA2B,IAC3BqE,EAAArE,EAAyB,GAEzBoE,EAAApE,EAAsB,GACtBu3B,EAAAv3B,EAAkB,KAClBw3B,EAAAx3B,EAAsB,IAuBNG,GAAAi3B,QAAOA,CAqBvB,IAAAE,GAAA,WACE,QAAAA,GAAmB5tB,EACCoqB,EACAuD,EACAhH,GAHDzvB,KAAA8I,SACC9I,KAAAkzB,cACAlzB,KAAAy2B,kBACAz2B,KAAAyvB,mBAQtB,MALEiH,GAAAp2B,UAAAX,KAAA,SAAK8I,EAAiDK,GACpD,MAAOA,GAAON,WAAW,GAAIquB,GAC3BpuB,EAAYzI,KAAKkzB,YAAalzB,KAAKy2B,gBAAiBz2B,KAAKyvB,oBAG/DiH,KAOAG,EAAA,SAAA11B,GAKE,QAAA01B,GAAYxvB,EACQ6rB,EACAuD,EACAhH,GAClBtuB,EAAAxB,KAAAK,KAAMqH,GAHYrH,KAAAkzB,cACAlzB,KAAAy2B,kBACAz2B,KAAAyvB,mBAPZzvB,KAAA82B,OAA+B,KAChC92B,KAAA+2B,wBAAkC,EAClC/2B,KAAA2R,MAAgB,EAkGzB,MArGyC5R,GAAA82B,EAAA11B,GAY7B01B,EAAAv2B,UAAAoL,MAAV,SAAgB3D,GACd,GAAIiM,EACJ,KACEA,EAAMhU,KAAKkzB,YAAYnrB,GACvB,MAAOM,GAEP,WADArI,MAAKmC,MAAMkG,GAIbrI,KAAKg3B,OAAOjvB,EAAOiM,IAGb6iB,EAAAv2B,UAAA02B,OAAR,SAAejvB,EAAUiM,GACvB,GAAI8iB,GAAS92B,KAAK82B,MAEbA,KACHA,EAAS92B,KAAK82B,OAAwB,gBAAR9iB,GAAmB,GAAI4iB,GAAAK,QAAY,GAAIN,GAAA9iB,IAGvE,IAEIqjB,GAFAC,EAAQL,EAAOhS,IAAI9Q,EAGvB,IAAIhU,KAAKy2B,gBACP,IACES,EAAUl3B,KAAKy2B,gBAAgB1uB,GAC/B,MAAOM,GACPrI,KAAKmC,MAAMkG,OAGb6uB,GAAenvB,CAGjB,KAAKovB,EAAO,CACVL,EAAOM,IAAIpjB,EAAKmjB,EAAQ,GAAI3zB,GAAAxC,QAC5B,IAAMq2B,GAAoB,GAAIC,GAAkBtjB,EAAKmjB,EAAOn3B,KAE5D,IADAA,KAAKqH,YAAY9F,KAAK81B,GAClBr3B,KAAKyvB,iBAAkB,CACzB,GAAIK,GAAQ,MACZ,KACEA,EAAW9vB,KAAKyvB,iBAAiB,GAAI6H,GAAwBtjB,EAAiBmjB,IAC9E,MAAO9uB,GAEP,WADArI,MAAKmC,MAAMkG,GAGbrI,KAAKqJ,IAAIymB,EAAS5tB,UAAU,GAAIq1B,GAAwBvjB,EAAKmjB,EAAOn3B,SAInEm3B,EAAM5vB,gBACT4vB,EAAM51B,KAAK21B,IAILL,EAAAv2B,UAAAqL,OAAV,SAAiBtD,GACf,GAAMyuB,GAAS92B,KAAK82B,MAChBA,KACFA,EAAOrtB,QAAQ,SAAC0tB,EAAOnjB,GACrBmjB,EAAMh1B,MAAMkG,KAGdyuB,EAAOU,SAETx3B,KAAKqH,YAAYlF,MAAMkG,IAGfwuB,EAAAv2B,UAAAsL,UAAV,WACE,GAAMkrB,GAAS92B,KAAK82B,MAChBA,KACFA,EAAOrtB,QAAQ,SAAC0tB,EAAOnjB,GACrBmjB,EAAM7uB,aAGRwuB,EAAOU,SAETx3B,KAAKqH,YAAYiB,YAGnBuuB,EAAAv2B,UAAAm3B,YAAA,SAAYzjB,GACVhU,KAAK82B,OAAL92B,UAAmBgU,IAGrB6iB,EAAAv2B,UAAAiI,YAAA,WACOvI,KAAKuH,gBAAmBvH,KAAK+2B,yBAChC/2B,KAAK+2B,wBAAyB,EACX,IAAf/2B,KAAK2R,OACPxQ,EAAAb,UAAMiI,YAAW5I,KAAAK,QAIzB62B,GArGyC9yB,EAAAC,YA4GzCuzB,EAAA,SAAAp2B,GACE,QAAAo2B,GAAoBvjB,EACAmjB,EACA9qB,GAClBlL,EAAAxB,KAAAK,MAHkBA,KAAAgU,MACAhU,KAAAm3B,QACAn3B,KAAAqM,SAuBtB,MA1B4CtM,GAAAw3B,EAAAp2B,GAOhCo2B,EAAAj3B,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAK4L,aAGG2rB,EAAAj3B,UAAAqL,OAAV,SAAiBtD,GACf,GAAM8uB,GAAQn3B,KAAKm3B,KACdA,GAAM5vB,gBACT4vB,EAAMh1B,MAAMkG,GAEdrI,KAAKqM,OAAOorB,YAAYz3B,KAAKgU,MAGrBujB,EAAAj3B,UAAAsL,UAAV,WACE,GAAMurB,GAAQn3B,KAAKm3B,KACdA,GAAM5vB,gBACT4vB,EAAM7uB,WAERtI,KAAKqM,OAAOorB,YAAYz3B,KAAKgU,MAEjCujB,GA1B4CxzB,EAAAC,YAoC5CszB,EAAA,SAAAn2B,GACE,QAAAm2B,GAAmBtjB,EACC0jB,EACAC,GAClBx2B,EAAAxB,KAAAK,MAHiBA,KAAAgU,MACChU,KAAA03B,eACA13B,KAAA23B,uBAatB,MAhB6C53B,GAAAu3B,EAAAn2B,GAOjCm2B,EAAAh3B,UAAAkI,WAAV,SAAqBC,GACnB,GAAMyB,GAAe,GAAIrG,GAAAC,aACzBgJ,EAAA9M,KAAO23B,EAAA7qB,EAAA6qB,qBAAsBD,EAAA5qB,EAAA4qB,YAK7B,OAJIC,KAAyBA,EAAqBpwB,gBAChD2C,EAAab,IAAI,GAAIuuB,GAA0BD,IAEjDztB,EAAab,IAAIquB,EAAax1B,UAAUuG,IACjCyB,GAEXotB,GAhB6C7zB,EAAAC,WAAhCnE,GAAA+3B,kBAAiBA,CAuB9B,IAAAM,GAAA,SAAAz2B,GACE,QAAAy2B,GAAoBvrB,GAClBlL,EAAAxB,KAAAK,MADkBA,KAAAqM,SAElBA,EAAOsF,QAaX,MAhBwC5R,GAAA63B,EAAAz2B,GAMtCy2B,EAAAt3B,UAAAiI,YAAA,WACE,GAAM8D,GAASrM,KAAKqM,MACfA,GAAO9E,gBAAmBvH,KAAKuH,iBAClCpG,EAAAb,UAAMiI,YAAW5I,KAAAK,MACjBqM,EAAOsF,OAAS,EACK,IAAjBtF,EAAOsF,OAAetF,EAAO0qB,wBAC/B1qB,EAAO9D,gBAIfqvB,GAhBwC/zB,EAAAC,erMu7UlC,SAAStE,EAAQD,EAASH,GAE/B,YsMrqVD,IAAA2J,GAAA3J,EAAmB,GACnBy4B,EAAAz4B,EAA0B,IAEbG,GAAAsU,IAAM9K,EAAAY,KAAKkK,KAAO,WAAO,MAAAgkB,GAAAC,gBtM0qVhC,SAASt4B,EAAQD,GAEtB,YuM/qVD,IAAAu4B,GAAA,mBAAAA,KACS93B,KAAA+3B,KAAO,EACN/3B,KAAAg4B,WACAh4B,KAAAi4B,SAuCV,MArCEH,GAAAx3B,UAAAwkB,IAAA,SAAI9Q,GACF,GAAM5L,GAAIpI,KAAKi4B,MAAMrqB,QAAQoG,EAC7B,OAAO5L,QAAWsC,OAAY1K,KAAKg4B,QAAQ5vB,IAG7C0vB,EAAAx3B,UAAA82B,IAAA,SAAIpjB,EAAUjM,GACZ,GAAMK,GAAIpI,KAAKi4B,MAAMrqB,QAAQoG,EAQ7B,OAPI5L,SACFpI,KAAKi4B,MAAMtvB,KAAKqL,GAChBhU,KAAKg4B,QAAQrvB,KAAKZ,GAClB/H,KAAK+3B,QAEL/3B,KAAKg4B,QAAQ5vB,GAAKL,EAEb/H,MAGT83B,EAAAx3B,UAAAw3B,UAAA,SAAO9jB,GACL,GAAM5L,GAAIpI,KAAKi4B,MAAMrqB,QAAQoG,EAC7B,OAAI5L,UACJpI,KAAKg4B,QAAQnqB,OAAOzF,EAAG,GACvBpI,KAAKi4B,MAAMpqB,OAAOzF,EAAG,GACrBpI,KAAK+3B,QACE,IAGTD,EAAAx3B,UAAAk3B,MAAA,WACEx3B,KAAKi4B,MAAMhwB,OAAS,EACpBjI,KAAKg4B,QAAQ/vB,OAAS,EACtBjI,KAAK+3B,KAAO,GAGdD,EAAAx3B,UAAAmJ,QAAA,SAAQyuB,EAActhB,GACpB,IAAK,GAAIxO,GAAI,EAAGA,EAAIpI,KAAK+3B,KAAM3vB,IAC7B8vB,EAAGv4B,KAAKiX,EAAS5W,KAAKg4B,QAAQ5vB,GAAIpI,KAAKi4B,MAAM7vB,KAGnD0vB,IA1Cav4B,GAAAu4B,YAAWA,GvMiuVlB,SAASt4B,EAAQD,GAEtB,YwMnuVD,IAAA03B,GAAA,mBAAAA,KACUj3B,KAAAmS,UA4BV,MA1BE8kB,GAAA32B,UAAA22B,UAAA,SAAOjjB,GAEL,MADAhU,MAAKmS,OAAO6B,GAAO,MACZ,GAGTijB,EAAA32B,UAAA82B,IAAA,SAAIpjB,EAAajM,GAEf,MADA/H,MAAKmS,OAAO6B,GAAOjM,EACZ/H,MAGTi3B,EAAA32B,UAAAwkB,IAAA,SAAI9Q,GACF,MAAOhU,MAAKmS,OAAO6B,IAGrBijB,EAAA32B,UAAAmJ,QAAA,SAAQyuB,EAAoCthB,GAC1C,GAAMzE,GAASnS,KAAKmS,MACpB,KAAK,GAAI6B,KAAO7B,GACVA,EAAO9R,eAAe2T,IAAwB,OAAhB7B,EAAO6B,IACvCkkB,EAAGv4B,KAAKiX,EAASzE,EAAO6B,GAAMA,IAKpCijB,EAAA32B,UAAAk3B,MAAA,WACEx3B,KAAKmS,WAET8kB,IA7Ba13B,GAAA03B,QAAOA,GxMqwVd,SAASz3B,EAAQD,EAASH,GAE/B,YyMtwVD,IAAAqE,GAAArE,EAAyB,GACzB+4B,EAAA/4B,EAAsD,IAEtDqE,GAAAC,WAAWpD,UAAU83B,eAAiBD,EAAAC,gBzM2wVhC,SAAS54B,EAAQD,EAASH,GAE/B,Y0MlwVD,SAAAg5B,KACE,MAAOp4B,MAAK2H,KAAK,GAAI0wB,I1MkwVtB,GAAIt4B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K0MnxVpF4D,EAAA3E,EAAyB,IACzBqgB,EAAArgB,EAAmB,GAYHG,GAAA64B,eAAcA,CAQ9B,IAAAC,GAAA,mBAAAA,MAIA,MAHEA,GAAA/3B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI8vB,GAAyB7vB,KAE1D4vB,KAOAC,EAAA,SAAAn3B,GAAA,QAAAm3B,KAA0Cn3B,EAAA8M,MAAAjO,KAAAuL,WAI1C,MAJ0CxL,GAAAu4B,EAAAn3B,GAC9Bm3B,EAAAh4B,UAAAoL,MAAV,SAAgB6G,GACdkN,EAAAC,QAEJ4Y,GAJ0Cv0B,EAAAC,a1MiyVpC,SAASxE,EAAQD,EAASH,GAE/B,Y2Mp0VD,IAAAqE,GAAArE,EAAyB,GACzBm5B,EAAAn5B,EAAwC,IAExCqE,GAAAC,WAAWpD,UAAUswB,QAAU2H,EAAA3H,S3My0VzB,SAASpxB,EAAQD,EAASH,GAE/B,Y4Ml0VD,SAAAwxB,KACE,MAAO5wB,MAAK2H,KAAK,GAAI6wB,I5Mk0VtB,GAAIz4B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K4Ml1VpF4D,EAAA3E,EAAyB,GAYTG,GAAAqxB,QAAOA,CAQvB,IAAA4H,GAAA,mBAAAA,MAIA,MAHEA,GAAAl4B,UAAAX,KAAA,SAAM8U,EAA+B3L,GACnC,MAAOA,GAAON,WAAW,GAAIiwB,GAAkBhkB,KAEnD+jB,KAOAC,EAAA,SAAAt3B,GACE,QAAAs3B,GAAYpxB,GACVlG,EAAAxB,KAAAK,KAAMqH,GAiBV,MAnBgCtH,GAAA04B,EAAAt3B,GAKtBs3B,EAAAn4B,UAAAgS,eAAR,SAAuBse,GACrB,GAAMvpB,GAAcrH,KAAKqH,WAEzBA,GAAY9F,KAAKqvB,GACjBvpB,EAAYiB,YAGJmwB,EAAAn4B,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAKsS,gBAAe,IAGZmmB,EAAAn4B,UAAAsL,UAAV,WACE5L,KAAKsS,gBAAe,IAExBmmB,GAnBgC10B,EAAAC,a5Ms2V1B,SAASxE,EAAQD,EAASH,GAE/B,Y6Mx4VD,IAAAqE,GAAArE,EAAyB,GACzBs5B,EAAAt5B,EAAoC,IAEpCqE,GAAAC,WAAWpD,UAAUq4B,MAAQD,EAAAC,O7M64VvB,SAASn5B,EAAQD,EAASH,GAE/B,Y8Mh2VD,SAAAu5B,GAAyBlJ,GACvB,MAAOzvB,MAAK2H,KAAK,GAAIixB,GAAcnJ,I9Mg2VpC,GAAI1vB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K8Mj5VpFuM,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAC1B0S,EAAA1S,EAA8B,IAC9B2S,EAAA3S,EAAgC,GA0ChBG,GAAAo5B,MAAKA,CAQrB,IAAAC,GAAA,WACE,QAAAA,GAAoBnJ,GAAAzvB,KAAAyvB,mBAMtB,MAHEmJ,GAAAt4B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIqwB,GAAsBpwB,EAAYzI,KAAKyvB,oBAExEmJ,KAOAC,EAAA,SAAA13B,GAME,QAAA03B,GAAYxxB,EACQooB,GAClBtuB,EAAAxB,KAAAK,KAAMqH,GADYrH,KAAAyvB,mBAJZzvB,KAAAoZ,UAAoB,EA0C9B,MA7CoCrZ,GAAA84B,EAAA13B,GAWxB03B,EAAAv4B,UAAAoL,MAAV,SAAgB3D,GAGd,GAFA/H,KAAK+H,MAAQA,EACb/H,KAAKoZ,UAAW,GACXpZ,KAAK84B,UAAW,CACnB,GAAMhJ,GAAWpjB,EAAAO,SAASjN,KAAKyvB,kBAAkB1nB,EAC7C+nB,KAAanjB,EAAAO,YACflN,KAAKqH,YAAYlF,MAAMwK,EAAAO,YAAYC,GAEnCnN,KAAKqJ,IAAIrJ,KAAK84B,UAAY/mB,EAAAM,kBAAkBrS,KAAM8vB,MAKxD+I,EAAAv4B,UAAAy4B,cAAA,WACE,GAAAjsB,GAAA9M,KAAQ+H,EAAA+E,EAAA/E,MAAOqR,EAAAtM,EAAAsM,SAAU0f,EAAAhsB,EAAAgsB,SACrBA,KACF94B,KAAKyN,OAAOqrB,GACZ94B,KAAK84B,UAAY,KACjBA,EAAUvwB,eAER6Q,IACFpZ,KAAK+H,MAAQ,KACb/H,KAAKoZ,UAAW,EAChBpZ,KAAKqH,YAAY9F,KAAKwG,KAI1B8wB,EAAAv4B,UAAAkS,WAAA,SAAWC,EAAeC,EAAeC,EAAoBC,GAC3D5S,KAAK+4B,iBAGPF,EAAAv4B,UAAAgS,eAAA,WACEtS,KAAK+4B,iBAETF,GA7CoC/mB,EAAAkB,kB9M27V9B,SAASxT,EAAQD,EAASH,GAE/B,Y+MrgWD,IAAAqE,GAAArE,EAAyB,GACzB45B,EAAA55B,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAU24B,UAAYD,EAAAC,W/M0gW3B,SAASz5B,EAAQD,EAASH,GAE/B,YgN99VD,SAAA65B,GAA6BnJ,EAAkBngB,GAC7C,MAD6C,UAAAA,MAAAzJ,EAAAU,OACtC5G,KAAK2H,KAAK,GAAIuxB,GAAkBpJ,EAAUngB,IAyDnD,QAAAN,GAAyB5G,GACvBA,EAAWswB,gBhNo6VZ,GAAIh5B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KgNnhWpF+F,EAAA9G,EAAoB,IAGpB2E,EAAA3E,EAAyB,GA8CTG,GAAA05B,UAASA,CAQzB,IAAAC,GAAA,WACE,QAAAA,GAAoBpJ,EACAngB,GADA3P,KAAA8vB,WACA9vB,KAAA2P,YAMtB,MAHEupB,GAAA54B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI2wB,GAAoB1wB,EAAYzI,KAAK8vB,SAAU9vB,KAAK2P,aAErFupB,KAOAC,EAAA,SAAAh4B,GAME,QAAAg4B,GAAY9xB,EACQyoB,EACAngB,GAClBxO,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA8vB,WACA9vB,KAAA2P,YALZ3P,KAAAoZ,UAAoB,EA8B9B,MAjCqCrZ,GAAAo5B,EAAAh4B,GAYzBg4B,EAAA74B,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAK+H,MAAQA,EACb/H,KAAKoZ,UAAW,EACXpZ,KAAK84B,WACR94B,KAAKqJ,IAAIrJ,KAAK84B,UAAY94B,KAAK2P,UAAUG,SAAST,EAAcrP,KAAK8vB,SAAU9vB,QAInFm5B,EAAA74B,UAAAy4B,cAAA,WACE,GAAAjsB,GAAA9M,KAAQ+H,EAAA+E,EAAA/E,MAAOqR,EAAAtM,EAAAsM,SAAU0f,EAAAhsB,EAAAgsB,SACrBA,KACF94B,KAAKyN,OAAOqrB,GACZ94B,KAAK84B,UAAY,KACjBA,EAAUvwB,eAER6Q,IACFpZ,KAAK+H,MAAQ,KACb/H,KAAKoZ,UAAW,EAChBpZ,KAAKqH,YAAY9F,KAAKwG,KAG5BoxB,GAjCqCp1B,EAAAC,ahNkjW/B,SAASxE,EAAQD,EAASH,GAE/B,YiN3nWD,IAAAqE,GAAArE,EAAyB,GACzBg6B,EAAAh6B,EAAkC,IAElCqE,GAAAC,WAAWpD,UAAUwe,KAAYsa,EAAAta,MjNgoW3B,SAAStf,EAAQD,EAASH,GAE/B,YkNhnWD,SAAA0f,GAA2BiQ,EACApZ,EACA8a,GACzB,MAAOzwB,MAAK2H,KAAK,GAAI0xB,GAAatK,EAAWpZ,EAAgB8a,EAAczwB,OlN8mW5E,GAAID,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KkNxoWpF4D,EAAA3E,EAAyB,IACzByF,EAAAzF,EAAyB,IAmBTG,GAAAuf,KAAIA,CAapB,IAAAua,GAAA,WACE,QAAAA,GAAoBtK,EACApZ,EACA8a,EACA3nB,GAHA9I,KAAA+uB,YACA/uB,KAAA2V,iBACA3V,KAAAywB,eACAzwB,KAAA8I,SAMtB,MAHEuwB,GAAA/4B,UAAAX,KAAA,SAAK8U,EAAyB3L,GAC5B,MAAOA,GAAON,WAAW,GAAI8wB,GAAe7kB,EAAUzU,KAAK+uB,UAAW/uB,KAAK2V,eAAgB3V,KAAKywB,aAAczwB,KAAK8I,UAEvHuwB,KAOAC,EAAA,SAAAn4B,GAKE,QAAAm4B,GAAYjyB,EACQ0nB,EACApZ,EACA8a,EACA3nB,GAClB3H,EAAAxB,KAAAK,KAAMqH,GAJYrH,KAAA+uB,YACA/uB,KAAA2V,iBACA3V,KAAAywB,eACAzwB,KAAA8I,SAPZ9I,KAAAoZ,UAAoB,EACpBpZ,KAAAqN,MAAgB,EAQM,mBAAjBojB,KACTzwB,KAAKqwB,UAAYI,EACjBzwB,KAAKoZ,UAAW,GAyDtB,MAtEmCrZ,GAAAu5B,EAAAn4B,GAiBvBm4B,EAAAh5B,UAAAoL,MAAV,SAAgB3D,GACd,GAAMsF,GAAQrN,KAAKqN,OACnB,IAAIrN,KAAK+uB,UACP/uB,KAAKkvB,cAAcnnB,EAAOsF,OACrB,CACL,GAAIrN,KAAK2V,eAEP,WADA3V,MAAKq2B,mBAAmBtuB,EAAOsF,EAGjCrN,MAAKqwB,UAAYtoB,EACjB/H,KAAKoZ,UAAW,IAIZkgB,EAAAh5B,UAAA4uB,cAAR,SAAsBnnB,EAAUsF,GAC9B,GAAIwB,EACJ,KACEA,EAAS7O,KAAK+uB,UAAUhnB,EAAOsF,EAAOrN,KAAK8I,QAC3C,MAAOT,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzB,GAAIwG,EAAQ,CACV,GAAI7O,KAAK2V,eAEP,WADA3V,MAAKq2B,mBAAmBtuB,EAAOsF,EAGjCrN,MAAKqwB,UAAYtoB,EACjB/H,KAAKoZ,UAAW,IAIZkgB,EAAAh5B,UAAA+1B,mBAAR,SAA2BtuB,EAAUsF,GACnC,GAAIwB,EACJ,KACEA,EAAS7O,KAAK2V,eAAe5N,EAAOsF,GACpC,MAAOhF,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAKqwB,UAAYxhB,EACjB7O,KAAKoZ,UAAW,GAGRkgB,EAAAh5B,UAAAsL,UAAV,WACE,GAAMvE,GAAcrH,KAAKqH,WACrBrH,MAAKoZ,UACP/R,EAAY9F,KAAKvB,KAAKqwB,WACtBhpB,EAAYiB,YAEZjB,EAAYlF,MAAM,GAAI0C,GAAAC,aAG5Bw0B,GAtEmCv1B,EAAAC,alN2sW7B,SAASxE,EAAQD,EAASH,GAE/B,YmNhwWD,IAAAqE,GAAArE,EAAyB,GACzBm6B,EAAAn6B,EAAqC,IAErCqE,GAAAC,WAAWpD,UAAXmD,OAA2B81B,EAAAC,SAC3B/1B,EAAAC,WAAWpD,UAAUm5B,QAAUF,EAAAC,UnNqwWzB,SAASh6B,EAAQD,GAEtB,YoNpwWD,SAAAi6B,GAA+B5pB,GAC7B,MAAOA,GAAK5P,MADET,EAAAi6B,SAAQA,GpNmxWlB,SAASh6B,EAAQD,EAASH,GAE/B,YqN5xWD,IAAAqE,GAAArE,EAAyB,GACzBs6B,EAAAt6B,EAAoC,IAEpCqE,GAAAC,WAAWpD,UAAUq5B,MAAQD,EAAAC,OrNiyWvB,SAASn6B,EAAQD,EAASH,GAE/B,YsN1xWD,SAAAu6B,GAAyB5K,EACAnY,GACvB,MAAO5W,MAAK2H,KAAK,GAAIiyB,GAAc7K,EAAWnY,EAAS5W,OtNyxWxD,GAAID,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KsNxyWpF4D,EAAA3E,EAAyB,GAUTG,GAAAo6B,MAAKA,CASrB,IAAAC,GAAA,WACE,QAAAA,GAAoB7K,EACAnY,EACA9N,GAFA9I,KAAA+uB,YACA/uB,KAAA4W,UACA5W,KAAA8I,SAMtB,MAHE8wB,GAAAt5B,UAAAX,KAAA,SAAK8U,EAA+B3L,GAClC,MAAOA,GAAON,WAAW,GAAIqxB,GAAgBplB,EAAUzU,KAAK+uB,UAAW/uB,KAAK4W,QAAS5W,KAAK8I,UAE9F8wB,KAOAC,EAAA,SAAA14B,GAGE,QAAA04B,GAAYxyB,EACQ0nB,EACAnY,EACA9N,GAClB3H,EAAAxB,KAAAK,KAAMqH,GAHYrH,KAAA+uB,YACA/uB,KAAA4W,UACA5W,KAAA8I,SALZ9I,KAAAqN,MAAgB,EAOtBrN,KAAK4W,QAAUA,GAAW5W,KAyB9B,MAjCiCD,GAAA85B,EAAA14B,GAWvB04B,EAAAv5B,UAAAgS,eAAR,SAAuBwnB,GACrB95B,KAAKqH,YAAY9F,KAAKu4B,GACtB95B,KAAKqH,YAAYiB,YAGTuxB,EAAAv5B,UAAAoL,MAAV,SAAgB3D,GACd,GAAI8G,IAAS,CACb,KACEA,EAAS7O,KAAK+uB,UAAUpvB,KAAKK,KAAK4W,QAAS7O,EAAO/H,KAAKqN,QAASrN,KAAK8I,QACrE,MAAOT,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAIpBwG,GACH7O,KAAKsS,gBAAe,IAIdunB,EAAAv5B,UAAAsL,UAAV,WACE5L,KAAKsS,gBAAe,IAExBunB,GAjCiC91B,EAAAC,atNw0W3B,SAASxE,EAAQD,EAASH,GAE/B,YuN/2WD,IAAAqE,GAAArE,EAAyB,GACzB26B,EAAA36B,EAAgC,IAEhCqE,GAAAC,WAAWpD,UAAUqC,IAAMo3B,EAAAp3B,KvNo3WrB,SAASnD,EAAQD,EAASH,GAE/B,YwNr1WD,SAAAuD,GAA0BmO,EAAyC8F,GACjE,GAAuB,kBAAZ9F,GACT,KAAM,IAAI6C,WAAU,6DAEtB,OAAO3T,MAAK2H,KAAK,GAAIqyB,GAAYlpB,EAAS8F,IxNk1W3C,GAAI7W,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KwN73WpF4D,EAAA3E,EAAyB,GAoCTG,GAAAoD,IAAGA,CAWnB,IAAAq3B,GAAA,WACE,QAAAA,GAAoBlpB,EAAiD8F,GAAjD5W,KAAA8Q,UAAiD9Q,KAAA4W,UAMvE,MAHEojB,GAAA15B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIyxB,GAAcxxB,EAAYzI,KAAK8Q,QAAS9Q,KAAK4W,WAE9EojB,KAOAC,EAAA,SAAA94B,GAIE,QAAA84B,GAAY5yB,EACQyJ,EACR8F,GACVzV,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA8Q,UAJpB9Q,KAAA2R,MAAgB,EAOd3R,KAAK4W,QAAUA,GAAW5W,KAe9B,MAvBkCD,GAAAk6B,EAAA94B,GAatB84B,EAAA35B,UAAAoL,MAAV,SAAgB3D,GACd,GAAI8G,EACJ,KACEA,EAAS7O,KAAK8Q,QAAQnR,KAAKK,KAAK4W,QAAS7O,EAAO/H,KAAK2R,SACrD,MAAOtJ,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAKqH,YAAY9F,KAAKsN,IAE1BorB,GAvBkCl2B,EAAAC,axNq5W5B,SAASxE,EAAQD,EAASH,GAE/B,YyNp9WD,IAAAqE,GAAArE,EAAyB,GACzB86B,EAAA96B,EAAoC,IAEpCqE,GAAAC,WAAWpD,UAAU65B,MAAQD,EAAAC,OzNy9WvB,SAAS36B,EAAQD,EAASH,GAE/B,Y0Nj8WD,SAAA+6B,GAA4BpyB,GAC1B,MAAO/H,MAAK2H,KAAK,GAAIyyB,GAAcryB,I1Ni8WpC,GAAIhI,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K0Nl+WpF4D,EAAA3E,EAAyB,GA6BTG,GAAA46B,MAAKA,CAQrB,IAAAC,GAAA,WAIE,QAAAA,GAAYryB,GACV/H,KAAK+H,MAAQA,EAMjB,MAHEqyB,GAAA95B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI6xB,GAAgB5xB,EAAYzI,KAAK+H,SAElEqyB,KAOAC,EAAA,SAAAl5B,GAIE,QAAAk5B,GAAYhzB,EAA4BU,GACtC5G,EAAAxB,KAAAK,KAAMqH,GACNrH,KAAK+H,MAAQA,EAMjB,MAZoChI,GAAAs6B,EAAAl5B,GASxBk5B,EAAA/5B,UAAAoL,MAAV,SAAgBa,GACdvM,KAAKqH,YAAY9F,KAAKvB,KAAK+H,QAE/BsyB,GAZoCt2B,EAAAC,a1Ny+W9B,SAASxE,EAAQD,EAASH,GAE/B,Y2NliXD,IAAAqE,GAAArE,EAAyB,GACzBk7B,EAAAl7B,EAAgD,IAEhDqE,GAAAC,WAAWpD,UAAUi6B,YAAcD,EAAAC,a3NuiX7B,SAAS/6B,EAAQD,EAASH,GAE/B,Y4NngXD,SAAAm7B,KACE,MAAOv6B,MAAK2H,KAAK,GAAI6yB,I5NmgXtB,GAAIz6B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K4N/iXpF4D,EAAA3E,EAAyB,IACzBuF,EAAAvF,EAA2B,GAuCXG,GAAAg7B,YAAWA,CAQ3B,IAAAC,GAAA,mBAAAA,MAIA,MAHEA,GAAAl6B,UAAAX,KAAA,SAAK8I,EAAyCK,GAC5C,MAAOA,GAAON,WAAW,GAAIiyB,GAAsBhyB,KAEvD+xB,KAOAC,EAAA,SAAAt5B,GACE,QAAAs5B,GAAYpzB,GACVlG,EAAAxB,KAAAK,KAAMqH,GAkBV,MApBuCtH,GAAA06B,EAAAt5B,GAK3Bs5B,EAAAn6B,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAKqH,YAAY9F,KAAKoD,EAAAC,aAAamU,WAAWhR,KAGtC0yB,EAAAn6B,UAAAqL,OAAV,SAAiBtD,GACf,GAAMhB,GAAcrH,KAAKqH,WACzBA,GAAY9F,KAAKoD,EAAAC,aAAaoU,YAAY3Q,IAC1ChB,EAAYiB,YAGJmyB,EAAAn6B,UAAAsL,UAAV,WACE,GAAMvE,GAAcrH,KAAKqH,WACzBA,GAAY9F,KAAKoD,EAAAC,aAAaqU,kBAC9B5R,EAAYiB,YAEhBmyB,GApBuC12B,EAAAC,a5NskXjC,SAASxE,EAAQD,EAASH,GAE/B,Y6NpoXD,IAAAqE,GAAArE,EAAyB,GACzBs7B,EAAAt7B,EAAgC,IAEhCqE,GAAAC,WAAWpD,UAAUspB,IAAM8Q,EAAA9Q,K7NyoXrB,SAASpqB,EAAQD,EAASH,GAE/B,Y8NhoXD,SAAAwqB,GAAuB+Q,GACrB,GAAM/Q,GAA4C,kBAAb+Q,GACjCA,EACA,SAACpuB,EAAGsmB,GAAM,MAAAtmB,GAAIsmB,EAAItmB,EAAIsmB,EAC1B,OAAO7yB,MAAK2H,KAAK,GAAIizB,GAAAC,eAAejR,IAlBtC,GAAAgR,GAAAx7B,EAA6B,IAcbG,GAAAqqB,IAAGA,G9NypXb,SAASpqB,EAAQD,EAASH,GAE/B,Y+NznXD,SAAA07B,GAA6BC,EAAsCC,GACjE,MAAOh7B,MAAK2H,KAAK,GAAIkzB,GAAeE,EAAaC,I/NynXlD,GAAIj7B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K+N5qXpF4D,EAAA3E,EAAyB,GA+CTG,GAAAu7B,OAAMA,CAQtB,IAAAD,GAAA,WAEE,QAAAA,GAAoBE,EAA8CC,GAA9Ch7B,KAAA+6B,cAA8C/6B,KAAAg7B,OAMpE,MAHEH,GAAAv6B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIyyB,GAAiBxyB,EAAYzI,KAAK+6B,YAAa/6B,KAAKg7B,QAErFH,IARat7B,GAAAs7B,eAAcA,CAe3B,IAAAI,GAAA,SAAA95B,GAME,QAAA85B,GAAY5zB,EACQ0zB,EACRC,GACV75B,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA+6B,cAHpB/6B,KAAAoZ,UAAoB,EAMlBpZ,KAAKk7B,IAAMF,EACXh7B,KAAK+6B,YAAcA,EACnB/6B,KAAKm7B,QAA0B,mBAATH,GA6B1B,MAzC4Cj7B,GAAAk7B,EAAA95B,GAehC85B,EAAA36B,UAAAoL,MAAV,SAAgB3D,GACV/H,KAAKoZ,WAAapZ,KAAKoZ,SAAWpZ,KAAKm7B,SACzCn7B,KAAKo7B,WAAWrzB,IAEhB/H,KAAKk7B,IAAMnzB,EACX/H,KAAKoZ,UAAW,IAIZ6hB,EAAA36B,UAAA86B,WAAR,SAAmBrzB,GACjB,GAAI8G,EACJ,KACEA,EAAS7O,KAAK+6B,YAAe/6B,KAAKk7B,IAAKnzB,GACvC,MAAOM,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAKk7B,IAAMrsB,GAGHosB,EAAA36B,UAAAsL,UAAV,YACM5L,KAAKoZ,UAAYpZ,KAAKm7B,UACxBn7B,KAAKqH,YAAY9F,KAAKvB,KAAKk7B,KAE7Bl7B,KAAKqH,YAAYiB,YAErB2yB,GAzC4Cl3B,EAAAC,WAA/BzE,GAAA07B,iBAAgBA,G/NqtXvB,SAASz7B,EAAQD,EAASH,GAE/B,YgO9xXD,IAAAqE,GAAArE,EAAyB,GACzBwf,EAAAxf,EAAoC,GAEpCqE,GAAAC,WAAWpD,UAAUsC,MAAQgc,EAAAhc,OhOmyXvB,SAASpD,EAAQD,EAASH,GAE/B,YiOxyXD,IAAAqE,GAAArE,EAAyB,GACzB+U,EAAA/U,EAA0C,GAE1CqE,GAAAC,WAAWpD,UAAU+T,SAAWF,EAAAE,UjO6yX1B,SAAS7U,EAAQD,EAASH,GAE/B,YkOlzXD,IAAAqE,GAAArE,EAAyB,GACzB4uB,EAAA5uB,EAA0C,IAE1CqE,GAAAC,WAAWpD,UAAU4tB,SAAgBF,EAAAE,SACrCzqB,EAAAC,WAAWpD,UAAU+6B,QAAerN,EAAAE,UlOuzX9B,SAAS1uB,EAAQD,EAASH,GAE/B,YmO7zXD,IAAAqE,GAAArE,EAAyB,GACzBqvB,EAAArvB,EAA8C,IAE9CqE,GAAAC,WAAWpD,UAAUg7B,UAAiB7M,EAAAE,WACtClrB,EAAAC,WAAWpD,UAAUquB,WAAkBF,EAAAE,YnOk0XjC,SAASnvB,EAAQD,EAASH,GAE/B,YoOx0XD,IAAAqE,GAAArE,EAAyB,GACzBm8B,EAAAn8B,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUk7B,UAAYD,EAAAC,WpO60X3B,SAASh8B,EAAQD,EAASH,GAE/B,YqOj0XD,SAAAo8B,GAAgC1qB,EACAkqB,EACA1mB,GAC9B,MAD8B,UAAAA,MAAqBC,OAAOC,mBACnDxU,KAAK2H,KAAK,GAAI8zB,GAAkB3qB,EAASkqB,EAAM1mB,IrO+zXvD,GAAIvU,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ;AAEnDG,EAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KqOn1XpFuM,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAC1B2S,EAAA3S,EAAgC,IAChC0S,EAAA1S,EAA8B,GAWdG,GAAAi8B,UAASA,CAUzB,IAAAC,GAAA,WACE,QAAAA,GAAoB3qB,EACAkqB,EACA1mB,GAFAtU,KAAA8Q,UACA9Q,KAAAg7B,OACAh7B,KAAAsU,aAQtB,MALEmnB,GAAAn7B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIkzB,GAC3BjzB,EAAYzI,KAAK8Q,QAAS9Q,KAAKg7B,KAAMh7B,KAAKsU,cAGhDmnB,IAXal8B,GAAAk8B,kBAAiBA,CAkB9B,IAAAC,GAAA,SAAAv6B,GAOE,QAAAu6B,GAAYr0B,EACQyJ,EACAoqB,EACA5mB,GAClBnT,EAAAxB,KAAAK,KAAMqH,GAHYrH,KAAA8Q,UACA9Q,KAAAk7B,MACAl7B,KAAAsU,aATZtU,KAAAoZ,UAAoB,EACpBpZ,KAAAsQ,cAAwB,EACxBtQ,KAAA2U,UACA3U,KAAAkS,OAAiB,EACflS,KAAAqN,MAAgB,EA6D5B,MAlE+CtN,GAAA27B,EAAAv6B,GAcnCu6B,EAAAp7B,UAAAoL,MAAV,SAAgB3D,GACd,GAAI/H,KAAKkS,OAASlS,KAAKsU,WAAY,CACjC,GAAMjH,GAAQrN,KAAKqN,QACbqJ,EAAMhK,EAAAO,SAASjN,KAAK8Q,SAAS9Q,KAAKk7B,IAAKnzB,GACvCV,EAAcrH,KAAKqH,WACrBqP,KAAQ/J,EAAAO,YACV7F,EAAYlF,MAAMwK,EAAAO,YAAYC,IAE9BnN,KAAKkS,SACLlS,KAAKytB,UAAU/W,EAAK3O,EAAOsF,QAG7BrN,MAAK2U,OAAOhM,KAAKZ,IAIb2zB,EAAAp7B,UAAAmtB,UAAR,SAAkB/W,EAAU3O,EAAUsF,GACpCrN,KAAKqJ,IAAI0I,EAAAM,kBAAwBrS,KAAM0W,EAAK3O,EAAOsF,KAG3CquB,EAAAp7B,UAAAsL,UAAV,WACE5L,KAAKsQ,cAAe,EACA,IAAhBtQ,KAAKkS,QAAuC,IAAvBlS,KAAK2U,OAAO1M,SAC/BjI,KAAKoZ,YAAa,GACpBpZ,KAAKqH,YAAY9F,KAAKvB,KAAKk7B,KAE7Bl7B,KAAKqH,YAAYiB,aAIrBozB,EAAAp7B,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACD,GAAAxL,GAAArH,KAAAqH,WACRrH,MAAKk7B,IAAMxoB,EACX1S,KAAKoZ,UAAW,EAChB/R,EAAY9F,KAAKmR,IAGnBgpB,EAAAp7B,UAAAgS,eAAA,SAAeO,GACb,GAAM8B,GAAS3U,KAAK2U,MACpB3U,MAAKyN,OAAOoF,GACZ7S,KAAKkS,SACDyC,EAAO1M,OAAS,EAClBjI,KAAK0L,MAAMiJ,EAAOhE,SACO,IAAhB3Q,KAAKkS,QAAgBlS,KAAKsQ,eAC/BtQ,KAAKoZ,YAAa,GACpBpZ,KAAKqH,YAAY9F,KAAKvB,KAAKk7B,KAE7Bl7B,KAAKqH,YAAYiB,aAGvBozB,GAlE+C5pB,EAAAkB,gBAAlCzT,GAAAm8B,oBAAmBA,GrOk5X1B,SAASl8B,EAAQD,EAASH,GAE/B,YsOj8XD,IAAAqE,GAAArE,EAAyB,GACzBu8B,EAAAv8B,EAAgC,IAEhCqE,GAAAC,WAAWpD,UAAUs7B,IAAMD,EAAAC,KtOs8XrB,SAASp8B,EAAQD,EAASH,GAE/B,YuO97XD,SAAAw8B,GAAuBjB,GACrB,GAAMiB,GAA4C,kBAAbjB,GACjCA,EACA,SAACpuB,EAAGsmB,GAAM,MAAAtmB,GAAIsmB,EAAItmB,EAAIsmB,EAC1B,OAAO7yB,MAAK2H,KAAK,GAAIizB,GAAAC,eAAee,IAjBtC,GAAAhB,GAAAx7B,EAA6B,IAabG,GAAAq8B,IAAGA,GvOs9Xb,SAASp8B,EAAQD,EAASH,GAE/B,YwOr+XD,IAAAqE,GAAArE,EAAyB,GACzBy8B,EAAAz8B,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUw7B,UAAiBD,EAAAC,WxO0+XhC,SAASt8B,EAAQD,EAASH,GAE/B,YyOx9XD,SAAA08B,GAA6BC,EACAtsB,GAC3B,GAAIusB,EASJ,OAPEA,GADqC,kBAA5BD,GAC0BA,EAElB,WACf,MAAmBA,IAIftsB,EAEN,GAAIlL,GAAAC,oBAAoBxE,KAAMg8B,EAAgBvsB,GAD9C,GAAIhL,GAAAC,sBAAsB1E,KAAMg8B,GAlCpC,GAAAz3B,GAAAnF,EAAkC,KAClCqF,EAAArF,EAAoC,IAqBpBG,GAAAu8B,UAASA,GzOigYnB,SAASt8B,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K0O9hYpFsD,EAAArE,EAAyB,GAGzBqF,EAAArF,EAAoC,KAEpCoF,EAAA,SAAArD,GACE,QAAAqD,GAAsBsE,EACFkzB,EACAvsB,GAClBtO,EAAAxB,KAAAK,MAHoBA,KAAA8I,SACF9I,KAAAg8B,iBACAh8B,KAAAyP,WAWtB,MAd4C1P,GAAAyE,EAAArD,GAOhCqD,EAAAlE,UAAAkI,WAAV,SAAqBC,GACnB,GAAAqE,GAAA9M,KAAQyP,EAAA3C,EAAA2C,SAAU3G,EAAAgE,EAAAhE,OACZmzB,EAAc,GAAIx3B,GAAAC,sBAAsBoE,EAAQ9I,KAAKg8B,gBACrD9xB,EAAeuF,EAASwsB,GAAa/5B,UAAUuG,EAErD,OADAyB,GAAab,IAAI4yB,EAAYC,WACtBhyB,GAEX1F,GAd4Cf,EAAAC,WAA/BnE,GAAAiF,oBAAmBA,G1OmjY1B,SAAShF,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K2O/jYpFqD,EAAApE,EAAyC,GAEzCqE,EAAArE,EAAyB,GACzB2E,EAAA3E,EAAyB,IACzByE,EAAAzE,EAA2B,IAK3BsF,EAAA,SAAAvD,GAME,QAAAuD,GAAsBoE,EACAkzB,GACpB76B,EAAAxB,KAAAK,MAFoBA,KAAA8I,SACA9I,KAAAg8B,iBAJZh8B,KAAAm8B,UAAoB,EAuChC,MA1C8Cp8B,GAAA2E,EAAAvD,GAWlCuD,EAAApE,UAAAkI,WAAV,SAAqBC,GACnB,MAAOzI,MAAKktB,aAAahrB,UAAUuG,IAG3B/D,EAAApE,UAAA4sB,WAAV,WACE,GAAMrlB,GAAU7H,KAAKo8B,QAIrB,OAHKv0B,KAAWA,EAAQL,YACtBxH,KAAKo8B,SAAWp8B,KAAKg8B,kBAEhBh8B,KAAKo8B,UAGd13B,EAAApE,UAAA47B,QAAA,WACE,GAAIG,GAAar8B,KAAKs8B,WAYtB,OAXKD,KACHA,EAAar8B,KAAKs8B,YAAc,GAAIz4B,GAAAC,aACpCu4B,EAAWhzB,IAAIrJ,KAAK8I,OACjB5G,UAAU,GAAIq6B,GAAsBv8B,KAAKktB,aAAcltB,QACtDq8B,EAAW90B,gBACbvH,KAAKs8B,YAAc,KACnBD,EAAax4B,EAAAC,aAAa4E,OAE1B1I,KAAKs8B,YAAcD,GAGhBA,GAGT33B,EAAApE,UAAAk8B,SAAA,WACE,MAAOx8B,MAAK2H,KAAK,GAAI80B,GAAoBz8B,QAE7C0E,GA1C8CjB,EAAAC,WAAjCnE,GAAAmF,sBAAqBA,CA4ClC,IAAA63B,GAAA,SAAAp7B,GACE,QAAAo7B,GAAYl1B,EACQ40B,GAClB96B,EAAAxB,KAAAK,KAAMqH,GADYrH,KAAAi8B,cAwBtB,MA1BuCl8B,GAAAw8B,EAAAp7B,GAK3Bo7B,EAAAj8B,UAAAqL,OAAV,SAAiBtD,GACfrI,KAAKsM,eACLnL,EAAAb,UAAMqL,OAAMhM,KAAAK,KAACqI,IAELk0B,EAAAj8B,UAAAsL,UAAV,WACE5L,KAAKsM,eACLnL,EAAAb,UAAMsL,UAASjM,KAAAK,OAEPu8B,EAAAj8B,UAAAgM,aAAV,WACU,GAAA2vB,GAAAj8B,KAAAi8B,WACR,IAAIA,EAAa,CACfj8B,KAAKi8B,YAAc,IACnB,IAAMI,GAAoBJ,EAAaK,WAChCL,GAAaE,UAAY,EACzBF,EAAaG,SAAW,KACxBH,EAAaK,YAAc,KAC9BD,GACFA,EAAW9zB,gBAInBg0B,GA1BuC/4B,EAAA4D,mBA4BvCq1B,EAAA,WACE,QAAAA,GAAoBR,GAAAj8B,KAAAi8B,cAgBtB,MAdEQ,GAAAn8B,UAAAX,KAAA,SAAK8I,EAA2BK,GAEtB,GAAAmzB,GAAAj8B,KAAAi8B,WACDA,GAAaE,WAEpB,IAAMO,GAAa,GAAIC,GAAmBl0B,EAAYwzB,GAChD/xB,EAAepB,EAAON,WAAWk0B,EAMvC,OAJKA,GAAWn1B,iBACPm1B,EAAYL,WAAaJ,EAAYC,WAGvChyB,GAEXuyB,KAEAE,EAAA,SAAAx7B,GAIE,QAAAw7B,GAAYt1B,EACQ40B,GAClB96B,EAAAxB,KAAAK,KAAMqH,GADYrH,KAAAi8B,cAwDtB,MA7DoCl8B,GAAA48B,EAAAx7B,GASxBw7B,EAAAr8B,UAAAgM,aAAV,WAEU,GAAA2vB,GAAAj8B,KAAAi8B,WACR,KAAKA,EAEH,YADAj8B,KAAKq8B,WAAa,KAIpBr8B,MAAKi8B,YAAc,IACnB,IAAMO,GAAkBP,EAAaE,SACrC,IAAIK,GAAY,EAEd,YADAx8B,KAAKq8B,WAAa,KAKpB,IADOJ,EAAaE,UAAYK,EAAW,EACvCA,EAAW,EAEb,YADAx8B,KAAKq8B,WAAa,KA2BZ,IAAAA,GAAAr8B,KAAAq8B,WACFO,EAA0BX,EAAaK,WAC7Ct8B,MAAKq8B,WAAa,MAEdO,GAAsBP,GAAcO,IAAqBP,GAC3DO,EAAiBr0B,eAGvBo0B,GA7DoC54B,EAAAC,a3OonY9B,SAASxE,EAAQD,EAASH,GAE/B,Y4OztYD,IAAAqE,GAAArE,EAAyB,GACzBoX,EAAApX,EAA4C,GAE5CqE,GAAAC,WAAWpD,UAAUkY,UAAYhC,EAAAgC,W5O8tY3B,SAAShZ,EAAQD,EAASH,GAE/B,Y6OpuYD,IAAAqE,GAAArE,EAAyB,GACzBwgB,EAAAxgB,EAA4D,GAE5DqE,GAAAC,WAAWpD,UAAUuf,kBAAoBD,EAAAC,mB7OyuYnC,SAASrgB,EAAQD,EAASH,GAE/B,Y8O7uYD,IAAAqE,GAAArE,EAAyB,GACzBy9B,EAAAz9B,EAA0C,IAE1CqE,GAAAC,WAAWpD,UAAUw8B,SAAWD,EAAAC,U9OkvY1B,SAASt9B,EAAQD,EAASH,GAE/B,Y+OjtYD,SAAA09B,KACE,MAAO98B,MAAK2H,KAAK,GAAIo1B,I/OitYtB,GAAIh9B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K+O1vYpF4D,EAAA3E,EAAyB,GAqCTG,GAAAu9B,SAAQA,CAQxB,IAAAC,GAAA,mBAAAA,MAIA,MAHEA,GAAAz8B,UAAAX,KAAA,SAAK8I,EAAgCK,GACnC,MAAOA,GAAON,WAAW,GAAIw0B,GAAmBv0B,KAEpDs0B,KAOAC,EAAA,SAAA77B,GAIE,QAAA67B,GAAY31B,GACVlG,EAAAxB,KAAAK,KAAMqH,GAHArH,KAAAi9B,SAAmB,EAe7B,MAjBoCl9B,GAAAi9B,EAAA77B,GAQlC67B,EAAA18B,UAAAoL,MAAA,SAAM3D,GACA/H,KAAKi9B,QACPj9B,KAAKqH,YAAY9F,MAAMvB,KAAKk9B,KAAMn1B,IAElC/H,KAAKi9B,SAAU,EAGjBj9B,KAAKk9B,KAAOn1B,GAEhBi1B,GAjBoCj5B,EAAAC,a/O8wY9B,SAASxE,EAAQD,EAASH,GAE/B,YgPz0YD,IAAAqE,GAAArE,EAAyB,GACzB+9B,EAAA/9B,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAU88B,UAAYD,EAAAC,WhP80Y3B,SAAS59B,EAAQD,EAASH,GAE/B,YiPvyYD,SAAAg+B,GAA6BrO,EAAkCnY,GAC7D,OACEqe,EAAAxyB,OAAO9C,KAAKK,KAAM+uB,GAClBkG,EAAAxyB,OAAO9C,KAAKK,KAAMq9B,EAAAC,IAAIvO,EAAWnY,KAhDrC,GAAAymB,GAAAj+B,EAAkB,KAClB61B,EAAA71B,EAAqB,IA4CLG,GAAA69B,UAASA,GjP81YnB,SAAS59B,EAAQD,GAEtB,YkP74YD,SAAA+9B,GAAoBC,EAAgB3mB,GAClC,QAAA4mB,KACE,OAAgBA,EAASD,KAAKtvB,MAAauvB,EAAS5mB,QAASrL,WAI/D,MAFOiyB,GAASD,KAAOA,EAChBC,EAAS5mB,QAAUA,EACnB4mB,EANOj+B,EAAA+9B,IAAGA,GlP25Yb,SAAS99B,EAAQD,EAASH,GAE/B,YmP55YD,IAAAqE,GAAArE,EAAyB,GACzBq+B,EAAAr+B,EAAoC,IAEpCqE,GAAAC,WAAWpD,UAAUo9B,MAAQD,EAAAC,OnPi6YvB,SAASl+B,EAAQD,EAASH,GAE/B,YoPz4YD,SAAAs+B,KpPw6YK,IoPx6YoB,GAAAC,MAAA9tB,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAA8tB,EAAA9tB,EAAA,GAAAtE,UAAAsE,EACvB,IAAM5H,GAAS01B,EAAW11B,MAC1B,IAAe,IAAXA,EACF,KAAM,IAAI8B,OAAM,sCAElB,OAAOgwB,GAAAp3B,IAAIhD,KAAKK,KAAM49B,EAAQD,EAAY11B,IAO5C,QAAA21B,GAAiBC,EAAiB51B,GAChC,GAAM61B,GAAS,SAACvxB,GAEd,IAAK,GADDwxB,GAAcxxB,EACTnE,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC/B,GAAMtI,GAAIi+B,EAAYF,EAAMz1B,GAC5B,IAAiB,mBAANtI,GAGT,MAFAi+B,GAAcj+B,EAKlB,MAAOi+B,GAGT,OAAOD,GAvDT,GAAA/D,GAAA36B,EAAkB,IA6BFG,GAAAm+B,MAAKA,GpPs8Yf,SAASl+B,EAAQD,EAASH,GAE/B,YqPr+YD,IAAAqE,GAAArE,EAAyB,GACzB4+B,EAAA5+B,EAAwC,IAExCqE,GAAAC,WAAWpD,UAAU29B,QAAeD,EAAAC,SrP0+Y9B,SAASz+B,EAAQD,EAASH,GAE/B,YsP99YD,SAAA6+B,GAA2BxuB,GACzB,MAAOA,GAAWosB,EAAAC,UAAUn8B,KAAKK,KAAM,WAAM,UAAIwD,GAAAxC,SAAcyO,GAC7CosB,EAAAC,UAAUn8B,KAAKK,KAAM,GAAIwD,GAAAxC,SApB7C,GAAAwC,GAAApE,EAAsB,GAEtBy8B,EAAAz8B,EAAwB,IAgBRG,GAAA0+B,QAAOA,GtPu/YjB,SAASz+B,EAAQD,EAASH,GAE/B,YuP1gZD,IAAAqE,GAAArE,EAAyB,GACzB8+B,EAAA9+B,EAAwD,IAExDqE,GAAAC,WAAWpD,UAAU69B,gBAAkBD,EAAAC,iBvP+gZjC,SAAS3+B,EAAQD,EAASH,GAE/B,YwP3gZD,SAAA++B,GAAmCp2B,GACjC,MAAO8zB,GAAAC,UAAUn8B,KAAKK,KAAM,GAAIqE,GAAAC,gBAAmByD,IAXrD,GAAA1D,GAAAjF,EAA8B,KAC9By8B,EAAAz8B,EAAwB,IASRG,GAAA4+B,gBAAeA,GxP4hZzB,SAAS3+B,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KyP5iZpFqD,EAAApE,EAAsB,GAGtBg/B,EAAAh/B,EAAyB,KACzB6F,EAAA7F,EAAsC,IAKtCkF,EAAA,SAAAnD,GAEE,QAAAmD,GAAoB+5B,GAClBl9B,EAAAxB,KAAAK,MADkBA,KAAAq+B,SA6BtB,MA/BwCt+B,GAAAuE,EAAAnD,GAMtCmD,EAAAhE,UAAAg+B,SAAA,WACE,GAAIt+B,KAAKyH,SACP22B,EAAAG,WAAWv+B,KAAK0H,iBACX,KAAI1H,KAAKuH,eAGd,MAAOvH,MAAKq+B,MAFZD,GAAAG,WAAW,GAAIt5B,GAAAC,2BAMnB3E,OAAAmO,eAAIpK,EAAAhE,UAAA,SzP6iZGwkB,IyP7iZP,WACE,MAAO9kB,MAAKs+B,YzP+iZPE,YAAY,EACZC,cAAc,IyP7iZXn6B,EAAAhE,UAAAkI,WAAV,SAAqBC,GACnB,GAAMyB,GAAe/I,EAAAb,UAAMkI,WAAU7I,KAAAK,KAACyI,EAItC,OAHIyB,KAAkCA,EAAc3C,gBAClDkB,EAAWlH,KAAKvB,KAAKq+B,QAEhBn0B,GAGT5F,EAAAhE,UAAAiB,KAAA,SAAKwG,GACH5G,EAAAb,UAAMiB,KAAI5B,KAAAK,KAACA,KAAKq+B,OAASt2B,IAE7BzD,GA/BwCd,EAAAxC,QAA3BzB,GAAA+E,gBAAeA,GzPolZtB,SAAS9E,EAAQD,GAEtB,Y0P/lZD,SAAAg/B,GAA2BpxB,GAAU,KAAMA,GAA3B5N,EAAAg/B,WAAUA,G1PsmZpB,SAAS/+B,EAAQD,EAASH,GAE/B,Y2PvmZD,IAAAqE,GAAArE,EAAyB,GACzBs/B,EAAAt/B,EAAoD,IAEpDqE,GAAAC,WAAWpD,UAAUq+B,cAAgBD,EAAAC,e3P4mZ/B,SAASn/B,EAAQD,EAASH,GAE/B,Y4PrmZD,SAAAu/B,GAAiC1V,EACAC,EACAvZ,GAC/B,MAH+B,UAAAsZ,MAAqB1U,OAAOC,mBAC5B,SAAA0U,MAAqB3U,OAAOC,mBAEpDqnB,EAAAC,UAAUn8B,KAAKK,KAAM,GAAImE,GAAAC,cAAiB6kB,EAAYC,EAAYvZ,IAhB3E,GAAAxL,GAAA/E,EAA4B,KAE5By8B,EAAAz8B,EAAwB,IAWRG,GAAAo/B,cAAaA,G5P0nZvB,SAASn/B,EAAQD,EAASH,GAE/B,Y6PxoZD,IAAAqE,GAAArE,EAAyB,GACzBw/B,EAAAx/B,EAAgD,IAEhDqE,GAAAC,WAAWpD,UAAUu+B,YAAcD,EAAAC,a7P6oZ7B,SAASr/B,EAAQD,EAASH,GAE/B,Y8P1oZD,SAAAy/B,KACE,MAAOhD,GAAAC,UAAUn8B,KAAKK,KAAM,GAAIiE,GAAAC,cAVlC,GAAAD,GAAA7E,EAA2B,IAC3By8B,EAAAz8B,EAAwB,IAQRG,GAAAs/B,YAAWA,G9P0pZrB,SAASr/B,EAAQD,EAASH,GAE/B,Y+PpqZD,IAAAqE,GAAArE,EAAyB,GACzB2f,EAAA3f,EAAkC,GAElCqE,GAAAC,WAAWpD,UAAU0e,KAAOD,EAAAC,M/PyqZtB,SAASxf,EAAQD,EAASH,GAE/B,YgQ9qZD,IAAAqE,GAAArE,EAAyB,GACzBw7B,EAAAx7B,EAAsC,IAEtCqE,GAAAC,WAAWpD,UAAUw6B,OAASF,EAAAE,QhQmrZxB,SAASt7B,EAAQD,EAASH,GAE/B,YiQxrZD,IAAAqE,GAAArE,EAAyB,GACzB0/B,EAAA1/B,EAAsC,IAEtCqE,GAAAC,WAAWpD,UAAUy+B,OAASD,EAAAC,QjQ6rZxB,SAASv/B,EAAQD,EAASH,GAE/B,YkQhrZD,SAAA2/B,GAA0BptB,GACxB,MADwB,UAAAA,UACV,IAAVA,EACK,GAAIL,GAAAI,gBACFC,EAAQ,EACV3R,KAAK2H,KAAK,GAAIq3B,QAAmBh/B,OAEjCA,KAAK2H,KAAK,GAAIq3B,GAAertB,EAAQ,EAAG3R,OlQ2qZlD,GAAID,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KkQtsZpF4D,EAAA3E,EAAyB,IAEzBkS,EAAAlS,EAA8B,GAgBdG,GAAAw/B,OAAMA,CActB,IAAAC,GAAA,WACE,QAAAA,GAAoBrtB,EACA7I,GADA9I,KAAA2R,QACA3R,KAAA8I,SAKtB,MAHEk2B,GAAA1+B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIy2B,GAAiBx2B,EAAYzI,KAAK2R,MAAO3R,KAAK8I,UAE/Ek2B,KAOAC,EAAA,SAAA99B,GACE,QAAA89B,GAAY53B,EACQsK,EACA7I,GAClB3H,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA2R,QACA3R,KAAA8I,SAiBtB,MApBkC/I,GAAAk/B,EAAA99B,GAMhC89B,EAAA3+B,UAAAgI,SAAA,WACE,IAAKtI,KAAKwH,UAAW,CACnB,GAAAsF,GAAA9M,KAAQ8I,EAAAgE,EAAAhE,OAAQ6I,EAAA7E,EAAA6E,KAChB,IAAc,IAAVA,EACF,MAAOxQ,GAAAb,UAAMgI,SAAQ3I,KAAAK,KACZ2R,QACT3R,KAAK2R,MAAQA,EAAQ,GAEvB3R,KAAKuI,cACLvI,KAAKwH,WAAY,EACjBxH,KAAKuH,gBAAiB,EACtBuB,EAAO5G,UAAUlC,QAGvBi/B,GApBkCl7B,EAAAC,alQkuZ5B,SAASxE,EAAQD,EAASH,GAE/B,YmQlxZD,IAAAqE,GAAArE,EAAyB,GACzB8/B,EAAA9/B,EAAoC,IAEpCqE,GAAAC,WAAWpD,UAAU2B,MAAQi9B,EAAAj9B,OnQuxZvB,SAASzC,EAAQD,EAASH,GAE/B,YoQxwZD,SAAA6C,GAAyB0P,GACvB,MADuB,UAAAA,UAChB3R,KAAK2H,KAAK,GAAIw3B,GAAcxtB,EAAO3R,OpQwwZ3C,GAAID,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KoQhyZpF4D,EAAA3E,EAAyB,GAoBTG,GAAA0C,MAAKA,CAQrB,IAAAk9B,GAAA,WACE,QAAAA,GAAoBxtB,EACA7I,GADA9I,KAAA2R,QACA3R,KAAA8I,SAMtB,MAHEq2B,GAAA7+B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI42B,GAAgB32B,EAAYzI,KAAK2R,MAAO3R,KAAK8I,UAE9Eq2B,KAOAC,EAAA,SAAAj+B,GACE,QAAAi+B,GAAY/3B,EACQsK,EACA7I,GAClB3H,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA2R,QACA3R,KAAA8I,SAiBtB,MApBiC/I,GAAAq/B,EAAAj+B,GAM/Bi+B,EAAA9+B,UAAA6B,MAAA,SAAMkG,GACJ,IAAKrI,KAAKwH,UAAW,CACnB,GAAAsF,GAAA9M,KAAQ8I,EAAAgE,EAAAhE,OAAQ6I,EAAA7E,EAAA6E,KAChB,IAAc,IAAVA,EACF,MAAOxQ,GAAAb,UAAM6B,MAAKxC,KAAAK,KAACqI,EACVsJ,QACT3R,KAAK2R,MAAQA,EAAQ,GAEvB3R,KAAKuI,cACLvI,KAAKwH,WAAY,EACjBxH,KAAKuH,gBAAiB,EACtBuB,EAAO5G,UAAUlC,QAGvBo/B,GApBiCr7B,EAAAC,apQyzZ3B,SAASxE,EAAQD,EAASH,GAE/B,YqQt2ZD,IAAAqE,GAAArE,EAAyB,GACzBigC,EAAAjgC,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUg/B,UAAYD,EAAAC,WrQ22Z3B,SAAS9/B,EAAQD,EAASH,GAE/B,YsQr1ZD,SAAAkgC,GAA6BC,GAC3B,MAAOv/B,MAAK2H,KAAK,GAAI63B,GAAkBD,EAAUv/B,OtQq1ZlD,GAAID,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KsQl3ZpFqD,EAAApE,EAAsB,GAEtBsN,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAE1B0S,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAkBhBG,GAAA+/B,UAASA,CAQzB,IAAAE,GAAA,WACE,QAAAA,GAAsBD,EACAz2B,GADA9I,KAAAu/B,WACAv/B,KAAA8I,SAMxB,MAHE02B,GAAAl/B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIi3B,GAAoBh3B,EAAYzI,KAAKu/B,SAAUv/B,KAAK8I,UAErF02B,KAOAC,EAAA,SAAAt+B,GAME,QAAAs+B,GAAYp4B,EACQk4B,EACAz2B,GAClB3H,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAAu/B,WACAv/B,KAAA8I,SAkEtB,MA1EwC/I,GAAA0/B,EAAAt+B,GAYtCs+B,EAAAn/B,UAAA6B,MAAA,SAAMkG,GACJ,IAAKrI,KAAKwH,UAAW,CAEnB,GAAIoF,GAAS5M,KAAK4M,OACd8yB,EAAe1/B,KAAK0/B,QACpBC,EAAsB3/B,KAAK2/B,mBAE/B,IAAKD,EAQH1/B,KAAK4M,OAAS,KACd5M,KAAK2/B,oBAAsB,SATf,CAGZ,GAFA/yB,EAAS,GAAIpJ,GAAAxC,QACb0+B,EAAUhzB,EAAAO,SAASjN,KAAKu/B,UAAU3yB,GAC9B8yB,IAAY/yB,EAAAO,YACd,MAAO/L,GAAAb,UAAM6B,MAAKxC,KAAAK,KAAC2M,EAAAO,YAAYC,EAEjCwyB,GAAsB5tB,EAAAM,kBAAkBrS,KAAM0/B,GAMhD1/B,KAAKuI,cACLvI,KAAKuH,gBAAiB,EAEtBvH,KAAK4M,OAASA,EACd5M,KAAK0/B,QAAUA,EACf1/B,KAAK2/B,oBAAsBA,EAE3B/yB,EAAOrL,KAAK8G,KAINo3B,EAAAn/B,UAAAgM,aAAV,WACE,GAAAQ,GAAA9M,KAAQ4M,EAAAE,EAAAF,OAAQ+yB,EAAA7yB,EAAA6yB,mBACZ/yB,KACFA,EAAOrE,cACPvI,KAAK4M,OAAS,MAEZ+yB,IACFA,EAAoBp3B,cACpBvI,KAAK2/B,oBAAsB,MAE7B3/B,KAAK0/B,QAAU,MAGjBD,EAAAn/B,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GAET,GAAA/F,GAAA9M,KAAQ4M,EAAAE,EAAAF,OAAQ8yB,EAAA5yB,EAAA4yB,QAASC,EAAA7yB,EAAA6yB,mBACzB3/B,MAAK4M,OAAS,KACd5M,KAAK0/B,QAAU,KACf1/B,KAAK2/B,oBAAsB,KAE3B3/B,KAAKuI,cACLvI,KAAKwH,WAAY,EACjBxH,KAAKuH,gBAAiB,EAEtBvH,KAAK4M,OAASA,EACd5M,KAAK0/B,QAAUA,EACf1/B,KAAK2/B,oBAAsBA,EAE3B3/B,KAAK8I,OAAO5G,UAAUlC,OAE1By/B,GA1EwC3tB,EAAAkB,kBtQ26ZlC,SAASxT,EAAQD,EAASH,GAE/B,YuQ/9ZD,IAAAqE,GAAArE,EAAyB,GACzBwgC,EAAAxgC,EAAsC,IAEtCqE,GAAAC,WAAWpD,UAAUu/B,OAASD,EAAAC,QvQo+ZxB,SAASrgC,EAAQD,EAASH,GAE/B,YwQh8ZD,SAAAygC,GAA0BN,GACxB,MAAOv/B,MAAK2H,KAAK,GAAIm4B,GAAeP,IxQg8ZrC,GAAIx/B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KwQ1+ZpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAoChBG,GAAAsgC,OAAMA,CAQtB,IAAAC,GAAA,WACE,QAAAA,GAAoBP,GAAAv/B,KAAAu/B,WAMtB,MAHEO,GAAAx/B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIu3B,GAAiBt3B,EAAYzI,KAAKu/B,YAEnEO,KAOAC,EAAA,SAAA5+B,GAIE,QAAA4+B,GAAY14B,EAA8Bk4B,GACxCp+B,EAAAxB,KAAAK,KAAMqH,GAHArH,KAAAoZ,UAAoB,EAI1BpZ,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAMu/B,IAwBrC,MA9BqCx/B,GAAAggC,EAAA5+B,GASzB4+B,EAAAz/B,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAK+H,MAAQA,EACb/H,KAAKoZ,UAAW,GAGlB2mB,EAAAz/B,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAK6vB,aAGPkQ,EAAAz/B,UAAAgS,eAAA,WACEtS,KAAK6vB,aAGPkQ,EAAAz/B,UAAAuvB,UAAA,WACM7vB,KAAKoZ,WACPpZ,KAAKoZ,UAAW,EAChBpZ,KAAKqH,YAAY9F,KAAKvB,KAAK+H,SAGjCg4B,GA9BqCjuB,EAAAkB,kBxQmga/B,SAASxT,EAAQD,EAASH,GAE/B,YyQpkaD,IAAAqE,GAAArE,EAAyB,GACzB4gC,EAAA5gC,EAA8C,IAE9CqE,GAAAC,WAAWpD,UAAU2/B,WAAaD,EAAAC,YzQyka5B,SAASzgC,EAAQD,EAASH,GAE/B,Y0QriaD,SAAA6gC,GAA8B/iB,EAAgBvN,GAC5C,MAD4C,UAAAA,MAAAzJ,EAAAU,OACrC5G,KAAK2H,KAAK,GAAIu4B,GAAmBhjB,EAAQvN,IA8ClD,QAAAwwB,GAAiCv+B,GACzB,GAAA6G,GAAA7G,EAAA6G,WAAYyU,EAAAtb,EAAAsb,MAClBzU,GAAW+J,aACLxS,KAAM8P,SAASlO,EAAOsb,G1Qo/Z7B,GAAInd,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K0QjlapF4D,EAAA3E,EAAyB,IAEzB8G,EAAA9G,EAAoB,GAsCJG,GAAA0gC,WAAUA,CAQ1B,IAAAC,GAAA,WACE,QAAAA,GAAoBhjB,EACAvN,GADA3P,KAAAkd,SACAld,KAAA2P,YAMtB,MAHEuwB,GAAA5/B,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI43B,GAAqB33B,EAAYzI,KAAKkd,OAAQld,KAAK2P,aAEpFuwB,KAOAE,EAAA,SAAAj/B,GAIE,QAAAi/B,GAAY/4B,EACQ6V,EACAvN,GAClBxO,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAAkd,SACAld,KAAA2P,YAJpB3P,KAAAoZ,UAAoB,EAMlBpZ,KAAKqJ,IAAIsG,EAAUG,SAASqwB,EAAsBjjB,GAAUzU,WAAYzI,KAAMkd,YAclF,MAtBsCnd,GAAAqgC,EAAAj/B,GAW1Bi/B,EAAA9/B,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAKqwB,UAAYtoB,EACjB/H,KAAKoZ,UAAW,GAGlBgnB,EAAA9/B,UAAAkS,WAAA,WACMxS,KAAKoZ,WACPpZ,KAAKoZ,UAAW,EAChBpZ,KAAKqH,YAAY9F,KAAKvB,KAAKqwB,aAGjC+P,GAtBsCr8B,EAAAC,a1Q4mahC,SAASxE,EAAQD,EAASH,GAE/B,Y2Q9qaD,IAAAqE,GAAArE,EAAyB,GACzBihC,EAAAjhC,EAAkC,IAElCqE,GAAAC,WAAWpD,UAAUuC,KAAOw9B,EAAAx9B,M3QmratB,SAASrD,EAAQD,EAASH,GAE/B,Y4QhpaD,SAAAyD,GAA2Bk4B,EAAqDC,GAC9E,MAAOh7B,MAAK2H,KAAK,GAAI24B,GAAavF,EAAaC,I5QgpahD,GAAIj7B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K4Q3rapF4D,EAAA3E,EAAyB,GAuCTG,GAAAsD,KAAIA,CAQpB,IAAAy9B,GAAA,WACE,QAAAA,GAAoBvF,EAA6DC,GAA7Dh7B,KAAA+6B,cAA6D/6B,KAAAg7B,OAMnF,MAHEsF,GAAAhgC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI+3B,GAAe93B,EAAYzI,KAAK+6B,YAAa/6B,KAAKg7B,QAEnFsF,KAOAC,EAAA,SAAAp/B,GAcE,QAAAo/B,GAAYl5B,EAAoC0zB,EAAqDC,GACnG75B,EAAAxB,KAAAK,KAAMqH,GADwCrH,KAAA+6B,cAbxC/6B,KAAAqN,MAAgB,EAChBrN,KAAAwgC,gBAA0B,EAchCxgC,KAAKg7B,KAAOA,EACZh7B,KAAKwgC,eAAiC,mBAATxF,GAuBjC,MAxCmCj7B,GAAAwgC,EAAAp/B,GAKjCZ,OAAAmO,eAAI6xB,EAAAjgC,UAAA,Q5Q+raGwkB,I4Q/raP,WACE,MAAO9kB,MAAKygC,O5QisaPrJ,I4Q9raP,SAASrvB,GACP/H,KAAKwgC,gBAAiB,EACtBxgC,KAAKygC,MAAQ14B,G5QgsaRy2B,YAAY,EACZC,cAAc,I4QxraX8B,EAAAjgC,UAAAoL,MAAV,SAAgB3D,GACd,MAAK/H,MAAKwgC,eAIDxgC,KAAKouB,SAASrmB,IAHrB/H,KAAKg7B,KAAOjzB,MACZ/H,MAAKqH,YAAY9F,KAAKwG,KAMlBw4B,EAAAjgC,UAAA8tB,SAAR,SAAiBrmB,GACf,GACI8G,GADExB,EAAQrN,KAAKqN,OAEnB,KACEwB,EAAS7O,KAAK+6B,YAAe/6B,KAAKg7B,KAAMjzB,EAAOsF,GAC/C,MAAOhF,GACPrI,KAAKqH,YAAYlF,MAAMkG,GAEzBrI,KAAKg7B,KAAOnsB,EACZ7O,KAAKqH,YAAY9F,KAAKsN,IAE1B0xB,GAxCmCx8B,EAAAC,a5Qyua7B,SAASxE,EAAQD,EAASH,GAE/B,Y6QzyaD,IAAAqE,GAAArE,EAAyB,GACzBshC,EAAAthC,EAAoC,IAEpCqE,GAAAC,WAAWpD,UAAUqgC,MAAQD,EAAAC,O7Q8yavB,SAASnhC,EAAQD,EAASH,GAE/B,Y8QhzaD,SAAAwhC,KACE,MAAO,IAAIp9B,GAAAxC,QAeb,QAAA2/B,KACE,MAAO9E,GAAAC,UAAUn8B,KAAKK,KAAM4gC,GAAqBpE,WApBnD,GAAAX,GAAAz8B,EAAwB,KACxBoE,EAAApE,EAAsB,EAkBNG,GAAAohC,MAAKA,G9Q2zaf,SAASnhC,EAAQD,EAASH,GAE/B,Y+Qh1aD,IAAAqE,GAAArE,EAAyB,GACzByhC,EAAAzhC,EAAsC,IAEtCqE,GAAAC,WAAWpD,UAAUwgC,OAASD,EAAAC,Q/Qq1axB,SAASthC,EAAQD,EAASH,GAE/B,YgRr0aD,SAAA0hC,GAA0B/R,GACxB,MAAO/uB,MAAK2H,KAAK,GAAIo5B,GAAehS,EAAW/uB,OhRq0ahD,GAAID,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KgR71apF4D,EAAA3E,EAAyB,IAEzByF,EAAAzF,EAAyB,IAkBTG,GAAAuhC,OAAMA,CAQtB,IAAAC,GAAA,WACE,QAAAA,GAAoBhS,EACAjmB,GADA9I,KAAA+uB,YACA/uB,KAAA8I,SAMtB,MAHEi4B,GAAAzgC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIw4B,GAAiBv4B,EAAYzI,KAAK+uB,UAAW/uB,KAAK8I,UAEnFi4B,KAOAC,EAAA,SAAA7/B,GAKE,QAAA6/B,GAAY35B,EACQ0nB,EACAjmB,GAClB3H,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA+uB,YACA/uB,KAAA8I,SANZ9I,KAAAihC,WAAqB,EAErBjhC,KAAAqN,MAAgB,EAgD1B,MAnDkCtN,GAAAihC,EAAA7/B,GAWxB6/B,EAAA1gC,UAAA4gC,iBAAR,SAAyBn5B,GACnB/H,KAAKihC,UACPjhC,KAAKqH,YAAYlF,MAAM,4CAEvBnC,KAAKihC,WAAY,EACjBjhC,KAAKmhC,YAAcp5B,IAIbi5B,EAAA1gC,UAAAoL,MAAV,SAAgB3D,GACd,GAAMgnB,GAAY/uB,KAAK+uB,SACvB/uB,MAAKqN,QACD0hB,EACF/uB,KAAKu0B,QAAQxsB,GAEb/H,KAAKkhC,iBAAiBn5B,IAIlBi5B,EAAA1gC,UAAAi0B,QAAR,SAAgBxsB,GACd,IACE,GAAM8G,GAAS7O,KAAK+uB,UAAUhnB,EAAO/H,KAAKqN,MAAOrN,KAAK8I,OAClD+F,IACF7O,KAAKkhC,iBAAiBn5B,GAExB,MAAOM,GACPrI,KAAKqH,YAAYlF,MAAMkG,KAIjB24B,EAAA1gC,UAAAsL,UAAV,WACE,GAAMvE,GAAcrH,KAAKqH,WAErBrH,MAAKqN,MAAQ,GACfhG,EAAY9F,KAAKvB,KAAKihC,UAAYjhC,KAAKmhC,YAAcz2B,QACrDrD,EAAYiB,YAEZjB,EAAYlF,MAAM,GAAI0C,GAAAC,aAG5Bk8B,GAnDkCj9B,EAAAC,ahRg5a5B,SAASxE,EAAQD,EAASH,GAE/B,YiR97aD,IAAAqE,GAAArE,EAAyB,GACzBgiC,EAAAhiC,EAAkC,IAElCqE,GAAAC,WAAWpD,UAAU+gC,KAAOD,EAAAC,MjRm8atB,SAAS7hC,EAAQD,EAASH,GAE/B,YkR17aD,SAAAiiC,GAAwBtrB,GACtB,MAAO/V,MAAK2H,KAAK,GAAI25B,GAAavrB,IlR07anC,GAAIhW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KkR58apF4D,EAAA3E,EAAyB,GAcTG,GAAA8hC,KAAIA,CAQpB,IAAAC,GAAA,WACE,QAAAA,GAAoBvrB,GAAA/V,KAAA+V,QAMtB,MAHEurB,GAAAhhC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI+4B,GAAe94B,EAAYzI,KAAK+V,SAEjEurB,KAOAC,EAAA,SAAApgC,GAGE,QAAAogC,GAAYl6B,EAAoC0O,GAC9C5U,EAAAxB,KAAAK,KAAMqH,GADwCrH,KAAA+V,QAFhD/V,KAAA2R,MAAgB,EAWlB,MAZgC5R,GAAAwhC,EAAApgC,GAOpBogC,EAAAjhC,UAAAoL,MAAV,SAAgBa,KACRvM,KAAK2R,MAAQ3R,KAAK+V,OACtB/V,KAAKqH,YAAY9F,KAAKgL,IAG5Bg1B,GAZgCx9B,EAAAC,alR09a1B,SAASxE,EAAQD,EAASH,GAE/B,YmRhgbD,IAAAqE,GAAArE,EAAyB,GACzBoiC,EAAApiC,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUmhC,UAAYD,EAAAC,WnRqgb3B,SAASjiC,EAAQD,EAASH,GAE/B,YoRv/aD,SAAAqiC,GAA6BlC,GAC3B,MAAOv/B,MAAK2H,KAAK,GAAI+5B,GAAkBnC,IpRu/axC,GAAIx/B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KoR3gbpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAchBG,GAAAkiC,UAASA,CAQzB,IAAAC,GAAA,WACE,QAAAA,GAAoBnC,GAAAv/B,KAAAu/B,WAMtB,MAHEmC,GAAAphC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIm5B,GAAoBl5B,EAAYzI,KAAKu/B,YAEtEmC,KAOAC,EAAA,SAAAxgC,GAKE,QAAAwgC,GAAYt6B,EACAk4B,GACVp+B,EAAAxB,KAAAK,KAAMqH,GALArH,KAAAoZ,UAAoB,EACpBpZ,KAAA4hC,gBAA0B,EAKhC5hC,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAMu/B,IA6BrC,MArCwCx/B,GAAA4hC,EAAAxgC,GAW5BwgC,EAAArhC,UAAAoL,MAAV,SAAgB3D,GACV/H,KAAKoZ,UACPjY,EAAAb,UAAMoL,MAAK/L,KAAAK,KAAC+H,IAIN45B,EAAArhC,UAAAsL,UAAV,WACM5L,KAAK4hC,eACPzgC,EAAAb,UAAMsL,UAASjM,KAAAK,MAEfA,KAAKuI,eAITo5B,EAAArhC,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAKoZ,UAAW,GAGlBuoB,EAAArhC,UAAAgS,eAAA,WACEtS,KAAK4hC,gBAAiB,EAClB5hC,KAAKwH,WACPrG,EAAAb,UAAMsL,UAASjM,KAAAK,OAGrB2hC,GArCwC7vB,EAAAkB,kBpR2iblC,SAASxT,EAAQD,EAASH,GAE/B,YqRtlbD,IAAAqE,GAAArE,EAAyB,GACzByiC,EAAAziC,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUwhC,UAAYD,EAAAC,WrR2lb3B,SAAStiC,EAAQD,EAASH,GAE/B,YsRjlbD,SAAA0iC,GAA6B/S,GAC3B,MAAO/uB,MAAK2H,KAAK,GAAIo6B,GAAkBhT,ItRilbxC,GAAIhvB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KsRnmbpF4D,EAAA3E,EAAyB,GAcTG,GAAAuiC,UAASA,CAQzB,IAAAC,GAAA,WACE,QAAAA,GAAoBhT,GAAA/uB,KAAA+uB,YAMtB,MAHEgT,GAAAzhC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIw5B,GAAoBv5B,EAAYzI,KAAK+uB,aAEtEgT,KAOAC,EAAA,SAAA7gC,GAIE,QAAA6gC,GAAY36B,EACQ0nB,GAClB5tB,EAAAxB,KAAAK,KAAMqH,GADYrH,KAAA+uB,YAJZ/uB,KAAAiiC,UAAoB,EACpBjiC,KAAAqN,MAAgB,EA0B1B,MA5BqCtN,GAAAiiC,EAAA7gC,GASzB6gC,EAAA1hC,UAAAoL,MAAV,SAAgB3D,GACd,GAAMV,GAAcrH,KAAKqH,WACrBrH,MAAKiiC,UACPjiC,KAAKkiC,iBAAiBn6B,GAGnB/H,KAAKiiC,UACR56B,EAAY9F,KAAKwG,IAIbi6B,EAAA1hC,UAAA4hC,iBAAR,SAAyBn6B,GACvB,IACE,GAAM8G,GAAS7O,KAAK+uB,UAAUhnB,EAAO/H,KAAKqN,QAC1CrN,MAAKiiC,SAAW3O,QAAQzkB,GACxB,MAAOxG,GACPrI,KAAKqH,YAAYlF,MAAMkG,KAG7B25B,GA5BqCj+B,EAAAC,atRgob/B,SAASxE,EAAQD,EAASH,GAE/B,YuRvqbD,IAAAqE,GAAArE,EAAyB,GACzB+iC,EAAA/iC,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAU8hC,UAAYD,EAAAC,WvR4qb3B,SAAS5iC,EAAQD,EAASH,GAE/B,YwR9pbD,SAAAgjC,KxRkrbK,IwRlrbwB,GAAA7wB,MAAA1B,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAA0B,EAAA1B,EAAA,GAAAtE,UAAAsE,EAC3B,IAAIF,GAAuB4B,EAAMA,EAAMtJ,OAAS,EAC5C8I,GAAAC,YAAYrB,GACd4B,EAAMN,MAENtB,EAAY,IAGd,IAAM3H,GAAMuJ,EAAMtJ,MAClB,OAAY,KAARD,EACKiM,EAAAC,aAAa,GAAI7C,GAAAI,iBAAuBF,EAAM,GAAI5B,GAA2B3P,MAC3EgI,EAAM,EACRiM,EAAAC,aAAa,GAAIhD,GAAAC,gBAAwBI,EAAO5B,GAA2B3P,MAE3EiU,EAAAC,aAAa,GAAI5C,GAAAI,gBAAmB/B,GAA2B3P,MAhC1E,GAAAkR,GAAA9R,EAA8B,IAC9BiS,EAAAjS,EAA+B,IAC/BkS,EAAAlS,EAA8B,IAC9B6U,EAAA7U,EAA2B,IAC3B2R,EAAA3R,EAA0B,GAcVG,GAAA6iC,UAASA,GxR4sbnB,SAAS5iC,EAAQD,EAASH,GAE/B,YyRjubD,IAAAqE,GAAArE,EAAyB,GACzBijC,EAAAjjC,EAAgD,IAEhDqE,GAAAC,WAAWpD,UAAUgiC,YAAcD,EAAAC,azRsub7B,SAAS9iC,EAAQD,EAASH,GAE/B,Y0R7tbD,SAAAkjC,GAA+B3yB,EAAsB8I,GACnD,MADmD,UAAAA,MAAA,GAC5C,GAAI8pB,GAAAC,sBAAyBxiC,KAAMyY,EAAO9I,GAdnD,GAAA4yB,GAAAnjC,EAAoC,IAapBG,GAAA+iC,YAAWA,G1RmvbrB,SAAS9iC,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K2RrwbpFsD,EAAArE,EAAyB,GACzB6G,EAAA7G,EAAmB,KACnB6d,EAAA7d,EAAwB,IAYxBojC,EAAA,SAAArhC,GAUE,QAAAqhC,GAAmB15B,EACC25B,EACA9yB,GADR,SAAA8yB,MAAA,GACA,SAAA9yB,MAAA1J,EAAAQ,MACVtF,EAAAxB,KAAAK,MAHiBA,KAAA8I,SACC9I,KAAAyiC,YACAziC,KAAA2P,cAEbsN,EAAAE,UAAUslB,IAAcA,EAAY,KACvCziC,KAAKyiC,UAAY,GAEd9yB,GAA2C,kBAAvBA,GAAUG,WACjC9P,KAAK2P,UAAY1J,EAAAQ,MAavB,MA/B8C1G,GAAAyiC,EAAArhC,GACrCqhC,EAAAhiC,OAAP,SAAiBsI,EAAuB2P,EAAmB9I,GACzD,MADsC,UAAA8I,MAAA,GAAmB,SAAA9I,MAAA1J,EAAAQ,MAClD,GAAI+7B,GAAsB15B,EAAQ2P,EAAO9I,IAG3C6yB,EAAAzyB,SAAP,SAAmBT,GACT,GAAAxG,GAAAwG,EAAAxG,OAAQL,EAAA6G,EAAA7G,UAChB,OAAOK,GAAO5G,UAAUuG,IAehB+5B,EAAAliC,UAAAkI,WAAV,SAAqBC,GACnB,GAAMgQ,GAAQzY,KAAKyiC,UACb35B,EAAS9I,KAAK8I,OACd6G,EAAY3P,KAAK2P,SAEvB,OAAOA,GAAUG,SAAS0yB,EAAsBzyB,SAAU0I,GACxD3P,SAAQL,gBAGd+5B,GA/B8C/+B,EAAAC,WAAjCnE,GAAAijC,sBAAqBA,G3Ryyb5B,SAAShjC,EAAQD,EAASH,GAE/B,Y4R5zbD,IAAAsjC,GAAAtjC,EAA4B,IAEfG,GAAAkH,KAAO,GAAIi8B,GAAAC,e5Ri0blB,SAASnjC,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K6Rx0bpFyiC,EAAAxjC,EAAyB,KAEzBqe,EAAAre,EAA6B,IAE7BujC,EAAA,SAAAxhC,GAAA,QAAAwhC,KAAmCxhC,EAAA8M,MAAAjO,KAAAuL,WAInC,MAJmCxL,GAAA4iC,EAAAxhC,GACjCwhC,EAAAriC,UAAAod,YAAA,SAAeC,EAA+B/b,GAC5C,MAAO,IAAIghC,GAAAC,WAAW7iC,KAAM2d,GAAM7N,SAASlO,IAE/C+gC,GAJmCllB,EAAAI,eAAtBte,GAAAojC,cAAaA,G7Ru1bpB,SAASnjC,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K8Rj2bpF2iC,EAAA1jC,EAAwB,KACxBoe,EAAApe,EAA2B,IAO3ByjC,EAAA,SAAA1hC,GAAA,QAAA0hC,KAAmC1hC,EAAA8M,MAAAjO,KAAAuL,WAkCnC,MAlCmCxL,GAAA8iC,EAAA1hC,GAEvB0hC,EAAAviC,UAAA0d,UAAV,SAAoBpc,EAAW6W,GAC7B,GAD6B,SAAAA,MAAA,GACzBA,EAAQ,EACV,MAAOtX,GAAAb,UAAM0d,UAASre,KAAAK,KAAC4B,EAAO6W,EAEhCzY,MAAKyY,MAAQA,EACbzY,KAAK4B,MAAQA,CACN,IAAA+N,GAAA3P,KAAA2P,SAQP,OAPAA,GAAUwO,QAAQxV,KAAK3I,MAClB2P,EAAU2O,cACb3O,EAAU2O,YAAcwkB,EAAAC,UAAUC,aAAa,WAC7CrzB,EAAU2O,YAAc,KACxB3O,EAAUyO,WAGPpe,MAGC6iC,EAAAviC,UAAAgM,aAAV,WAES,GAAAqD,GAAA3P,KAAA2P,UACA2O,EAAA3O,EAAA2O,YAAaH,EAAAxO,EAAAwO,OAEpBhd,GAAAb,UAAMgM,aAAY3M,KAAAK,MAEK,IAAnBme,EAAQlW,SACV0H,EAAUuC,QAAS,EACA,MAAfoM,IACF3O,EAAU2O,YAAc,KACxBwkB,EAAAC,UAAUE,eAAe3kB,MAIjCukB,GAlCmCrlB,EAAAI,aAAtBre,GAAAsjC,WAAUA,G9R24bjB,SAASrjC,EAAQD,EAASH,I+Rp5bhC,SAAA6jC,EAAAD,G/Ry5bC,Y+Rr5bD,IAAAj6B,GAAA3J,EAAqB,GAErB8jC,EAAA,WAeE,QAAAA,GAAoBv5B,GAClB,GADkB3J,KAAA2J,OACdA,EAAKq5B,cAA6C,kBAAtBr5B,GAAKq5B,aACnChjC,KAAKgjC,aAAer5B,EAAKq5B,aAAah3B,KAAKrC,GAC3C3J,KAAKijC,eAAiBt5B,EAAKs5B,eAAej3B,KAAKrC,OAC1C,CACL3J,KAAKmjC,WAAa,EAClBnjC,KAAKojC,iBACLpjC,KAAKqjC,uBAAwB,EAGzBrjC,KAAKsjC,wBAEPtjC,KAAKgjC,aAAehjC,KAAKujC,oCAChBvjC,KAAKwjC,oBAEdxjC,KAAKgjC,aAAehjC,KAAKyjC,gCAChBzjC,KAAK0jC,uBAEd1jC,KAAKgjC,aAAehjC,KAAK2jC,mCAChB3jC,KAAK4jC,yBAEd5jC,KAAKgjC,aAAehjC,KAAK6jC,qCAGzB7jC,KAAKgjC,aAAehjC,KAAK8jC,8BAG3B,IAAIC,GAAK,QAAAd,GAAwBe,SAClBf,GAAgBgB,SAASb,cAAcY,GAGhDD,GAAIE,SAAWjkC,KAErBA,KAAKijC,eAAiBc,GAsL5B,MAjOUb,GAAA5iC,UAAA4jC,SAAR,SAAiB1sB,GACf,MAAOxX,MAAK2J,KAAKpJ,OAAOD,UAAU4N,SAASvO,KAAK6X,IA8ClD0rB,EAAA5iC,UAAAgjC,sBAAA,WACE,MAA4C,qBAArCtjC,KAAKkkC,SAASlkC,KAAK2J,KAAKw6B,UAGjCjB,EAAA5iC,UAAAojC,qBAAA,WACE,MAAOpQ,SAAQtzB,KAAK2J,KAAKy6B,iBAG3BlB,EAAA5iC,UAAAsjC,uBAAA,WACE,GAAMtgC,GAAWtD,KAAK2J,KAAKrG,QAC3B,OAAOgwB,SAAQhwB,GAAY,sBAAwBA,GAASJ,cAAc,YAG5EggC,EAAA5iC,UAAAkjC,kBAAA,WACE,GAAM75B,GAAO3J,KAAK2J,IAGlB,IAAIA,EAAKhI,cAAgBgI,EAAK06B,cAAe,CAC3C,GAAIC,IAA4B,EAC5BC,EAAe56B,EAAKqf,SAMxB,OALArf,GAAKqf,UAAY,WACfsb,GAA4B,GAE9B36B,EAAKhI,YAAY,GAAI,KACrBgI,EAAKqf,UAAYub,EACVD,EAGT,OAAO,GAKTpB,EAAA5iC,UAAAkkC,iBAAA,SAAiBx0B,G/Rw4bV,I+Rx4bwB,GAAAN,MAAAG,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAH,EAAAG,EAAA,GAAAtE,UAAAsE,EAC7B,IAAIzD,GAAK,QAAAyC,KACP,GAAA/B,GAAA+B,EAAQmB,EAAAlD,EAAAkD,QAASN,EAAA5C,EAAA4C,IACM,mBAAZM,GACTA,EAAQ/B,MAAMvD,OAAWgF,GAEzB,GAAK+0B,UAAS,GAAKz0B,KAOvB,OAHM5D,GAAI4D,QAAUA,EACd5D,EAAIsD,KAAOA,EAEVtD,GAGT82B,EAAA5iC,UAAAokC,6BAAA,SAA6Bh1B,GAE3B,MADA1P,MAAKojC,cAAcpjC,KAAKmjC,YAAcnjC,KAAKwkC,iBAAiBv2B,MAAMvD,OAAWgF,GACtE1P,KAAKmjC,cAGdD,EAAA5iC,UAAAijC,kCAAA,WACE,GAAIn3B,GAAK,QAAA42B,KACC,GAAAiB,GAAAjB,EAAAiB,SACJD,EAASC,EAASS,6BAA6Bn5B,UAEnD,OADA04B,GAASt6B,KAAKw6B,QAAQQ,SAASV,EAASO,iBAAiBP,EAASW,aAAcZ,IACzEA,EAKT,OAFM53B,GAAI63B,SAAWjkC,KAEdoM,GAGT82B,EAAA5iC,UAAAmjC,8BAAA,WAIE,GAAM95B,GAAO3J,KAAK2J,KAEdk7B,EAAgB,gBAAkBl7B,EAAKiO,KAAKktB,SAAW,IACvDC,EAAkB,QAAAC,GAA8BC,GAClD,GAAMhB,GAAiBe,EAAsBf,QACzCgB,GAAMn8B,SAAWa,GACG,gBAAfs7B,GAAMnd,MACyB,IAAtCmd,EAAMnd,KAAKla,QAAQi3B,IACnBZ,EAASW,cAAcK,EAAMnd,KAAK3f,MAAM08B,EAAc58B,SAGpD88B,GAAiBd,SAAWjkC,KAElC2J,EAAK4Q,iBAAiB,UAAWwqB,GAAiB,EAElD,IAAI34B,GAAK,QAAA42B,KACP,GAAAl2B,GAAAk2B,EAAQ6B,EAAA/3B,EAAA+3B,cAAeZ,EAAAn3B,EAAAm3B,SACnBD,EAASC,EAASS,6BAA6Bn5B,UAEnD,OADA04B,GAASt6B,KAAKhI,YAAYkjC,EAAgBb,EAAQ,KAC3CA,EAMT,OAHM53B,GAAI63B,SAAWjkC,KACfoM,EAAIy4B,cAAgBA,EAEnBz4B,GAGT82B,EAAA5iC,UAAAskC,aAAA,SAAaZ,GAGX,GAAIhkC,KAAKqjC,sBAGPrjC,KAAK2J,KAAK6J,WAAWxT,KAAKwkC,iBAAiBxkC,KAAK4kC,aAAcZ,GAAS,OAClE,CACL,GAAIkB,GAAOllC,KAAKojC,cAAcY,EAC9B,IAAIkB,EAAM,CACRllC,KAAKqjC,uBAAwB,CAC7B,KACE6B,I/Ri4bO,Q+R/3bPllC,KAAKijC,eAAee,GACpBhkC,KAAKqjC,uBAAwB,MAMrCH,EAAA5iC,UAAAqjC,iCAAA,cAAAviC,GAAApB,KACMmlC,EAAU,GAAInlC,MAAK2J,KAAKy6B,cAC5Be,GAAQC,MAAMpc,UAAY,SAACic,GACzB,GAAIjB,GAASiB,EAAMnd,IACnB1mB,GAAKwjC,aAAaZ,GAGpB,IAAI53B,GAAK,QAAA42B,KACP,GAAAl2B,GAAAk2B,EAAQmC,EAAAr4B,EAAAq4B,QAASlB,EAAAn3B,EAAAm3B,SACbD,EAASC,EAASS,6BAA6Bn5B,UAEnD,OADA45B,GAAQE,MAAM1jC,YAAYqiC,GACnBA,EAMT,OAHM53B,GAAI+4B,QAAUA,EACd/4B,EAAI63B,SAAWjkC,KAEdoM,GAGT82B,EAAA5iC,UAAAujC,mCAAA,WACE,GAAIz3B,GAAK,QAAA42B,KACP,GAAMiB,GAAiBjB,EAAciB,SAC/Bt6B,EAAOs6B,EAASt6B,KAChB27B,EAAM37B,EAAKrG,SACXiiC,EAAOD,EAAIE,gBAEbxB,EAASC,EAASS,6BAA6Bn5B,WAG/Ck6B,EAASH,EAAIpiC,cAAc,SAQ/B,OAPAuiC,GAAO/e,mBAAqB,WAC1Bud,EAASW,aAAaZ,GACtByB,EAAO/e,mBAAqB,KAC5B6e,EAAKG,YAAYD,GACjBA,EAAS,MAEXF,EAAKI,YAAYF,GACVzB,EAKT,OAFM53B,GAAI63B,SAAWjkC,KAEdoM,GAGT82B,EAAA5iC,UAAAwjC,6BAAA,WACE,GAAI13B,GAAK,QAAA42B,KACP,GAAMiB,GAAiBjB,EAAciB,SACjCD,EAASC,EAASS,6BAA6Bn5B,UAEnD,OADA04B,GAASt6B,KAAK6J,WAAWywB,EAASO,iBAAiBP,EAASW,aAAcZ,GAAS,GAC5EA,EAKT,OAFM53B,GAAI63B,SAAWjkC,KAEdoM,GAEX82B,IAtOa3jC,GAAA2jC,oBAAmBA,EAuOnB3jC,EAAAwjC,UAAY,GAAIG,GAAoBn6B,EAAAY,Q/R03bnBhK,KAAKJ,EAASH,EAAoB,KAAK6jC,eAAgB7jC,EAAoB,KAAK4jC,eAIxG,SAASxjC,EAAQD,EAASH,IgS3mchC,SAAA4jC,EAAAC,GAiBA,QAAA2C,GAAAnmC,EAAAomC,GACA7lC,KAAA8lC,IAAArmC,EACAO,KAAA+lC,SAAAF,EAnBA,GAAAlB,GAAAvlC,EAAA,KAAAulC,SACA12B,EAAAw2B,SAAAnkC,UAAA2N,MACA9F,EAAA2F,MAAAxN,UAAA6H,MACA69B,KACAC,EAAA,CAIA1mC,GAAAiU,WAAA,WACA,UAAAoyB,GAAA33B,EAAAtO,KAAA6T,WAAA5I,OAAAW,WAAA26B,eAEA3mC,EAAA2e,YAAA,WACA,UAAA0nB,GAAA33B,EAAAtO,KAAAue,YAAAtT,OAAAW,WAAA0S,gBAEA1e,EAAA2mC,aACA3mC,EAAA0e,cAAA,SAAA0G,GAA2CA,EAAA4D,SAM3Cqd,EAAAtlC,UAAA6lC,MAAAP,EAAAtlC,UAAA8lC,IAAA,aACAR,EAAAtlC,UAAAioB,MAAA,WACAvoB,KAAA+lC,SAAApmC,KAAAiL,OAAA5K,KAAA8lC,MAIAvmC,EAAA8mC,OAAA,SAAA5yB,EAAA6yB,GACAJ,aAAAzyB,EAAA8yB,gBACA9yB,EAAA+yB,aAAAF,GAGA/mC,EAAAknC,SAAA,SAAAhzB,GACAyyB,aAAAzyB,EAAA8yB,gBACA9yB,EAAA+yB,iBAGAjnC,EAAAmnC,aAAAnnC,EAAA2S,OAAA,SAAAuB,GACAyyB,aAAAzyB,EAAA8yB,eAEA,IAAAD,GAAA7yB,EAAA+yB,YACAF,IAAA,IACA7yB,EAAA8yB,eAAA/yB,WAAA,WACAC,EAAAkzB,YACAlzB,EAAAkzB,cACKL,KAKL/mC,EAAAyjC,aAAA,kBAAAA,KAAA,SAAA52B,GACA,GAAA3M,GAAAwmC,IACAv2B,IAAAnE,UAAAtD,OAAA,IAAAE,EAAAxI,KAAA4L,UAAA,EAkBA,OAhBAy6B,GAAAvmC,IAAA,EAEAklC,EAAA,WACAqB,EAAAvmC,KAGAiQ,EACAtD,EAAA6B,MAAA,KAAAyB,GAEAtD,EAAAzM,KAAA,MAGAJ,EAAA0jC,eAAAxjC,MAIAA,GAGAF,EAAA0jC,eAAA,kBAAAA,KAAA,SAAAxjC,SACAumC,GAAAvmC,MhS+mc8BE,KAAKJ,EAASH,EAAoB,KAAK4jC,aAAc5jC,EAAoB,KAAK6jC,iBAItG,SAASzjC,EAAQD,GiS5pcvB,QAAAqnC,KACAC,GAAAC,IAGAD,GAAA,EACAC,EAAA7+B,OACAvB,EAAAogC,EAAA/jC,OAAA2D,GAEAqgC,KAEArgC,EAAAuB,QACA++B,KAIA,QAAAA,KACA,IAAAH,EAAA,CAGA,GAAAliB,GAAAsiB,EAAAL,EACAC,IAAA,CAGA,KADA,GAAA7+B,GAAAtB,EAAAuB,OACAD,GAAA,CAGA,IAFA8+B,EAAApgC,EACAA,OACAqgC,EAAA/+B,GACA8+B,GACAA,EAAAC,GAAAG,KAGAH,MACA/+B,EAAAtB,EAAAuB,OAEA6+B,EAAA,KACAD,GAAA,EACAM,EAAAxiB,IAiBA,QAAAyiB,GAAAC,EAAA91B,GACAvR,KAAAqnC,MACArnC,KAAAuR,QAYA,QAAAmO,MAlGA,GAOAunB,GACAE,EARAhD,EAAA3kC,EAAAD,YAUA,WACA,IACA0nC,EAAAzzB,WACG,MAAArG,GACH85B,EAAA,WACA,SAAAl9B,OAAA,8BAGA,IACAo9B,EAAAjB,aACG,MAAA/4B,GACHg6B,EAAA,WACA,SAAAp9B,OAAA,mCAIA,IAEA+8B,GAFApgC,KACAmgC,GAAA,EAEAE,IAyCA5C,GAAAQ,SAAA,SAAA0C,GACA,GAAA33B,GAAA,GAAA5B,OAAAvC,UAAAtD,OAAA,EACA,IAAAsD,UAAAtD,OAAA,EACA,OAAAG,GAAA,EAAuBA,EAAAmD,UAAAtD,OAAsBG,IAC7CsH,EAAAtH,EAAA,GAAAmD,UAAAnD,EAGA1B,GAAAiC,KAAA,GAAAy+B,GAAAC,EAAA33B,IACA,IAAAhJ,EAAAuB,QAAA4+B,GACAI,EAAAD,EAAA,IASAI,EAAA9mC,UAAA4mC,IAAA,WACAlnC,KAAAqnC,IAAAp5B,MAAA,KAAAjO,KAAAuR,QAEA4yB,EAAAmD,MAAA,UACAnD,EAAAoD,SAAA,EACApD,EAAAqD,OACArD,EAAAsD,QACAtD,EAAAuD,QAAA,GACAvD,EAAAwD,YAIAxD,EAAAjqB,GAAAwF,EACAykB,EAAApqB,YAAA2F,EACAykB,EAAAyD,KAAAloB,EACAykB,EAAAhqB,IAAAuF,EACAykB,EAAAnqB,eAAA0F,EACAykB,EAAA0D,mBAAAnoB,EACAykB,EAAA2D,KAAApoB,EAEAykB,EAAA4D,QAAA,SAAA35B,GACA,SAAArE,OAAA,qCAGAo6B,EAAA6D,IAAA,WAA2B,WAC3B7D,EAAA8D,MAAA,SAAAC,GACA,SAAAn+B,OAAA,mCAEAo6B,EAAAgE,MAAA,WAA4B,WjSosctB,SAAS3oC,EAAQD,EAASH,GAE/B,YkS3zcD,IAAAqE,GAAArE,EAAyB,GACzBgpC,EAAAhpC,EAAuC,IAEvCqE,GAAAC,WAAWpD,UAAXmD,UAA8B2kC,EAAAC,SlSg0cxB,SAAS7oC,EAAQD,EAASH,GAE/B,YmSrxcD,SAAAipC,KACE,MAAOroC,MAAK2H,KAAK,GAAI2gC,InSqxctB,GAAIvoC,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KmSv0cpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GA4ChBG,GAAA8oC,QAAOA,CAQvB,IAAAC,GAAA,mBAAAA,MAIA,MAHEA,GAAAhoC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI+/B,GAAiB9/B,KAElD6/B,KAOAC,EAAA,SAAApnC,GAKE,QAAAonC,GAAYlhC,GACVlG,EAAAxB,KAAAK,KAAMqH,GALArH,KAAAkS,OAAiB,EACjBlS,KAAAsQ,cAAwB,EA6ClC,MA/CqCvQ,GAAAwoC,EAAApnC,GASzBonC,EAAAjoC,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAKwoC,mBACLxoC,KAAKkS,SACLlS,KAAKqJ,IAAIrJ,KAAKgW,kBAAoBjE,EAAAM,kBAAkBrS,KAAM+H,KAGlDwgC,EAAAjoC,UAAAsL,UAAV,WACE5L,KAAKsQ,cAAe,EACA,IAAhBtQ,KAAKkS,QACPlS,KAAKqH,YAAYiB,YAIbigC,EAAAjoC,UAAAkoC,iBAAR,WACExoC,KAAKkS,OAASlS,KAAKkS,OAAS,EAAIlS,KAAKkS,OAAS,EAAI,CAClD,IAAM8D,GAAoBhW,KAAKgW,iBAC3BA,KACFA,EAAkBzN,cAClBvI,KAAKyN,OAAOuI,KAIhBuyB,EAAAjoC,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAKqH,YAAY9F,KAAKmR,IAGxB61B,EAAAjoC,UAAA2S,YAAA,SAAY5K,GACVrI,KAAKqH,YAAYlF,MAAMkG,IAGzBkgC,EAAAjoC,UAAAgS,eAAA,WACEtS,KAAKwoC,mBACDxoC,KAAKsQ,cAAgC,IAAhBtQ,KAAKkS,QAC5BlS,KAAKqH,YAAYiB,YAGvBigC,GA/CqCz2B,EAAAkB,kBnSi3c/B,SAASxT,EAAQD,EAASH,GAE/B,YoSt7cD,IAAAqE,GAAArE,EAAyB,GACzBqpC,EAAArpC,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUooC,UAAYD,EAAAC,WpS27c3B,SAASlpC,EAAQD,EAASH,GAE/B,YqS14cD,SAAAspC,GAAmC53B,EACA6E,GACjC,MAAO3V,MAAK2H,KAAK,GAAIghC,GAAkB73B,EAAS6E,IrSy4cjD,GAAI5V,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KqSj8cpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAiDhBG,GAAAmpC,UAASA,CAWzB,IAAAC,GAAA,WACE,QAAAA,GAAoB73B,EACA6E,GADA3V,KAAA8Q,UACA9Q,KAAA2V,iBAMtB,MAHEgzB,GAAAroC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIogC,GAAoBngC,EAAYzI,KAAK8Q,QAAS9Q,KAAK2V,kBAEpFgzB,KAOAC,EAAA,SAAAznC,GAIE,QAAAynC,GAAYvhC,EACQyJ,EACA6E,GAClBxU,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA8Q,UACA9Q,KAAA2V,iBALZ3V,KAAAqN,MAAgB,EAoE1B,MArE2CtN,GAAA6oC,EAAAznC,GAU/BynC,EAAAtoC,UAAAoL,MAAV,SAAgB3D,GACd,GAAI8G,GACExB,EAAQrN,KAAKqN,OACnB,KACEwB,EAAS7O,KAAK8Q,QAAQ/I,EAAOsF,GAC7B,MAAOlL,GAEP,WADAnC,MAAKqH,YAAYlF,MAAMA,GAGzBnC,KAAKytB,UAAU5e,EAAQ9G,EAAOsF,IAGxBu7B,EAAAtoC,UAAAmtB,UAAR,SAAkB5e,EAA4B9G,EAAUsF,GACtD,GAAM2I,GAAoBhW,KAAKgW,iBAC3BA,IACFA,EAAkBzN,cAEpBvI,KAAKqJ,IAAIrJ,KAAKgW,kBAAoBjE,EAAAM,kBAAkBrS,KAAM6O,EAAQ9G,EAAOsF,KAGjEu7B,EAAAtoC,UAAAsL,UAAV,WACS,GAAAoK,GAAAhW,KAAAgW,iBACFA,KAAqBA,EAAkBzO,gBAC1CpG,EAAAb,UAAMsL,UAASjM,KAAAK,OAIT4oC,EAAAtoC,UAAAgM,aAAV,WACEtM,KAAKgW,kBAAoB,MAG3B4yB,EAAAtoC,UAAAgS,eAAA,SAAeO,GACb7S,KAAKyN,OAAOoF,GACZ7S,KAAKgW,kBAAoB,KACrBhW,KAAKwH,WACPrG,EAAAb,UAAMsL,UAASjM,KAAAK,OAInB4oC,EAAAtoC,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACL7S,KAAK2V,eACP3V,KAAK6oC,eAAep2B,EAAYC,EAAYC,EAAYC,GAExD5S,KAAKqH,YAAY9F,KAAKmR,IAIlBk2B,EAAAtoC,UAAAuoC,eAAR,SAAuBp2B,EAAeC,EAAeC,EAAoBC,GACvE,GAAI/D,EACJ,KACEA,EAAS7O,KAAK2V,eAAelD,EAAYC,EAAYC,EAAYC,GACjE,MAAOvK,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAKqH,YAAY9F,KAAKsN,IAE1B+5B,GArE2C92B,EAAAkB,kBrS8/crC,SAASxT,EAAQD,EAASH,GAE/B,YsShldD,IAAAqE,GAAArE,EAAyB,GACzB0pC,EAAA1pC,EAAgD,IAEhDqE,GAAAC,WAAWpD,UAAUyoC,YAAcD,EAAAC,atSqld7B,SAASvpC,EAAQD,EAASH,GAE/B,YuSvidD,SAAA2pC,GAAqCva,EACA7Y,GAInC,MAAO3V,MAAK2H,KAAK,GAAIqhC,GAAoBxa,EAAiB7Y,IvSmid3D,GAAI5V,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuS3ldpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GA8ChBG,GAAAwpC,YAAWA,CAc3B,IAAAC,GAAA,WACE,QAAAA,GAAoBhiC,EACA2O,GADA3V,KAAAgH,aACAhH,KAAA2V,iBAMtB,MAHEqzB,GAAA1oC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIygC,GAAsBxgC,EAAYzI,KAAKgH,WAAYhH,KAAK2V,kBAEzFqzB,KAOAC,EAAA,SAAA9nC,GAIE,QAAA8nC,GAAY5hC,EACQ6hC,EACAvzB,GAClBxU,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAAkpC,QACAlpC,KAAA2V,iBALZ3V,KAAAqN,MAAgB,EA4D1B,MA7D6CtN,GAAAkpC,EAAA9nC,GAUjC8nC,EAAA3oC,UAAAoL,MAAV,SAAgB3D,GACd,GAAMiO,GAAoBhW,KAAKgW,iBAC3BA,IACFA,EAAkBzN,cAEpBvI,KAAKqJ,IAAIrJ,KAAKgW,kBAAoBjE,EAAAM,kBAAkBrS,KAAMA,KAAKkpC,MAAOnhC,EAAO/H,KAAKqN,WAG1E47B,EAAA3oC,UAAAsL,UAAV,WACS,GAAAoK,GAAAhW,KAAAgW,iBACFA,KAAqBA,EAAkBzO,gBAC1CpG,EAAAb,UAAMsL,UAASjM,KAAAK,OAITipC,EAAA3oC,UAAAgM,aAAV,WACEtM,KAAKgW,kBAAoB,MAG3BizB,EAAA3oC,UAAAgS,eAAA,SAAeO,GACb7S,KAAKyN,OAAOoF;AACZ7S,KAAKgW,kBAAoB,KACrBhW,KAAKwH,WACPrG,EAAAb,UAAMsL,UAASjM,KAAAK,OAInBipC,EAAA3oC,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,GAAA/F,GAAA9M,KAAQ2V,EAAA7I,EAAA6I,eAAgBtO,EAAAyF,EAAAzF,WACpBsO,GACF3V,KAAKmpC,kBAAkB12B,EAAYC,EAAYC,EAAYC,GAE3DvL,EAAY9F,KAAKmR,IAIbu2B,EAAA3oC,UAAA6oC,kBAAR,SAA0B12B,EAAeC,EACfC,EAAoBC,GAC5C,GACI/D,GADJ/B,EAAA9M,KAAQ2V,EAAA7I,EAAA6I,eAAgBtO,EAAAyF,EAAAzF,WAExB,KACEwH,EAAS8G,EAAelD,EAAYC,EAAYC,EAAYC,GAC5D,MAAOvK,GAEP,WADAhB,GAAYlF,MAAMkG,GAIpBhB,EAAY9F,KAAKsN,IAErBo6B,GA7D6Cn3B,EAAAkB,kBvS2odvC,SAASxT,EAAQD,EAASH,GAE/B,YwS7tdD,IAAAqE,GAAArE,EAAyB,GACzBgqC,EAAAhqC,EAAkC,IAElCqE,GAAAC,WAAWpD,UAAU+oC,KAAOD,EAAAC,MxSkudtB,SAAS7pC,EAAQD,EAASH,GAE/B,YySjsdD,SAAAiqC,GAAwB13B,GACtB,MAAc,KAAVA,EACK,GAAIL,GAAAI,gBAEJ1R,KAAK2H,KAAK,GAAI2hC,GAAa33B,IzS8rdrC,GAAI5R,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KyS3udpF4D,EAAA3E,EAAyB,IACzB2F,EAAA3F,EAAsC,KACtCkS,EAAAlS,EAA8B,GAoCdG,GAAA8pC,KAAIA,CAYpB,IAAAC,GAAA,WACE,QAAAA,GAAoBvzB,GAClB,GADkB/V,KAAA+V,QACd/V,KAAK+V,MAAQ,EACf,KAAM,IAAIhR,GAAAC,wBAOhB,MAHEskC,GAAAhpC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI+gC,GAAe9gC,EAAYzI,KAAK+V,SAEjEuzB,KAOAC,EAAA,SAAApoC,GAGE,QAAAooC,GAAYliC,EAAoC0O,GAC9C5U,EAAAxB,KAAAK,KAAMqH,GADwCrH,KAAA+V,QAFxC/V,KAAA2R,MAAgB,EAgB1B,MAjBgC5R,GAAAwpC,EAAApoC,GAOpBooC,EAAAjpC,UAAAoL,MAAV,SAAgB3D,GACd,GAAMgO,GAAQ/V,KAAK+V,QACb/V,KAAK2R,OAASoE,IAClB/V,KAAKqH,YAAY9F,KAAKwG,GAClB/H,KAAK2R,QAAUoE,IACjB/V,KAAKqH,YAAYiB,WACjBtI,KAAKuI,iBAIbghC,GAjBgCxlC,EAAAC,azS+vd1B,SAASxE,EAAQD,EAASH,GAE/B,Y0Sr0dD,IAAAqE,GAAArE,EAAyB,GACzBoqC,EAAApqC,EAA0C,IAE1CqE,GAAAC,WAAWpD,UAAUmpC,SAAWD,EAAAC,U1S00d1B,SAASjqC,EAAQD,EAASH,GAE/B,Y2SrydD,SAAAqqC,GAA4B93B,GAC1B,MAAc,KAAVA,EACK,GAAIL,GAAAI,gBAEJ1R,KAAK2H,KAAK,GAAI+hC,GAAiB/3B,I3SkydzC,GAAI5R,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K2Sl1dpF4D,EAAA3E,EAAyB,IACzB2F,EAAA3F,EAAsC,KACtCkS,EAAAlS,EAA8B,GAuCdG,GAAAkqC,SAAQA,CAYxB,IAAAC,GAAA,WACE,QAAAA,GAAoB3zB,GAClB,GADkB/V,KAAA+V,QACd/V,KAAK+V,MAAQ,EACf,KAAM,IAAIhR,GAAAC,wBAOhB,MAHE0kC,GAAAppC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAImhC,GAAmBlhC,EAAYzI,KAAK+V,SAErE2zB,KAOAC,EAAA,SAAAxoC,GAIE,QAAAwoC,GAAYtiC,EAAoC0O,GAC9C5U,EAAAxB,KAAAK,KAAMqH,GADwCrH,KAAA+V,QAHxC/V,KAAA4pC,KAAiB,GAAI97B,OACrB9N,KAAA2R,MAAgB,EAmC1B,MArCoC5R,GAAA4pC,EAAAxoC,GAQxBwoC,EAAArpC,UAAAoL,MAAV,SAAgB3D,GACd,GAAM6hC,GAAO5pC,KAAK4pC,KACZ7zB,EAAQ/V,KAAK+V,MACbpE,EAAQ3R,KAAK2R,OAEnB,IAAIi4B,EAAK3hC,OAAS8N,EAChB6zB,EAAKjhC,KAAKZ,OACL,CACL,GAAMsF,GAAQsE,EAAQoE,CACtB6zB,GAAKv8B,GAAStF,IAIR4hC,EAAArpC,UAAAsL,UAAV,WACE,GAAMvE,GAAcrH,KAAKqH,YACrBsK,EAAQ3R,KAAK2R,KAEjB,IAAIA,EAAQ,EAIV,IAAK,GAHCoE,GAAQ/V,KAAK2R,OAAS3R,KAAK+V,MAAQ/V,KAAK+V,MAAQ/V,KAAK2R,MACrDi4B,EAAQ5pC,KAAK4pC,KAEVxhC,EAAI,EAAGA,EAAI2N,EAAO3N,IAAK,CAC9B,GAAM+P,GAAOxG,IAAWoE,CACxB1O,GAAY9F,KAAKqoC,EAAKzxB,IAI1B9Q,EAAYiB,YAEhBqhC,GArCoC5lC,EAAAC,a3Ss3d9B,SAASxE,EAAQD,EAASH,GAE/B,Y4S97dD,IAAAqE,GAAArE,EAAyB,GACzByqC,EAAAzqC,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUwpC,UAAYD,EAAAC,W5Sm8d3B,SAAStqC,EAAQD,EAASH,GAE/B,Y6Sh6dD,SAAA0qC,GAA6BvK,GAC3B,MAAOv/B,MAAK2H,KAAK,GAAIoiC,GAAkBxK,I7Sg6dxC,GAAIx/B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K6Sz8dpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAmChBG,GAAAuqC,UAASA,CAQzB,IAAAC,GAAA,WACE,QAAAA,GAAoBxK,GAAAv/B,KAAAu/B,WAMtB,MAHEwK,GAAAzpC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIwhC,GAAoBvhC,EAAYzI,KAAKu/B,YAEtEwK,KAOAC,EAAA,SAAA7oC,GAEE,QAAA6oC,GAAY3iC,EACQk4B,GAClBp+B,EAAAxB,KAAAK,KAAMqH,GADYrH,KAAAu/B,WAElBv/B,KAAKqJ,IAAI0I,EAAAM,kBAAkBrS,KAAMu/B,IAYrC,MAjBwCx/B,GAAAiqC,EAAA7oC,GAQtC6oC,EAAA1pC,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAKsI,YAGP0hC,EAAA1pC,UAAAgS,eAAA,aAGF03B,GAjBwCl4B,EAAAkB,kB7Sw9dlC,SAASxT,EAAQD,EAASH,GAE/B,Y8SxheD,IAAAqE,GAAArE,EAAyB,GACzB6qC,EAAA7qC,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAU4pC,UAAYD,EAAAC,W9S6he3B,SAAS1qC,EAAQD,EAASH,GAE/B,Y+S3/dD,SAAA8qC,GAA6Bnb,GAC3B,MAAO/uB,MAAK2H,KAAK,GAAIwiC,GAAkBpb,I/S2/dxC,GAAIhvB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K+SriepF4D,EAAA3E,EAAyB,GAsCTG,GAAA2qC,UAASA,CAQzB,IAAAC,GAAA,WACE,QAAAA,GAAoBpb,GAAA/uB,KAAA+uB,YAMtB,MAHEob,GAAA7pC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAI4hC,GAAoB3hC,EAAYzI,KAAK+uB,aAEtEob,KAOAC,EAAA,SAAAjpC,GAGE,QAAAipC,GAAY/iC,EACQ0nB,GAClB5tB,EAAAxB,KAAAK,KAAMqH,GADYrH,KAAA+uB,YAHZ/uB,KAAAqN,MAAgB,EA2B1B,MA5BqCtN,GAAAqqC,EAAAjpC,GAQzBipC,EAAA9pC,UAAAoL,MAAV,SAAgB3D,GACd,GACI8G,GADExH,EAAcrH,KAAKqH,WAEzB,KACEwH,EAAS7O,KAAK+uB,UAAUhnB,EAAO/H,KAAKqN,SACpC,MAAOhF,GAEP,WADAhB,GAAYlF,MAAMkG,GAGpBrI,KAAKqqC,eAAetiC,EAAO8G,IAGrBu7B,EAAA9pC,UAAA+pC,eAAR,SAAuBtiC,EAAUuiC,GAC/B,GAAMjjC,GAAcrH,KAAKqH,WACrBisB,SAAQgX,GACVjjC,EAAY9F,KAAKwG,GAEjBV,EAAYiB,YAGlB8hC,GA5BqCrmC,EAAAC,a/Soke/B,SAASxE,EAAQD,EAASH,GAE/B,YgTnoeD,IAAAqE,GAAArE,EAAyB,GACzBmrC,EAAAnrC,EAA0C,IAE1CqE,GAAAC,WAAWpD,UAAUkqC,SAAWD,EAAAC,UhTwoe1B,SAAShrC,EAAQD,EAASH,GAE/B,YiT/leD,SAAAorC,GAA4B/a,GAC1B,MAAOzvB,MAAK2H,KAAK,GAAI8iC,GAAiBhb,IjT+levC,GAAI1vB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KiT7oepF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAwChBG,GAAAirC,SAAQA,CAQxB,IAAAC,GAAA,WACE,QAAAA,GAAoBhb,GAAAzvB,KAAAyvB,mBAMtB,MAHEgb,GAAAnqC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIkiC,GAAmBjiC,EAAYzI,KAAKyvB,oBAErEgb,KAOAC,EAAA,SAAAvpC,GAGE,QAAAupC,GAAsBrjC,EACFooB,GAClBtuB,EAAAxB,KAAAK,KAAMqH,GAFcrH,KAAAqH,cACFrH,KAAAyvB,mBA4CtB,MAhDuC1vB,GAAA2qC,EAAAvpC,GAQ3BupC,EAAApqC,UAAAoL,MAAV,SAAgB3D,GACT/H,KAAK84B,WACR94B,KAAK2qC,oBAAoB5iC,IAIrB2iC,EAAApqC,UAAAqqC,oBAAR,SAA4B5iC,GAC1B,GAAI+nB,GAA0C,IAC9C,KACEA,EAAW9vB,KAAKyvB,iBAAiB1nB,GACjC,MAAOM,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAK4qC,gBAAgB7iC,EAAO+nB,IAGtB4a,EAAApqC,UAAAsqC,gBAAR,SAAwB7iC,EAAU+nB,GAChC9vB,KAAKqJ,IAAIrJ,KAAK84B,UAAY/mB,EAAAM,kBAAkBrS,KAAM8vB,IAClD9vB,KAAKqH,YAAY9F,KAAKwG,IAGd2iC,EAAApqC,UAAAgM,aAAV,WACE,GAAMwsB,GAAY94B,KAAK84B,SACnBA,KACF94B,KAAKyN,OAAOqrB,GACZ94B,KAAK84B,UAAY,KACjBA,EAAUvwB,gBAIdmiC,EAAApqC,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAKsM,gBAGPo+B,EAAApqC,UAAAgS,eAAA,WACEtS,KAAKsM,gBAETo+B,GAhDuC54B,EAAAkB,kBjTwrejC,SAASxT,EAAQD,EAASH,GAE/B,YkT9veD,IAAAqE,GAAArE,EAAyB,GACzByrC,EAAAzrC,EAAkD,IAElDqE,GAAAC,WAAWpD,UAAUwqC,aAAeD,EAAAC,clTmwe9B,SAAStrC,EAAQD,EAASH,GAE/B,YmT3teD,SAAA0rC,GAAgChb,EAAkBngB,GAChD,MADgD,UAAAA,MAAAzJ,EAAAU,OACzC5G,KAAK2H,KAAK,GAAIojC,GAAqBjb,EAAUngB,IAoDtD,QAAAN,GAAyBC,GACf,GAAA7G,GAAA6G,EAAA7G,UACRA,GAAWswB,gBnTqqeZ,GAAIh5B,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KmT5wepF4D,EAAA3E,EAAyB,IAGzB8G,EAAA9G,EAAoB,GA0CJG,GAAAurC,aAAYA,CAQ5B,IAAAC,GAAA,WACE,QAAAA,GAAoBjb,EACAngB,GADA3P,KAAA8vB,WACA9vB,KAAA2P,YAMtB,MAHEo7B,GAAAzqC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIwiC,GAAuBviC,EAAYzI,KAAK8vB,SAAU9vB,KAAK2P,aAExFo7B,KAOAC,EAAA,SAAA7pC,GAGE,QAAA6pC,GAAY3jC,EACQyoB,EACAngB,GAClBxO,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA8vB,WACA9vB,KAAA2P,YAmBtB,MAxBwC5P,GAAAirC,EAAA7pC,GAS5B6pC,EAAA1qC,UAAAoL,MAAV,SAAgB3D,GACT/H,KAAK84B,YACR94B,KAAKqJ,IAAIrJ,KAAK84B,UAAY94B,KAAK2P,UAAUG,SAAST,EAAcrP,KAAK8vB,UAAYrnB,WAAYzI,QAC7FA,KAAKqH,YAAY9F,KAAKwG,KAI1BijC,EAAA1qC,UAAAy4B,cAAA,WACE,GAAMD,GAAY94B,KAAK84B,SACnBA,KACFA,EAAUvwB,cACVvI,KAAKyN,OAAOqrB,GACZ94B,KAAK84B,UAAY,OAGvBkS,GAxBwCjnC,EAAAC,anTsyelC,SAASxE,EAAQD,EAASH,GAE/B,YoT52eD,IAAAqE,GAAArE,EAAyB,GACzBiG,EAAAjG,EAAkD,IAElDqE,GAAAC,WAAWpD,UAAU2qC,aAAe5lC,EAAA4lC,cpTi3e9B,SAASzrC,EAAQD,EAASH,GAE/B,YqT32eD,SAAA6rC,GAAgCt7B,GAC9B,MAD8B,UAAAA,MAAAzJ,EAAAU,OACvB5G,KAAK2H,KAAK,GAAIujC,GAAqBv7B,IrT22e3C,GAAI5P,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KqTz3epF4D,EAAA3E,EAAyB,IAEzB8G,EAAA9G,EAAoB,GAQJG,GAAA0rC,aAAYA,CAQ5B,IAAA3lC,GAAA,WACE,QAAAA,GAAmByC,EAAiB+U,GAAjB9c,KAAA+H,QAAiB/H,KAAA8c,WAGtC,MAAAxX,KAJa/F,GAAA+F,aAAYA,CAMzB,IAAA4lC,GAAA,WACE,QAAAA,GAAoBv7B,GAAA3P,KAAA2P,YAOtB,MAHEu7B,GAAA5qC,UAAAX,KAAA,SAAK8U,EAAuC3L,GAC1C,MAAOA,GAAON,WAAW,GAAI2iC,GAAuB12B,EAAUzU,KAAK2P,aAEvEu7B,KAOAC,EAAA,SAAAhqC,GAGE,QAAAgqC,GAAY9jC,EAAkDsI,GAC5DxO,EAAAxB,KAAAK,KAAMqH,GADsDrH,KAAA2P,YAFtD3P,KAAAorC,SAAmB,EAKzBprC,KAAKorC,SAAWz7B,EAAU4O,MAU9B,MAhBwCxe,GAAAorC,EAAAhqC,GAS5BgqC,EAAA7qC,UAAAoL,MAAV,SAAgB3D,GACd,GAAIwW,GAAMve,KAAK2P,UAAU4O,MACrB8sB,EAAO9sB,EAAMve,KAAKorC,QACtBprC,MAAKorC,SAAW7sB,EAEhBve,KAAKqH,YAAY9F,KAAK,GAAI+D,GAAayC,EAAOsjC,KAElDF,GAhBwCpnC,EAAAC,arT44elC,SAASxE,EAAQD,EAASH,GAE/B,YsTt7eD,IAAAqE,GAAArE,EAAyB,GACzBksC,EAAAlsC,EAAwC,IAExCqE,GAAAC,WAAWpD,UAAUqkB,QAAU2mB,EAAA3mB,StT27ezB,SAASnlB,EAAQD,EAASH,GAE/B,YuTl7eD,SAAAulB,GAA2B4mB,EACAC,EACA77B,GADA,SAAA67B,MAAA,MACA,SAAA77B,MAAAzJ,EAAAU,MACzB,IAAI6kC,GAAkBhqB,EAAAE,OAAO4pB,GACzBG,EAAUD,GAAoBF,EAAM57B,EAAU4O,MAAS3G,KAAKE,IAAYyzB,EAC5E,OAAOvrC,MAAK2H,KAAK,GAAIgkC,GAAgBD,EAASD,EAAiBD,EAAa77B,IvT86e7E,GAAI5P,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuTr8epF+F,EAAA9G,EAAoB,IACpBqiB,EAAAriB,EAAqB,KAErB2E,EAAA3E,EAAyB,GAYTG,GAAAolB,QAAOA,CAYvB,IAAAgnB,GAAA,WACE,QAAAA,GAAoBD,EACAD,EACAD,EACA77B,GAHA3P,KAAA0rC,UACA1rC,KAAAyrC,kBACAzrC,KAAAwrC,cACAxrC,KAAA2P,YAQtB,MALEg8B,GAAArrC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIojC,GAC3BnjC,EAAYzI,KAAKyrC,gBAAiBzrC,KAAK0rC,QAAS1rC,KAAKwrC,YAAaxrC,KAAK2P,aAG7Eg8B,KAOAC,EAAA,SAAAzqC,GAWE,QAAAyqC,GAAYvkC,EACQokC,EACAC,EACAF,EACA77B,GAClBxO,EAAAxB,KAAAK,KAAMqH,GAJYrH,KAAAyrC,kBACAzrC,KAAA0rC,UACA1rC,KAAAwrC,cACAxrC,KAAA2P,YAdZ3P,KAAAqN,MAAgB,EAChBrN,KAAA6rC,eAAyB,EAIzB7rC,KAAA8rC,eAAyB,EAW/B9rC,KAAK+rC,kBAuCT,MAxDmChsC,GAAA6rC,EAAAzqC,GAGjCZ,OAAAmO,eAAIk9B,EAAAtrC,UAAA,iBvTw8eGwkB,IuTx8eP,WACE,MAAO9kB,MAAK6rC,gBvT08ePrN,YAAY,EACZC,cAAc,IuTx8erBl+B,OAAAmO,eAAIk9B,EAAAtrC,UAAA,gBvT28eGwkB,IuT38eP,WACE,MAAO9kB,MAAK8rC,evT68ePtN,YAAY,EACZC,cAAc,IuTl8eNmN,EAAAI,gBAAf,SAA+BpqC,GAC7B,GAAMkH,GAASlH,EAAM6G,WACfwjC,EAAerqC,EAAMyL,KACtBvE,GAAOwH,cAAgBxH,EAAOojC,gBAAkBD,GACnDnjC,EAAOqjC,iBAIHP,EAAAtrC,UAAAyrC,gBAAR,WACE,GAAIE,GAAejsC,KAAKqN,KACxBrN,MAAK2P,UAAUG,SAAS87B,EAAkBI,gBAAiBhsC,KAAK0rC,SAAWjjC,WAAYzI,KAAMqN,MAAO4+B,IACpGjsC,KAAKqN,QACLrN,KAAK6rC,eAAiBI,GAGdL,EAAAtrC,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAKqH,YAAY9F,KAAKwG,GAEjB/H,KAAKyrC,iBACRzrC,KAAK+rC,mBAICH,EAAAtrC,UAAAqL,OAAV,SAAiBtD,GACfrI,KAAKqH,YAAYlF,MAAMkG,GACvBrI,KAAK8rC,eAAgB,GAGbF,EAAAtrC,UAAAsL,UAAV,WACE5L,KAAKqH,YAAYiB,WACjBtI,KAAK8rC,eAAgB,GAGvBF,EAAAtrC,UAAA6rC,cAAA,WACEnsC,KAAKmC,MAAMnC,KAAKwrC,aAAe,GAAIzhC,OAAM,aAE7C6hC,GAxDmC7nC,EAAAC,avT4/e7B,SAASxE,EAAQD,EAASH,GAE/B,YwT3ifD,IAAAqE,GAAArE,EAAyB,GACzBgtC,EAAAhtC,EAAgD,IAEhDqE,GAAAC,WAAWpD,UAAU+rC,YAAcD,EAAAC,axTgjf7B,SAAS7sC,EAAQD,EAASH,GAE/B,YyTpifD,SAAAitC,GAAkCd,EACAe,EACA38B,GAAA,SAAAA,MAAAzJ,EAAAU,MAChC,IAAI6kC,GAAkBhqB,EAAAE,OAAO4pB,GACzBG,EAAUD,GAAoBF,EAAM57B,EAAU4O,MAAS3G,KAAKE,IAAYyzB,EAC5E,OAAOvrC,MAAK2H,KAAK,GAAI4kC,GAAoBb,EAASD,EAAiBa,EAAgB38B,IzTgifpF,GAAI5P,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KyTvjfpF+F,EAAA9G,EAAoB,IAGpBqiB,EAAAriB,EAAqB,KACrB0S,EAAA1S,EAA8B,IAC9B2S,EAAA3S,EAAgC,GAUhBG,GAAA8sC,YAAWA,CAa3B,IAAAE,GAAA,WACE,QAAAA,GAAoBb,EACAD,EACAa,EACA38B,GAHA3P,KAAA0rC,UACA1rC,KAAAyrC,kBACAzrC,KAAAssC,iBACAtsC,KAAA2P,YAQtB,MALE48B,GAAAjsC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIgkC,GAC3B/jC,EAAYzI,KAAKyrC,gBAAiBzrC,KAAK0rC,QAAS1rC,KAAKssC,eAAgBtsC,KAAK2P,aAGhF48B,KAOAC,EAAA,SAAArrC,GAYE,QAAAqrC,GAAmBnlC,EACCokC,EACAC,EACAY,EACA38B,GAClBxO,EAAAxB,KAAAK,MALiBA,KAAAqH,cACCrH,KAAAyrC,kBACAzrC,KAAA0rC,UACA1rC,KAAAssC,iBACAtsC,KAAA2P,YAfZ3P,KAAAysC,oBAAoC/hC,OACpC1K,KAAAqN,MAAgB,EAChBrN,KAAA6rC,eAAyB,EAIzB7rC,KAAA8rC,eAAyB,EAW/BzkC,EAAYgC,IAAIrJ,MAChBA,KAAK+rC,kBA2CT,MA9D0ChsC,GAAAysC,EAAArrC,GAIxCZ,OAAAmO,eAAI89B,EAAAlsC,UAAA,iBzT2jfGwkB,IyT3jfP,WACE,MAAO9kB,MAAK6rC,gBzT6jfPrN,YAAY,EACZC,cAAc,IyT3jfrBl+B,OAAAmO,eAAI89B,EAAAlsC,UAAA,gBzT8jfGwkB,IyT9jfP,WACE,MAAO9kB,MAAK8rC,ezTgkfPtN,YAAY,EACZC,cAAc,IyTpjfN+N,EAAAR,gBAAf,SAA+BpqC,GAC7B,GAAMkH,GAASlH,EAAM6G,WACfwjC,EAAerqC,EAAMyL,KACtBvE,GAAOwH,cAAgBxH,EAAOojC,gBAAkBD,GACnDnjC,EAAO4jC,iBAIHF,EAAAlsC,UAAAyrC,gBAAR,WACE,GAAIE,GAAejsC,KAAKqN,MAClBs/B,GAAiBlkC,WAAYzI,KAAMqN,MAAO4+B,EAChDjsC,MAAK2P,UAAUG,SAAS08B,EAAsBR,gBAAiBhsC,KAAK0rC,QAASiB,GAC7E3sC,KAAKqN,QACLrN,KAAK6rC,eAAiBI,GAGdO,EAAAlsC,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAKqH,YAAY9F,KAAKwG,GACjB/H,KAAKyrC,iBACRzrC,KAAK+rC,mBAICS,EAAAlsC,UAAAqL,OAAV,SAAiBtD,GACfrI,KAAKqH,YAAYlF,MAAMkG,GACvBrI,KAAK8rC,eAAgB,GAGbU,EAAAlsC,UAAAsL,UAAV,WACE5L,KAAKqH,YAAYiB,WACjBtI,KAAK8rC,eAAgB,GAGvBU,EAAAlsC,UAAAosC,cAAA,WACE,IAAK1sC,KAAKuH,eAAgB,CACxB,GAAM+kC,GAAiBtsC,KAAKssC,cAC5BtsC,MAAKuI,cACLvI,KAAKqH,YAAYgC,IAAIrJ,KAAKysC,oBAAsB16B,EAAAM,kBAAkBrS,KAAMssC,MAG9EE,GA9D0C16B,EAAAkB,kBzTqnfpC,SAASxT,EAAQD,EAASH,GAE/B,Y0TzqfD,IAAAqE,GAAArE,EAAyB,GACzBmG,EAAAnG,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAUssC,UAAYrnC,EAAAqnC,W1T8qf3B,SAASptC,EAAQD,EAASH,GAE/B,Y2TvqfD,SAAAwtC,GAA6Bj9B,GAC3B,MAD2B,UAAAA,MAAAzJ,EAAAU,OACpB5G,KAAK2H,KAAK,GAAIklC,GAAkBl9B,I3TuqfxC,GAAI5P,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K2TrrfpF4D,EAAA3E,EAAyB,IAEzB8G,EAAA9G,EAAoB,GAQJG,GAAAqtC,UAASA,CAQzB,IAAApnC,GAAA,WACE,QAAAA,GAAmBuC,EAAiB6kC,GAAjB5sC,KAAA+H,QAAiB/H,KAAA4sC,YAEtC,MAAApnC,KAHajG,GAAAiG,UAASA,CAKtB,IAAAqnC,GAAA,WACE,QAAAA,GAAoBl9B,GAAA3P,KAAA2P,YAMtB,MAHEk9B,GAAAvsC,UAAAX,KAAA,SAAK8U,EAAoC3L,GACvC,MAAOA,GAAON,WAAW,GAAIskC,GAAoBr4B,EAAUzU,KAAK2P,aAEpEk9B,KAEAC,EAAA,SAAA3rC,GACE,QAAA2rC,GAAYzlC,EAA+CsI,GACzDxO,EAAAxB,KAAAK,KAAMqH,GADmDrH,KAAA2P,YAS7D,MAVqC5P,GAAA+sC,EAAA3rC,GAKzB2rC,EAAAxsC,UAAAoL,MAAV,SAAgB3D,GACd,GAAMwW,GAAMve,KAAK2P,UAAU4O,KAE3Bve,MAAKqH,YAAY9F,KAAK,GAAIiE,GAAUuC,EAAOwW,KAE/CuuB,GAVqC/oC,EAAAC,a3Tssf/B,SAASxE,EAAQD,EAASH,GAE/B,Y4TzufD,IAAAqE,GAAArE,EAAyB,GACzB2tC,EAAA3tC,EAAwC,IAExCqE,GAAAC,WAAWpD,UAAU0sC,QAAUD,EAAAC,S5T8ufzB,SAASxtC,EAAQD,EAASH,GAE/B,Y6T3ufD,SAAA4tC,KACE,MAAOhtC,MAAK2H,KAAK,GAAIslC,I7T2uftB,GAAIltC,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K6TvvfpF4D,EAAA3E,EAAyB,GAQTG,GAAAytC,QAAOA,CAQvB,IAAAC,GAAA,mBAAAA,MAIA,MAHEA,GAAA3sC,UAAAX,KAAA,SAAK8I,EAA6BK,GAChC,MAAOA,GAAON,WAAW,GAAI0kC,GAAkBzkC,KAEnDwkC,KAOAC,EAAA,SAAA/rC,GAIE,QAAA+rC,GAAY7lC,GACVlG,EAAAxB,KAAAK,KAAMqH,GAHArH,KAAAuR,SAcV,MAhBmCxR,GAAAmtC,EAAA/rC,GAQvB+rC,EAAA5sC,UAAAoL,MAAV,SAAgBa,GACdvM,KAAKuR,MAAM5I,KAAK4D,IAGR2gC,EAAA5sC,UAAAsL,UAAV,WACE5L,KAAKqH,YAAY9F,KAAKvB,KAAKuR,OAC3BvR,KAAKqH,YAAYiB,YAErB4kC,GAhBmCnpC,EAAAC,a7Twwf7B,SAASxE,EAAQD,EAASH,GAE/B,Y8TryfD,IAAAqE,GAAArE,EAAyB,GACzB+tC,EAAA/tC,EAA4C,IAE5CqE,GAAAC,WAAWpD,UAAU8sC,UAAYD,EAAAC,W9T0yf3B,SAAS5tC,EAAQD,EAASH,GAE/B,Y+TxyfD,SAAAguC,GAA6B1jC,GAA7B,GAAAtI,GAAApB,IASE,IARK0J,IACCX,EAAAY,KAAKC,IAAMb,EAAAY,KAAKC,GAAGC,QAAUd,EAAAY,KAAKC,GAAGC,OAAOC,QAC9CJ,EAAcX,EAAAY,KAAKC,GAAGC,OAAOC,QACpBf,EAAAY,KAAKG,UACdJ,EAAcX,EAAAY,KAAKG,WAIlBJ,EACH,KAAM,IAAIK,OAAM,wBAGlB,OAAO,IAAIL,GAAY,SAACM,EAASC,GAC/B,GAAIlC,EACJ3G,GAAKc,UAAU,SAACqK,GAAS,MAAAxE,GAAQwE,GAAG,SAAClE,GAAa,MAAA4B,GAAO5B,IAAM,WAAM,MAAA2B,GAAQjC,OAvBjF,GAAAgB,GAAA3J,EAAmB,EAQHG,GAAA6tC,UAASA,G/Tu0fnB,SAAS5tC,EAAQD,EAASH,GAE/B,YgUh1fD,IAAAqE,GAAArE,EAAyB,GACzBiuC,EAAAjuC,EAAsC,IAEtCqE,GAAAC,WAAWpD,UAAUsK,OAASyiC,EAAAziC,QhUq1fxB,SAASpL,EAAQD,EAASH,GAE/B,YiU9yfD,SAAAwL,GAA0B0iC,GACxB,MAAOttC,MAAK2H,KAAK,GAAI4lC,GAAkBD,IjU8yfxC,GAAIvtC,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KiU51fpFqD,EAAApE,EAAsB,GAEtB0S,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAsChBG,GAAAqL,OAAMA,CAQtB,IAAA2iC,GAAA,WAEE,QAAAA,GAAoBD,GAAAttC,KAAAstC,mBAWtB,MAREC,GAAAjtC,UAAAX,KAAA,SAAK8I,EAAuCK,GAC1C,GAAM0kC,GAAmB,GAAIC,GAAiBhlC,GACxCilC,EAAqB5kC,EAAON,WAAWglC,EAI7C,OAHKE,GAAmBnmC,gBACtBimC,EAAiBnkC,IAAI0I,EAAAM,kBAAkBm7B,EAAkBxtC,KAAKstC,mBAEzDI,GAEXH,KAOAE,EAAA,SAAAtsC,GAIE,QAAAssC,GAAYpmC,GACVlG,EAAAxB,KAAAK,KAAMqH,GAHArH,KAAA4K,OAAqB,GAAIpH,GAAAxC,QAI/BqG,EAAY9F,KAAKvB,KAAK4K,QA4C1B,MAlDkC7K,GAAA0tC,EAAAtsC,GAShCssC,EAAAntC,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAK2tC,cAGPF,EAAAntC,UAAA2S,YAAA,SAAY9Q,EAAY0Q,GACtB7S,KAAK2L,OAAOxJ,IAGdsrC,EAAAntC,UAAAgS,eAAA,SAAeO,GACb7S,KAAK4L,aAGG6hC,EAAAntC,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAK4K,OAAOrJ,KAAKwG,IAGT0lC,EAAAntC,UAAAqL,OAAV,SAAiBtD,GACfrI,KAAK4K,OAAOzI,MAAMkG,GAClBrI,KAAKqH,YAAYlF,MAAMkG,IAGfolC,EAAAntC,UAAAsL,UAAV,WACE5L,KAAK4K,OAAOtC,WACZtI,KAAKqH,YAAYiB,YAGTmlC,EAAAntC,UAAAgM,aAAV,WACEtM,KAAK4K,OAAS,MAGR6iC,EAAAntC,UAAAqtC,WAAR,WACE,GAAMC,GAAa5tC,KAAK4K,MACpBgjC,IACFA,EAAWtlC,UAEb,IAAMjB,GAAcrH,KAAKqH,YACnBwmC,EAAY7tC,KAAK4K,OAAS,GAAIpH,GAAAxC,OACpCqG,GAAY9F,KAAKssC,IAErBJ,GAlDkC37B,EAAAkB,kBjUm4f5B,SAASxT,EAAQD,EAASH,GAE/B,YkU78fD,IAAAqE,GAAArE,EAAyB,GACzB0uC,EAAA1uC,EAAgD,IAEhDqE,GAAAC,WAAWpD,UAAUytC,YAAcD,EAAAC,alUk9f7B,SAASvuC,EAAQD,EAASH,GAE/B,YmUn6fD,SAAA2uC,GAA+BC,EACAC,GAC7B,MAD6B,UAAAA,MAAA,GACtBjuC,KAAK2H,KAAK,GAAIumC,GAAuBF,EAAYC,InUk6fzD,GAAIluC,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KmU39fpF4D,EAAA3E,EAAyB,IAEzBoE,EAAApE,EAAsB,EAkDNG,GAAAwuC,YAAWA,CAS3B,IAAAG,GAAA,WAEE,QAAAA,GAAoBF,EACAC,GADAjuC,KAAAguC,aACAhuC,KAAAiuC,mBAMtB,MAHEC,GAAA5tC,UAAAX,KAAA,SAAK8I,EAAuCK,GAC1C,MAAOA,GAAON,WAAW,GAAI2lC,GAAsB1lC,EAAYzI,KAAKguC,WAAYhuC,KAAKiuC,oBAEzFC,KAOAC,EAAA,SAAAhtC,GAIE,QAAAgtC,GAAsB9mC,EACF2mC,EACAC,GAClB9sC,EAAAxB,KAAAK,KAAMqH,GAHcrH,KAAAqH,cACFrH,KAAAguC,aACAhuC,KAAAiuC,mBALZjuC,KAAAouC,SAA0B,GAAI5qC,GAAAxC,SAC9BhB,KAAA2R,MAAgB,EAMtBtK,EAAY9F,KAAKvB,KAAKouC,QAAQ,IAgDlC,MAxDuCruC,GAAAouC,EAAAhtC,GAW3BgtC,EAAA7tC,UAAAoL,MAAV,SAAgB3D,GAOd,IAAK,GANCkmC,GAAoBjuC,KAAKiuC,iBAAmB,EAAKjuC,KAAKiuC,iBAAmBjuC,KAAKguC,WAC9E3mC,EAAcrH,KAAKqH,YACnB2mC,EAAahuC,KAAKguC,WAClBI,EAAUpuC,KAAKouC,QACfpmC,EAAMomC,EAAQnmC,OAEXG,EAAI,EAAGA,EAAIJ,IAAQhI,KAAKuH,eAAgBa,IAC/CgmC,EAAQhmC,GAAG7G,KAAKwG,EAElB,IAAMlI,GAAIG,KAAK2R,MAAQq8B,EAAa,CAIpC,IAHInuC,GAAK,GAAKA,EAAIouC,IAAqB,IAAMjuC,KAAKuH,gBAChD6mC,EAAQz9B,QAAQrI,aAEZtI,KAAK2R,MAAQs8B,IAAqB,IAAMjuC,KAAKuH,eAAgB,CACjE,GAAM8lC,GAAS,GAAI7pC,GAAAxC,OACnBotC,GAAQzlC,KAAK0kC,GACbhmC,EAAY9F,KAAK8rC,KAIXc,EAAA7tC,UAAAqL,OAAV,SAAiBtD,GACf,GAAM+lC,GAAUpuC,KAAKouC,OACrB,IAAIA,EACF,KAAOA,EAAQnmC,OAAS,IAAMjI,KAAKuH,gBACjC6mC,EAAQz9B,QAAQxO,MAAMkG,EAG1BrI,MAAKqH,YAAYlF,MAAMkG,IAGf8lC,EAAA7tC,UAAAsL,UAAV,WACE,GAAMwiC,GAAUpuC,KAAKouC,OACrB,IAAIA,EACF,KAAOA,EAAQnmC,OAAS,IAAMjI,KAAKuH,gBACjC6mC,EAAQz9B,QAAQrI,UAGpBtI,MAAKqH,YAAYiB,YAGT6lC,EAAA7tC,UAAAgM,aAAV,WACEtM,KAAK2R,MAAQ,EACb3R,KAAKouC,QAAU,MAEnBD,GAxDuCpqC,EAAAC,anUghgBjC,SAASxE,EAAQD,EAASH,GAE/B,YoU/lgBD,IAAAqE,GAAArE,EAAyB,GACzBivC,EAAAjvC,EAA8C,IAE9CqE,GAAAC,WAAWpD,UAAU4oB,WAAamlB,EAAAnlB,YpUomgB5B,SAAS1pB,EAAQD,EAASH,GAE/B,YqUhjgBD,SAAA8pB,GAA8BolB,EACAC,EACA5+B,GAC5B,MAF4B,UAAA4+B,MAAA,MACA,SAAA5+B,MAAAzJ,EAAAU,OACrB5G,KAAK2H,KAAK,GAAI6mC,GAAsBF,EAAgBC,EAAwB5+B,IAyGrF,QAAA8+B,GAAuC7sC,GAC7B,GAAA6G,GAAA7G,EAAA6G,WAAY6lC,EAAA1sC,EAAA0sC,eAAgB1jC,EAAAhJ,EAAAgJ,MAChCA,IACFA,EAAOtC,WAET1G,EAAMgJ,OAASnC,EAAWklC,aACpB3tC,KAAM8P,SAASlO,EAAO0sC,GAc9B,QAAAI,GAAmC9sC,GAC3B,GAAA0sC,GAAA1sC,EAAA0sC,eAAgB7lC,EAAA7G,EAAA6G,WAAYkH,EAAA/N,EAAA+N,UAAW4+B,EAAA3sC,EAAA2sC,uBACzC3jC,EAASnC,EAAWklC,aACpBlvB,EAAmCze,KACnC8L,GAAwB2S,SAAQvU,aAAmB,MACjDykC,GAAkClmC,aAAYmC,SAAQkB,UAC5DA,GAAQ5B,aAAeyF,EAAUG,SAAS8+B,EAAqBN,EAAgBK,GAC/ElwB,EAAOpV,IAAIyC,EAAQ5B,cACnBuU,EAAO3O,SAASlO,EAAO2sC,GAGzB,QAAAK,GAAgCt/B,GACtB,GAAA7G,GAAA6G,EAAA7G,WAAYmC,EAAA0E,EAAA1E,OAAQkB,EAAAwD,EAAAxD,OACxBA,IAAWA,EAAQ2S,QAAU3S,EAAQ5B,cACvC4B,EAAQ2S,OAAOhR,OAAO3B,EAAQ5B,cAEhCzB,EAAWomC,YAAYjkC,GrUi6fxB,GAAI7K,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KqU7mgBpF4D,EAAA3E,EAAyB,IAEzBoE,EAAApE,EAAsB,GAItB8G,EAAA9G,EAAoB,GAmDJG,GAAA2pB,WAAUA,CAU1B,IAAAslB,GAAA,WAEE,QAAAA,GAAoBF,EACAC,EACA5+B,GAFA3P,KAAAsuC,iBACAtuC,KAAAuuC,yBACAvuC,KAAA2P,YAQtB,MALE6+B,GAAAluC,UAAAX,KAAA,SAAK8I,EAAuCK,GAC1C,MAAOA,GAAON,WAAW,GAAIsmC,GAC3BrmC,EAAYzI,KAAKsuC,eAAgBtuC,KAAKuuC,uBAAwBvuC,KAAK2P,aAGzE6+B,KAcAM,EAAA,SAAA3tC,GAGE,QAAA2tC,GAAsBznC,EACFinC,EACAC,EACA5+B,GAElB,GADAxO,EAAAxB,KAAAK,KAAMqH,GAJcrH,KAAAqH,cACFrH,KAAAsuC,iBACAtuC,KAAAuuC,yBACAvuC,KAAA2P,YALZ3P,KAAAouC,WAOyB,OAA3BG,GAAmCA,GAA0B,EAAG,CAClE,GAAIlB,GAASrtC,KAAK2tC,aACZjiB,GAAejjB,WAAYzI,KAAM4K,OAAAyiC,EAAQvhC,QAAc,MACvD6f,GAAoC2iB,iBAAgBC,yBAAwB9lC,WAAYzI,KAAM2P,YACpG3P,MAAKqJ,IAAIsG,EAAUG,SAAS8+B,EAAqBN,EAAgB5iB,IACjE1rB,KAAKqJ,IAAIsG,EAAUG,SAAS4+B,EAAwBH,EAAwB5iB,QACvE,CACL,GAAIojB,GAAS/uC,KAAK2tC,aACZliB,GAAsBhjB,WAAYzI,KAAM4K,OAAAmkC,EAAQT,iBACtDtuC,MAAKqJ,IAAIsG,EAAUG,SAAS2+B,EAA4BH,EAAgB7iB,KA+C9E,MAhEsC1rB,GAAA+uC,EAAA3tC,GAqB1B2tC,EAAAxuC,UAAAoL,MAAV,SAAgB3D,GAGd,IAAK,GAFCqmC,GAAUpuC,KAAKouC,QACfpmC,EAAMomC,EAAQnmC,OACXG,EAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAM4mC,GAASZ,EAAQhmC,EAClB4mC,GAAOznC,gBACVynC,EAAOztC,KAAKwG,KAKR+mC,EAAAxuC,UAAAqL,OAAV,SAAiBtD,GAEf,IADA,GAAM+lC,GAAUpuC,KAAKouC,QACdA,EAAQnmC,OAAS,GACtBmmC,EAAQz9B,QAAQxO,MAAMkG,EAExBrI,MAAKqH,YAAYlF,MAAMkG,IAGfymC,EAAAxuC,UAAAsL,UAAV,WAEE,IADA,GAAMwiC,GAAUpuC,KAAKouC,QACdA,EAAQnmC,OAAS,GAAG,CACzB,GAAMgnC,GAASb,EAAQz9B,OAClBs+B,GAAO1nC,gBACV0nC,EAAO3mC,WAGXtI,KAAKqH,YAAYiB,YAGnBwmC,EAAAxuC,UAAAqtC,WAAA,WACE,GAAM/iC,GAAS,GAAIpH,GAAAxC,OACnBhB,MAAKouC,QAAQzlC,KAAKiC,EAClB,IAAMvD,GAAcrH,KAAKqH,WAEzB,OADAA,GAAY9F,KAAKqJ,GACVA,GAGTkkC,EAAAxuC,UAAAuuC,YAAA,SAAYjkC,GACVA,EAAOtC,UACP,IAAM8lC,GAAUpuC,KAAKouC,OACrBA,GAAQvgC,OAAOugC,EAAQxgC,QAAQhD,GAAS,IAE5CkkC,GAhEsC/qC,EAAAC,arUwrgBhC,SAASxE,EAAQD,EAASH,GAE/B,YsUvxgBD,IAAAqE,GAAArE,EAAyB,GACzB8vC,EAAA9vC,EAAkD,IAElDqE,GAAAC,WAAWpD,UAAU6uC,aAAeD,EAAAC,ctU4xgB9B,SAAS3vC,EAAQD,EAASH,GAE/B,YuU5ugBD,SAAA+vC,GAAmCljB,EACAC,GACjC,MAAOlsB,MAAK2H,KAAK,GAAIynC,GAA2BnjB,EAAUC,IvU2ugB3D,GAAInsB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KuUnygBpFqD,EAAApE,EAAsB,GACtByE,EAAAzE,EAA2B,IAE3BsN,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAE1B0S,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GA2ChBG,GAAA4vC,aAAYA,CAS5B,IAAAC,GAAA,WAEE,QAAAA,GAAoBnjB,EACAC,GADAlsB,KAAAisB,WACAjsB,KAAAksB,kBAQtB,MALEkjB,GAAA9uC,UAAAX,KAAA,SAAK8I,EAAuCK,GAC1C,MAAOA,GAAON,WAAW,GAAI6mC,GAC3B5mC,EAAYzI,KAAKisB,SAAUjsB,KAAKksB,mBAGtCkjB,KAYAC,EAAA,SAAAluC,GAIE,QAAAkuC,GAAYhoC,EACQ4kB,EACAC,GAClB/qB,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAAisB,WACAjsB,KAAAksB,kBALZlsB,KAAAurB,YAONvrB,KAAKqJ,IAAIrJ,KAAKsvC,iBAAmBv9B,EAAAM,kBAAkBrS,KAAMisB,EAAUA,IAoHvE,MA5H2ClsB,GAAAsvC,EAAAluC,GAW/BkuC,EAAA/uC,UAAAoL,MAAV,SAAgB3D,GACN,GAAAwjB,GAAAvrB,KAAAurB,QACR,IAAIA,EAEF,IAAK,GADCvjB,GAAMujB,EAAStjB,OACZG,EAAI,EAAGA,EAAIJ,EAAKI,IACvBmjB,EAASnjB,GAAGwC,OAAOrJ,KAAKwG,IAKpBsnC,EAAA/uC,UAAAqL,OAAV,SAAiBtD,GAEP,GAAAkjB,GAAAvrB,KAAAurB,QAGR,IAFAvrB,KAAKurB,SAAW,KAEZA,EAIF,IAHA,GAAMvjB,GAAMujB,EAAStjB,OACjBoF,OAEKA,EAAQrF,GAAK,CACpB,GAAM8D,GAAUyf,EAASle,EACzBvB,GAAQlB,OAAOzI,MAAMkG,GACrByD,EAAQ5B,aAAa3B,cAIzBpH,EAAAb,UAAMqL,OAAMhM,KAAAK,KAACqI,IAGLgnC,EAAA/uC,UAAAsL,UAAV,WACU,GAAA2f,GAAAvrB,KAAAurB,QAER,IADAvrB,KAAKurB,SAAW,KACZA,EAGF,IAFA,GAAMvjB,GAAMujB,EAAStjB,OACjBoF,OACKA,EAAQrF,GAAK,CACpB,GAAM8D,GAAUyf,EAASle,EACzBvB,GAAQlB,OAAOtC,WACfwD,EAAQ5B,aAAa3B,cAGzBpH,EAAAb,UAAMsL,UAASjM,KAAAK,OAGPqvC,EAAA/uC,UAAAgM,aAAV,WACU,GAAAif,GAAAvrB,KAAAurB,QAER,IADAvrB,KAAKurB,SAAW,KACZA,EAGF,IAFA,GAAMvjB,GAAMujB,EAAStjB,OACjBoF,OACKA,EAAQrF,GAAK,CACpB,GAAM8D,GAAUyf,EAASle,EACzBvB,GAAQlB,OAAOrC,cACfuD,EAAQ5B,aAAa3B,gBAK3B8mC,EAAA/uC,UAAAkS,WAAA,SAAWC,EAAiBC,EACjBC,EAAoBC,EACpBC,GAET,GAAIJ,IAAezS,KAAKisB,SAAU,CAExB,GAAAC,GAAAlsB,KAAAksB,gBACFnC,EAAkBrd,EAAAO,SAASif,GAAiBxZ,EAElD,IAAIqX,IAAoBpd,EAAAO,YACtB,MAAOlN,MAAKmC,MAAMwK,EAAAO,YAAYC,EAE9B,IAAMkgC,GAAS,GAAI7pC,GAAAxC,QACbkJ,EAAe,GAAIrG,GAAAC,aACnBgI,GAAYlB,OAAAyiC,EAAQnjC,eAC1BlK,MAAKurB,SAAS5iB,KAAKmD,EACnB,IAAMkK,GAAoBjE,EAAAM,kBAAkBrS,KAAM+pB,EAAiBje,EAE/DkK,GAAkBzO,eACpBvH,KAAK6uC,YAAY7uC,KAAKurB,SAAStjB,OAAS,IAEjC+N,EAAmBlK,QAAUA,EACpC5B,EAAab,IAAI2M,IAGnBhW,KAAKqH,YAAY9F,KAAK8rC,OAIxBrtC,MAAK6uC,YAAY7uC,KAAKurB,SAAS3d,QAAQ6E,KAI3C48B,EAAA/uC,UAAA2S,YAAA,SAAY5K,GACVrI,KAAKmC,MAAMkG,IAGbgnC,EAAA/uC,UAAAgS,eAAA,SAAe42B,GACTA,IAAUlpC,KAAKsvC,kBACjBtvC,KAAK6uC,YAAY7uC,KAAKurB,SAAS3d,QAAes7B,EAAOp9B,WAIjDujC,EAAA/uC,UAAAuuC,YAAR,SAAoBxhC,GAClB,GAAIA,OAAJ,CAIQ,GAAAke,GAAAvrB,KAAAurB,SACFzf,EAAUyf,EAASle,GACjBzC,EAAAkB,EAAAlB,OAAQV,EAAA4B,EAAA5B,YAChBqhB,GAAS1d,OAAOR,EAAO,GACvBzC,EAAOtC,WACP4B,EAAa3B,gBAEjB8mC,GA5H2Cv9B,EAAAkB,kBvUm4gBrC,SAASxT,EAAQD,EAASH,GAE/B,YwU19gBD,IAAAqE,GAAArE,EAAyB,GACzBmwC,EAAAnwC,EAA8C,IAE9CqE,GAAAC,WAAWpD,UAAUkvC,WAAaD,EAAAC,YxU+9gB5B,SAAShwC,EAAQD,EAASH,GAE/B,YyUl7gBD,SAAAowC,GAA8BtjB,GAC5B,MAAOlsB,MAAK2H,KAAK,GAAI4lC,GAAkBrhB,IzUk7gBxC,GAAInsB,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KyUt+gBpFqD,EAAApE,EAAsB,GAGtBsN,EAAAtN,EAAuB,IACvBuN,EAAAvN,EAA0B,IAE1B0S,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAwChBG,GAAAiwC,WAAUA,CAQ1B,IAAAjC,GAAA,WACE,QAAAA,GAAoBrhB,GAAAlsB,KAAAksB,kBAMtB,MAHEqhB,GAAAjtC,UAAAX,KAAA,SAAK8I,EAAuCK,GAC1C,MAAOA,GAAON,WAAW,GAAIilC,GAAiBhlC,EAAYzI,KAAKksB,mBAEnEqhB,KAOAE,EAAA,SAAAtsC,GAIE,QAAAssC,GAAsBpmC,EACF6kB,GAClB/qB,EAAAxB,KAAAK,KAAMqH,GAFcrH,KAAAqH,cACFrH,KAAAksB,kBAElBlsB,KAAK2tC,aA8DT,MArEkC5tC,GAAA0tC,EAAAtsC,GAUhCssC,EAAAntC,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAK2tC,WAAW96B,IAGlB46B,EAAAntC,UAAA2S,YAAA,SAAY9Q,EAAY0Q,GACtB7S,KAAK2L,OAAOxJ,IAGdsrC,EAAAntC,UAAAgS,eAAA,SAAeO,GACb7S,KAAK2tC,WAAW96B,IAGR46B,EAAAntC,UAAAoL,MAAV,SAAgB3D,GACd/H,KAAK4K,OAAOrJ,KAAKwG,IAGT0lC,EAAAntC,UAAAqL,OAAV,SAAiBtD,GACfrI,KAAK4K,OAAOzI,MAAMkG,GAClBrI,KAAKqH,YAAYlF,MAAMkG,GACvBrI,KAAKyvC,kCAGGhC,EAAAntC,UAAAsL,UAAV,WACE5L,KAAK4K,OAAOtC,WACZtI,KAAKqH,YAAYiB,WACjBtI,KAAKyvC,kCAGChC,EAAAntC,UAAAmvC,+BAAR,WACMzvC,KAAK0vC,qBACP1vC,KAAK0vC,oBAAoBnnC,eAIrBklC,EAAAntC,UAAAqtC,WAAR,SAAmB96B,GAAA,SAAAA,MAAA,MACbA,IACF7S,KAAKyN,OAAOoF,GACZA,EAAStK,cAGX,IAAMqlC,GAAa5tC,KAAK4K,MACpBgjC,IACFA,EAAWtlC,UAGb,IAAMsC,GAAS5K,KAAK4K,OAAS,GAAIpH,GAAAxC,OACjChB,MAAKqH,YAAY9F,KAAKqJ,EAEtB,IAAMmf,GAAkBrd,EAAAO,SAASjN,KAAKksB,kBACtC,IAAInC,IAAoBpd,EAAAO,YAAa,CACnC,GAAM7E,GAAMsE,EAAAO,YAAYC,CACxBnN,MAAKqH,YAAYlF,MAAMkG,GACvBrI,KAAK4K,OAAOzI,MAAMkG,OAElBrI,MAAKqJ,IAAIrJ,KAAK0vC,oBAAsB39B,EAAAM,kBAAkBrS,KAAM+pB,KAGlE0jB,GArEkC37B,EAAAkB,kBzU8hhB5B,SAASxT,EAAQD,EAASH,GAE/B,Y0UxmhBD,IAAAqE,GAAArE,EAAyB,GACzBuwC,EAAAvwC,EAAsD,IAEtDqE,GAAAC,WAAWpD,UAAUsvC,eAAiBD,EAAAC,gB1U6mhBhC,SAASpwC,EAAQD,EAASH,GAE/B,Y2UtkhBD,SAAAwwC,K3UsnhBK,I2UtnhBgC,GAAAlgC,MAAAG,EAAA,EAAAA,EAAAtE,UAAAtD,OAAA4H,IAAAH,EAAAG,EAAA,GAAAtE,UAAAsE,EACnC,IAAIiB,EACiC,mBAA1BpB,GAAKA,EAAKzH,OAAS,KAC5B6I,EAAUpB,EAAKuB,MAEjB,IAAMJ,GAAiCnB,CACvC,OAAO1P,MAAK2H,KAAK,GAAIkoC,GAAuBh/B,EAAaC,I3UikhB1D,GAAI/Q,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,K2UpnhBpF2R,EAAA1S,EAA8B,IAE9B2S,EAAA3S,EAAgC,GAwChBG,GAAAqwC,eAAcA,CA8B9B,IAAAC,GAAA,WACE,QAAAA,GAAoBh/B,EACAC,GADA9Q,KAAA6Q,cACA7Q,KAAA8Q,UAMtB,MAHE++B,GAAAvvC,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIsnC,GAAyBrnC,EAAYzI,KAAK6Q,YAAa7Q,KAAK8Q,WAE7F++B,KAOAC,EAAA,SAAA3uC,GAIE,QAAA2uC,GAAYzoC,EACQwJ,EACAC,GAClB3P,EAAAxB,KAAAK,KAAMqH,GAFYrH,KAAA6Q,cACA7Q,KAAA8Q,UAJZ9Q,KAAAoS,YAMN,IAAMpK,GAAM6I,EAAY5I,MACxBjI,MAAKmS,OAAS,GAAIrE,OAAM9F,EAExB,KAAK,GAAII,GAAI,EAAGA,EAAIJ,EAAKI,IACvBpI,KAAKoS,UAAUzJ,KAAKP,EAGtB,KAAK,GAAIA,GAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAIpB,GAAa6J,EAAYzI,EAC7BpI,MAAKqJ,IAAI0I,EAAAM,kBAAwBrS,KAAMgH,EAAiBA,EAAYoB,KA0C1E,MA3D6CrI,GAAA+vC,EAAA3uC,GAqB3C2uC,EAAAxvC,UAAAkS,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT7S,KAAKmS,OAAOQ,GAAcD,CAC1B,IAAMN,GAAYpS,KAAKoS,SACvB,IAAIA,EAAUnK,OAAS,EAAG,CACxB,GAAM2qB,GAAQxgB,EAAUxE,QAAQ+E,EAC5BigB,SACFxgB,EAAUvE,OAAO+kB,EAAO,KAK9Bkd,EAAAxvC,UAAAgS,eAAA,aAIUw9B,EAAAxvC,UAAAoL,MAAV,SAAgB3D,GACd,GAA8B,IAA1B/H,KAAKoS,UAAUnK,OAAc,CAC/B,GAAMyH,IAAQ3H,GAAKhF,OAAK/C,KAAKmS,OACzBnS,MAAK8Q,QACP9Q,KAAK+S,YAAYrD,GAEjB1P,KAAKqH,YAAY9F,KAAKmO,KAKpBogC,EAAAxvC,UAAAyS,YAAR,SAAoBrD,GAClB,GAAIb,EACJ,KACEA,EAAS7O,KAAK8Q,QAAQ7C,MAAMjO,KAAM0P,GAClC,MAAOrH,GAEP,WADArI,MAAKqH,YAAYlF,MAAMkG,GAGzBrI,KAAKqH,YAAY9F,KAAKsN,IAE1BihC,GA3D6Ch+B,EAAAkB,kB3U8phBvC,SAASxT,EAAQD,EAASH,GAE/B,Y4UzvhBD,IAAAqE,GAAArE,EAAyB,GACzByiB,EAAAziB,EAAqC,IAErCqE,GAAAC,WAAWpD,UAAUwhB,IAAMD,EAAAG,U5U8vhBrB,SAASxiB,EAAQD,EAASH,GAE/B,Y6UnwhBD,IAAAqE,GAAArE,EAAyB,GACzB2wC,EAAA3wC,EAAsC,IAEtCqE,GAAAC,WAAWpD,UAAU0vC,OAASD,EAAAC,Q7UwwhBxB,SAASxwC,EAAQD,EAASH,GAE/B,Y8UrwhBD,SAAA4wC,GAA6Bl/B,GAC3B,MAAO9Q,MAAK2H,KAAK,GAAIka,GAAAI,YAAYnR,IAVnC,GAAA+Q,GAAAziB,EAA0B,IASVG,GAAAywC,OAAMA,G9UqxhBhB,SAASxwC,EAAQD,EAASH,GAE/B,Y+UhyhBD,IAAA2E,GAAA3E,EAAyB,IAEzBwE,EAAA,mBAAAA,MAIA,MAHEA,GAAAtD,UAAAX,KAAA,SAAK8I,EAA2BK,GAC9B,MAAOA,GAAON,WAAW,GAAIzE,GAAAC,WAAcyE,KAE/C7E,IAJarE,GAAAqE,SAAQA,G/U6yhBf,SAASpE,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KgVrzhBpFsD,EAAArE,EAAyB,GACzBuG,EAAAvG,EAAmC,KACnCuF,EAAAvF,EAA2B,IAE3B6wC,EAAA7wC,EAA6B,KAC7B8wC,EAAA9wC,EAA4B,KAE5B+wC,EAAA/wC,EAA8B,KAY9BsG,EAAA,SAAAvE,GAKE,QAAAuE,GAAmB0qC,GACjBjvC,EAAAxB,KAAAK,MADiBA,KAAAowC,kBAJXpwC,KAAAqwC,kBACArwC,KAAAswC,mBACAtwC,KAAAuwC,cA4NV,MA/NmCxwC,GAAA2F,EAAAvE,GASjCuE,EAAApF,UAAAkwC,WAAA,SAAWC,GACT,GAAM7iC,GAAkB6iC,EAAQ7iC,QAAQ,IACxC,IAAIA,OACF,KAAM,IAAI7D,OAAM,8DAElB,OAAO6D,GAAUlI,EAAcgrC,iBAGjChrC,EAAApF,UAAAqwC,qBAAA,SAAwBF,EAAiBt+B,EAAchQ,GACrD,GAAIsuC,EAAQ7iC,QAAQ,UAClB,KAAM,IAAI7D,OAAM,sDAElB,IAAI0mC,EAAQ7iC,QAAQ,UAClB,KAAM,IAAI7D,OAAM,wDAElB,IAAMzH,GAAWoD,EAAckrC,aAAaH,EAASt+B,EAAQhQ,GACvD0uC,EAAO,GAAIZ,GAAAa,eAAkBxuC,EAAUtC,KAE7C,OADAA,MAAKswC,gBAAgB3nC,KAAKkoC,GACnBA,GAGTnrC,EAAApF,UAAAywC,oBAAA,SAAuBN,EAAiBt+B,EAAchQ,GACpD,GAAIsuC,EAAQ7iC,QAAQ,UAClB,KAAM,IAAI7D,OAAM,uDAElB,IAAMzH,GAAWoD,EAAckrC,aAAaH,EAASt+B,EAAQhQ,GACvD0F,EAAU,GAAIqoC,GAAAc,cAAiB1uC,EAAUtC,KAE/C,OADAA,MAAKqwC,eAAe1nC,KAAKd,GAClBA,GAGDnC,EAAApF,UAAA2wC,2BAAR,SAAmCjqC,EACAkqC,GADnC,GAAA9vC,GAAApB,KAEQsC,IAQN,OAPA0E,GAAW9E,UAAU,SAAC6F,GACpBzF,EAASqG,MAAOwoC,MAAO/vC,EAAK+vC,MAAQD,EAAYv4B,aAAchU,EAAAC,aAAamU,WAAWhR,MACrF,SAACM,GACF/F,EAASqG,MAAOwoC,MAAO/vC,EAAK+vC,MAAQD,EAAYv4B,aAAchU,EAAAC,aAAaoU,YAAY3Q,MACtF,WACD/F,EAASqG,MAAOwoC,MAAO/vC,EAAK+vC,MAAQD,EAAYv4B,aAAchU,EAAAC,aAAaqU,qBAEtE3W,GAGToD,EAAApF,UAAA8wC,iBAAA,SAAiBpqC,EACAqqC,GADjB,GAAAjwC,GAAApB,IACiB,UAAAqxC,MAAA,KACf,IAIInnC,GAJEonC,KACAC,GAA6BD,SAAQE,OAAO,GAC5CC,EAAsB/rC,EACzBgsC,4BAA4BL,GAAuBM,iBAwBtD,OArBA3xC,MAAK8P,SAAS,WACZ5F,EAAelD,EAAW9E,UAAU,SAAAqK,GAClC,GAAIxE,GAAQwE,CAERA,aAAa9I,GAAAC,aACfqE,EAAQ3G,EAAK6vC,2BAA2BlpC,EAAO3G,EAAK+vC,QAEtDG,EAAO3oC,MAAOwoC,MAAO/vC,EAAK+vC,MAAOx4B,aAAchU,EAAAC,aAAamU,WAAWhR,MACtE,SAACM,GACFipC,EAAO3oC,MAAOwoC,MAAO/vC,EAAK+vC,MAAOx4B,aAAchU,EAAAC,aAAaoU,YAAY3Q,MACvE,WACDipC,EAAO3oC,MAAOwoC,MAAO/vC,EAAK+vC,MAAOx4B,aAAchU,EAAAC,aAAaqU,sBAE7D,GAECw4B,IAAwBl9B,OAAOC,mBACjCxU,KAAK8P,SAAS,WAAM,MAAA5F,GAAa3B,eAAekpC,GAGlDzxC,KAAKuwC,WAAW5nC,KAAK4oC,IAGnBK,KAAI,SAACnB,EAAiBt+B,EAAc0/B,GAClCN,EAAUC,OAAQ,EAClBD,EAAUO,SAAWpsC,EAAckrC,aAAaH,EAASt+B,EAAQ0/B,GAAY,MAKnFnsC,EAAApF,UAAAyxC,oBAAA,SAAoBC,GAClB,GAAMT,IAA6BD,OAAQU,EAAwBR,OAAO,EAE1E,OADAxxC,MAAKuwC,WAAW5nC,KAAK4oC,IAEnBK,KAAI,SAACnB,GACH,GAAMwB,GAA6C,gBAAZxB,IAAyBA,GAAWA,CAC3Ec,GAAUC,OAAQ,EAClBD,EAAUO,SAAWG,EAAatvC,IAAI,SAAA8tC,GACpC,MAAA/qC,GAAcgsC,4BAA4BjB,QAMlD/qC,EAAApF,UAAA8d,MAAA,WAEE,IADA,GAAMiyB,GAAiBrwC,KAAKqwC,eACrBA,EAAepoC,OAAS,GAC7BooC,EAAe1/B,QAAQuhC,OAGzB/wC,GAAAb,UAAM8d,MAAKze,KAAAK,KAEX,KADA,GAAMmyC,GAAkBnyC,KAAKuwC,WAAW9tC,OAAO,SAAA2vC,GAAQ,MAAAA,GAAKZ,QACrDW,EAAgBlqC,OAAS,GAAG,CACjC,GAAMmqC,GAAOD,EAAgBxhC,OAC7B3Q,MAAKowC,gBAAgBgC,EAAKd,OAAQc,EAAKN,YAIpCpsC,EAAAgsC,4BAAP,SAAmCjB,GACjC,GAAuB,gBAAZA,GACT,MAAO,IAAIN,GAAAkC,gBAAgB99B,OAAOC,kBAOpC,KAAK,GALCxM,GAAMyoC,EAAQxoC,OAChBqqC,KACAC,EAAoBh+B,OAAOC,kBAC3Bi9B,EAAsBl9B,OAAOC,kBAExBpM,EAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAM+oC,GAAQ/oC,EAAIpI,KAAK0wC,gBACjB7wC,EAAI4wC,EAAQroC,EAClB,QAAQvI,GACN,IAAK,IACL,IAAK,IACH,KACF,KAAK,IACHyyC,EAAanB,CACb,MACF,KAAK,IACHmB,IACA,MACF,KAAK,IACH,GAAIC,IAAsBh+B,OAAOC,kBAC/B,KAAM,IAAIzK,OAAM,iGAGlBwoC,GAAoBD,KAAkBA,EAAanB,CACnD,MACF,KAAK,IACH,GAAIM,IAAwBl9B,OAAOC,kBACjC,KAAM,IAAIzK,OAAM,iGAGlB0nC,GAAsBa,KAAkBA,EAAanB,CACrD,MACF,SACE,KAAM,IAAIpnC,OAAM,0FACoClK,EAAI,OAI9D,MAAI4xC,GAAsB,EACjB,GAAItB,GAAAkC,gBAAgBE,GAEpB,GAAIpC,GAAAkC,gBAAgBE,EAAmBd,IAI3C/rC,EAAAkrC,aAAP,SAAoBH,EACAt+B,EACA0/B,EACAW,GAClB,GADkB,SAAAA,OAAA,GACd/B,EAAQ7iC,QAAQ,UAClB,KAAM,IAAI7D,OAAM,yEAkBlB,KAAK,GAfC/B,GAAMyoC,EAAQxoC,OACdwqC,KACAC,EAAWjC,EAAQ7iC,QAAQ,KAC3B+kC,EAAcD,OAAkB,EAAKA,GAAY1yC,KAAK0wC,gBACtDpS,EAA6B,gBAAXnsB,GACtB,SAAC5F,GAAW,MAAAA,IACZ,SAACA,GAEC,MAAIimC,IAA+BrgC,EAAO5F,YAAc0jC,GAAAa,eAC/C3+B,EAAO5F,GAAGjK,SAEZ6P,EAAO5F,IAEd+lC,KAEKlqC,EAAI,EAAGA,EAAIJ,EAAKI,IAAK,CAC5B,GAAM+oC,GAAQ/oC,EAAIpI,KAAK0wC,gBAAkBiC,EACrCh6B,EAAY,OACV9Y,EAAI4wC,EAAQroC,EAClB,QAAQvI,GACN,IAAK,IACL,IAAK,IACH,KACF,KAAK,IACHyyC,EAAanB,CACb,MACF,KAAK,IACHmB,IACA,MACF,KAAK,IACH35B,EAAehU,EAAAC,aAAaqU,gBAC5B,MACF,KAAK,IACH,KACF,KAAK,IACHN,EAAehU,EAAAC,aAAaoU,YAAY64B,GAAc,QACtD,MACF,SACEl5B,EAAehU,EAAAC,aAAamU,WAAWulB,EAASz+B,IAIhD8Y,GACF85B,EAAa9pC,MAAOwoC,MAAOmB,KAAkBA,EAAanB,EAAOx4B,iBAGrE,MAAO85B,IAEX/sC,GA/NmCC,EAAAC,qBAAtBrG,GAAAmG,cAAaA,GhV+/hBpB,SAASlG,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KiVvhiBpF0D,EAAAzE,EAA2B,IAG3BwG,EAAA,mBAAAA,KACE5F,KAAAme,WACAne,KAAAkS,QAAkB,EAClBlS,KAAAse,YAAsB,KACtBte,KAAAqN,MAAgB,EAChBrN,KAAA4yC,QAAkB,EAClB5yC,KAAAmxC,MAAgB,EAChBnxC,KAAA6yC,UAAoB,IAuDtB,MAnDEjtC,GAAAtF,UAAAie,IAAA,WACE,MAAOve,MAAKmxC,OAGdvrC,EAAAtF,UAAA8d,MAAA,WAGE,IAFA,GAAMD,GAAUne,KAAKme,QACf00B,EAAY7yC,KAAK6yC,UAChB10B,EAAQlW,OAAS,GAAG,CACzB,GAAIwW,GAASN,EAAQxN,OAErB,IADA3Q,KAAKmxC,MAAQ1yB,EAAOhG,QAChBzY,KAAKmxC,OAAS0B,GAQhB,KANA,IADAp0B,EAAOV,UACHU,EAAOtc,MAGT,KAFAgc,GAAQlW,OAAS,EACjBjI,KAAKmxC,MAAQ,EACP1yB,EAAOtc,MAMnBgc,EAAQlW,OAAS,EACjBjI,KAAKmxC,MAAQ,GAGfvrC,EAAAtF,UAAAwyC,UAAA,SAAar0B,GACX,GAAMN,GAAuBne,KAAKme,OAElCA,GAAQxV,KAAK8V,GAEbN,EAAQ40B,KAAK,SAACC,EAAqB9yC,GACjC,MAAI8yC,GAAEv6B,QAAUvY,EAAEuY,MACZu6B,EAAE3lC,QAAUnN,EAAEmN,MACT,EACE2lC,EAAE3lC,MAAQnN,EAAEmN,MACd,KAIA2lC,EAAEv6B,MAAQvY,EAAEuY,MACd,QAOb7S,EAAAtF,UAAAwP,SAAA,SAAY6N,EAAsClF,EAAmB7W,GAEnE,MAFgD,UAAA6W,MAAA,GAChDzY,KAAK4yC,QAAS,EACP,GAAIK,GAAcjzC,KAAM2d,GAAM3d,KAAKqN,UAASyC,SAASlO,EAAO6W,IAnDpD7S,EAAA8qC,gBAA0B,GAqD7C9qC,IA9DarG,GAAAqG,qBAAoBA,CAqEjC,IAAAqtC,GAAA,SAAA9xC,GAME,QAAA8xC,GAAmBtjC,EACAgO,EACAtQ,GACjBlM,EAAAxB,KAAAK,MAHiBA,KAAA2P,YACA3P,KAAA2d,OACA3d,KAAAqN,QALnBrN,KAAAkzC,MAAQ,EAmDV,MAtD+BnzC,GAAAkzC,EAAA9xC,GAY7B8xC,EAAA3yC,UAAAwP,SAAA,SAASlO,EAAW6W,GAClB,GADkB,SAAAA,MAAA,GACdzY,KAAKuH,eACP,MAAOvH,KAET,IAAM2P,GAAY3P,KAAK2P,UACnB8O,EAAoB,IAaxB,OAZqB,KAAjBze,KAAKkzC,QAEPz0B,EAASze,MAITye,EAAS,GAAIw0B,GAActjC,EAAW3P,KAAK2d,KAAMhO,EAAUtC,OAAS,GACpErN,KAAKqJ,IAAIoV,IAEXA,EAAO7c,MAAQA,EACf6c,EAAOhG,MAAQ9I,EAAUwhC,MAAQ14B,EACjC9I,EAAUmjC,UAAUr0B,GACbze,MAGTizC,EAAA3yC,UAAAyd,QAAA,WACE,GAAI/d,KAAKuH,eACP,KAAM,IAAIwC,OAAM,4CAElB/J,MAAK2d,KAAK3d,KAAK4B,QAGjBqxC,EAAA3yC,UAAAiI,YAAA,WACE,GAAM4V,GAAUne,KAAK2P,UAAUwO,QACzB9Q,EAAQ8Q,EAAQvQ,QAAQ5N,KAE9BA,MAAK2d,KAAO,OACZ3d,KAAK4B,MAAQ,OACb5B,KAAK2P,UAAY,OAEbtC,QACF8Q,EAAQtQ,OAAOR,EAAO,GAGxBlM,EAAAb,UAAMiI,YAAW5I,KAAAK,OAErBizC,GAtD+BpvC,EAAAC,ejV+kiBzB,SAAStE,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KkV9piBpFsD,EAAArE,EAAyB,GACzByE,EAAAzE,EAA2B,IAI3B+zC,EAAA/zC,EAAmC,KACnCg0C,EAAAh0C,EAA0B,KAQ1B0xC,EAAA,SAAA3vC,GAME,QAAA2vC,GAAmBxuC,EACPqN,GACVxO,EAAAxB,KAAAK,KAAM,SAAUyI,GACd,GAAMzB,GAAgChH,KAChCqN,EAAQrG,EAAWqsC,oBAKzB,OAJA5qC,GAAWY,IAAI,GAAIxF,GAAAC,aAAa,WAC9BkD,EAAWssC,qBAAqBjmC,MAElCrG,EAAWusC,iBAAiB9qC,GACrBA,IATQzI,KAAAsC,WALZtC,KAAA0N,iBAgBL1N,KAAK2P,UAAYA,EAcrB,MA/BuC5P,GAAA+wC,EAAA3vC,GAoBrC2vC,EAAAxwC,UAAAizC,iBAAA,SAAiB9qC,GAEf,IAAK,GADC+qC,GAAiBxzC,KAAKsC,SAAS2F,OAC5BG,EAAI,EAAGA,EAAIorC,EAAgBprC,IAAK,CACvC,GAAMtF,GAAU9C,KAAKsC,SAAS8F,EAC9BK,GAAWY,IACTrJ,KAAK2P,UAAUG,SAAS,SAAChD,GlVupiBhB,GkVvpiBiBhK,GAAAgK,EAAAhK,QAAS2F,EAAAqE,EAAArE,UAAkB3F,GAAQ6V,aAAaC,QAAQnQ,IAChF3F,EAAQquC,OACPruC,UAAS2F,kBAIpBqoC,GA/BuCrtC,EAAAC,WAA1BnE,GAAAuxC,eAAcA,EAgC3BsC,EAAAK,YAAY3C,GAAiBqC,EAAAO,wBlV6piBvB,SAASl0C,EAAQD,EAASH,GAE/B,YmV5siBD,IAAA+wC,GAAA/wC,EAA8B,KAE9Bs0C,EAAA,mBAAAA,KACS1zC,KAAA0N,iBAgBT,MAbEgmC,GAAApzC,UAAA+yC,mBAAA,WAEE,MADArzC,MAAK0N,cAAc/E,KAAK,GAAIwnC,GAAAkC,gBAAgBryC,KAAK2P,UAAU4O,QACpDve,KAAK0N,cAAczF,OAAS,GAGrCyrC,EAAApzC,UAAAgzC,qBAAA,SAAqBjmC,GACnB,GAAMsmC,GAAmB3zC,KAAK0N,cACxBkmC,EAAqBD,EAAiBtmC,EAC5CsmC,GAAiBtmC,GAAS,GAAI8iC,GAAAkC,gBAC5BuB,EAAmBC,gBACnB7zC,KAAK2P,UAAU4O,QAGrBm1B,IAjBan0C,GAAAm0C,qBAAoBA,GnVguiB3B,SAASl0C,EAAQD,GAEtB,YoVruiBD,IAAA8yC,GAAA,WACE,QAAAA,GAAmBwB,EACAlC,GAAP,SAAAA,MAAmCp9B,OAAOC,mBADnCxU,KAAA6zC,kBACA7zC,KAAA2xC,oBAErB,MAAAU,KAJa9yC,GAAA8yC,gBAAeA,GpVmviBtB,SAAS7yC,EAAQD,GAEtB,YqVrviBD,SAAAk0C,GAA4BK,EAAkBC,GAC5C,IAAK,GAAI3rC,GAAI,EAAGJ,EAAM+rC,EAAU9rC,OAAQG,EAAIJ,EAAKI,IAG/C,IAAK,GAFC4rC,GAAWD,EAAU3rC,GACrB6rC,EAAe1zC,OAAOwT,oBAAoBigC,EAAS1zC,WAChD4zC,EAAI,EAAGC,EAAOF,EAAahsC,OAAQisC,EAAIC,EAAMD,IAAK,CACzD,GAAME,GAAOH,EAAaC,EAC1BJ,GAAYxzC,UAAU8zC,GAAQJ,EAAS1zC,UAAU8zC,IANvC70C,EAAAk0C,YAAWA,GrVqwiBrB,SAASj0C,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KsV3wiBpFqD,EAAApE,EAAsB,GAEtByE,EAAAzE,EAA2B,IAI3B+zC,EAAA/zC,EAAmC,KACnCg0C,EAAAh0C,EAA0B,KAO1B4xC,EAAA,SAAA7vC,GAME,QAAA6vC,GAAmB1uC,EACPqN,GACVxO,EAAAxB,KAAAK,MAFiBA,KAAAsC,WALZtC,KAAA0N;AAQL1N,KAAK2P,UAAYA,EA2BrB,MApCsC5P,GAAAixC,EAAA7vC,GAY1B6vC,EAAA1wC,UAAAkI,WAAV,SAAqBC,GACnB,GAAMZ,GAA4B7H,KAC5BqN,EAAQxF,EAAQwrC,oBAItB,OAHA5qC,GAAWY,IAAI,GAAIxF,GAAAC,aAAa,WAC9B+D,EAAQyrC,qBAAqBjmC,MAExBlM,EAAAb,UAAMkI,WAAU7I,KAAAK,KAACyI,IAG1BuoC,EAAA1wC,UAAA4xC,MAAA,WAIE,IAAK,GAHCrqC,GAAU7H,KACVwzC,EAAiB3rC,EAAQvF,SAAS2F,OAE/BG,EAAI,EAAGA,EAAIorC,EAAgBprC,KAClC,WACE,GAAItF,GAAU+E,EAAQvF,SAAS8F,EAE/BP,GAAQ8H,UAAUG,SAChB,WAAQhN,EAAQ6V,aAAaC,QAAQ/Q,IACrC/E,EAAQquC,WAKlBH,GApCsCxtC,EAAAxC,QAAzBzB,GAAAyxC,cAAaA,EAqC1BoC,EAAAK,YAAYzC,GAAgBmC,EAAAO,wBtVuwiBtB,SAASl0C,EAAQD,EAASH,GAE/B,YuV5ziBD,IAAAi1C,GAAAj1C,EAAsC,IAEzBG,GAAAoH,eAAiB,GAAI0tC,GAAAC,yBvVi0iB5B,SAAS90C,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KwVv0iBpFsd,EAAAre,EAA6B,IAC7Bm1C,EAAAn1C,EAAmC,KAEnCk1C,EAAA,SAAAnzC,GAAA,QAAAmzC,KAA6CnzC,EAAA8M,MAAAjO,KAAAuL,WAI7C,MAJ6CxL,GAAAu0C,EAAAnzC,GAC3CmzC,EAAAh0C,UAAAod,YAAA,SAAeC,EAA+B/b,GAC5C,MAAO,IAAI2yC,GAAAC,qBAAqBx0C,KAAM2d,GAAM7N,SAASlO,IAEzD0yC,GAJ6C72B,EAAAI,eAAhCte,GAAA+0C,wBAAuBA,GxVu1iB9B,SAAS90C,EAAQD,EAASH,GAE/B,YACA,IAAIW,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAIH,KAAKI,GAAOA,EAAEG,eAAeP,KAAIG,EAAEH,GAAKI,EAAEJ,GAEnDG,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KyVj2iBpFqd,EAAApe,EAA2B,IAC3Bq1C,EAAAr1C,EAA6B,KAO7Bo1C,EAAA,SAAArzC,GAAA,QAAAqzC,KAA6CrzC,EAAA8M,MAAAjO,KAAAuL,WAkC7C,MAlC6CxL,GAAAy0C,EAAArzC,GAEjCqzC,EAAAl0C,UAAA0d,UAAV,SAAoBpc,EAAW6W,GAC7B,GAD6B,SAAAA,MAAA,GACzBA,EAAQ,EACV,MAAOtX,GAAAb,UAAM0d,UAASre,KAAAK,KAAC4B,EAAO6W,EAEhCzY,MAAKyY,MAAQA,EACbzY,KAAK4B,MAAQA,CACN,IAAA+N,GAAA3P,KAAA2P,SAQP,OAPAA,GAAUwO,QAAQxV,KAAK3I,MAClB2P,EAAU2O,cACb3O,EAAU2O,YAAcm2B,EAAAC,eAAeC,sBAAsB,WAC3DhlC,EAAU2O,YAAc,KACxB3O,EAAUyO,WAGPpe,MAGCw0C,EAAAl0C,UAAAgM,aAAV,WAES,GAAAqD,GAAA3P,KAAA2P,UACA2O,EAAA3O,EAAA2O,YAAaH,EAAAxO,EAAAwO,OAEpBhd,GAAAb,UAAMgM,aAAY3M,KAAAK,MAEK,IAAnBme,EAAQlW,SACV0H,EAAUuC,QAAS,EACA,MAAfoM,IACF3O,EAAU2O,YAAc,KACxBm2B,EAAAC,eAAeE,qBAAqBt2B,MAI5Ck2B,GAlC6Ch3B,EAAAI,aAAhCre,GAAAi1C,qBAAoBA,GzV24iB3B,SAASh1C,EAAQD,EAASH,GAE/B,Y0Vt5iBD,IAAA2J,GAAA3J,EAAqB,GAErBy1C,EAAA,WAGE,QAAAA,GAAYlrC,GACNA,EAAKgrC,uBACP30C,KAAK40C,qBAAuBjrC,EAAKirC,qBAAqB5oC,KAAKrC,GAC3D3J,KAAK20C,sBAAwBhrC,EAAKgrC,sBAAsB3oC,KAAKrC,IACpDA,EAAKmrC,0BACd90C,KAAK40C,qBAAuBjrC,EAAKorC,wBAAwB/oC,KAAKrC,GAC9D3J,KAAK20C,sBAAwBhrC,EAAKmrC,yBAAyB9oC,KAAKrC,IACvDA,EAAKqrC,6BACdh1C,KAAK40C,qBAAuBjrC,EAAKsrC,2BAA2BjpC,KAAKrC,GACjE3J,KAAK20C,sBAAwBhrC,EAAKqrC,4BAA4BhpC,KAAKrC,IAC1DA,EAAKurC,yBACdl1C,KAAK40C,qBAAuBjrC,EAAKwrC,uBAAuBnpC,KAAKrC,GAC7D3J,KAAK20C,sBAAwBhrC,EAAKurC,wBAAwBlpC,KAAKrC,IACtDA,EAAKyrC,wBACdp1C,KAAK40C,qBAAuBjrC,EAAK0rC,sBAAsBrpC,KAAKrC,GAC5D3J,KAAK20C,sBAAwBhrC,EAAKyrC,uBAAuBppC,KAAKrC,KAE9D3J,KAAK40C,qBAAuBjrC,EAAKu8B,aAAal6B,KAAKrC,GACnD3J,KAAK20C,sBAAwB,SAASzc,GAAM,MAAOvuB,GAAK6J,WAAW0kB,EAAI,IAAO,MAGpF,MAAA2c,KAxBat1C,GAAAs1C,gCAA+BA,EA0B/Bt1C,EAAAm1C,eAAiB,GAAIG,GAAgC9rC,EAAAY,O1V+5iB5D,SAASnK,EAAQD,EAASH,GAE/B,Y2V77iBD,IAAAuB,GAAAvB,EAAqD,GAG/Ck2C,EAAS,+CACTC,EAAaD,EAAM,qBACnBE,EAAa,iEAENj2C,GAAAgD,kBAAoB,WAC7B,MAAA5B,GAAA+C,WACKof,MACGgB,OAAQ,OACRF,IAAK,GAAG2xB,EACR1xB,SACI4xB,OAAU,mBACVC,cAAiB,gBAAgBF,KAN7C70C,MASQ,SAAAg1C,GAAgB,MAAAvzC,SAAQC,IAAI,4BAA6BszC,KAC5DhzC,IAAI,SAAAgzC,GAAgB,MAAAA,GAAajyB,YAE7BnkB,EAAAoC,YAAc,SAACmB,EAAoBd,GAC5C,MAAArB,GAAA+C,WACKof,MACGgB,OAAQ,OACRF,IAAQ2xB,EAAO,IAAIvzC,EAAaD,eAAc,YAC9CiiB,KAAMlhB,EACN+gB,SACI4xB,OAAU,mBACVG,eAAgB,mBAChBF,cAAiB,gBAAgB1zC,EAAa6zC,SAR1Dl1C,MAWQ,SAAAg1C,GAAgB,MAAAvzC,SAAQC,IAAI,4BAA6BszC,KAC5DhzC,IAAI,SAAAgzC,GAAgB,YAEhBp2C,EAAAiD,YAAc,SAACR,GACxB,UAAIrB,GAAA+C,WAAmC,SAAC+E,GACpC,MAAAqtC,GAAsB9zC,EAAcyG,KAEvColB,YAEL,IAAMioB,GAAwB,SAAC9zC,EAA8ByG,EAA+CstC,GACxGC,EAAgBh0C,EAAc+zC,GAAW7zC,UACrC,SAAA+zC,GACI,GAAMC,GAAeD,GAAgBA,EAAa3zC,UAAY2zC,EAAa3zC,SAAS2F,OAAS,CACzFiuC,IACAztC,EAAWlH,KAAKZ,EAAA+C,WAAW5B,KAAKm0C,EAAa3zC,WAEjDkR,WACI,WAAM,MAAAsiC,GAAsB9zC,EAAcyG,EAAYwtC,GAAgBA,EAAaF,YACnFG,GAAgBD,EAAaF,UAAY,EAAI,MAGrD,SAAAlnC,GAAU,MAAApG,GAAWtG,MAAM0M,MAI7BmnC,EAAkB,SAACh0C,EAA8B+zC,GACnD,MAAAp1C,GAAA+C,WACKof,MACGgB,OAAQ,MACRF,IAAQ2xB,EAAO,IAAIvzC,EAAaD,eAAc,uBAAuBg0C,EACrElyB,SACI4xB,OAAU,mBACVC,cAAiB,gBAAgB1zC,EAAa6zC,SAN1Dl1C,MASQ,SAAAg1C,GAAgB,MAAAvzC,SAAQC,IAAI,4BAA6BszC,KAC5DhzC,IAAI,SAAAgzC,GAAgB,MAAAA,GAAajyB,a3Vy7iBpC,SAASlkB,EAAQD,EAASH,GAE/B,Y4V//iBD,IAAYqB,GAAKrB,EAAM,GAGvB+2C,EAAA/2C,EAA+B,IAElBG,GAAA6D,QAAU,SAACy6B,GAGnB,MAAAp9B,GAAAyC,cAAA,OAAKzD,GAAG,gBACHo+B,EAAMv7B,SAASK,IAAI,SAACG,EAASuK,GAAU,MAAA5M,GAAAyC,cAACizC,EAAAC,gBAAepiC,IAAM3G,EAAMa,WAAapL,QAAUA,S5VggjB9F,SAAStD,EAAQD,EAASH,GAE/B,Y6V3gjBD,IAAYqB,GAAKrB,EAAM,EAIVG,GAAA62C,eAAiB,SAACvY,GAG3B,MAAAp9B,GAAAyC,cAAA,IAAE,KAAG26B,EAAM/6B,QAAQhB,KAAO,KAAO+7B,EAAM/6B,QAAQxB,Q7V6gjB7C,SAAS9B,EAAQD,EAASH,GAE/B,Y8VthjBD,IAAYqB,GAAKrB,EAAM,EAGVG,GAAA4D,SAAW,SAAC06B,GAMrB,MAAAp9B,GAAAyC,cAAA,OAAKzD,GAAG,iBACJgB,EAAAyC,cAAA,YAAUzD,GAAG,WAAWsI,MAAQ81B,EAAMh8B,gBAAkBw0C,SAAW,SAAAlpC,GAAK,MAAA0wB,GAAMx8B,cAAc8L,EAAEuN,OAAO3S,QAASuuC,UAAYzY,EAAMn8B,aAChIjB,EAAAyC,cAAA,UAAQzD,GAAG,OAAO82C,QAAU1Y,EAAMr8B,YAAc80C,UAAYzY,EAAMh8B,iBAAmD,GAAhCg8B,EAAMh8B,gBAAgBoG,SAAgB41B,EAAMn8B,YAAY","file":"./public/app.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar React = __webpack_require__(2);\n\tvar ReactDOM = __webpack_require__(3);\n\tvar rxjs_1 = __webpack_require__(4);\n\tvar directLine_1 = __webpack_require__(346);\n\tvar History_tsx_1 = __webpack_require__(347);\n\tvar Outgoing_tsx_1 = __webpack_require__(349);\n\tvar outgoing$ = new rxjs_1.Subject();\n\tvar outgoingMessage$ = new rxjs_1.Subject();\n\tvar App = (function (_super) {\n\t    __extends(App, _super);\n\t    function App() {\n\t        var _this = this;\n\t        _super.call(this);\n\t        this.updateMessage = function (text) {\n\t            outgoingMessage$.next(text);\n\t        };\n\t        this.sendMessage = function () {\n\t            _this.setState({ enableSend: false });\n\t            directLine_1.postMessage({\n\t                text: _this.state.outgoingMessage,\n\t                from: null,\n\t                conversationId: _this.state.conversation.conversationId\n\t            }, _this.state.conversation)\n\t                .retry(2)\n\t                .subscribe(function () {\n\t                outgoing$.next({ text: _this.state.outgoingMessage, from: \"me\" });\n\t                _this.setState({ outgoingMessage: \"\", enableSend: true });\n\t            }, function (error) {\n\t                console.log(\"failed to post message\");\n\t                _this.setState({ enableSend: true });\n\t            });\n\t        };\n\t        this.state = {\n\t            conversation: null,\n\t            messages: [],\n\t            outgoingMessage: \"\",\n\t            enableSend: true\n\t        };\n\t        directLine_1.startConversation().subscribe(function (conversation) {\n\t            _this.setState({ conversation: conversation });\n\t            directLine_1.getMessages(conversation)\n\t                .filter(function (botmessage) { return botmessage.from === \"TestBot\"; })\n\t                .map(function (botmessage) { return ({ text: botmessage.text, from: \"bot\" }); })\n\t                .merge(outgoing$)\n\t                .scan(function (messages, message) { return messages.concat([message]); }, [])\n\t                .combineLatest(outgoingMessage$, function (messages, outgoingMessage) { return ({\n\t                messages: messages,\n\t                outgoingMessage: outgoingMessage\n\t            }); })\n\t                .subscribe(function (state) { return _this.setState(state); }, function (error) { return console.log(\"error getting messages\", error); }, function () { return console.log(\"done getting messages\"); });\n\t        }, function (error) { return console.log(\"error starting conversation\", error); }, function () { return console.log(\"done starting conversation\"); });\n\t    }\n\t    App.prototype.render = function () {\n\t        return React.createElement(\"div\", {id: \"appFrame\"}, React.createElement(Outgoing_tsx_1.Outgoing, {sendMessage: this.sendMessage, updateMessage: this.updateMessage, enableSend: this.state.enableSend, outgoingMessage: this.state.outgoingMessage}), React.createElement(History_tsx_1.History, {messages: this.state.messages}));\n\t    };\n\t    return App;\n\t}(React.Component));\n\tReactDOM.render(React.createElement(App, null), document.getElementById(\"app\"));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = React;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = ReactDOM;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(5);\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/* tslint:disable:no-unused-variable */\n\t// Subject imported before Observable to bypass circular dependency issue since\n\t// Subject extends Observable and Observable references Subject in it's\n\t// definition\n\tvar Subject_1 = __webpack_require__(6);\n\texports.Subject = Subject_1.Subject;\n\t/* tslint:enable:no-unused-variable */\n\tvar Observable_1 = __webpack_require__(7);\n\texports.Observable = Observable_1.Observable;\n\t// statics\n\t/* tslint:disable:no-use-before-declare */\n\t__webpack_require__(26);\n\t__webpack_require__(30);\n\t__webpack_require__(33);\n\t__webpack_require__(45);\n\t__webpack_require__(49);\n\t__webpack_require__(52);\n\t__webpack_require__(54);\n\t__webpack_require__(57);\n\t__webpack_require__(65);\n\t__webpack_require__(68);\n\t__webpack_require__(71);\n\t__webpack_require__(73);\n\t__webpack_require__(75);\n\t__webpack_require__(78);\n\t__webpack_require__(87);\n\t__webpack_require__(90);\n\t__webpack_require__(92);\n\t__webpack_require__(96);\n\t__webpack_require__(98);\n\t__webpack_require__(100);\n\t__webpack_require__(103);\n\t__webpack_require__(106);\n\t__webpack_require__(109);\n\t__webpack_require__(113);\n\t//dom\n\t__webpack_require__(116);\n\t__webpack_require__(119);\n\t//operators\n\t__webpack_require__(125);\n\t__webpack_require__(127);\n\t__webpack_require__(129);\n\t__webpack_require__(131);\n\t__webpack_require__(133);\n\t__webpack_require__(135);\n\t__webpack_require__(137);\n\t__webpack_require__(139);\n\t__webpack_require__(141);\n\t__webpack_require__(142);\n\t__webpack_require__(143);\n\t__webpack_require__(145);\n\t__webpack_require__(148);\n\t__webpack_require__(151);\n\t__webpack_require__(153);\n\t__webpack_require__(155);\n\t__webpack_require__(157);\n\t__webpack_require__(159);\n\t__webpack_require__(161);\n\t__webpack_require__(163);\n\t__webpack_require__(165);\n\t__webpack_require__(167);\n\t__webpack_require__(169);\n\t__webpack_require__(171);\n\t__webpack_require__(173);\n\t__webpack_require__(175);\n\t__webpack_require__(177);\n\t__webpack_require__(179);\n\t__webpack_require__(181);\n\t__webpack_require__(184);\n\t__webpack_require__(186);\n\t__webpack_require__(188);\n\t__webpack_require__(190);\n\t__webpack_require__(192);\n\t__webpack_require__(195);\n\t__webpack_require__(200);\n\t__webpack_require__(202);\n\t__webpack_require__(204);\n\t__webpack_require__(206);\n\t__webpack_require__(208);\n\t__webpack_require__(210);\n\t__webpack_require__(212);\n\t__webpack_require__(214);\n\t__webpack_require__(216);\n\t__webpack_require__(218);\n\t__webpack_require__(220);\n\t__webpack_require__(223);\n\t__webpack_require__(224);\n\t__webpack_require__(225);\n\t__webpack_require__(226);\n\t__webpack_require__(227);\n\t__webpack_require__(229);\n\t__webpack_require__(231);\n\t__webpack_require__(235);\n\t__webpack_require__(236);\n\t__webpack_require__(237);\n\t__webpack_require__(239);\n\t__webpack_require__(242);\n\t__webpack_require__(244);\n\t__webpack_require__(246);\n\t__webpack_require__(250);\n\t__webpack_require__(252);\n\t__webpack_require__(254);\n\t__webpack_require__(255);\n\t__webpack_require__(256);\n\t__webpack_require__(258);\n\t__webpack_require__(260);\n\t__webpack_require__(262);\n\t__webpack_require__(264);\n\t__webpack_require__(266);\n\t__webpack_require__(268);\n\t__webpack_require__(270);\n\t__webpack_require__(272);\n\t__webpack_require__(274);\n\t__webpack_require__(276);\n\t__webpack_require__(278);\n\t__webpack_require__(280);\n\t__webpack_require__(289);\n\t__webpack_require__(291);\n\t__webpack_require__(293);\n\t__webpack_require__(295);\n\t__webpack_require__(297);\n\t__webpack_require__(299);\n\t__webpack_require__(301);\n\t__webpack_require__(303);\n\t__webpack_require__(305);\n\t__webpack_require__(307);\n\t__webpack_require__(309);\n\t__webpack_require__(311);\n\t__webpack_require__(313);\n\t__webpack_require__(315);\n\t__webpack_require__(317);\n\t__webpack_require__(319);\n\t__webpack_require__(321);\n\t__webpack_require__(323);\n\t__webpack_require__(325);\n\t__webpack_require__(327);\n\t__webpack_require__(329);\n\t__webpack_require__(331);\n\t__webpack_require__(332);\n\t/* tslint:disable:no-unused-variable */\n\tvar Operator_1 = __webpack_require__(334);\n\texports.Operator = Operator_1.Operator;\n\tvar Subscription_1 = __webpack_require__(13);\n\texports.Subscription = Subscription_1.Subscription;\n\tvar Subscriber_1 = __webpack_require__(11);\n\texports.Subscriber = Subscriber_1.Subscriber;\n\tvar AsyncSubject_1 = __webpack_require__(29);\n\texports.AsyncSubject = AsyncSubject_1.AsyncSubject;\n\tvar ReplaySubject_1 = __webpack_require__(122);\n\texports.ReplaySubject = ReplaySubject_1.ReplaySubject;\n\tvar BehaviorSubject_1 = __webpack_require__(248);\n\texports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;\n\tvar MulticastObservable_1 = __webpack_require__(233);\n\texports.MulticastObservable = MulticastObservable_1.MulticastObservable;\n\tvar ConnectableObservable_1 = __webpack_require__(234);\n\texports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;\n\tvar Notification_1 = __webpack_require__(64);\n\texports.Notification = Notification_1.Notification;\n\tvar EmptyError_1 = __webpack_require__(194);\n\texports.EmptyError = EmptyError_1.EmptyError;\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(183);\n\texports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(24);\n\texports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;\n\tvar UnsubscriptionError_1 = __webpack_require__(18);\n\texports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;\n\tvar timeInterval_1 = __webpack_require__(308);\n\texports.TimeInterval = timeInterval_1.TimeInterval;\n\tvar timestamp_1 = __webpack_require__(314);\n\texports.Timestamp = timestamp_1.Timestamp;\n\tvar TestScheduler_1 = __webpack_require__(335);\n\texports.TestScheduler = TestScheduler_1.TestScheduler;\n\tvar VirtualTimeScheduler_1 = __webpack_require__(336);\n\texports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;\n\tvar AjaxObservable_1 = __webpack_require__(118);\n\texports.AjaxResponse = AjaxObservable_1.AjaxResponse;\n\texports.AjaxError = AjaxObservable_1.AjaxError;\n\texports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;\n\tvar asap_1 = __webpack_require__(283);\n\tvar async_1 = __webpack_require__(82);\n\tvar queue_1 = __webpack_require__(123);\n\tvar animationFrame_1 = __webpack_require__(342);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\tvar iterator_1 = __webpack_require__(43);\n\tvar symbol_observable_1 = __webpack_require__(21);\n\t/* tslint:enable:no-unused-variable */\n\t/**\n\t * @typedef {Object} Rx.Scheduler\n\t * @property {Scheduler} queue Schedules on a queue in the current event frame\n\t * (trampoline scheduler). Use this for iteration operations.\n\t * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n\t * fastest transport mechanism available, either Node.js' `process.nextTick()`\n\t * or Web Worker MessageChannel or setTimeout or others. Use this for\n\t * asynchronous conversions.\n\t * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n\t * time-based operations.\n\t */\n\tvar Scheduler = {\n\t    asap: asap_1.asap,\n\t    queue: queue_1.queue,\n\t    animationFrame: animationFrame_1.animationFrame,\n\t    async: async_1.async\n\t};\n\texports.Scheduler = Scheduler;\n\t/**\n\t * @typedef {Object} Rx.Symbol\n\t * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n\t * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n\t * an object that has all of the traits of an Rx Subscriber, including the\n\t * ability to add and remove subscriptions to the subscription chain and\n\t * guarantees involving event triggering (can't \"next\" after unsubscription,\n\t * etc).\n\t * @property {Symbol|string} observable A symbol to use as a property name to\n\t * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n\t * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n\t * to retrieve an iterator from an object.\n\t */\n\tvar Symbol = {\n\t    rxSubscriber: rxSubscriber_1.$$rxSubscriber,\n\t    observable: symbol_observable_1.default,\n\t    iterator: iterator_1.$$iterator\n\t};\n\texports.Symbol = Symbol;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(24);\n\tvar SubjectSubscription_1 = __webpack_require__(25);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\t/**\n\t * @class SubjectSubscriber<T>\n\t */\n\tvar SubjectSubscriber = (function (_super) {\n\t    __extends(SubjectSubscriber, _super);\n\t    function SubjectSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t    }\n\t    return SubjectSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.SubjectSubscriber = SubjectSubscriber;\n\t/**\n\t * @class Subject<T>\n\t */\n\tvar Subject = (function (_super) {\n\t    __extends(Subject, _super);\n\t    function Subject() {\n\t        _super.call(this);\n\t        this.observers = [];\n\t        this.isUnsubscribed = false;\n\t        this.isStopped = false;\n\t        this.hasError = false;\n\t        this.thrownError = null;\n\t    }\n\t    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {\n\t        return new SubjectSubscriber(this);\n\t    };\n\t    Subject.prototype.lift = function (operator) {\n\t        var subject = new AnonymousSubject(this, this);\n\t        subject.operator = operator;\n\t        return subject;\n\t    };\n\t    Subject.prototype.next = function (value) {\n\t        if (this.isUnsubscribed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        if (!this.isStopped) {\n\t            var observers = this.observers;\n\t            var len = observers.length;\n\t            var copy = observers.slice();\n\t            for (var i = 0; i < len; i++) {\n\t                copy[i].next(value);\n\t            }\n\t        }\n\t    };\n\t    Subject.prototype.error = function (err) {\n\t        if (this.isUnsubscribed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.hasError = true;\n\t        this.thrownError = err;\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].error(err);\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.complete = function () {\n\t        if (this.isUnsubscribed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].complete();\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.unsubscribe = function () {\n\t        this.isStopped = true;\n\t        this.isUnsubscribed = true;\n\t        this.observers = null;\n\t    };\n\t    Subject.prototype._subscribe = function (subscriber) {\n\t        if (this.isUnsubscribed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else if (this.hasError) {\n\t            subscriber.error(this.thrownError);\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else if (this.isStopped) {\n\t            subscriber.complete();\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else {\n\t            this.observers.push(subscriber);\n\t            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n\t        }\n\t    };\n\t    Subject.prototype.asObservable = function () {\n\t        var observable = new Observable_1.Observable();\n\t        observable.source = this;\n\t        return observable;\n\t    };\n\t    Subject.create = function (destination, source) {\n\t        return new AnonymousSubject(destination, source);\n\t    };\n\t    return Subject;\n\t}(Observable_1.Observable));\n\texports.Subject = Subject;\n\t/**\n\t * @class AnonymousSubject<T>\n\t */\n\tvar AnonymousSubject = (function (_super) {\n\t    __extends(AnonymousSubject, _super);\n\t    function AnonymousSubject(destination, source) {\n\t        _super.call(this);\n\t        this.destination = destination;\n\t        this.source = source;\n\t    }\n\t    AnonymousSubject.prototype.next = function (value) {\n\t        var destination = this.destination;\n\t        if (destination && destination.next) {\n\t            destination.next(value);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.error = function (err) {\n\t        var destination = this.destination;\n\t        if (destination && destination.error) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.complete = function () {\n\t        var destination = this.destination;\n\t        if (destination && destination.complete) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    AnonymousSubject.prototype._subscribe = function (subscriber) {\n\t        var source = this.source;\n\t        if (source) {\n\t            return this.source.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t    };\n\t    return AnonymousSubject;\n\t}(Subject));\n\texports.AnonymousSubject = AnonymousSubject;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar toSubscriber_1 = __webpack_require__(10);\n\tvar symbol_observable_1 = __webpack_require__(21);\n\t/**\n\t * A representation of any set of values over any amount of time. This the most basic building block\n\t * of RxJS.\n\t *\n\t * @class Observable<T>\n\t */\n\tvar Observable = (function () {\n\t    /**\n\t     * @constructor\n\t     * @param {Function} subscribe the function that is  called when the Observable is\n\t     * initially subscribed to. This function is given a Subscriber, to which new values\n\t     * can be `next`ed, or an `error` method can be called to raise an error, or\n\t     * `complete` can be called to notify of a successful completion.\n\t     */\n\t    function Observable(subscribe) {\n\t        this._isScalar = false;\n\t        if (subscribe) {\n\t            this._subscribe = subscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Creates a new Observable, with this Observable as the source, and the passed\n\t     * operator defined as the new observable's operator.\n\t     * @method lift\n\t     * @param {Operator} operator the operator defining the operation to take on the observable\n\t     * @return {Observable} a new observable with the Operator applied\n\t     */\n\t    Observable.prototype.lift = function (operator) {\n\t        var observable = new Observable();\n\t        observable.source = this;\n\t        observable.operator = operator;\n\t        return observable;\n\t    };\n\t    /**\n\t     * Registers handlers for handling emitted values, error and completions from the observable, and\n\t     *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n\t     * @method subscribe\n\t     * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n\t     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n\t     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n\t     *  the error will be thrown as unhandled\n\t     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n\t     * @return {ISubscription} a subscription reference to the registered handlers\n\t     */\n\t    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n\t        var operator = this.operator;\n\t        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n\t        if (operator) {\n\t            operator.call(sink, this);\n\t        }\n\t        else {\n\t            sink.add(this._subscribe(sink));\n\t        }\n\t        if (sink.syncErrorThrowable) {\n\t            sink.syncErrorThrowable = false;\n\t            if (sink.syncErrorThrown) {\n\t                throw sink.syncErrorValue;\n\t            }\n\t        }\n\t        return sink;\n\t    };\n\t    /**\n\t     * @method forEach\n\t     * @param {Function} next a handler for each value emitted by the observable\n\t     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n\t     * @return {Promise} a promise that either resolves on observable completion or\n\t     *  rejects with the handled error\n\t     */\n\t    Observable.prototype.forEach = function (next, PromiseCtor) {\n\t        var _this = this;\n\t        if (!PromiseCtor) {\n\t            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t                PromiseCtor = root_1.root.Rx.config.Promise;\n\t            }\n\t            else if (root_1.root.Promise) {\n\t                PromiseCtor = root_1.root.Promise;\n\t            }\n\t        }\n\t        if (!PromiseCtor) {\n\t            throw new Error('no Promise impl found');\n\t        }\n\t        return new PromiseCtor(function (resolve, reject) {\n\t            var subscription = _this.subscribe(function (value) {\n\t                if (subscription) {\n\t                    // if there is a subscription, then we can surmise\n\t                    // the next handling is asynchronous. Any errors thrown\n\t                    // need to be rejected explicitly and unsubscribe must be\n\t                    // called manually\n\t                    try {\n\t                        next(value);\n\t                    }\n\t                    catch (err) {\n\t                        reject(err);\n\t                        subscription.unsubscribe();\n\t                    }\n\t                }\n\t                else {\n\t                    // if there is NO subscription, then we're getting a nexted\n\t                    // value synchronously during subscription. We can just call it.\n\t                    // If it errors, Observable's `subscribe` imple will ensure the\n\t                    // unsubscription logic is called, then synchronously rethrow the error.\n\t                    // After that, Promise will trap the error and send it\n\t                    // down the rejection path.\n\t                    next(value);\n\t                }\n\t            }, reject, resolve);\n\t        });\n\t    };\n\t    Observable.prototype._subscribe = function (subscriber) {\n\t        return this.source.subscribe(subscriber);\n\t    };\n\t    /**\n\t     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n\t     * @method Symbol.observable\n\t     * @return {Observable} this instance of the observable\n\t     */\n\t    Observable.prototype[symbol_observable_1.default] = function () {\n\t        return this;\n\t    };\n\t    // HACK: Since TypeScript inherits static properties too, we have to\n\t    // fight against TypeScript here so Subject can have a different static create signature\n\t    /**\n\t     * Creates a new cold Observable by calling the Observable constructor\n\t     * @static true\n\t     * @owner Observable\n\t     * @method create\n\t     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n\t     * @return {Observable} a new cold observable\n\t     */\n\t    Observable.create = function (subscribe) {\n\t        return new Observable(subscribe);\n\t    };\n\t    return Observable;\n\t}());\n\texports.Observable = Observable;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module, global) {\"use strict\";\n\tvar objectTypes = {\n\t    'boolean': false,\n\t    'function': true,\n\t    'object': true,\n\t    'number': false,\n\t    'string': false,\n\t    'undefined': false\n\t};\n\texports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n\t/* tslint:disable:no-unused-variable */\n\tvar freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\tvar freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\tvar freeGlobal = objectTypes[typeof global] && global;\n\tif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n\t    exports.root = freeGlobal;\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)(module), (function() { return this; }())))\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\tfunction toSubscriber(nextOrObserver, error, complete) {\n\t    if (nextOrObserver) {\n\t        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n\t            return nextOrObserver;\n\t        }\n\t        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {\n\t            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();\n\t        }\n\t    }\n\t    if (!nextOrObserver && !error && !complete) {\n\t        return new Subscriber_1.Subscriber();\n\t    }\n\t    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n\t}\n\texports.toSubscriber = toSubscriber;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isFunction_1 = __webpack_require__(12);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar Observer_1 = __webpack_require__(19);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\t/**\n\t * Implements the {@link Observer} interface and extends the\n\t * {@link Subscription} class. While the {@link Observer} is the public API for\n\t * consuming the values of an {@link Observable}, all Observers get converted to\n\t * a Subscriber, in order to provide Subscription-like capabilities such as\n\t * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n\t * implementing operators, but it is rarely used as a public API.\n\t *\n\t * @class Subscriber<T>\n\t */\n\tvar Subscriber = (function (_super) {\n\t    __extends(Subscriber, _super);\n\t    /**\n\t     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n\t     * defined Observer or a `next` callback function.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     */\n\t    function Subscriber(destinationOrNext, error, complete) {\n\t        _super.call(this);\n\t        this.syncErrorValue = null;\n\t        this.syncErrorThrown = false;\n\t        this.syncErrorThrowable = false;\n\t        this.isStopped = false;\n\t        switch (arguments.length) {\n\t            case 0:\n\t                this.destination = Observer_1.empty;\n\t                break;\n\t            case 1:\n\t                if (!destinationOrNext) {\n\t                    this.destination = Observer_1.empty;\n\t                    break;\n\t                }\n\t                if (typeof destinationOrNext === 'object') {\n\t                    if (destinationOrNext instanceof Subscriber) {\n\t                        this.destination = destinationOrNext;\n\t                        this.destination.add(this);\n\t                    }\n\t                    else {\n\t                        this.syncErrorThrowable = true;\n\t                        this.destination = new SafeSubscriber(this, destinationOrNext);\n\t                    }\n\t                    break;\n\t                }\n\t            default:\n\t                this.syncErrorThrowable = true;\n\t                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n\t                break;\n\t        }\n\t    }\n\t    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };\n\t    /**\n\t     * A static factory for a Subscriber, given a (potentially partial) definition\n\t     * of an Observer.\n\t     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n\t     * Observer represented by the given arguments.\n\t     */\n\t    Subscriber.create = function (next, error, complete) {\n\t        var subscriber = new Subscriber(next, error, complete);\n\t        subscriber.syncErrorThrowable = false;\n\t        return subscriber;\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `next` from\n\t     * the Observable, with a value. The Observable may call this method 0 or more\n\t     * times.\n\t     * @param {T} [value] The `next` value.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.next = function (value) {\n\t        if (!this.isStopped) {\n\t            this._next(value);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `error` from\n\t     * the Observable, with an attached {@link Error}. Notifies the Observer that\n\t     * the Observable has experienced an error condition.\n\t     * @param {any} [err] The `error` exception.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._error(err);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive a valueless notification of type\n\t     * `complete` from the Observable. Notifies the Observer that the Observable\n\t     * has finished sending push-based notifications.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._complete();\n\t        }\n\t    };\n\t    Subscriber.prototype.unsubscribe = function () {\n\t        if (this.isUnsubscribed) {\n\t            return;\n\t        }\n\t        this.isStopped = true;\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    Subscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t    };\n\t    Subscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this.unsubscribe();\n\t    };\n\t    Subscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this.unsubscribe();\n\t    };\n\t    return Subscriber;\n\t}(Subscription_1.Subscription));\n\texports.Subscriber = Subscriber;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SafeSubscriber = (function (_super) {\n\t    __extends(SafeSubscriber, _super);\n\t    function SafeSubscriber(_parent, observerOrNext, error, complete) {\n\t        _super.call(this);\n\t        this._parent = _parent;\n\t        var next;\n\t        var context = this;\n\t        if (isFunction_1.isFunction(observerOrNext)) {\n\t            next = observerOrNext;\n\t        }\n\t        else if (observerOrNext) {\n\t            context = observerOrNext;\n\t            next = observerOrNext.next;\n\t            error = observerOrNext.error;\n\t            complete = observerOrNext.complete;\n\t            if (isFunction_1.isFunction(context.unsubscribe)) {\n\t                this.add(context.unsubscribe.bind(context));\n\t            }\n\t            context.unsubscribe = this.unsubscribe.bind(this);\n\t        }\n\t        this._context = context;\n\t        this._next = next;\n\t        this._error = error;\n\t        this._complete = complete;\n\t    }\n\t    SafeSubscriber.prototype.next = function (value) {\n\t        if (!this.isStopped && this._next) {\n\t            var _parent = this._parent;\n\t            if (!_parent.syncErrorThrowable) {\n\t                this.__tryOrUnsub(this._next, value);\n\t            }\n\t            else if (this.__tryOrSetError(_parent, this._next, value)) {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var _parent = this._parent;\n\t            if (this._error) {\n\t                if (!_parent.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parent, this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else if (!_parent.syncErrorThrowable) {\n\t                this.unsubscribe();\n\t                throw err;\n\t            }\n\t            else {\n\t                _parent.syncErrorValue = err;\n\t                _parent.syncErrorThrown = true;\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            var _parent = this._parent;\n\t            if (this._complete) {\n\t                if (!_parent.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(this._complete);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parent, this._complete);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            this.unsubscribe();\n\t            throw err;\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            parent.syncErrorValue = err;\n\t            parent.syncErrorThrown = true;\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    SafeSubscriber.prototype._unsubscribe = function () {\n\t        var _parent = this._parent;\n\t        this._context = null;\n\t        this._parent = null;\n\t        _parent.unsubscribe();\n\t    };\n\t    return SafeSubscriber;\n\t}(Subscriber));\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isFunction(x) {\n\t    return typeof x === 'function';\n\t}\n\texports.isFunction = isFunction;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isArray_1 = __webpack_require__(14);\n\tvar isObject_1 = __webpack_require__(15);\n\tvar isFunction_1 = __webpack_require__(12);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar UnsubscriptionError_1 = __webpack_require__(18);\n\t/**\n\t * Represents a disposable resource, such as the execution of an Observable. A\n\t * Subscription has one important method, `unsubscribe`, that takes no argument\n\t * and just disposes the resource held by the subscription.\n\t *\n\t * Additionally, subscriptions may be grouped together through the `add()`\n\t * method, which will attach a child Subscription to the current Subscription.\n\t * When a Subscription is unsubscribed, all its children (and its grandchildren)\n\t * will be unsubscribed as well.\n\t *\n\t * @class Subscription\n\t */\n\tvar Subscription = (function () {\n\t    /**\n\t     * @param {function(): void} [unsubscribe] A function describing how to\n\t     * perform the disposal of resources when the `unsubscribe` method is called.\n\t     */\n\t    function Subscription(unsubscribe) {\n\t        /**\n\t         * A flag to indicate whether this Subscription has already been unsubscribed.\n\t         * @type {boolean}\n\t         */\n\t        this.isUnsubscribed = false;\n\t        if (unsubscribe) {\n\t            this._unsubscribe = unsubscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Disposes the resources held by the subscription. May, for instance, cancel\n\t     * an ongoing Observable execution or cancel any other type of work that\n\t     * started when the Subscription was created.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.unsubscribe = function () {\n\t        var hasErrors = false;\n\t        var errors;\n\t        if (this.isUnsubscribed) {\n\t            return;\n\t        }\n\t        this.isUnsubscribed = true;\n\t        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n\t        this._subscriptions = null;\n\t        if (isFunction_1.isFunction(_unsubscribe)) {\n\t            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n\t            if (trial === errorObject_1.errorObject) {\n\t                hasErrors = true;\n\t                (errors = errors || []).push(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        if (isArray_1.isArray(_subscriptions)) {\n\t            var index = -1;\n\t            var len = _subscriptions.length;\n\t            while (++index < len) {\n\t                var sub = _subscriptions[index];\n\t                if (isObject_1.isObject(sub)) {\n\t                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n\t                    if (trial === errorObject_1.errorObject) {\n\t                        hasErrors = true;\n\t                        errors = errors || [];\n\t                        var err = errorObject_1.errorObject.e;\n\t                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n\t                            errors = errors.concat(err.errors);\n\t                        }\n\t                        else {\n\t                            errors.push(err);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (hasErrors) {\n\t            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n\t        }\n\t    };\n\t    /**\n\t     * Adds a tear down to be called during the unsubscribe() of this\n\t     * Subscription.\n\t     *\n\t     * If the tear down being added is a subscription that is already\n\t     * unsubscribed, is the same reference `add` is being called on, or is\n\t     * `Subscription.EMPTY`, it will not be added.\n\t     *\n\t     * If this subscription is already in an `isUnsubscribed` state, the passed\n\t     * tear down logic will be executed immediately.\n\t     *\n\t     * @param {TeardownLogic} teardown The additional logic to execute on\n\t     * teardown.\n\t     * @return {Subscription} Returns the Subscription used or created to be\n\t     * added to the inner subscriptions list. This Subscription can be used with\n\t     * `remove()` to remove the passed teardown logic from the inner subscriptions\n\t     * list.\n\t     */\n\t    Subscription.prototype.add = function (teardown) {\n\t        if (!teardown || (teardown === this) || (teardown === Subscription.EMPTY)) {\n\t            return;\n\t        }\n\t        var sub = teardown;\n\t        switch (typeof teardown) {\n\t            case 'function':\n\t                sub = new Subscription(teardown);\n\t            case 'object':\n\t                if (sub.isUnsubscribed || typeof sub.unsubscribe !== 'function') {\n\t                    break;\n\t                }\n\t                else if (this.isUnsubscribed) {\n\t                    sub.unsubscribe();\n\t                }\n\t                else {\n\t                    (this._subscriptions || (this._subscriptions = [])).push(sub);\n\t                }\n\t                break;\n\t            default:\n\t                throw new Error('Unrecognized teardown ' + teardown + ' added to Subscription.');\n\t        }\n\t        return sub;\n\t    };\n\t    /**\n\t     * Removes a Subscription from the internal list of subscriptions that will\n\t     * unsubscribe during the unsubscribe process of this Subscription.\n\t     * @param {Subscription} subscription The subscription to remove.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.remove = function (subscription) {\n\t        // HACK: This might be redundant because of the logic in `add()`\n\t        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {\n\t            return;\n\t        }\n\t        var subscriptions = this._subscriptions;\n\t        if (subscriptions) {\n\t            var subscriptionIndex = subscriptions.indexOf(subscription);\n\t            if (subscriptionIndex !== -1) {\n\t                subscriptions.splice(subscriptionIndex, 1);\n\t            }\n\t        }\n\t    };\n\t    Subscription.EMPTY = (function (empty) {\n\t        empty.isUnsubscribed = true;\n\t        return empty;\n\t    }(new Subscription()));\n\t    return Subscription;\n\t}());\n\texports.Subscription = Subscription;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isObject(x) {\n\t    return x != null && typeof x === 'object';\n\t}\n\texports.isObject = isObject;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar tryCatchTarget;\n\tfunction tryCatcher() {\n\t    try {\n\t        return tryCatchTarget.apply(this, arguments);\n\t    }\n\t    catch (e) {\n\t        errorObject_1.errorObject.e = e;\n\t        return errorObject_1.errorObject;\n\t    }\n\t}\n\tfunction tryCatch(fn) {\n\t    tryCatchTarget = fn;\n\t    return tryCatcher;\n\t}\n\texports.tryCatch = tryCatch;\n\t;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// typeof any so that it we don't have to cast when comparing a result to the error object\n\texports.errorObject = { e: {} };\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when one or more errors have occurred during the\n\t * `unsubscribe` of a {@link Subscription}.\n\t */\n\tvar UnsubscriptionError = (function (_super) {\n\t    __extends(UnsubscriptionError, _super);\n\t    function UnsubscriptionError(errors) {\n\t        _super.call(this);\n\t        this.errors = errors;\n\t        var err = Error.call(this, errors ?\n\t            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n\t        this.name = err.name = 'UnsubscriptionError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return UnsubscriptionError;\n\t}(Error));\n\texports.UnsubscriptionError = UnsubscriptionError;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.empty = {\n\t    isUnsubscribed: true,\n\t    next: function (value) { },\n\t    error: function (err) { throw err; },\n\t    complete: function () { }\n\t};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar Symbol = root_1.root.Symbol;\n\texports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n\t    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(22);\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _ponyfill = __webpack_require__(23);\n\t\n\tvar _ponyfill2 = _interopRequireDefault(_ponyfill);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar root = undefined; /* global window */\n\t\n\tif (typeof global !== 'undefined') {\n\t\troot = global;\n\t} else if (typeof window !== 'undefined') {\n\t\troot = window;\n\t}\n\t\n\tvar result = (0, _ponyfill2.default)(root);\n\texports.default = result;\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\texports.default = symbolObservablePonyfill;\n\tfunction symbolObservablePonyfill(root) {\n\t\tvar result;\n\t\tvar _Symbol = root.Symbol;\n\t\n\t\tif (typeof _Symbol === 'function') {\n\t\t\tif (_Symbol.observable) {\n\t\t\t\tresult = _Symbol.observable;\n\t\t\t} else {\n\t\t\t\tresult = _Symbol('observable');\n\t\t\t\t_Symbol.observable = result;\n\t\t\t}\n\t\t} else {\n\t\t\tresult = '@@observable';\n\t\t}\n\t\n\t\treturn result;\n\t};\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an action is invalid because the object has been\n\t * unsubscribed.\n\t *\n\t * @see {@link Subject}\n\t * @see {@link BehaviorSubject}\n\t *\n\t * @class ObjectUnsubscribedError\n\t */\n\tvar ObjectUnsubscribedError = (function (_super) {\n\t    __extends(ObjectUnsubscribedError, _super);\n\t    function ObjectUnsubscribedError() {\n\t        var err = _super.call(this, 'object unsubscribed');\n\t        this.name = err.name = 'ObjectUnsubscribedError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return ObjectUnsubscribedError;\n\t}(Error));\n\texports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubjectSubscription = (function (_super) {\n\t    __extends(SubjectSubscription, _super);\n\t    function SubjectSubscription(subject, subscriber) {\n\t        _super.call(this);\n\t        this.subject = subject;\n\t        this.subscriber = subscriber;\n\t        this.isUnsubscribed = false;\n\t    }\n\t    SubjectSubscription.prototype.unsubscribe = function () {\n\t        if (this.isUnsubscribed) {\n\t            return;\n\t        }\n\t        this.isUnsubscribed = true;\n\t        var subject = this.subject;\n\t        var observers = subject.observers;\n\t        this.subject = null;\n\t        if (!observers || observers.length === 0 || subject.isStopped || subject.isUnsubscribed) {\n\t            return;\n\t        }\n\t        var subscriberIndex = observers.indexOf(this.subscriber);\n\t        if (subscriberIndex !== -1) {\n\t            observers.splice(subscriberIndex, 1);\n\t        }\n\t    };\n\t    return SubjectSubscription;\n\t}(Subscription_1.Subscription));\n\texports.SubjectSubscription = SubjectSubscription;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bindCallback_1 = __webpack_require__(27);\n\tObservable_1.Observable.bindCallback = bindCallback_1.bindCallback;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar BoundCallbackObservable_1 = __webpack_require__(28);\n\texports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar AsyncSubject_1 = __webpack_require__(29);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar BoundCallbackObservable = (function (_super) {\n\t    __extends(BoundCallbackObservable, _super);\n\t    function BoundCallbackObservable(callbackFunc, selector, args, scheduler) {\n\t        _super.call(this);\n\t        this.callbackFunc = callbackFunc;\n\t        this.selector = selector;\n\t        this.args = args;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /* tslint:enable:max-line-length */\n\t    /**\n\t     * Converts a callback API to a function that returns an Observable.\n\t     *\n\t     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n\t     * it will return a function `g` that when called as `g(x)` will output an\n\t     * Observable.</span>\n\t     *\n\t     * `bindCallback` is not an operator because its input and output are not\n\t     * Observables. The input is a function `func` with some parameters, but the\n\t     * last parameter must be a callback function that `func` calls when it is\n\t     * done. The output of `bindCallback` is a function that takes the same\n\t     * parameters as `func`, except the last one (the callback). When the output\n\t     * function is called with arguments, it will return an Observable where the\n\t     * results will be delivered to.\n\t     *\n\t     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n\t     * // Suppose we have jQuery.getJSON('/my/url', callback)\n\t     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n\t     * var result = getJSONAsObservable('/my/url');\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link bindNodeCallback}\n\t     * @see {@link from}\n\t     * @see {@link fromPromise}\n\t     *\n\t     * @param {function} func Function with a callback as the last parameter.\n\t     * @param {function} selector A function which takes the arguments from the\n\t     * callback and maps those a value to emit on the output Observable.\n\t     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n\t     * callbacks.\n\t     * @return {function(...params: *): Observable} A function which returns the\n\t     * Observable that delivers the same values the callback would deliver.\n\t     * @static true\n\t     * @name bindCallback\n\t     * @owner Observable\n\t     */\n\t    BoundCallbackObservable.create = function (func, selector, scheduler) {\n\t        if (selector === void 0) { selector = undefined; }\n\t        return function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            return new BoundCallbackObservable(func, selector, args, scheduler);\n\t        };\n\t    };\n\t    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n\t        var callbackFunc = this.callbackFunc;\n\t        var args = this.args;\n\t        var scheduler = this.scheduler;\n\t        var subject = this.subject;\n\t        if (!scheduler) {\n\t            if (!subject) {\n\t                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n\t                var handler = function handlerFn() {\n\t                    var innerArgs = [];\n\t                    for (var _i = 0; _i < arguments.length; _i++) {\n\t                        innerArgs[_i - 0] = arguments[_i];\n\t                    }\n\t                    var source = handlerFn.source;\n\t                    var selector = source.selector, subject = source.subject;\n\t                    if (selector) {\n\t                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                        if (result_1 === errorObject_1.errorObject) {\n\t                            subject.error(errorObject_1.errorObject.e);\n\t                        }\n\t                        else {\n\t                            subject.next(result_1);\n\t                            subject.complete();\n\t                        }\n\t                    }\n\t                    else {\n\t                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n\t                        subject.complete();\n\t                    }\n\t                };\n\t                // use named function instance to avoid closure.\n\t                handler.source = this;\n\t                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t                if (result === errorObject_1.errorObject) {\n\t                    subject.error(errorObject_1.errorObject.e);\n\t                }\n\t            }\n\t            return subject.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber });\n\t        }\n\t    };\n\t    BoundCallbackObservable.dispatch = function (state) {\n\t        var self = this;\n\t        var source = state.source, subscriber = state.subscriber;\n\t        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n\t        var subject = source.subject;\n\t        if (!subject) {\n\t            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n\t            var handler = function handlerFn() {\n\t                var innerArgs = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    innerArgs[_i - 0] = arguments[_i];\n\t                }\n\t                var source = handlerFn.source;\n\t                var selector = source.selector, subject = source.subject;\n\t                if (selector) {\n\t                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                    if (result_2 === errorObject_1.errorObject) {\n\t                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n\t                    }\n\t                    else {\n\t                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n\t                    }\n\t                }\n\t                else {\n\t                    var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n\t                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n\t                }\n\t            };\n\t            // use named function to pass values in without closure\n\t            handler.source = source;\n\t            var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t            if (result === errorObject_1.errorObject) {\n\t                subject.error(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        self.add(subject.subscribe(subscriber));\n\t    };\n\t    return BoundCallbackObservable;\n\t}(Observable_1.Observable));\n\texports.BoundCallbackObservable = BoundCallbackObservable;\n\tfunction dispatchNext(arg) {\n\t    var value = arg.value, subject = arg.subject;\n\t    subject.next(value);\n\t    subject.complete();\n\t}\n\tfunction dispatchError(arg) {\n\t    var err = arg.err, subject = arg.subject;\n\t    subject.error(err);\n\t}\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * @class AsyncSubject<T>\n\t */\n\tvar AsyncSubject = (function (_super) {\n\t    __extends(AsyncSubject, _super);\n\t    function AsyncSubject() {\n\t        _super.apply(this, arguments);\n\t        this.value = null;\n\t        this.hasNext = false;\n\t        this.hasCompleted = false;\n\t    }\n\t    AsyncSubject.prototype._subscribe = function (subscriber) {\n\t        if (this.hasCompleted && this.hasNext) {\n\t            subscriber.next(this.value);\n\t            subscriber.complete();\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else if (this.hasError) {\n\t            subscriber.error(this.thrownError);\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        return _super.prototype._subscribe.call(this, subscriber);\n\t    };\n\t    AsyncSubject.prototype.next = function (value) {\n\t        this.value = value;\n\t        this.hasNext = true;\n\t    };\n\t    AsyncSubject.prototype.complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.hasNext) {\n\t            _super.prototype.next.call(this, this.value);\n\t        }\n\t        _super.prototype.complete.call(this);\n\t    };\n\t    return AsyncSubject;\n\t}(Subject_1.Subject));\n\texports.AsyncSubject = AsyncSubject;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bindNodeCallback_1 = __webpack_require__(31);\n\tObservable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar BoundNodeCallbackObservable_1 = __webpack_require__(32);\n\texports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar AsyncSubject_1 = __webpack_require__(29);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar BoundNodeCallbackObservable = (function (_super) {\n\t    __extends(BoundNodeCallbackObservable, _super);\n\t    function BoundNodeCallbackObservable(callbackFunc, selector, args, scheduler) {\n\t        _super.call(this);\n\t        this.callbackFunc = callbackFunc;\n\t        this.selector = selector;\n\t        this.args = args;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /* tslint:enable:max-line-length */\n\t    /**\n\t     * Converts a Node.js-style callback API to a function that returns an\n\t     * Observable.\n\t     *\n\t     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n\t     * callback is expected to be of type `callback(error, result)`.</span>\n\t     *\n\t     * `bindNodeCallback` is not an operator because its input and output are not\n\t     * Observables. The input is a function `func` with some parameters, but the\n\t     * last parameter must be a callback function that `func` calls when it is\n\t     * done. The callback function is expected to follow Node.js conventions,\n\t     * where the first argument to the callback is an error, while remaining\n\t     * arguments are the callback result. The output of `bindNodeCallback` is a\n\t     * function that takes the same parameters as `func`, except the last one (the\n\t     * callback). When the output function is called with arguments, it will\n\t     * return an Observable where the results will be delivered to.\n\t     *\n\t     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n\t     * import * as fs from 'fs';\n\t     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n\t     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link bindCallback}\n\t     * @see {@link from}\n\t     * @see {@link fromPromise}\n\t     *\n\t     * @param {function} func Function with a callback as the last parameter.\n\t     * @param {function} selector A function which takes the arguments from the\n\t     * callback and maps those a value to emit on the output Observable.\n\t     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n\t     * callbacks.\n\t     * @return {function(...params: *): Observable} A function which returns the\n\t     * Observable that delivers the same values the Node.js callback would\n\t     * deliver.\n\t     * @static true\n\t     * @name bindNodeCallback\n\t     * @owner Observable\n\t     */\n\t    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n\t        if (selector === void 0) { selector = undefined; }\n\t        return function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            return new BoundNodeCallbackObservable(func, selector, args, scheduler);\n\t        };\n\t    };\n\t    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n\t        var callbackFunc = this.callbackFunc;\n\t        var args = this.args;\n\t        var scheduler = this.scheduler;\n\t        var subject = this.subject;\n\t        if (!scheduler) {\n\t            if (!subject) {\n\t                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n\t                var handler = function handlerFn() {\n\t                    var innerArgs = [];\n\t                    for (var _i = 0; _i < arguments.length; _i++) {\n\t                        innerArgs[_i - 0] = arguments[_i];\n\t                    }\n\t                    var source = handlerFn.source;\n\t                    var selector = source.selector, subject = source.subject;\n\t                    var err = innerArgs.shift();\n\t                    if (err) {\n\t                        subject.error(err);\n\t                    }\n\t                    else if (selector) {\n\t                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                        if (result_1 === errorObject_1.errorObject) {\n\t                            subject.error(errorObject_1.errorObject.e);\n\t                        }\n\t                        else {\n\t                            subject.next(result_1);\n\t                            subject.complete();\n\t                        }\n\t                    }\n\t                    else {\n\t                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n\t                        subject.complete();\n\t                    }\n\t                };\n\t                // use named function instance to avoid closure.\n\t                handler.source = this;\n\t                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t                if (result === errorObject_1.errorObject) {\n\t                    subject.error(errorObject_1.errorObject.e);\n\t                }\n\t            }\n\t            return subject.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber });\n\t        }\n\t    };\n\t    return BoundNodeCallbackObservable;\n\t}(Observable_1.Observable));\n\texports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\n\tfunction dispatch(state) {\n\t    var self = this;\n\t    var source = state.source, subscriber = state.subscriber;\n\t    var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n\t    var subject = source.subject;\n\t    if (!subject) {\n\t        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n\t        var handler = function handlerFn() {\n\t            var innerArgs = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                innerArgs[_i - 0] = arguments[_i];\n\t            }\n\t            var source = handlerFn.source;\n\t            var selector = source.selector, subject = source.subject;\n\t            var err = innerArgs.shift();\n\t            if (err) {\n\t                subject.error(err);\n\t            }\n\t            else if (selector) {\n\t                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                if (result_2 === errorObject_1.errorObject) {\n\t                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n\t                }\n\t                else {\n\t                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n\t                }\n\t            }\n\t            else {\n\t                var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n\t                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n\t            }\n\t        };\n\t        // use named function to pass values in without closure\n\t        handler.source = source;\n\t        var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t        if (result === errorObject_1.errorObject) {\n\t            subject.error(errorObject_1.errorObject.e);\n\t        }\n\t    }\n\t    self.add(subject.subscribe(subscriber));\n\t}\n\tfunction dispatchNext(arg) {\n\t    var value = arg.value, subject = arg.subject;\n\t    subject.next(value);\n\t    subject.complete();\n\t}\n\tfunction dispatchError(arg) {\n\t    var err = arg.err, subject = arg.subject;\n\t    subject.error(err);\n\t}\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar combineLatest_1 = __webpack_require__(34);\n\tObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isScheduler_1 = __webpack_require__(35);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar combineLatest_1 = __webpack_require__(39);\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Combines multiple Observables to create an Observable whose values are\n\t * calculated from the latest values of each of its input Observables.\n\t *\n\t * <span class=\"informal\">Whenever any input Observable emits a value, it\n\t * computes a formula using the latest values from all the inputs, then emits\n\t * the output of that formula.</span>\n\t *\n\t * <img src=\"./img/combineLatest.png\" width=\"100%\">\n\t *\n\t * `combineLatest` combines the values from all the Observables passed as\n\t * arguments. This is done by subscribing to each Observable, in order, and\n\t * collecting an array of each of the most recent values any time any of the\n\t * input Observables emits, then either taking that array and passing it as\n\t * arguments to an optional `project` function and emitting the return value of\n\t * that, or just emitting the array of recent values directly if there is no\n\t * `project` function.\n\t *\n\t * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n\t * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n\t * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n\t * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n\t * bmi.subscribe(x => console.log('BMI is ' + x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link merge}\n\t * @see {@link withLatestFrom}\n\t *\n\t * @param {Observable} observable1 An input Observable to combine with the\n\t * source Observable.\n\t * @param {Observable} observable2 An input Observable to combine with the\n\t * source Observable. More than one input Observables may be given as argument.\n\t * @param {function} [project] An optional function to project the values from\n\t * the combined latest values into a new value on the output Observable.\n\t * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n\t * each input Observable.\n\t * @return {Observable} An Observable of projected values from the most recent\n\t * values from each input Observable, or an array of the most recent values from\n\t * each input Observable.\n\t * @static true\n\t * @name combineLatest\n\t * @owner Observable\n\t */\n\tfunction combineLatest() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var project = null;\n\t    var scheduler = null;\n\t    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n\t        scheduler = observables.pop();\n\t    }\n\t    if (typeof observables[observables.length - 1] === 'function') {\n\t        project = observables.pop();\n\t    }\n\t    // if the first and only other argument besides the resultSelector is an array\n\t    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n\t    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n\t        observables = observables[0];\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n\t}\n\texports.combineLatest = combineLatest;\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isScheduler(value) {\n\t    return value && typeof value.schedule === 'function';\n\t}\n\texports.isScheduler = isScheduler;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ScalarObservable_1 = __webpack_require__(37);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\tvar isScheduler_1 = __webpack_require__(35);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ArrayObservable = (function (_super) {\n\t    __extends(ArrayObservable, _super);\n\t    function ArrayObservable(array, scheduler) {\n\t        _super.call(this);\n\t        this.array = array;\n\t        this.scheduler = scheduler;\n\t        if (!scheduler && array.length === 1) {\n\t            this._isScalar = true;\n\t            this.value = array[0];\n\t        }\n\t    }\n\t    ArrayObservable.create = function (array, scheduler) {\n\t        return new ArrayObservable(array, scheduler);\n\t    };\n\t    /**\n\t     * Creates an Observable that emits some values you specify as arguments,\n\t     * immediately one after the other, and then emits a complete notification.\n\t     *\n\t     * <span class=\"informal\">Emits the arguments you provide, then completes.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/of.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that only\n\t     * emits the arguments given, and the complete notification thereafter. It can\n\t     * be used for composing with other Observables, such as with {@link concat}.\n\t     * By default, it uses a `null` Scheduler, which means the `next`\n\t     * notifications are sent synchronously, although with a different Scheduler\n\t     * it is possible to determine when those notifications will be delivered.\n\t     *\n\t     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n\t     * var numbers = Rx.Observable.of(10, 20, 30);\n\t     * var letters = Rx.Observable.of('a', 'b', 'c');\n\t     * var interval = Rx.Observable.interval(1000);\n\t     * var result = numbers.concat(letters).concat(interval);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link empty}\n\t     * @see {@link never}\n\t     * @see {@link throw}\n\t     *\n\t     * @param {...T} values Arguments that represent `next` values to be emitted.\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emissions of the `next` notifications.\n\t     * @return {Observable<T>} An Observable that emits each given input value.\n\t     * @static true\n\t     * @name of\n\t     * @owner Observable\n\t     */\n\t    ArrayObservable.of = function () {\n\t        var array = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            array[_i - 0] = arguments[_i];\n\t        }\n\t        var scheduler = array[array.length - 1];\n\t        if (isScheduler_1.isScheduler(scheduler)) {\n\t            array.pop();\n\t        }\n\t        else {\n\t            scheduler = null;\n\t        }\n\t        var len = array.length;\n\t        if (len > 1) {\n\t            return new ArrayObservable(array, scheduler);\n\t        }\n\t        else if (len === 1) {\n\t            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n\t        }\n\t        else {\n\t            return new EmptyObservable_1.EmptyObservable(scheduler);\n\t        }\n\t    };\n\t    ArrayObservable.dispatch = function (state) {\n\t        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n\t        if (index >= count) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(array[index]);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        state.index = index + 1;\n\t        this.schedule(state);\n\t    };\n\t    ArrayObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var array = this.array;\n\t        var count = array.length;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n\t                array: array, index: index, count: count, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            for (var i = 0; i < count && !subscriber.isUnsubscribed; i++) {\n\t                subscriber.next(array[i]);\n\t            }\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return ArrayObservable;\n\t}(Observable_1.Observable));\n\texports.ArrayObservable = ArrayObservable;\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ScalarObservable = (function (_super) {\n\t    __extends(ScalarObservable, _super);\n\t    function ScalarObservable(value, scheduler) {\n\t        _super.call(this);\n\t        this.value = value;\n\t        this.scheduler = scheduler;\n\t        this._isScalar = true;\n\t        if (scheduler) {\n\t            this._isScalar = false;\n\t        }\n\t    }\n\t    ScalarObservable.create = function (value, scheduler) {\n\t        return new ScalarObservable(value, scheduler);\n\t    };\n\t    ScalarObservable.dispatch = function (state) {\n\t        var done = state.done, value = state.value, subscriber = state.subscriber;\n\t        if (done) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(value);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        state.done = true;\n\t        this.schedule(state);\n\t    };\n\t    ScalarObservable.prototype._subscribe = function (subscriber) {\n\t        var value = this.value;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n\t                done: false, value: value, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            subscriber.next(value);\n\t            if (!subscriber.isUnsubscribed) {\n\t                subscriber.complete();\n\t            }\n\t        }\n\t    };\n\t    return ScalarObservable;\n\t}(Observable_1.Observable));\n\texports.ScalarObservable = ScalarObservable;\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar EmptyObservable = (function (_super) {\n\t    __extends(EmptyObservable, _super);\n\t    function EmptyObservable(scheduler) {\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits no items to the Observer and immediately\n\t     * emits a complete notification.\n\t     *\n\t     * <span class=\"informal\">Just emits 'complete', and nothing else.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/empty.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that only\n\t     * emits the complete notification. It can be used for composing with other\n\t     * Observables, such as in a {@link mergeMap}.\n\t     *\n\t     * @example <caption>Emit the number 7, then complete.</caption>\n\t     * var result = Rx.Observable.empty().startWith(7);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n\t     * var interval = Rx.Observable.interval(1000);\n\t     * var result = interval.mergeMap(x =>\n\t     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n\t     * );\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link never}\n\t     * @see {@link of}\n\t     * @see {@link throw}\n\t     *\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emission of the complete notification.\n\t     * @return {Observable} An \"empty\" Observable: emits only the complete\n\t     * notification.\n\t     * @static true\n\t     * @name empty\n\t     * @owner Observable\n\t     */\n\t    EmptyObservable.create = function (scheduler) {\n\t        return new EmptyObservable(scheduler);\n\t    };\n\t    EmptyObservable.dispatch = function (arg) {\n\t        var subscriber = arg.subscriber;\n\t        subscriber.complete();\n\t    };\n\t    EmptyObservable.prototype._subscribe = function (subscriber) {\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n\t        }\n\t        else {\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return EmptyObservable;\n\t}(Observable_1.Observable));\n\texports.EmptyObservable = EmptyObservable;\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar none = {};\n\t/**\n\t * Combines multiple Observables to create an Observable whose values are\n\t * calculated from the latest values of each of its input Observables.\n\t *\n\t * <span class=\"informal\">Whenever any input Observable emits a value, it\n\t * computes a formula using the latest values from all the inputs, then emits\n\t * the output of that formula.</span>\n\t *\n\t * <img src=\"./img/combineLatest.png\" width=\"100%\">\n\t *\n\t * `combineLatest` combines the values from this Observable with values from\n\t * Observables passed as arguments. This is done by subscribing to each\n\t * Observable, in order, and collecting an array of each of the most recent\n\t * values any time any of the input Observables emits, then either taking that\n\t * array and passing it as arguments to an optional `project` function and\n\t * emitting the return value of that, or just emitting the array of recent\n\t * values directly if there is no `project` function.\n\t *\n\t * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n\t * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n\t * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n\t * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n\t * bmi.subscribe(x => console.log('BMI is ' + x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link merge}\n\t * @see {@link withLatestFrom}\n\t *\n\t * @param {Observable} other An input Observable to combine with the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {function} [project] An optional function to project the values from\n\t * the combined latest values into a new value on the output Observable.\n\t * @return {Observable} An Observable of projected values from the most recent\n\t * values from each input Observable, or an array of the most recent values from\n\t * each input Observable.\n\t * @method combineLatest\n\t * @owner Observable\n\t */\n\tfunction combineLatest() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var project = null;\n\t    if (typeof observables[observables.length - 1] === 'function') {\n\t        project = observables.pop();\n\t    }\n\t    // if the first and only other argument besides the resultSelector is an array\n\t    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n\t    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n\t        observables = observables[0];\n\t    }\n\t    observables.unshift(this);\n\t    return new ArrayObservable_1.ArrayObservable(observables).lift(new CombineLatestOperator(project));\n\t}\n\texports.combineLatest = combineLatest;\n\t/* tslint:enable:max-line-length */\n\tvar CombineLatestOperator = (function () {\n\t    function CombineLatestOperator(project) {\n\t        this.project = project;\n\t    }\n\t    CombineLatestOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n\t    };\n\t    return CombineLatestOperator;\n\t}());\n\texports.CombineLatestOperator = CombineLatestOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar CombineLatestSubscriber = (function (_super) {\n\t    __extends(CombineLatestSubscriber, _super);\n\t    function CombineLatestSubscriber(destination, project) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.active = 0;\n\t        this.values = [];\n\t        this.observables = [];\n\t    }\n\t    CombineLatestSubscriber.prototype._next = function (observable) {\n\t        this.values.push(none);\n\t        this.observables.push(observable);\n\t    };\n\t    CombineLatestSubscriber.prototype._complete = function () {\n\t        var observables = this.observables;\n\t        var len = observables.length;\n\t        if (len === 0) {\n\t            this.destination.complete();\n\t        }\n\t        else {\n\t            this.active = len;\n\t            this.toRespond = len;\n\t            for (var i = 0; i < len; i++) {\n\t                var observable = observables[i];\n\t                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n\t            }\n\t        }\n\t    };\n\t    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n\t        if ((this.active -= 1) === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var values = this.values;\n\t        var oldVal = values[outerIndex];\n\t        var toRespond = !this.toRespond\n\t            ? 0\n\t            : oldVal === none ? --this.toRespond : this.toRespond;\n\t        values[outerIndex] = innerValue;\n\t        if (toRespond === 0) {\n\t            if (this.project) {\n\t                this._tryProject(values);\n\t            }\n\t            else {\n\t                this.destination.next(values);\n\t            }\n\t        }\n\t    };\n\t    CombineLatestSubscriber.prototype._tryProject = function (values) {\n\t        var result;\n\t        try {\n\t            result = this.project.apply(this, values);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return CombineLatestSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.CombineLatestSubscriber = CombineLatestSubscriber;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar OuterSubscriber = (function (_super) {\n\t    __extends(OuterSubscriber, _super);\n\t    function OuterSubscriber() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.destination.next(innerValue);\n\t    };\n\t    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this.destination.error(error);\n\t    };\n\t    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.destination.complete();\n\t    };\n\t    return OuterSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.OuterSubscriber = OuterSubscriber;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar isPromise_1 = __webpack_require__(42);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar iterator_1 = __webpack_require__(43);\n\tvar InnerSubscriber_1 = __webpack_require__(44);\n\tvar symbol_observable_1 = __webpack_require__(21);\n\tfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n\t    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\t    if (destination.isUnsubscribed) {\n\t        return;\n\t    }\n\t    if (result instanceof Observable_1.Observable) {\n\t        if (result._isScalar) {\n\t            destination.next(result.value);\n\t            destination.complete();\n\t            return;\n\t        }\n\t        else {\n\t            return result.subscribe(destination);\n\t        }\n\t    }\n\t    if (isArray_1.isArray(result)) {\n\t        for (var i = 0, len = result.length; i < len && !destination.isUnsubscribed; i++) {\n\t            destination.next(result[i]);\n\t        }\n\t        if (!destination.isUnsubscribed) {\n\t            destination.complete();\n\t        }\n\t    }\n\t    else if (isPromise_1.isPromise(result)) {\n\t        result.then(function (value) {\n\t            if (!destination.isUnsubscribed) {\n\t                destination.next(value);\n\t                destination.complete();\n\t            }\n\t        }, function (err) { return destination.error(err); })\n\t            .then(null, function (err) {\n\t            // Escaping the Promise trap: globally throw unhandled errors\n\t            root_1.root.setTimeout(function () { throw err; });\n\t        });\n\t        return destination;\n\t    }\n\t    else if (typeof result[iterator_1.$$iterator] === 'function') {\n\t        for (var _i = 0, _a = result; _i < _a.length; _i++) {\n\t            var item = _a[_i];\n\t            destination.next(item);\n\t            if (destination.isUnsubscribed) {\n\t                break;\n\t            }\n\t        }\n\t        if (!destination.isUnsubscribed) {\n\t            destination.complete();\n\t        }\n\t    }\n\t    else if (typeof result[symbol_observable_1.default] === 'function') {\n\t        var obs = result[symbol_observable_1.default]();\n\t        if (typeof obs.subscribe !== 'function') {\n\t            destination.error('invalid observable');\n\t        }\n\t        else {\n\t            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n\t        }\n\t    }\n\t    else {\n\t        destination.error(new TypeError('unknown type returned'));\n\t    }\n\t}\n\texports.subscribeToResult = subscribeToResult;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isPromise(value) {\n\t    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n\t}\n\texports.isPromise = isPromise;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar Symbol = root_1.root.Symbol;\n\tif (typeof Symbol === 'function') {\n\t    if (Symbol.iterator) {\n\t        exports.$$iterator = Symbol.iterator;\n\t    }\n\t    else if (typeof Symbol.for === 'function') {\n\t        exports.$$iterator = Symbol.for('iterator');\n\t    }\n\t}\n\telse {\n\t    if (root_1.root.Set && typeof new root_1.root.Set()['@@iterator'] === 'function') {\n\t        // Bug for mozilla version\n\t        exports.$$iterator = '@@iterator';\n\t    }\n\t    else if (root_1.root.Map) {\n\t        // es6-shim specific logic\n\t        var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);\n\t        for (var i = 0; i < keys.length; ++i) {\n\t            var key = keys[i];\n\t            if (key !== 'entries' && key !== 'size' && root_1.root.Map.prototype[key] === root_1.root.Map.prototype['entries']) {\n\t                exports.$$iterator = key;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t    else {\n\t        exports.$$iterator = '@@iterator';\n\t    }\n\t}\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar InnerSubscriber = (function (_super) {\n\t    __extends(InnerSubscriber, _super);\n\t    function InnerSubscriber(parent, outerValue, outerIndex) {\n\t        _super.call(this);\n\t        this.parent = parent;\n\t        this.outerValue = outerValue;\n\t        this.outerIndex = outerIndex;\n\t        this.index = 0;\n\t    }\n\t    InnerSubscriber.prototype._next = function (value) {\n\t        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n\t    };\n\t    InnerSubscriber.prototype._error = function (error) {\n\t        this.parent.notifyError(error, this);\n\t        this.unsubscribe();\n\t    };\n\t    InnerSubscriber.prototype._complete = function () {\n\t        this.parent.notifyComplete(this);\n\t        this.unsubscribe();\n\t    };\n\t    return InnerSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.InnerSubscriber = InnerSubscriber;\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concat_1 = __webpack_require__(46);\n\tObservable_1.Observable.concat = concat_1.concat;\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar concat_1 = __webpack_require__(47);\n\texports.concat = concat_1.concatStatic;\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isScheduler_1 = __webpack_require__(35);\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar mergeAll_1 = __webpack_require__(48);\n\t/**\n\t * Creates an output Observable which sequentially emits all values from every\n\t * given input Observable after the current Observable.\n\t *\n\t * <span class=\"informal\">Concatenates multiple Observables together by\n\t * sequentially emitting their values, one Observable after the other.</span>\n\t *\n\t * <img src=\"./img/concat.png\" width=\"100%\">\n\t *\n\t * Joins this Observable with multiple other Observables by subscribing to them\n\t * one at a time, starting with the source, and merging their results into the\n\t * output Observable. Will wait for each Observable to complete before moving\n\t * on to the next.\n\t *\n\t * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n\t * var timer = Rx.Observable.interval(1000).take(4);\n\t * var sequence = Rx.Observable.range(1, 10);\n\t * var result = timer.concat(sequence);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Concatenate 3 Observables</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var result = timer1.concat(timer2, timer3);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatAll}\n\t * @see {@link concatMap}\n\t * @see {@link concatMapTo}\n\t *\n\t * @param {Observable} other An input Observable to concatenate after the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n\t * Observable subscription on.\n\t * @return {Observable} All values of each passed Observable merged into a\n\t * single Observable, in order, in serial fashion.\n\t * @method concat\n\t * @owner Observable\n\t */\n\tfunction concat() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    return concatStatic.apply(void 0, [this].concat(observables));\n\t}\n\texports.concat = concat;\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Creates an output Observable which sequentially emits all values from every\n\t * given input Observable after the current Observable.\n\t *\n\t * <span class=\"informal\">Concatenates multiple Observables together by\n\t * sequentially emitting their values, one Observable after the other.</span>\n\t *\n\t * <img src=\"./img/concat.png\" width=\"100%\">\n\t *\n\t * Joins multiple Observables together by subscribing to them one at a time and\n\t * merging their results into the output Observable. Will wait for each\n\t * Observable to complete before moving on to the next.\n\t *\n\t * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n\t * var timer = Rx.Observable.interval(1000).take(4);\n\t * var sequence = Rx.Observable.range(1, 10);\n\t * var result = Rx.Observable.concat(timer, sequence);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Concatenate 3 Observables</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var result = Rx.Observable.concat(timer1, timer2, timer3);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatAll}\n\t * @see {@link concatMap}\n\t * @see {@link concatMapTo}\n\t *\n\t * @param {Observable} input1 An input Observable to concatenate with others.\n\t * @param {Observable} input2 An input Observable to concatenate with others.\n\t * More than one input Observables may be given as argument.\n\t * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n\t * Observable subscription on.\n\t * @return {Observable} All values of each passed Observable merged into a\n\t * single Observable, in order, in serial fashion.\n\t * @static true\n\t * @name concat\n\t * @owner Observable\n\t */\n\tfunction concatStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var scheduler = null;\n\t    var args = observables;\n\t    if (isScheduler_1.isScheduler(args[observables.length - 1])) {\n\t        scheduler = args.pop();\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));\n\t}\n\texports.concatStatic = concatStatic;\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable which\n\t * concurrently delivers all values that are emitted on the inner Observables.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n\t *\n\t * <img src=\"./img/mergeAll.png\" width=\"100%\">\n\t *\n\t * `mergeAll` subscribes to an Observable that emits Observables, also known as\n\t * a higher-order Observable. Each time it observes one of these emitted inner\n\t * Observables, it subscribes to that and delivers all the values from the\n\t * inner Observable on the output Observable. The output Observable only\n\t * completes once all inner Observables have completed. Any error delivered by\n\t * a inner Observable will be immediately emitted on the output Observable.\n\t *\n\t * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n\t * var firstOrder = higherOrder.mergeAll();\n\t * firstOrder.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n\t * var firstOrder = higherOrder.mergeAll(2);\n\t * firstOrder.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concatAll}\n\t * @see {@link exhaust}\n\t * @see {@link merge}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t * @see {@link switch}\n\t * @see {@link zipAll}\n\t *\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n\t * Observables being subscribed to concurrently.\n\t * @return {Observable} An Observable that emits values coming from all the\n\t * inner Observables emitted by the source Observable.\n\t * @method mergeAll\n\t * @owner Observable\n\t */\n\tfunction mergeAll(concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    return this.lift(new MergeAllOperator(concurrent));\n\t}\n\texports.mergeAll = mergeAll;\n\tvar MergeAllOperator = (function () {\n\t    function MergeAllOperator(concurrent) {\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeAllOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n\t    };\n\t    return MergeAllOperator;\n\t}());\n\texports.MergeAllOperator = MergeAllOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeAllSubscriber = (function (_super) {\n\t    __extends(MergeAllSubscriber, _super);\n\t    function MergeAllSubscriber(destination, concurrent) {\n\t        _super.call(this, destination);\n\t        this.concurrent = concurrent;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t    }\n\t    MergeAllSubscriber.prototype._next = function (observable) {\n\t        if (this.active < this.concurrent) {\n\t            this.active++;\n\t            this.add(subscribeToResult_1.subscribeToResult(this, observable));\n\t        }\n\t        else {\n\t            this.buffer.push(observable);\n\t        }\n\t    };\n\t    MergeAllSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeAllSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeAllSubscriber = MergeAllSubscriber;\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar defer_1 = __webpack_require__(50);\n\tObservable_1.Observable.defer = defer_1.defer;\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar DeferObservable_1 = __webpack_require__(51);\n\texports.defer = DeferObservable_1.DeferObservable.create;\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar DeferObservable = (function (_super) {\n\t    __extends(DeferObservable, _super);\n\t    function DeferObservable(observableFactory) {\n\t        _super.call(this);\n\t        this.observableFactory = observableFactory;\n\t    }\n\t    /**\n\t     * Creates an Observable that, on subscribe, calls an Observable factory to\n\t     * make an Observable for each new Observer.\n\t     *\n\t     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n\t     * is subscribed.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/defer.png\" width=\"100%\">\n\t     *\n\t     * `defer` allows you to create the Observable only when the Observer\n\t     * subscribes, and create a fresh Observable for each Observer. It waits until\n\t     * an Observer subscribes to it, and then it generates an Observable,\n\t     * typically with an Observable factory function. It does this afresh for each\n\t     * subscriber, so although each subscriber may think it is subscribing to the\n\t     * same Observable, in fact each subscriber gets its own individual\n\t     * Observable.\n\t     *\n\t     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n\t     * var clicksOrInterval = Rx.Observable.defer(function () {\n\t     *   if (Math.random() > 0.5) {\n\t     *     return Rx.Observable.fromEvent(document, 'click');\n\t     *   } else {\n\t     *     return Rx.Observable.interval(1000);\n\t     *   }\n\t     * });\n\t     * clicksOrInterval.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     *\n\t     * @param {function(): Observable|Promise} observableFactory The Observable\n\t     * factory function to invoke for each Observer that subscribes to the output\n\t     * Observable. May also return a Promise, which will be converted on the fly\n\t     * to an Observable.\n\t     * @return {Observable} An Observable whose Observers' subscriptions trigger\n\t     * an invocation of the given Observable factory function.\n\t     * @static true\n\t     * @name defer\n\t     * @owner Observable\n\t     */\n\t    DeferObservable.create = function (observableFactory) {\n\t        return new DeferObservable(observableFactory);\n\t    };\n\t    DeferObservable.prototype._subscribe = function (subscriber) {\n\t        return new DeferSubscriber(subscriber, this.observableFactory);\n\t    };\n\t    return DeferObservable;\n\t}(Observable_1.Observable));\n\texports.DeferObservable = DeferObservable;\n\tvar DeferSubscriber = (function (_super) {\n\t    __extends(DeferSubscriber, _super);\n\t    function DeferSubscriber(destination, factory) {\n\t        _super.call(this, destination);\n\t        this.factory = factory;\n\t        this.tryDefer();\n\t    }\n\t    DeferSubscriber.prototype.tryDefer = function () {\n\t        try {\n\t            this._callFactory();\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    DeferSubscriber.prototype._callFactory = function () {\n\t        var result = this.factory();\n\t        if (result) {\n\t            this.add(subscribeToResult_1.subscribeToResult(this, result));\n\t        }\n\t    };\n\t    return DeferSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar empty_1 = __webpack_require__(53);\n\tObservable_1.Observable.empty = empty_1.empty;\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\texports.empty = EmptyObservable_1.EmptyObservable.create;\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar forkJoin_1 = __webpack_require__(55);\n\tObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ForkJoinObservable_1 = __webpack_require__(56);\n\texports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ForkJoinObservable = (function (_super) {\n\t    __extends(ForkJoinObservable, _super);\n\t    function ForkJoinObservable(sources, resultSelector) {\n\t        _super.call(this);\n\t        this.sources = sources;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    /* tslint:enable:max-line-length */\n\t    /**\n\t     * @param sources\n\t     * @return {any}\n\t     * @static true\n\t     * @name forkJoin\n\t     * @owner Observable\n\t     */\n\t    ForkJoinObservable.create = function () {\n\t        var sources = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            sources[_i - 0] = arguments[_i];\n\t        }\n\t        if (sources === null || arguments.length === 0) {\n\t            return new EmptyObservable_1.EmptyObservable();\n\t        }\n\t        var resultSelector = null;\n\t        if (typeof sources[sources.length - 1] === 'function') {\n\t            resultSelector = sources.pop();\n\t        }\n\t        // if the first and only other argument besides the resultSelector is an array\n\t        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n\t        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n\t            sources = sources[0];\n\t        }\n\t        if (sources.length === 0) {\n\t            return new EmptyObservable_1.EmptyObservable();\n\t        }\n\t        return new ForkJoinObservable(sources, resultSelector);\n\t    };\n\t    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n\t        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n\t    };\n\t    return ForkJoinObservable;\n\t}(Observable_1.Observable));\n\texports.ForkJoinObservable = ForkJoinObservable;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ForkJoinSubscriber = (function (_super) {\n\t    __extends(ForkJoinSubscriber, _super);\n\t    function ForkJoinSubscriber(destination, sources, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.sources = sources;\n\t        this.resultSelector = resultSelector;\n\t        this.completed = 0;\n\t        this.haveValues = 0;\n\t        var len = sources.length;\n\t        this.total = len;\n\t        this.values = new Array(len);\n\t        for (var i = 0; i < len; i++) {\n\t            var source = sources[i];\n\t            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n\t            if (innerSubscription) {\n\t                innerSubscription.outerIndex = i;\n\t                this.add(innerSubscription);\n\t            }\n\t        }\n\t    }\n\t    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.values[outerIndex] = innerValue;\n\t        if (!innerSub._hasValue) {\n\t            innerSub._hasValue = true;\n\t            this.haveValues++;\n\t        }\n\t    };\n\t    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var destination = this.destination;\n\t        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n\t        var len = values.length;\n\t        if (!innerSub._hasValue) {\n\t            destination.complete();\n\t            return;\n\t        }\n\t        this.completed++;\n\t        if (this.completed !== len) {\n\t            return;\n\t        }\n\t        if (haveValues === len) {\n\t            var value = resultSelector ? resultSelector.apply(this, values) : values;\n\t            destination.next(value);\n\t        }\n\t        destination.complete();\n\t    };\n\t    return ForkJoinSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar from_1 = __webpack_require__(58);\n\tObservable_1.Observable.from = from_1.from;\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar FromObservable_1 = __webpack_require__(59);\n\texports.from = FromObservable_1.FromObservable.create;\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isArray_1 = __webpack_require__(14);\n\tvar isFunction_1 = __webpack_require__(12);\n\tvar isPromise_1 = __webpack_require__(42);\n\tvar isScheduler_1 = __webpack_require__(35);\n\tvar PromiseObservable_1 = __webpack_require__(60);\n\tvar IteratorObservable_1 = __webpack_require__(61);\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar ArrayLikeObservable_1 = __webpack_require__(62);\n\tvar iterator_1 = __webpack_require__(43);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar observeOn_1 = __webpack_require__(63);\n\tvar symbol_observable_1 = __webpack_require__(21);\n\tvar isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar FromObservable = (function (_super) {\n\t    __extends(FromObservable, _super);\n\t    function FromObservable(ish, scheduler) {\n\t        _super.call(this, null);\n\t        this.ish = ish;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable from an Array, an array-like object, a Promise, an\n\t     * iterable object, or an Observable-like object.\n\t     *\n\t     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n\t     *\n\t     * <img src=\"./img/from.png\" width=\"100%\">\n\t     *\n\t     * Convert various other objects and data types into Observables. `from`\n\t     * converts a Promise or an array-like or an\n\t     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n\t     * object into an Observable that emits the items in that promise or array or\n\t     * iterable. A String, in this context, is treated as an array of characters.\n\t     * Observable-like objects (contains a function named with the ES2015 Symbol\n\t     * for Observable) can also be converted through this operator.\n\t     *\n\t     * @example <caption>Converts an array to an Observable</caption>\n\t     * var array = [10, 20, 30];\n\t     * var result = Rx.Observable.from(array);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n\t     * function* generateDoubles(seed) {\n\t     *   var i = seed;\n\t     *   while (true) {\n\t     *     yield i;\n\t     *     i = 2 * i; // double it\n\t     *   }\n\t     * }\n\t     *\n\t     * var iterator = generateDoubles(3);\n\t     * var result = Rx.Observable.from(iterator).take(10);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link fromEvent}\n\t     * @see {@link fromEventPattern}\n\t     * @see {@link fromPromise}\n\t     *\n\t     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n\t     * Observable-like, an Array, an iterable or an array-like object to be\n\t     * converted.\n\t     * @param {function(x: any, i: number): T} [mapFn] A \"map\" function to call\n\t     * when converting array-like objects, where `x` is a value from the\n\t     * array-like and `i` is the index of that value in the sequence.\n\t     * @param {any} [thisArg] The context object to use when calling the `mapFn`,\n\t     * if provided.\n\t     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n\t     * emissions of values.\n\t     * @return {Observable<T>} The Observable whose values are originally from the\n\t     * input object that was converted.\n\t     * @static true\n\t     * @name from\n\t     * @owner Observable\n\t     */\n\t    FromObservable.create = function (ish, mapFnOrScheduler, thisArg, lastScheduler) {\n\t        var scheduler = null;\n\t        var mapFn = null;\n\t        if (isFunction_1.isFunction(mapFnOrScheduler)) {\n\t            scheduler = lastScheduler || null;\n\t            mapFn = mapFnOrScheduler;\n\t        }\n\t        else if (isScheduler_1.isScheduler(scheduler)) {\n\t            scheduler = mapFnOrScheduler;\n\t        }\n\t        if (ish != null) {\n\t            if (typeof ish[symbol_observable_1.default] === 'function') {\n\t                if (ish instanceof Observable_1.Observable && !scheduler) {\n\t                    return ish;\n\t                }\n\t                return new FromObservable(ish, scheduler);\n\t            }\n\t            else if (isArray_1.isArray(ish)) {\n\t                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n\t            }\n\t            else if (isPromise_1.isPromise(ish)) {\n\t                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n\t            }\n\t            else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {\n\t                return new IteratorObservable_1.IteratorObservable(ish, null, null, scheduler);\n\t            }\n\t            else if (isArrayLike(ish)) {\n\t                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, mapFn, thisArg, scheduler);\n\t            }\n\t        }\n\t        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n\t    };\n\t    FromObservable.prototype._subscribe = function (subscriber) {\n\t        var ish = this.ish;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler == null) {\n\t            return ish[symbol_observable_1.default]().subscribe(subscriber);\n\t        }\n\t        else {\n\t            return ish[symbol_observable_1.default]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n\t        }\n\t    };\n\t    return FromObservable;\n\t}(Observable_1.Observable));\n\texports.FromObservable = FromObservable;\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar PromiseObservable = (function (_super) {\n\t    __extends(PromiseObservable, _super);\n\t    function PromiseObservable(promise, scheduler) {\n\t        if (scheduler === void 0) { scheduler = null; }\n\t        _super.call(this);\n\t        this.promise = promise;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Converts a Promise to an Observable.\n\t     *\n\t     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n\t     * resolved value, then completes.</span>\n\t     *\n\t     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n\t     * Observable. If the Promise resolves with a value, the output Observable\n\t     * emits that resolved value as a `next`, and then completes. If the Promise\n\t     * is rejected, then the output Observable emits the corresponding Error.\n\t     *\n\t     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n\t     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link bindCallback}\n\t     * @see {@link from}\n\t     *\n\t     * @param {Promise<T>} promise The promise to be converted.\n\t     * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n\t     * the delivery of the resolved value (or the rejection).\n\t     * @return {Observable<T>} An Observable which wraps the Promise.\n\t     * @static true\n\t     * @name fromPromise\n\t     * @owner Observable\n\t     */\n\t    PromiseObservable.create = function (promise, scheduler) {\n\t        if (scheduler === void 0) { scheduler = null; }\n\t        return new PromiseObservable(promise, scheduler);\n\t    };\n\t    PromiseObservable.prototype._subscribe = function (subscriber) {\n\t        var _this = this;\n\t        var promise = this.promise;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler == null) {\n\t            if (this._isScalar) {\n\t                if (!subscriber.isUnsubscribed) {\n\t                    subscriber.next(this.value);\n\t                    subscriber.complete();\n\t                }\n\t            }\n\t            else {\n\t                promise.then(function (value) {\n\t                    _this.value = value;\n\t                    _this._isScalar = true;\n\t                    if (!subscriber.isUnsubscribed) {\n\t                        subscriber.next(value);\n\t                        subscriber.complete();\n\t                    }\n\t                }, function (err) {\n\t                    if (!subscriber.isUnsubscribed) {\n\t                        subscriber.error(err);\n\t                    }\n\t                })\n\t                    .then(null, function (err) {\n\t                    // escape the promise trap, throw unhandled errors\n\t                    root_1.root.setTimeout(function () { throw err; });\n\t                });\n\t            }\n\t        }\n\t        else {\n\t            if (this._isScalar) {\n\t                if (!subscriber.isUnsubscribed) {\n\t                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n\t                }\n\t            }\n\t            else {\n\t                promise.then(function (value) {\n\t                    _this.value = value;\n\t                    _this._isScalar = true;\n\t                    if (!subscriber.isUnsubscribed) {\n\t                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n\t                    }\n\t                }, function (err) {\n\t                    if (!subscriber.isUnsubscribed) {\n\t                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n\t                    }\n\t                })\n\t                    .then(null, function (err) {\n\t                    // escape the promise trap, throw unhandled errors\n\t                    root_1.root.setTimeout(function () { throw err; });\n\t                });\n\t            }\n\t        }\n\t    };\n\t    return PromiseObservable;\n\t}(Observable_1.Observable));\n\texports.PromiseObservable = PromiseObservable;\n\tfunction dispatchNext(arg) {\n\t    var value = arg.value, subscriber = arg.subscriber;\n\t    if (!subscriber.isUnsubscribed) {\n\t        subscriber.next(value);\n\t        subscriber.complete();\n\t    }\n\t}\n\tfunction dispatchError(arg) {\n\t    var err = arg.err, subscriber = arg.subscriber;\n\t    if (!subscriber.isUnsubscribed) {\n\t        subscriber.error(err);\n\t    }\n\t}\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar isObject_1 = __webpack_require__(15);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar isFunction_1 = __webpack_require__(12);\n\tvar iterator_1 = __webpack_require__(43);\n\tvar errorObject_1 = __webpack_require__(17);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar IteratorObservable = (function (_super) {\n\t    __extends(IteratorObservable, _super);\n\t    function IteratorObservable(iterator, project, thisArg, scheduler) {\n\t        _super.call(this);\n\t        if (iterator == null) {\n\t            throw new Error('iterator cannot be null.');\n\t        }\n\t        if (isObject_1.isObject(project)) {\n\t            this.thisArg = project;\n\t            this.scheduler = thisArg;\n\t        }\n\t        else if (isFunction_1.isFunction(project)) {\n\t            this.project = project;\n\t            this.thisArg = thisArg;\n\t            this.scheduler = scheduler;\n\t        }\n\t        else if (project != null) {\n\t            throw new Error('When provided, `project` must be a function.');\n\t        }\n\t        this.iterator = getIterator(iterator);\n\t    }\n\t    IteratorObservable.create = function (iterator, project, thisArg, scheduler) {\n\t        return new IteratorObservable(iterator, project, thisArg, scheduler);\n\t    };\n\t    IteratorObservable.dispatch = function (state) {\n\t        var index = state.index, hasError = state.hasError, thisArg = state.thisArg, project = state.project, iterator = state.iterator, subscriber = state.subscriber;\n\t        if (hasError) {\n\t            subscriber.error(state.error);\n\t            return;\n\t        }\n\t        var result = iterator.next();\n\t        if (result.done) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        if (project) {\n\t            result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index);\n\t            if (result === errorObject_1.errorObject) {\n\t                state.error = errorObject_1.errorObject.e;\n\t                state.hasError = true;\n\t            }\n\t            else {\n\t                subscriber.next(result);\n\t                state.index = index + 1;\n\t            }\n\t        }\n\t        else {\n\t            subscriber.next(result.value);\n\t            state.index = index + 1;\n\t        }\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        this.schedule(state);\n\t    };\n\t    IteratorObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var _a = this, iterator = _a.iterator, project = _a.project, thisArg = _a.thisArg, scheduler = _a.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n\t                index: index, thisArg: thisArg, project: project, iterator: iterator, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            do {\n\t                var result = iterator.next();\n\t                if (result.done) {\n\t                    subscriber.complete();\n\t                    break;\n\t                }\n\t                else if (project) {\n\t                    result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index++);\n\t                    if (result === errorObject_1.errorObject) {\n\t                        subscriber.error(errorObject_1.errorObject.e);\n\t                        break;\n\t                    }\n\t                    subscriber.next(result);\n\t                }\n\t                else {\n\t                    subscriber.next(result.value);\n\t                }\n\t                if (subscriber.isUnsubscribed) {\n\t                    break;\n\t                }\n\t            } while (true);\n\t        }\n\t    };\n\t    return IteratorObservable;\n\t}(Observable_1.Observable));\n\texports.IteratorObservable = IteratorObservable;\n\tvar StringIterator = (function () {\n\t    function StringIterator(str, idx, len) {\n\t        if (idx === void 0) { idx = 0; }\n\t        if (len === void 0) { len = str.length; }\n\t        this.str = str;\n\t        this.idx = idx;\n\t        this.len = len;\n\t    }\n\t    StringIterator.prototype[iterator_1.$$iterator] = function () { return (this); };\n\t    StringIterator.prototype.next = function () {\n\t        return this.idx < this.len ? {\n\t            done: false,\n\t            value: this.str.charAt(this.idx++)\n\t        } : {\n\t            done: true,\n\t            value: undefined\n\t        };\n\t    };\n\t    return StringIterator;\n\t}());\n\tvar ArrayIterator = (function () {\n\t    function ArrayIterator(arr, idx, len) {\n\t        if (idx === void 0) { idx = 0; }\n\t        if (len === void 0) { len = toLength(arr); }\n\t        this.arr = arr;\n\t        this.idx = idx;\n\t        this.len = len;\n\t    }\n\t    ArrayIterator.prototype[iterator_1.$$iterator] = function () { return this; };\n\t    ArrayIterator.prototype.next = function () {\n\t        return this.idx < this.len ? {\n\t            done: false,\n\t            value: this.arr[this.idx++]\n\t        } : {\n\t            done: true,\n\t            value: undefined\n\t        };\n\t    };\n\t    return ArrayIterator;\n\t}());\n\tfunction getIterator(obj) {\n\t    var i = obj[iterator_1.$$iterator];\n\t    if (!i && typeof obj === 'string') {\n\t        return new StringIterator(obj);\n\t    }\n\t    if (!i && obj.length !== undefined) {\n\t        return new ArrayIterator(obj);\n\t    }\n\t    if (!i) {\n\t        throw new TypeError('Object is not iterable');\n\t    }\n\t    return obj[iterator_1.$$iterator]();\n\t}\n\tvar maxSafeInteger = Math.pow(2, 53) - 1;\n\tfunction toLength(o) {\n\t    var len = +o.length;\n\t    if (isNaN(len)) {\n\t        return 0;\n\t    }\n\t    if (len === 0 || !numberIsFinite(len)) {\n\t        return len;\n\t    }\n\t    len = sign(len) * Math.floor(Math.abs(len));\n\t    if (len <= 0) {\n\t        return 0;\n\t    }\n\t    if (len > maxSafeInteger) {\n\t        return maxSafeInteger;\n\t    }\n\t    return len;\n\t}\n\tfunction numberIsFinite(value) {\n\t    return typeof value === 'number' && root_1.root.isFinite(value);\n\t}\n\tfunction sign(value) {\n\t    var valueAsNumber = +value;\n\t    if (valueAsNumber === 0) {\n\t        return valueAsNumber;\n\t    }\n\t    if (isNaN(valueAsNumber)) {\n\t        return valueAsNumber;\n\t    }\n\t    return valueAsNumber < 0 ? -1 : 1;\n\t}\n\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ScalarObservable_1 = __webpack_require__(37);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ArrayLikeObservable = (function (_super) {\n\t    __extends(ArrayLikeObservable, _super);\n\t    function ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler) {\n\t        _super.call(this);\n\t        this.arrayLike = arrayLike;\n\t        this.scheduler = scheduler;\n\t        if (!mapFn && !scheduler && arrayLike.length === 1) {\n\t            this._isScalar = true;\n\t            this.value = arrayLike[0];\n\t        }\n\t        if (mapFn) {\n\t            this.mapFn = mapFn.bind(thisArg);\n\t        }\n\t    }\n\t    ArrayLikeObservable.create = function (arrayLike, mapFn, thisArg, scheduler) {\n\t        var length = arrayLike.length;\n\t        if (length === 0) {\n\t            return new EmptyObservable_1.EmptyObservable();\n\t        }\n\t        else if (length === 1 && !mapFn) {\n\t            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n\t        }\n\t        else {\n\t            return new ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler);\n\t        }\n\t    };\n\t    ArrayLikeObservable.dispatch = function (state) {\n\t        var arrayLike = state.arrayLike, index = state.index, length = state.length, mapFn = state.mapFn, subscriber = state.subscriber;\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        if (index >= length) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        var result = mapFn ? mapFn(arrayLike[index], index) : arrayLike[index];\n\t        subscriber.next(result);\n\t        state.index = index + 1;\n\t        this.schedule(state);\n\t    };\n\t    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var _a = this, arrayLike = _a.arrayLike, mapFn = _a.mapFn, scheduler = _a.scheduler;\n\t        var length = arrayLike.length;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n\t                arrayLike: arrayLike, index: index, length: length, mapFn: mapFn, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            for (var i = 0; i < length && !subscriber.isUnsubscribed; i++) {\n\t                var result = mapFn ? mapFn(arrayLike[i], i) : arrayLike[i];\n\t                subscriber.next(result);\n\t            }\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return ArrayLikeObservable;\n\t}(Observable_1.Observable));\n\texports.ArrayLikeObservable = ArrayLikeObservable;\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Notification_1 = __webpack_require__(64);\n\t/**\n\t * @see {@link Notification}\n\t *\n\t * @param scheduler\n\t * @param delay\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method observeOn\n\t * @owner Observable\n\t */\n\tfunction observeOn(scheduler, delay) {\n\t    if (delay === void 0) { delay = 0; }\n\t    return this.lift(new ObserveOnOperator(scheduler, delay));\n\t}\n\texports.observeOn = observeOn;\n\tvar ObserveOnOperator = (function () {\n\t    function ObserveOnOperator(scheduler, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        this.scheduler = scheduler;\n\t        this.delay = delay;\n\t    }\n\t    ObserveOnOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n\t    };\n\t    return ObserveOnOperator;\n\t}());\n\texports.ObserveOnOperator = ObserveOnOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ObserveOnSubscriber = (function (_super) {\n\t    __extends(ObserveOnSubscriber, _super);\n\t    function ObserveOnSubscriber(destination, scheduler, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        _super.call(this, destination);\n\t        this.scheduler = scheduler;\n\t        this.delay = delay;\n\t    }\n\t    ObserveOnSubscriber.dispatch = function (arg) {\n\t        var notification = arg.notification, destination = arg.destination;\n\t        notification.observe(destination);\n\t    };\n\t    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n\t        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n\t    };\n\t    ObserveOnSubscriber.prototype._next = function (value) {\n\t        this.scheduleMessage(Notification_1.Notification.createNext(value));\n\t    };\n\t    ObserveOnSubscriber.prototype._error = function (err) {\n\t        this.scheduleMessage(Notification_1.Notification.createError(err));\n\t    };\n\t    ObserveOnSubscriber.prototype._complete = function () {\n\t        this.scheduleMessage(Notification_1.Notification.createComplete());\n\t    };\n\t    return ObserveOnSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.ObserveOnSubscriber = ObserveOnSubscriber;\n\tvar ObserveOnMessage = (function () {\n\t    function ObserveOnMessage(notification, destination) {\n\t        this.notification = notification;\n\t        this.destination = destination;\n\t    }\n\t    return ObserveOnMessage;\n\t}());\n\texports.ObserveOnMessage = ObserveOnMessage;\n\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * Represents a push-based event or value that an {@link Observable} can emit.\n\t * This class is particularly useful for operators that manage notifications,\n\t * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n\t * others. Besides wrapping the actual delivered value, it also annotates it\n\t * with metadata of, for instance, what type of push message it is (`next`,\n\t * `error`, or `complete`).\n\t *\n\t * @see {@link materialize}\n\t * @see {@link dematerialize}\n\t * @see {@link observeOn}\n\t *\n\t * @class Notification<T>\n\t */\n\tvar Notification = (function () {\n\t    function Notification(kind, value, exception) {\n\t        this.kind = kind;\n\t        this.value = value;\n\t        this.exception = exception;\n\t        this.hasValue = kind === 'N';\n\t    }\n\t    /**\n\t     * Delivers to the given `observer` the value wrapped by this Notification.\n\t     * @param {Observer} observer\n\t     * @return\n\t     */\n\t    Notification.prototype.observe = function (observer) {\n\t        switch (this.kind) {\n\t            case 'N':\n\t                return observer.next && observer.next(this.value);\n\t            case 'E':\n\t                return observer.error && observer.error(this.exception);\n\t            case 'C':\n\t                return observer.complete && observer.complete();\n\t        }\n\t    };\n\t    /**\n\t     * Given some {@link Observer} callbacks, deliver the value represented by the\n\t     * current Notification to the correctly corresponding callback.\n\t     * @param {function(value: T): void} next An Observer `next` callback.\n\t     * @param {function(err: any): void} [error] An Observer `error` callback.\n\t     * @param {function(): void} [complete] An Observer `complete` callback.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.do = function (next, error, complete) {\n\t        var kind = this.kind;\n\t        switch (kind) {\n\t            case 'N':\n\t                return next && next(this.value);\n\t            case 'E':\n\t                return error && error(this.exception);\n\t            case 'C':\n\t                return complete && complete();\n\t        }\n\t    };\n\t    /**\n\t     * Takes an Observer or its individual callback functions, and calls `observe`\n\t     * or `do` methods accordingly.\n\t     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n\t     * the `next` callback.\n\t     * @param {function(err: any): void} [error] An Observer `error` callback.\n\t     * @param {function(): void} [complete] An Observer `complete` callback.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n\t        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n\t            return this.observe(nextOrObserver);\n\t        }\n\t        else {\n\t            return this.do(nextOrObserver, error, complete);\n\t        }\n\t    };\n\t    /**\n\t     * Returns a simple Observable that just delivers the notification represented\n\t     * by this Notification instance.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.toObservable = function () {\n\t        var kind = this.kind;\n\t        switch (kind) {\n\t            case 'N':\n\t                return Observable_1.Observable.of(this.value);\n\t            case 'E':\n\t                return Observable_1.Observable.throw(this.exception);\n\t            case 'C':\n\t                return Observable_1.Observable.empty();\n\t        }\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `next` from a\n\t     * given value.\n\t     * @param {T} value The `next` value.\n\t     * @return {Notification<T>} The \"next\" Notification representing the\n\t     * argument.\n\t     */\n\t    Notification.createNext = function (value) {\n\t        if (typeof value !== 'undefined') {\n\t            return new Notification('N', value);\n\t        }\n\t        return this.undefinedValueNotification;\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `error` from a\n\t     * given error.\n\t     * @param {any} [err] The `error` exception.\n\t     * @return {Notification<T>} The \"error\" Notification representing the\n\t     * argument.\n\t     */\n\t    Notification.createError = function (err) {\n\t        return new Notification('E', undefined, err);\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `complete`.\n\t     * @return {Notification<any>} The valueless \"complete\" Notification.\n\t     */\n\t    Notification.createComplete = function () {\n\t        return this.completeNotification;\n\t    };\n\t    Notification.completeNotification = new Notification('C');\n\t    Notification.undefinedValueNotification = new Notification('N', undefined);\n\t    return Notification;\n\t}());\n\texports.Notification = Notification;\n\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar fromEvent_1 = __webpack_require__(66);\n\tObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar FromEventObservable_1 = __webpack_require__(67);\n\texports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar Subscription_1 = __webpack_require__(13);\n\tfunction isNodeStyleEventEmmitter(sourceObj) {\n\t    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n\t}\n\tfunction isJQueryStyleEventEmitter(sourceObj) {\n\t    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n\t}\n\tfunction isNodeList(sourceObj) {\n\t    return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n\t}\n\tfunction isHTMLCollection(sourceObj) {\n\t    return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n\t}\n\tfunction isEventTarget(sourceObj) {\n\t    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n\t}\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar FromEventObservable = (function (_super) {\n\t    __extends(FromEventObservable, _super);\n\t    function FromEventObservable(sourceObj, eventName, selector) {\n\t        _super.call(this);\n\t        this.sourceObj = sourceObj;\n\t        this.eventName = eventName;\n\t        this.selector = selector;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits events of a specific type coming from the\n\t     * given event target.\n\t     *\n\t     * <span class=\"informal\">Creates an Observable from DOM events, or Node\n\t     * EventEmitter events or others.</span>\n\t     *\n\t     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n\t     *\n\t     * Creates an Observable by attaching an event listener to an \"event target\",\n\t     * which may be an object with `addEventListener` and `removeEventListener`,\n\t     * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n\t     * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n\t     * the output Observable is subscribed, and removed when the Subscription is\n\t     * unsubscribed.\n\t     *\n\t     * @example <caption>Emits clicks happening on the DOM document</caption>\n\t     * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t     * clicks.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link from}\n\t     * @see {@link fromEventPattern}\n\t     *\n\t     * @param {EventTargetLike} target The DOMElement, event target, Node.js\n\t     * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n\t     * @param {string} eventName The event name of interest, being emitted by the\n\t     * `target`.\n\t     * @param {function(...args: any): T} [selector] An optional function to\n\t     * post-process results. It takes the arguments from the event handler and\n\t     * should return a single value.\n\t     * @return {Observable<T>}\n\t     * @static true\n\t     * @name fromEvent\n\t     * @owner Observable\n\t     */\n\t    FromEventObservable.create = function (target, eventName, selector) {\n\t        return new FromEventObservable(target, eventName, selector);\n\t    };\n\t    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber) {\n\t        var unsubscribe;\n\t        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n\t            for (var i = 0, len = sourceObj.length; i < len; i++) {\n\t                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber);\n\t            }\n\t        }\n\t        else if (isEventTarget(sourceObj)) {\n\t            var source_1 = sourceObj;\n\t            sourceObj.addEventListener(eventName, handler);\n\t            unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };\n\t        }\n\t        else if (isJQueryStyleEventEmitter(sourceObj)) {\n\t            var source_2 = sourceObj;\n\t            sourceObj.on(eventName, handler);\n\t            unsubscribe = function () { return source_2.off(eventName, handler); };\n\t        }\n\t        else if (isNodeStyleEventEmmitter(sourceObj)) {\n\t            var source_3 = sourceObj;\n\t            sourceObj.addListener(eventName, handler);\n\t            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n\t        }\n\t        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n\t    };\n\t    FromEventObservable.prototype._subscribe = function (subscriber) {\n\t        var sourceObj = this.sourceObj;\n\t        var eventName = this.eventName;\n\t        var selector = this.selector;\n\t        var handler = selector ? function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n\t            if (result === errorObject_1.errorObject) {\n\t                subscriber.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                subscriber.next(result);\n\t            }\n\t        } : function (e) { return subscriber.next(e); };\n\t        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber);\n\t    };\n\t    return FromEventObservable;\n\t}(Observable_1.Observable));\n\texports.FromEventObservable = FromEventObservable;\n\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar fromEventPattern_1 = __webpack_require__(69);\n\tObservable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;\n\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar FromEventPatternObservable_1 = __webpack_require__(70);\n\texports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;\n\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar FromEventPatternObservable = (function (_super) {\n\t    __extends(FromEventPatternObservable, _super);\n\t    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n\t        _super.call(this);\n\t        this.addHandler = addHandler;\n\t        this.removeHandler = removeHandler;\n\t        this.selector = selector;\n\t    }\n\t    /**\n\t     * Creates an Observable from an API based on addHandler/removeHandler\n\t     * functions.\n\t     *\n\t     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n\t     * Observable.</span>\n\t     *\n\t     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n\t     *\n\t     * Creates an Observable by using the `addHandler` and `removeHandler`\n\t     * functions to add and remove the handlers, with an optional selector\n\t     * function to project the event arguments to a result. The `addHandler` is\n\t     * called when the output Observable is subscribed, and `removeHandler` is\n\t     * called when the Subscription is unsubscribed.\n\t     *\n\t     * @example <caption>Emits clicks happening on the DOM document</caption>\n\t     * function addClickHandler(handler) {\n\t     *   document.addEventListener('click', handler);\n\t     * }\n\t     *\n\t     * function removeClickHandler(handler) {\n\t     *   document.removeEventListener('click', handler);\n\t     * }\n\t     *\n\t     * var clicks = Rx.Observable.fromEventPattern(\n\t     *   addClickHandler,\n\t     *   removeClickHandler\n\t     * );\n\t     * clicks.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link from}\n\t     * @see {@link fromEvent}\n\t     *\n\t     * @param {function(handler: Function): any} addHandler A function that takes\n\t     * a `handler` function as argument and attaches it somehow to the actual\n\t     * source of events.\n\t     * @param {function(handler: Function): void} removeHandler A function that\n\t     * takes a `handler` function as argument and removes it in case it was\n\t     * previously attached using `addHandler`.\n\t     * @param {function(...args: any): T} [selector] An optional function to\n\t     * post-process results. It takes the arguments from the event handler and\n\t     * should return a single value.\n\t     * @return {Observable<T>}\n\t     * @static true\n\t     * @name fromEventPattern\n\t     * @owner Observable\n\t     */\n\t    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n\t        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n\t    };\n\t    FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n\t        var _this = this;\n\t        var removeHandler = this.removeHandler;\n\t        var handler = !!this.selector ? function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            _this._callSelector(subscriber, args);\n\t        } : function (e) { subscriber.next(e); };\n\t        this._callAddHandler(handler, subscriber);\n\t        subscriber.add(new Subscription_1.Subscription(function () {\n\t            //TODO: determine whether or not to forward to error handler\n\t            removeHandler(handler);\n\t        }));\n\t    };\n\t    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n\t        try {\n\t            var result = this.selector.apply(this, args);\n\t            subscriber.next(result);\n\t        }\n\t        catch (e) {\n\t            subscriber.error(e);\n\t        }\n\t    };\n\t    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n\t        try {\n\t            this.addHandler(handler);\n\t        }\n\t        catch (e) {\n\t            errorSubscriber.error(e);\n\t        }\n\t    };\n\t    return FromEventPatternObservable;\n\t}(Observable_1.Observable));\n\texports.FromEventPatternObservable = FromEventPatternObservable;\n\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar fromPromise_1 = __webpack_require__(72);\n\tObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n\n\n/***/ },\n/* 72 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar PromiseObservable_1 = __webpack_require__(60);\n\texports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n\n\n/***/ },\n/* 73 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar GenerateObservable_1 = __webpack_require__(74);\n\tObservable_1.Observable.generate = GenerateObservable_1.GenerateObservable.create;\n\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar isScheduler_1 = __webpack_require__(35);\n\tvar selfSelector = function (value) { return value; };\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar GenerateObservable = (function (_super) {\n\t    __extends(GenerateObservable, _super);\n\t    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n\t        _super.call(this);\n\t        this.initialState = initialState;\n\t        this.condition = condition;\n\t        this.iterate = iterate;\n\t        this.resultSelector = resultSelector;\n\t        this.scheduler = scheduler;\n\t    }\n\t    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n\t        if (arguments.length == 1) {\n\t            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n\t        }\n\t        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {\n\t            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n\t        }\n\t        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n\t    };\n\t    GenerateObservable.prototype._subscribe = function (subscriber) {\n\t        var state = this.initialState;\n\t        if (this.scheduler) {\n\t            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n\t                subscriber: subscriber,\n\t                iterate: this.iterate,\n\t                condition: this.condition,\n\t                resultSelector: this.resultSelector,\n\t                state: state });\n\t        }\n\t        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n\t        do {\n\t            if (condition) {\n\t                var conditionResult = void 0;\n\t                try {\n\t                    conditionResult = condition(state);\n\t                }\n\t                catch (err) {\n\t                    subscriber.error(err);\n\t                    return;\n\t                }\n\t                if (!conditionResult) {\n\t                    subscriber.complete();\n\t                    break;\n\t                }\n\t            }\n\t            var value = void 0;\n\t            try {\n\t                value = resultSelector(state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t            subscriber.next(value);\n\t            if (subscriber.isUnsubscribed) {\n\t                break;\n\t            }\n\t            try {\n\t                state = iterate(state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t        } while (true);\n\t    };\n\t    GenerateObservable.dispatch = function (state) {\n\t        var subscriber = state.subscriber, condition = state.condition;\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        if (state.needIterate) {\n\t            try {\n\t                state.state = state.iterate(state.state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t        }\n\t        else {\n\t            state.needIterate = true;\n\t        }\n\t        if (condition) {\n\t            var conditionResult = void 0;\n\t            try {\n\t                conditionResult = condition(state.state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t            if (!conditionResult) {\n\t                subscriber.complete();\n\t                return;\n\t            }\n\t            if (subscriber.isUnsubscribed) {\n\t                return;\n\t            }\n\t        }\n\t        var value;\n\t        try {\n\t            value = state.resultSelector(state.state);\n\t        }\n\t        catch (err) {\n\t            subscriber.error(err);\n\t            return;\n\t        }\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        subscriber.next(value);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        return this.schedule(state);\n\t    };\n\t    return GenerateObservable;\n\t}(Observable_1.Observable));\n\texports.GenerateObservable = GenerateObservable;\n\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar if_1 = __webpack_require__(76);\n\tObservable_1.Observable.if = if_1._if;\n\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar IfObservable_1 = __webpack_require__(77);\n\texports._if = IfObservable_1.IfObservable.create;\n\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar IfObservable = (function (_super) {\n\t    __extends(IfObservable, _super);\n\t    function IfObservable(condition, thenSource, elseSource) {\n\t        _super.call(this);\n\t        this.condition = condition;\n\t        this.thenSource = thenSource;\n\t        this.elseSource = elseSource;\n\t    }\n\t    IfObservable.create = function (condition, thenSource, elseSource) {\n\t        return new IfObservable(condition, thenSource, elseSource);\n\t    };\n\t    IfObservable.prototype._subscribe = function (subscriber) {\n\t        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n\t        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n\t    };\n\t    return IfObservable;\n\t}(Observable_1.Observable));\n\texports.IfObservable = IfObservable;\n\tvar IfSubscriber = (function (_super) {\n\t    __extends(IfSubscriber, _super);\n\t    function IfSubscriber(destination, condition, thenSource, elseSource) {\n\t        _super.call(this, destination);\n\t        this.condition = condition;\n\t        this.thenSource = thenSource;\n\t        this.elseSource = elseSource;\n\t        this.tryIf();\n\t    }\n\t    IfSubscriber.prototype.tryIf = function () {\n\t        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n\t        var result;\n\t        try {\n\t            result = condition();\n\t            var source = result ? thenSource : elseSource;\n\t            if (source) {\n\t                this.add(subscribeToResult_1.subscribeToResult(this, source));\n\t            }\n\t            else {\n\t                this._complete();\n\t            }\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    return IfSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar interval_1 = __webpack_require__(79);\n\tObservable_1.Observable.interval = interval_1.interval;\n\n\n/***/ },\n/* 79 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar IntervalObservable_1 = __webpack_require__(80);\n\texports.interval = IntervalObservable_1.IntervalObservable.create;\n\n\n/***/ },\n/* 80 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isNumeric_1 = __webpack_require__(81);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar IntervalObservable = (function (_super) {\n\t    __extends(IntervalObservable, _super);\n\t    function IntervalObservable(period, scheduler) {\n\t        if (period === void 0) { period = 0; }\n\t        if (scheduler === void 0) { scheduler = async_1.async; }\n\t        _super.call(this);\n\t        this.period = period;\n\t        this.scheduler = scheduler;\n\t        if (!isNumeric_1.isNumeric(period) || period < 0) {\n\t            this.period = 0;\n\t        }\n\t        if (!scheduler || typeof scheduler.schedule !== 'function') {\n\t            this.scheduler = async_1.async;\n\t        }\n\t    }\n\t    /**\n\t     * Creates an Observable that emits sequential numbers every specified\n\t     * interval of time, on a specified Scheduler.\n\t     *\n\t     * <span class=\"informal\">Emits incremental numbers periodically in time.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/interval.png\" width=\"100%\">\n\t     *\n\t     * `interval` returns an Observable that emits an infinite sequence of\n\t     * ascending integers, with a constant interval of time of your choosing\n\t     * between those emissions. The first emission is not sent immediately, but\n\t     * only after the first period has passed. By default, this operator uses the\n\t     * `async` Scheduler to provide a notion of time, but you may pass any\n\t     * Scheduler to it.\n\t     *\n\t     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n\t     * var numbers = Rx.Observable.interval(1000);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link timer}\n\t     * @see {@link delay}\n\t     *\n\t     * @param {number} [period=0] The interval size in milliseconds (by default)\n\t     * or the time unit determined by the scheduler's clock.\n\t     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n\t     * the emission of values, and providing a notion of \"time\".\n\t     * @return {Observable} An Observable that emits a sequential number each time\n\t     * interval.\n\t     * @static true\n\t     * @name interval\n\t     * @owner Observable\n\t     */\n\t    IntervalObservable.create = function (period, scheduler) {\n\t        if (period === void 0) { period = 0; }\n\t        if (scheduler === void 0) { scheduler = async_1.async; }\n\t        return new IntervalObservable(period, scheduler);\n\t    };\n\t    IntervalObservable.dispatch = function (state) {\n\t        var index = state.index, subscriber = state.subscriber, period = state.period;\n\t        subscriber.next(index);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        state.index += 1;\n\t        this.schedule(state, period);\n\t    };\n\t    IntervalObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var period = this.period;\n\t        var scheduler = this.scheduler;\n\t        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n\t            index: index, subscriber: subscriber, period: period\n\t        }));\n\t    };\n\t    return IntervalObservable;\n\t}(Observable_1.Observable));\n\texports.IntervalObservable = IntervalObservable;\n\n\n/***/ },\n/* 81 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isArray_1 = __webpack_require__(14);\n\tfunction isNumeric(val) {\n\t    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t    // subtraction forces infinities to NaN\n\t    // adding 1 corrects loss of precision from parseFloat (#15100)\n\t    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n\t}\n\texports.isNumeric = isNumeric;\n\t;\n\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AsyncScheduler_1 = __webpack_require__(83);\n\texports.async = new AsyncScheduler_1.AsyncScheduler();\n\n\n/***/ },\n/* 83 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar FutureAction_1 = __webpack_require__(84);\n\tvar QueueScheduler_1 = __webpack_require__(85);\n\tvar AsyncScheduler = (function (_super) {\n\t    __extends(AsyncScheduler, _super);\n\t    function AsyncScheduler() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AsyncScheduler.prototype.scheduleNow = function (work, state) {\n\t        return new FutureAction_1.FutureAction(this, work).schedule(state, 0);\n\t    };\n\t    return AsyncScheduler;\n\t}(QueueScheduler_1.QueueScheduler));\n\texports.AsyncScheduler = AsyncScheduler;\n\n\n/***/ },\n/* 84 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FutureAction = (function (_super) {\n\t    __extends(FutureAction, _super);\n\t    function FutureAction(scheduler, work) {\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t        this.pending = false;\n\t    }\n\t    FutureAction.prototype.execute = function () {\n\t        if (this.isUnsubscribed) {\n\t            this.error = new Error('executing a cancelled action');\n\t        }\n\t        else {\n\t            try {\n\t                this.work(this.state);\n\t            }\n\t            catch (e) {\n\t                this.unsubscribe();\n\t                this.error = e;\n\t            }\n\t        }\n\t    };\n\t    FutureAction.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (this.isUnsubscribed) {\n\t            return this;\n\t        }\n\t        return this._schedule(state, delay);\n\t    };\n\t    FutureAction.prototype._schedule = function (state, delay) {\n\t        var _this = this;\n\t        if (delay === void 0) { delay = 0; }\n\t        // Always replace the current state with the new state.\n\t        this.state = state;\n\t        // Set the pending flag indicating that this action has been scheduled, or\n\t        // has recursively rescheduled itself.\n\t        this.pending = true;\n\t        var id = this.id;\n\t        // If this action has an intervalID and the specified delay matches the\n\t        // delay we used to create the intervalID, don't call `setInterval` again.\n\t        if (id != null && this.delay === delay) {\n\t            return this;\n\t        }\n\t        this.delay = delay;\n\t        // If this action has an intervalID, but was rescheduled with a different\n\t        // `delay` time, cancel the current intervalID and call `setInterval` with\n\t        // the new `delay` time.\n\t        if (id != null) {\n\t            this.id = null;\n\t            root_1.root.clearInterval(id);\n\t        }\n\t        //\n\t        // Important implementation note:\n\t        //\n\t        // By default, FutureAction only executes once. However, Actions have the\n\t        // ability to be rescheduled from within the scheduled callback (mimicking\n\t        // recursion for asynchronous methods). This allows us to implement single\n\t        // and repeated actions with the same code path without adding API surface\n\t        // area, and implement tail-call optimization over asynchronous boundaries.\n\t        //\n\t        // However, JS runtimes make a distinction between intervals scheduled by\n\t        // repeatedly calling `setTimeout` vs. a single `setInterval` call, with\n\t        // the latter providing a better guarantee of precision.\n\t        //\n\t        // In order to accommodate both single and repeatedly rescheduled actions,\n\t        // use `setInterval` here for both cases. By default, the interval will be\n\t        // canceled after its first execution, or if the action schedules itself to\n\t        // run again with a different `delay` time.\n\t        //\n\t        // If the action recursively schedules itself to run again with the same\n\t        // `delay` time, the interval is not canceled, but allowed to loop again.\n\t        // The check of whether the interval should be canceled or not is run every\n\t        // time the interval is executed. The first time an action fails to\n\t        // reschedule itself, the interval is canceled.\n\t        //\n\t        this.id = root_1.root.setInterval(function () {\n\t            _this.pending = false;\n\t            var _a = _this, id = _a.id, scheduler = _a.scheduler;\n\t            scheduler.actions.push(_this);\n\t            scheduler.flush();\n\t            //\n\t            // Terminate this interval if the action didn't reschedule itself.\n\t            // Don't call `this.unsubscribe()` here, because the action could be\n\t            // rescheduled later. For example:\n\t            //\n\t            // ```\n\t            // scheduler.schedule(function doWork(counter) {\n\t            //   /* ... I'm a busy worker bee ... */\n\t            //   var originalAction = this;\n\t            //   /* wait 100ms before rescheduling this action again */\n\t            //   setTimeout(function () {\n\t            //     originalAction.schedule(counter + 1);\n\t            //   }, 100);\n\t            // }, 1000);\n\t            // ```\n\t            if (_this.pending === false && id != null) {\n\t                _this.id = null;\n\t                root_1.root.clearInterval(id);\n\t            }\n\t        }, delay);\n\t        return this;\n\t    };\n\t    FutureAction.prototype._unsubscribe = function () {\n\t        this.pending = false;\n\t        var _a = this, id = _a.id, scheduler = _a.scheduler;\n\t        var actions = scheduler.actions;\n\t        var index = actions.indexOf(this);\n\t        if (id != null) {\n\t            this.id = null;\n\t            root_1.root.clearInterval(id);\n\t        }\n\t        if (index !== -1) {\n\t            actions.splice(index, 1);\n\t        }\n\t        this.work = null;\n\t        this.state = null;\n\t        this.scheduler = null;\n\t    };\n\t    return FutureAction;\n\t}(Subscription_1.Subscription));\n\texports.FutureAction = FutureAction;\n\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar QueueAction_1 = __webpack_require__(86);\n\tvar FutureAction_1 = __webpack_require__(84);\n\tvar QueueScheduler = (function () {\n\t    function QueueScheduler() {\n\t        this.active = false;\n\t        this.actions = []; // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n\t        this.scheduledId = null;\n\t    }\n\t    QueueScheduler.prototype.now = function () {\n\t        return Date.now();\n\t    };\n\t    QueueScheduler.prototype.flush = function () {\n\t        if (this.active || this.scheduledId) {\n\t            return;\n\t        }\n\t        this.active = true;\n\t        var actions = this.actions;\n\t        // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n\t        for (var action = null; action = actions.shift();) {\n\t            action.execute();\n\t            if (action.error) {\n\t                this.active = false;\n\t                throw action.error;\n\t            }\n\t        }\n\t        this.active = false;\n\t    };\n\t    QueueScheduler.prototype.schedule = function (work, delay, state) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return (delay <= 0) ?\n\t            this.scheduleNow(work, state) :\n\t            this.scheduleLater(work, delay, state);\n\t    };\n\t    QueueScheduler.prototype.scheduleNow = function (work, state) {\n\t        return new QueueAction_1.QueueAction(this, work).schedule(state);\n\t    };\n\t    QueueScheduler.prototype.scheduleLater = function (work, delay, state) {\n\t        return new FutureAction_1.FutureAction(this, work).schedule(state, delay);\n\t    };\n\t    return QueueScheduler;\n\t}());\n\texports.QueueScheduler = QueueScheduler;\n\n\n/***/ },\n/* 86 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar FutureAction_1 = __webpack_require__(84);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar QueueAction = (function (_super) {\n\t    __extends(QueueAction, _super);\n\t    function QueueAction() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    QueueAction.prototype._schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (delay > 0) {\n\t            return _super.prototype._schedule.call(this, state, delay);\n\t        }\n\t        this.delay = delay;\n\t        this.state = state;\n\t        var scheduler = this.scheduler;\n\t        scheduler.actions.push(this);\n\t        scheduler.flush();\n\t        return this;\n\t    };\n\t    return QueueAction;\n\t}(FutureAction_1.FutureAction));\n\texports.QueueAction = QueueAction;\n\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar merge_1 = __webpack_require__(88);\n\tObservable_1.Observable.merge = merge_1.merge;\n\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar merge_1 = __webpack_require__(89);\n\texports.merge = merge_1.mergeStatic;\n\n\n/***/ },\n/* 89 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar mergeAll_1 = __webpack_require__(48);\n\tvar isScheduler_1 = __webpack_require__(35);\n\t/**\n\t * Creates an output Observable which concurrently emits all values from every\n\t * given input Observable.\n\t *\n\t * <span class=\"informal\">Flattens multiple Observables together by blending\n\t * their values into one Observable.</span>\n\t *\n\t * <img src=\"./img/merge.png\" width=\"100%\">\n\t *\n\t * `merge` subscribes to each given input Observable (either the source or an\n\t * Observable given as argument), and simply forwards (without doing any\n\t * transformation) all the values from all the input Observables to the output\n\t * Observable. The output Observable only completes once all input Observables\n\t * have completed. Any error delivered by an input Observable will be immediately\n\t * emitted on the output Observable.\n\t *\n\t * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var timer = Rx.Observable.interval(1000);\n\t * var clicksOrTimer = clicks.merge(timer);\n\t * clicksOrTimer.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var concurrent = 2; // the argument\n\t * var merged = timer1.merge(timer2, timer3, concurrent);\n\t * merged.subscribe(x => console.log(x));\n\t *\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t *\n\t * @param {Observable} other An input Observable to merge with the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n\t * concurrency of input Observables.\n\t * @return {Observable} an Observable that emits items that are the result of\n\t * every input Observable.\n\t * @method merge\n\t * @owner Observable\n\t */\n\tfunction merge() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    observables.unshift(this);\n\t    return mergeStatic.apply(this, observables);\n\t}\n\texports.merge = merge;\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Creates an output Observable which concurrently emits all values from every\n\t * given input Observable.\n\t *\n\t * <span class=\"informal\">Flattens multiple Observables together by blending\n\t * their values into one Observable.</span>\n\t *\n\t * <img src=\"./img/merge.png\" width=\"100%\">\n\t *\n\t * `merge` subscribes to each given input Observable (as arguments), and simply\n\t * forwards (without doing any transformation) all the values from all the input\n\t * Observables to the output Observable. The output Observable only completes\n\t * once all input Observables have completed. Any error delivered by an input\n\t * Observable will be immediately emitted on the output Observable.\n\t *\n\t * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var timer = Rx.Observable.interval(1000);\n\t * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n\t * clicksOrTimer.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var concurrent = 2; // the argument\n\t * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n\t * merged.subscribe(x => console.log(x));\n\t *\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t *\n\t * @param {Observable} input1 An input Observable to merge with others.\n\t * @param {Observable} input2 An input Observable to merge with others.\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n\t * concurrency of input Observables.\n\t * @return {Observable} an Observable that emits items that are the result of\n\t * every input Observable.\n\t * @static true\n\t * @name merge\n\t * @owner Observable\n\t */\n\tfunction mergeStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var concurrent = Number.POSITIVE_INFINITY;\n\t    var scheduler = null;\n\t    var last = observables[observables.length - 1];\n\t    if (isScheduler_1.isScheduler(last)) {\n\t        scheduler = observables.pop();\n\t        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n\t            concurrent = observables.pop();\n\t        }\n\t    }\n\t    else if (typeof last === 'number') {\n\t        concurrent = observables.pop();\n\t    }\n\t    if (observables.length === 1) {\n\t        return observables[0];\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));\n\t}\n\texports.mergeStatic = mergeStatic;\n\n\n/***/ },\n/* 90 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar race_1 = __webpack_require__(91);\n\tObservable_1.Observable.race = race_1.raceStatic;\n\n\n/***/ },\n/* 91 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isArray_1 = __webpack_require__(14);\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Returns an Observable that mirrors the first source Observable to emit an item\n\t * from the combination of this Observable and supplied Observables\n\t * @param {...Observables} ...observables sources used to race for which Observable emits first.\n\t * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n\t * @method race\n\t * @owner Observable\n\t */\n\tfunction race() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    // if the only argument is an array, it was most likely called with\n\t    // `pair([obs1, obs2, ...])`\n\t    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n\t        observables = observables[0];\n\t    }\n\t    observables.unshift(this);\n\t    return raceStatic.apply(this, observables);\n\t}\n\texports.race = race;\n\tfunction raceStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    // if the only argument is an array, it was most likely called with\n\t    // `pair([obs1, obs2, ...])`\n\t    if (observables.length === 1) {\n\t        if (isArray_1.isArray(observables[0])) {\n\t            observables = observables[0];\n\t        }\n\t        else {\n\t            return observables[0];\n\t        }\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n\t}\n\texports.raceStatic = raceStatic;\n\tvar RaceOperator = (function () {\n\t    function RaceOperator() {\n\t    }\n\t    RaceOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RaceSubscriber(subscriber));\n\t    };\n\t    return RaceOperator;\n\t}());\n\texports.RaceOperator = RaceOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RaceSubscriber = (function (_super) {\n\t    __extends(RaceSubscriber, _super);\n\t    function RaceSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.hasFirst = false;\n\t        this.observables = [];\n\t        this.subscriptions = [];\n\t    }\n\t    RaceSubscriber.prototype._next = function (observable) {\n\t        this.observables.push(observable);\n\t    };\n\t    RaceSubscriber.prototype._complete = function () {\n\t        var observables = this.observables;\n\t        var len = observables.length;\n\t        if (len === 0) {\n\t            this.destination.complete();\n\t        }\n\t        else {\n\t            for (var i = 0; i < len; i++) {\n\t                var observable = observables[i];\n\t                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n\t                if (this.subscriptions) {\n\t                    this.subscriptions.push(subscription);\n\t                    this.add(subscription);\n\t                }\n\t            }\n\t            this.observables = null;\n\t        }\n\t    };\n\t    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (!this.hasFirst) {\n\t            this.hasFirst = true;\n\t            for (var i = 0; i < this.subscriptions.length; i++) {\n\t                if (i !== outerIndex) {\n\t                    var subscription = this.subscriptions[i];\n\t                    subscription.unsubscribe();\n\t                    this.remove(subscription);\n\t                }\n\t            }\n\t            this.subscriptions = null;\n\t        }\n\t        this.destination.next(innerValue);\n\t    };\n\t    return RaceSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.RaceSubscriber = RaceSubscriber;\n\n\n/***/ },\n/* 92 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar never_1 = __webpack_require__(93);\n\tObservable_1.Observable.never = never_1.never;\n\n\n/***/ },\n/* 93 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar NeverObservable_1 = __webpack_require__(94);\n\texports.never = NeverObservable_1.NeverObservable.create;\n\n\n/***/ },\n/* 94 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar noop_1 = __webpack_require__(95);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar NeverObservable = (function (_super) {\n\t    __extends(NeverObservable, _super);\n\t    function NeverObservable() {\n\t        _super.call(this);\n\t    }\n\t    /**\n\t     * Creates an Observable that emits no items to the Observer.\n\t     *\n\t     * <span class=\"informal\">An Observable that never emits anything.</span>\n\t     *\n\t     * <img src=\"./img/never.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that emits\n\t     * neither values nor errors nor the completion notification. It can be used\n\t     * for testing purposes or for composing with other Observables. Please not\n\t     * that by never emitting a complete notification, this Observable keeps the\n\t     * subscription from being disposed automatically. Subscriptions need to be\n\t     * manually disposed.\n\t     *\n\t     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n\t     * function info() {\n\t     *   console.log('Will not be called');\n\t     * }\n\t     * var result = Rx.Observable.never().startWith(7);\n\t     * result.subscribe(x => console.log(x), info, info);\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link empty}\n\t     * @see {@link of}\n\t     * @see {@link throw}\n\t     *\n\t     * @return {Observable} A \"never\" Observable: never emits anything.\n\t     * @static true\n\t     * @name never\n\t     * @owner Observable\n\t     */\n\t    NeverObservable.create = function () {\n\t        return new NeverObservable();\n\t    };\n\t    NeverObservable.prototype._subscribe = function (subscriber) {\n\t        noop_1.noop();\n\t    };\n\t    return NeverObservable;\n\t}(Observable_1.Observable));\n\texports.NeverObservable = NeverObservable;\n\n\n/***/ },\n/* 95 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/* tslint:disable:no-empty */\n\tfunction noop() { }\n\texports.noop = noop;\n\n\n/***/ },\n/* 96 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar of_1 = __webpack_require__(97);\n\tObservable_1.Observable.of = of_1.of;\n\n\n/***/ },\n/* 97 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\texports.of = ArrayObservable_1.ArrayObservable.of;\n\n\n/***/ },\n/* 98 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar onErrorResumeNext_1 = __webpack_require__(99);\n\tObservable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;\n\n\n/***/ },\n/* 99 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar FromObservable_1 = __webpack_require__(59);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tfunction onErrorResumeNext() {\n\t    var nextSources = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        nextSources[_i - 0] = arguments[_i];\n\t    }\n\t    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n\t        nextSources = nextSources[0];\n\t    }\n\t    return this.lift(new OnErrorResumeNextOperator(nextSources));\n\t}\n\texports.onErrorResumeNext = onErrorResumeNext;\n\t/* tslint:enable:max-line-length */\n\tfunction onErrorResumeNextStatic() {\n\t    var nextSources = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        nextSources[_i - 0] = arguments[_i];\n\t    }\n\t    var source = null;\n\t    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n\t        nextSources = nextSources[0];\n\t    }\n\t    source = nextSources.shift();\n\t    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n\t}\n\texports.onErrorResumeNextStatic = onErrorResumeNextStatic;\n\tvar OnErrorResumeNextOperator = (function () {\n\t    function OnErrorResumeNextOperator(nextSources) {\n\t        this.nextSources = nextSources;\n\t    }\n\t    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n\t    };\n\t    return OnErrorResumeNextOperator;\n\t}());\n\tvar OnErrorResumeNextSubscriber = (function (_super) {\n\t    __extends(OnErrorResumeNextSubscriber, _super);\n\t    function OnErrorResumeNextSubscriber(destination, nextSources) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.nextSources = nextSources;\n\t    }\n\t    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype._complete = function () {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n\t        var next = this.nextSources.shift();\n\t        if (next) {\n\t            this.add(subscribeToResult_1.subscribeToResult(this, next));\n\t        }\n\t        else {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return OnErrorResumeNextSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 100 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar range_1 = __webpack_require__(101);\n\tObservable_1.Observable.range = range_1.range;\n\n\n/***/ },\n/* 101 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar RangeObservable_1 = __webpack_require__(102);\n\texports.range = RangeObservable_1.RangeObservable.create;\n\n\n/***/ },\n/* 102 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar RangeObservable = (function (_super) {\n\t    __extends(RangeObservable, _super);\n\t    function RangeObservable(start, count, scheduler) {\n\t        _super.call(this);\n\t        this.start = start;\n\t        this._count = count;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits a sequence of numbers within a specified\n\t     * range.\n\t     *\n\t     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n\t     *\n\t     * <img src=\"./img/range.png\" width=\"100%\">\n\t     *\n\t     * `range` operator emits a range of sequential integers, in order, where you\n\t     * select the `start` of the range and its `length`. By default, uses no\n\t     * Scheduler and just delivers the notifications synchronously, but may use\n\t     * an optional Scheduler to regulate those deliveries.\n\t     *\n\t     * @example <caption>Emits the numbers 1 to 10</caption>\n\t     * var numbers = Rx.Observable.range(1, 10);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link timer}\n\t     * @see {@link interval}\n\t     *\n\t     * @param {number} [start=0] The value of the first integer in the sequence.\n\t     * @param {number} [count=0] The number of sequential integers to generate.\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emissions of the notifications.\n\t     * @return {Observable} An Observable of numbers that emits a finite range of\n\t     * sequential integers.\n\t     * @static true\n\t     * @name range\n\t     * @owner Observable\n\t     */\n\t    RangeObservable.create = function (start, count, scheduler) {\n\t        if (start === void 0) { start = 0; }\n\t        if (count === void 0) { count = 0; }\n\t        return new RangeObservable(start, count, scheduler);\n\t    };\n\t    RangeObservable.dispatch = function (state) {\n\t        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n\t        if (index >= count) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(start);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        state.index = index + 1;\n\t        state.start = start + 1;\n\t        this.schedule(state);\n\t    };\n\t    RangeObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var start = this.start;\n\t        var count = this._count;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(RangeObservable.dispatch, 0, {\n\t                index: index, count: count, start: start, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            do {\n\t                if (index++ >= count) {\n\t                    subscriber.complete();\n\t                    break;\n\t                }\n\t                subscriber.next(start++);\n\t                if (subscriber.isUnsubscribed) {\n\t                    break;\n\t                }\n\t            } while (true);\n\t        }\n\t    };\n\t    return RangeObservable;\n\t}(Observable_1.Observable));\n\texports.RangeObservable = RangeObservable;\n\n\n/***/ },\n/* 103 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar using_1 = __webpack_require__(104);\n\tObservable_1.Observable.using = using_1.using;\n\n\n/***/ },\n/* 104 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar UsingObservable_1 = __webpack_require__(105);\n\texports.using = UsingObservable_1.UsingObservable.create;\n\n\n/***/ },\n/* 105 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar UsingObservable = (function (_super) {\n\t    __extends(UsingObservable, _super);\n\t    function UsingObservable(resourceFactory, observableFactory) {\n\t        _super.call(this);\n\t        this.resourceFactory = resourceFactory;\n\t        this.observableFactory = observableFactory;\n\t    }\n\t    UsingObservable.create = function (resourceFactory, observableFactory) {\n\t        return new UsingObservable(resourceFactory, observableFactory);\n\t    };\n\t    UsingObservable.prototype._subscribe = function (subscriber) {\n\t        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n\t        var resource;\n\t        try {\n\t            resource = resourceFactory();\n\t            return new UsingSubscriber(subscriber, resource, observableFactory);\n\t        }\n\t        catch (err) {\n\t            subscriber.error(err);\n\t        }\n\t    };\n\t    return UsingObservable;\n\t}(Observable_1.Observable));\n\texports.UsingObservable = UsingObservable;\n\tvar UsingSubscriber = (function (_super) {\n\t    __extends(UsingSubscriber, _super);\n\t    function UsingSubscriber(destination, resource, observableFactory) {\n\t        _super.call(this, destination);\n\t        this.resource = resource;\n\t        this.observableFactory = observableFactory;\n\t        destination.add(resource);\n\t        this.tryUse();\n\t    }\n\t    UsingSubscriber.prototype.tryUse = function () {\n\t        try {\n\t            var source = this.observableFactory.call(this, this.resource);\n\t            if (source) {\n\t                this.add(subscribeToResult_1.subscribeToResult(this, source));\n\t            }\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    return UsingSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 106 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar throw_1 = __webpack_require__(107);\n\tObservable_1.Observable.throw = throw_1._throw;\n\n\n/***/ },\n/* 107 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ErrorObservable_1 = __webpack_require__(108);\n\texports._throw = ErrorObservable_1.ErrorObservable.create;\n\n\n/***/ },\n/* 108 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ErrorObservable = (function (_super) {\n\t    __extends(ErrorObservable, _super);\n\t    function ErrorObservable(error, scheduler) {\n\t        _super.call(this);\n\t        this.error = error;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits no items to the Observer and immediately\n\t     * emits an error notification.\n\t     *\n\t     * <span class=\"informal\">Just emits 'error', and nothing else.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/throw.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that only\n\t     * emits the error notification. It can be used for composing with other\n\t     * Observables, such as in a {@link mergeMap}.\n\t     *\n\t     * @example <caption>Emit the number 7, then emit an error.</caption>\n\t     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n\t     * var interval = Rx.Observable.interval(1000);\n\t     * var result = interval.mergeMap(x =>\n\t     *   x === 13 ?\n\t     *     Rx.Observable.throw('Thirteens are bad') :\n\t     *     Rx.Observable.of('a', 'b', 'c')\n\t     * );\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link empty}\n\t     * @see {@link never}\n\t     * @see {@link of}\n\t     *\n\t     * @param {any} error The particular Error to pass to the error notification.\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emission of the error notification.\n\t     * @return {Observable} An error Observable: emits only the error notification\n\t     * using the given error argument.\n\t     * @static true\n\t     * @name throw\n\t     * @owner Observable\n\t     */\n\t    ErrorObservable.create = function (error, scheduler) {\n\t        return new ErrorObservable(error, scheduler);\n\t    };\n\t    ErrorObservable.dispatch = function (arg) {\n\t        var error = arg.error, subscriber = arg.subscriber;\n\t        subscriber.error(error);\n\t    };\n\t    ErrorObservable.prototype._subscribe = function (subscriber) {\n\t        var error = this.error;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n\t                error: error, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            subscriber.error(error);\n\t        }\n\t    };\n\t    return ErrorObservable;\n\t}(Observable_1.Observable));\n\texports.ErrorObservable = ErrorObservable;\n\n\n/***/ },\n/* 109 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timer_1 = __webpack_require__(110);\n\tObservable_1.Observable.timer = timer_1.timer;\n\n\n/***/ },\n/* 110 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar TimerObservable_1 = __webpack_require__(111);\n\texports.timer = TimerObservable_1.TimerObservable.create;\n\n\n/***/ },\n/* 111 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isNumeric_1 = __webpack_require__(81);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar async_1 = __webpack_require__(82);\n\tvar isScheduler_1 = __webpack_require__(35);\n\tvar isDate_1 = __webpack_require__(112);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar TimerObservable = (function (_super) {\n\t    __extends(TimerObservable, _super);\n\t    function TimerObservable(dueTime, period, scheduler) {\n\t        if (dueTime === void 0) { dueTime = 0; }\n\t        _super.call(this);\n\t        this.period = -1;\n\t        this.dueTime = 0;\n\t        if (isNumeric_1.isNumeric(period)) {\n\t            this.period = Number(period) < 1 && 1 || Number(period);\n\t        }\n\t        else if (isScheduler_1.isScheduler(period)) {\n\t            scheduler = period;\n\t        }\n\t        if (!isScheduler_1.isScheduler(scheduler)) {\n\t            scheduler = async_1.async;\n\t        }\n\t        this.scheduler = scheduler;\n\t        this.dueTime = isDate_1.isDate(dueTime) ?\n\t            (+dueTime - this.scheduler.now()) :\n\t            dueTime;\n\t    }\n\t    /**\n\t     * Creates an Observable that starts emitting after an `initialDelay` and\n\t     * emits ever increasing numbers after each `period` of time thereafter.\n\t     *\n\t     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n\t     * should the emissions start.</span>\n\t     *\n\t     * <img src=\"./img/timer.png\" width=\"100%\">\n\t     *\n\t     * `timer` returns an Observable that emits an infinite sequence of ascending\n\t     * integers, with a constant interval of time, `period` of your choosing\n\t     * between those emissions. The first emission happens after the specified\n\t     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n\t     * operator uses the `async` Scheduler to provide a notion of time, but you\n\t     * may pass any Scheduler to it. If `period` is not specified, the output\n\t     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n\t     * sequence.\n\t     *\n\t     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n\t     * var numbers = Rx.Observable.timer(3000, 1000);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @example <caption>Emits one number after five seconds</caption>\n\t     * var numbers = Rx.Observable.timer(5000);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link interval}\n\t     * @see {@link delay}\n\t     *\n\t     * @param {number|Date} initialDelay The initial delay time to wait before\n\t     * emitting the first value of `0`.\n\t     * @param {number} [period] The period of time between emissions of the\n\t     * subsequent numbers.\n\t     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n\t     * the emission of values, and providing a notion of \"time\".\n\t     * @return {Observable} An Observable that emits a `0` after the\n\t     * `initialDelay` and ever increasing numbers after each `period` of time\n\t     * thereafter.\n\t     * @static true\n\t     * @name timer\n\t     * @owner Observable\n\t     */\n\t    TimerObservable.create = function (initialDelay, period, scheduler) {\n\t        if (initialDelay === void 0) { initialDelay = 0; }\n\t        return new TimerObservable(initialDelay, period, scheduler);\n\t    };\n\t    TimerObservable.dispatch = function (state) {\n\t        var index = state.index, period = state.period, subscriber = state.subscriber;\n\t        var action = this;\n\t        subscriber.next(index);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        else if (period === -1) {\n\t            return subscriber.complete();\n\t        }\n\t        state.index = index + 1;\n\t        action.schedule(state, period);\n\t    };\n\t    TimerObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n\t        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n\t            index: index, period: period, subscriber: subscriber\n\t        });\n\t    };\n\t    return TimerObservable;\n\t}(Observable_1.Observable));\n\texports.TimerObservable = TimerObservable;\n\n\n/***/ },\n/* 112 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isDate(value) {\n\t    return value instanceof Date && !isNaN(+value);\n\t}\n\texports.isDate = isDate;\n\n\n/***/ },\n/* 113 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar zip_1 = __webpack_require__(114);\n\tObservable_1.Observable.zip = zip_1.zip;\n\n\n/***/ },\n/* 114 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar zip_1 = __webpack_require__(115);\n\texports.zip = zip_1.zipStatic;\n\n\n/***/ },\n/* 115 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar iterator_1 = __webpack_require__(43);\n\t/**\n\t * @param observables\n\t * @return {Observable<R>}\n\t * @method zip\n\t * @owner Observable\n\t */\n\tfunction zipProto() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    observables.unshift(this);\n\t    return zipStatic.apply(this, observables);\n\t}\n\texports.zipProto = zipProto;\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * @param observables\n\t * @return {Observable<R>}\n\t * @static true\n\t * @name zip\n\t * @owner Observable\n\t */\n\tfunction zipStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var project = observables[observables.length - 1];\n\t    if (typeof project === 'function') {\n\t        observables.pop();\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));\n\t}\n\texports.zipStatic = zipStatic;\n\tvar ZipOperator = (function () {\n\t    function ZipOperator(project) {\n\t        this.project = project;\n\t    }\n\t    ZipOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ZipSubscriber(subscriber, this.project));\n\t    };\n\t    return ZipOperator;\n\t}());\n\texports.ZipOperator = ZipOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ZipSubscriber = (function (_super) {\n\t    __extends(ZipSubscriber, _super);\n\t    function ZipSubscriber(destination, project, values) {\n\t        if (values === void 0) { values = Object.create(null); }\n\t        _super.call(this, destination);\n\t        this.index = 0;\n\t        this.iterators = [];\n\t        this.active = 0;\n\t        this.project = (typeof project === 'function') ? project : null;\n\t        this.values = values;\n\t    }\n\t    ZipSubscriber.prototype._next = function (value) {\n\t        var iterators = this.iterators;\n\t        var index = this.index++;\n\t        if (isArray_1.isArray(value)) {\n\t            iterators.push(new StaticArrayIterator(value));\n\t        }\n\t        else if (typeof value[iterator_1.$$iterator] === 'function') {\n\t            iterators.push(new StaticIterator(value[iterator_1.$$iterator]()));\n\t        }\n\t        else {\n\t            iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n\t        }\n\t    };\n\t    ZipSubscriber.prototype._complete = function () {\n\t        var iterators = this.iterators;\n\t        var len = iterators.length;\n\t        this.active = len;\n\t        for (var i = 0; i < len; i++) {\n\t            var iterator = iterators[i];\n\t            if (iterator.stillUnsubscribed) {\n\t                this.add(iterator.subscribe(iterator, i));\n\t            }\n\t            else {\n\t                this.active--; // not an observable\n\t            }\n\t        }\n\t    };\n\t    ZipSubscriber.prototype.notifyInactive = function () {\n\t        this.active--;\n\t        if (this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ZipSubscriber.prototype.checkIterators = function () {\n\t        var iterators = this.iterators;\n\t        var len = iterators.length;\n\t        var destination = this.destination;\n\t        // abort if not all of them have values\n\t        for (var i = 0; i < len; i++) {\n\t            var iterator = iterators[i];\n\t            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n\t                return;\n\t            }\n\t        }\n\t        var shouldComplete = false;\n\t        var args = [];\n\t        for (var i = 0; i < len; i++) {\n\t            var iterator = iterators[i];\n\t            var result = iterator.next();\n\t            // check to see if it's completed now that you've gotten\n\t            // the next value.\n\t            if (iterator.hasCompleted()) {\n\t                shouldComplete = true;\n\t            }\n\t            if (result.done) {\n\t                destination.complete();\n\t                return;\n\t            }\n\t            args.push(result.value);\n\t        }\n\t        if (this.project) {\n\t            this._tryProject(args);\n\t        }\n\t        else {\n\t            destination.next(args);\n\t        }\n\t        if (shouldComplete) {\n\t            destination.complete();\n\t        }\n\t    };\n\t    ZipSubscriber.prototype._tryProject = function (args) {\n\t        var result;\n\t        try {\n\t            result = this.project.apply(this, args);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return ZipSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.ZipSubscriber = ZipSubscriber;\n\tvar StaticIterator = (function () {\n\t    function StaticIterator(iterator) {\n\t        this.iterator = iterator;\n\t        this.nextResult = iterator.next();\n\t    }\n\t    StaticIterator.prototype.hasValue = function () {\n\t        return true;\n\t    };\n\t    StaticIterator.prototype.next = function () {\n\t        var result = this.nextResult;\n\t        this.nextResult = this.iterator.next();\n\t        return result;\n\t    };\n\t    StaticIterator.prototype.hasCompleted = function () {\n\t        var nextResult = this.nextResult;\n\t        return nextResult && nextResult.done;\n\t    };\n\t    return StaticIterator;\n\t}());\n\tvar StaticArrayIterator = (function () {\n\t    function StaticArrayIterator(array) {\n\t        this.array = array;\n\t        this.index = 0;\n\t        this.length = 0;\n\t        this.length = array.length;\n\t    }\n\t    StaticArrayIterator.prototype[iterator_1.$$iterator] = function () {\n\t        return this;\n\t    };\n\t    StaticArrayIterator.prototype.next = function (value) {\n\t        var i = this.index++;\n\t        var array = this.array;\n\t        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n\t    };\n\t    StaticArrayIterator.prototype.hasValue = function () {\n\t        return this.array.length > this.index;\n\t    };\n\t    StaticArrayIterator.prototype.hasCompleted = function () {\n\t        return this.array.length === this.index;\n\t    };\n\t    return StaticArrayIterator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ZipBufferIterator = (function (_super) {\n\t    __extends(ZipBufferIterator, _super);\n\t    function ZipBufferIterator(destination, parent, observable, index) {\n\t        _super.call(this, destination);\n\t        this.parent = parent;\n\t        this.observable = observable;\n\t        this.index = index;\n\t        this.stillUnsubscribed = true;\n\t        this.buffer = [];\n\t        this.isComplete = false;\n\t    }\n\t    ZipBufferIterator.prototype[iterator_1.$$iterator] = function () {\n\t        return this;\n\t    };\n\t    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n\t    //    this is legit because `next()` will never be called by a subscription in this case.\n\t    ZipBufferIterator.prototype.next = function () {\n\t        var buffer = this.buffer;\n\t        if (buffer.length === 0 && this.isComplete) {\n\t            return { value: null, done: true };\n\t        }\n\t        else {\n\t            return { value: buffer.shift(), done: false };\n\t        }\n\t    };\n\t    ZipBufferIterator.prototype.hasValue = function () {\n\t        return this.buffer.length > 0;\n\t    };\n\t    ZipBufferIterator.prototype.hasCompleted = function () {\n\t        return this.buffer.length === 0 && this.isComplete;\n\t    };\n\t    ZipBufferIterator.prototype.notifyComplete = function () {\n\t        if (this.buffer.length > 0) {\n\t            this.isComplete = true;\n\t            this.parent.notifyInactive();\n\t        }\n\t        else {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.buffer.push(innerValue);\n\t        this.parent.checkIterators();\n\t    };\n\t    ZipBufferIterator.prototype.subscribe = function (value, index) {\n\t        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);\n\t    };\n\t    return ZipBufferIterator;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 116 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ajax_1 = __webpack_require__(117);\n\tObservable_1.Observable.ajax = ajax_1.ajax;\n\n\n/***/ },\n/* 117 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AjaxObservable_1 = __webpack_require__(118);\n\texports.ajax = AjaxObservable_1.AjaxObservable.create;\n\n\n/***/ },\n/* 118 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tfunction getCORSRequest() {\n\t    if (root_1.root.XMLHttpRequest) {\n\t        var xhr = new root_1.root.XMLHttpRequest();\n\t        if ('withCredentials' in xhr) {\n\t            xhr.withCredentials = !!this.withCredentials;\n\t        }\n\t        return xhr;\n\t    }\n\t    else if (!!root_1.root.XDomainRequest) {\n\t        return new root_1.root.XDomainRequest();\n\t    }\n\t    else {\n\t        throw new Error('CORS is not supported by your browser');\n\t    }\n\t}\n\tfunction getXMLHttpRequest() {\n\t    if (root_1.root.XMLHttpRequest) {\n\t        return new root_1.root.XMLHttpRequest();\n\t    }\n\t    else {\n\t        var progId = void 0;\n\t        try {\n\t            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n\t            for (var i = 0; i < 3; i++) {\n\t                try {\n\t                    progId = progIds[i];\n\t                    if (new root_1.root.ActiveXObject(progId)) {\n\t                        break;\n\t                    }\n\t                }\n\t                catch (e) {\n\t                }\n\t            }\n\t            return new root_1.root.ActiveXObject(progId);\n\t        }\n\t        catch (e) {\n\t            throw new Error('XMLHttpRequest is not supported by your browser');\n\t        }\n\t    }\n\t}\n\tfunction defaultGetResultSelector(response) {\n\t    return response.response;\n\t}\n\tfunction ajaxGet(url, resultSelector, headers) {\n\t    if (resultSelector === void 0) { resultSelector = defaultGetResultSelector; }\n\t    if (headers === void 0) { headers = null; }\n\t    return new AjaxObservable({ method: 'GET', url: url, resultSelector: resultSelector, headers: headers });\n\t}\n\texports.ajaxGet = ajaxGet;\n\t;\n\tfunction ajaxPost(url, body, headers) {\n\t    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n\t}\n\texports.ajaxPost = ajaxPost;\n\t;\n\tfunction ajaxDelete(url, headers) {\n\t    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n\t}\n\texports.ajaxDelete = ajaxDelete;\n\t;\n\tfunction ajaxPut(url, body, headers) {\n\t    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n\t}\n\texports.ajaxPut = ajaxPut;\n\t;\n\tfunction ajaxGetJSON(url, resultSelector, headers) {\n\t    var finalResultSelector = resultSelector ? function (res) { return resultSelector(res.response); } : function (res) { return res.response; };\n\t    return new AjaxObservable({ method: 'GET', url: url, responseType: 'json', resultSelector: finalResultSelector, headers: headers });\n\t}\n\texports.ajaxGetJSON = ajaxGetJSON;\n\t;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar AjaxObservable = (function (_super) {\n\t    __extends(AjaxObservable, _super);\n\t    function AjaxObservable(urlOrRequest) {\n\t        _super.call(this);\n\t        var request = {\n\t            async: true,\n\t            createXHR: function () {\n\t                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n\t            },\n\t            crossDomain: false,\n\t            withCredentials: false,\n\t            headers: {},\n\t            method: 'GET',\n\t            responseType: 'json',\n\t            timeout: 0\n\t        };\n\t        if (typeof urlOrRequest === 'string') {\n\t            request.url = urlOrRequest;\n\t        }\n\t        else {\n\t            for (var prop in urlOrRequest) {\n\t                if (urlOrRequest.hasOwnProperty(prop)) {\n\t                    request[prop] = urlOrRequest[prop];\n\t                }\n\t            }\n\t        }\n\t        this.request = request;\n\t    }\n\t    AjaxObservable.prototype._subscribe = function (subscriber) {\n\t        return new AjaxSubscriber(subscriber, this.request);\n\t    };\n\t    /**\n\t     * Creates an observable for an Ajax request with either a request object with\n\t     * url, headers, etc or a string for a URL.\n\t     *\n\t     * @example\n\t     * source = Rx.Observable.ajax('/products');\n\t     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n\t     *\n\t     * @param {string|Object} request Can be one of the following:\n\t     *   A string of the URL to make the Ajax call.\n\t     *   An object with the following properties\n\t     *   - url: URL of the request\n\t     *   - body: The body of the request\n\t     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n\t     *   - async: Whether the request is async\n\t     *   - headers: Optional headers\n\t     *   - crossDomain: true if a cross domain request, else false\n\t     *   - createXHR: a function to override if you need to use an alternate\n\t     *   XMLHttpRequest implementation.\n\t     *   - resultSelector: a function to use to alter the output value type of\n\t     *   the Observable. Gets {@link AjaxResponse} as an argument.\n\t     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n\t     * @static true\n\t     * @name ajax\n\t     * @owner Observable\n\t    */\n\t    AjaxObservable.create = (function () {\n\t        var create = function (urlOrRequest) {\n\t            return new AjaxObservable(urlOrRequest);\n\t        };\n\t        create.get = ajaxGet;\n\t        create.post = ajaxPost;\n\t        create.delete = ajaxDelete;\n\t        create.put = ajaxPut;\n\t        create.getJSON = ajaxGetJSON;\n\t        return create;\n\t    })();\n\t    return AjaxObservable;\n\t}(Observable_1.Observable));\n\texports.AjaxObservable = AjaxObservable;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AjaxSubscriber = (function (_super) {\n\t    __extends(AjaxSubscriber, _super);\n\t    function AjaxSubscriber(destination, request) {\n\t        _super.call(this, destination);\n\t        this.request = request;\n\t        this.done = false;\n\t        var headers = request.headers = request.headers || {};\n\t        // force CORS if requested\n\t        if (!request.crossDomain && !headers['X-Requested-With']) {\n\t            headers['X-Requested-With'] = 'XMLHttpRequest';\n\t        }\n\t        // ensure content type is set\n\t        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData)) {\n\t            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n\t        }\n\t        // properly serialize body\n\t        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\t        this.resultSelector = request.resultSelector;\n\t        this.send();\n\t    }\n\t    AjaxSubscriber.prototype.next = function (e) {\n\t        this.done = true;\n\t        var _a = this, resultSelector = _a.resultSelector, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n\t        var response = new AjaxResponse(e, xhr, request);\n\t        if (resultSelector) {\n\t            var result = tryCatch_1.tryCatch(resultSelector)(response);\n\t            if (result === errorObject_1.errorObject) {\n\t                this.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                destination.next(result);\n\t            }\n\t        }\n\t        else {\n\t            destination.next(response);\n\t        }\n\t    };\n\t    AjaxSubscriber.prototype.send = function () {\n\t        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n\t        var createXHR = request.createXHR;\n\t        var xhr = tryCatch_1.tryCatch(createXHR).call(request);\n\t        if (xhr === errorObject_1.errorObject) {\n\t            this.error(errorObject_1.errorObject.e);\n\t        }\n\t        else {\n\t            this.xhr = xhr;\n\t            // open XHR first\n\t            var result = void 0;\n\t            if (user) {\n\t                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n\t            }\n\t            else {\n\t                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);\n\t            }\n\t            if (result === errorObject_1.errorObject) {\n\t                this.error(errorObject_1.errorObject.e);\n\t                return;\n\t            }\n\t            // timeout and responseType can be set once the XHR is open\n\t            xhr.timeout = request.timeout;\n\t            xhr.responseType = request.responseType;\n\t            // set headers\n\t            this.setHeaders(xhr, headers);\n\t            // now set up the events\n\t            this.setupEvents(xhr, request);\n\t            // finally send the request\n\t            if (body) {\n\t                xhr.send(body);\n\t            }\n\t            else {\n\t                xhr.send();\n\t            }\n\t        }\n\t    };\n\t    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n\t        if (!body || typeof body === 'string') {\n\t            return body;\n\t        }\n\t        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {\n\t            return body;\n\t        }\n\t        if (contentType) {\n\t            var splitIndex = contentType.indexOf(';');\n\t            if (splitIndex !== -1) {\n\t                contentType = contentType.substring(0, splitIndex);\n\t            }\n\t        }\n\t        switch (contentType) {\n\t            case 'application/x-www-form-urlencoded':\n\t                return Object.keys(body).map(function (key) { return (encodeURI(key) + \"=\" + encodeURI(body[key])); }).join('&');\n\t            case 'application/json':\n\t                return JSON.stringify(body);\n\t            default:\n\t                return body;\n\t        }\n\t    };\n\t    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n\t        for (var key in headers) {\n\t            if (headers.hasOwnProperty(key)) {\n\t                xhr.setRequestHeader(key, headers[key]);\n\t            }\n\t        }\n\t    };\n\t    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n\t        var progressSubscriber = request.progressSubscriber;\n\t        xhr.ontimeout = function xhrTimeout(e) {\n\t            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n\t            if (progressSubscriber) {\n\t                progressSubscriber.error(e);\n\t            }\n\t            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n\t        };\n\t        xhr.ontimeout.request = request;\n\t        xhr.ontimeout.subscriber = this;\n\t        xhr.ontimeout.progressSubscriber = progressSubscriber;\n\t        if (xhr.upload && 'withCredentials' in xhr && root_1.root.XDomainRequest) {\n\t            if (progressSubscriber) {\n\t                xhr.onprogress = function xhrProgress(e) {\n\t                    var progressSubscriber = xhrProgress.progressSubscriber;\n\t                    progressSubscriber.next(e);\n\t                };\n\t                xhr.onprogress.progressSubscriber = progressSubscriber;\n\t            }\n\t            xhr.onerror = function xhrError(e) {\n\t                var _a = xhrError, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n\t                if (progressSubscriber) {\n\t                    progressSubscriber.error(e);\n\t                }\n\t                subscriber.error(new AjaxError('ajax error', this, request));\n\t            };\n\t            xhr.onerror.request = request;\n\t            xhr.onerror.subscriber = this;\n\t            xhr.onerror.progressSubscriber = progressSubscriber;\n\t        }\n\t        xhr.onreadystatechange = function xhrReadyStateChange(e) {\n\t            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n\t            if (this.readyState === 4) {\n\t                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n\t                var status_1 = this.status === 1223 ? 204 : this.status;\n\t                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n\t                // fix status code when it is 0 (0 status is undocumented).\n\t                // Occurs when accessing file resources or on Android 4.1 stock browser\n\t                // while retrieving files from application cache.\n\t                if (status_1 === 0) {\n\t                    status_1 = response ? 200 : 0;\n\t                }\n\t                if (200 <= status_1 && status_1 < 300) {\n\t                    if (progressSubscriber) {\n\t                        progressSubscriber.complete();\n\t                    }\n\t                    subscriber.next(e);\n\t                    subscriber.complete();\n\t                }\n\t                else {\n\t                    if (progressSubscriber) {\n\t                        progressSubscriber.error(e);\n\t                    }\n\t                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n\t                }\n\t            }\n\t        };\n\t        xhr.onreadystatechange.subscriber = this;\n\t        xhr.onreadystatechange.progressSubscriber = progressSubscriber;\n\t        xhr.onreadystatechange.request = request;\n\t    };\n\t    AjaxSubscriber.prototype.unsubscribe = function () {\n\t        var _a = this, done = _a.done, xhr = _a.xhr;\n\t        if (!done && xhr && xhr.readyState !== 4) {\n\t            xhr.abort();\n\t        }\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    return AjaxSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.AjaxSubscriber = AjaxSubscriber;\n\t/**\n\t * A normalized AJAX response.\n\t *\n\t * @see {@link ajax}\n\t *\n\t * @class AjaxResponse\n\t */\n\tvar AjaxResponse = (function () {\n\t    function AjaxResponse(originalEvent, xhr, request) {\n\t        this.originalEvent = originalEvent;\n\t        this.xhr = xhr;\n\t        this.request = request;\n\t        this.status = xhr.status;\n\t        this.responseType = xhr.responseType || request.responseType;\n\t        switch (this.responseType) {\n\t            case 'json':\n\t                if ('response' in xhr) {\n\t                    //IE does not support json as responseType, parse it internally\n\t                    this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || '');\n\t                }\n\t                else {\n\t                    this.response = JSON.parse(xhr.responseText || '');\n\t                }\n\t                break;\n\t            case 'xml':\n\t                this.response = xhr.responseXML;\n\t                break;\n\t            case 'text':\n\t            default:\n\t                this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n\t                break;\n\t        }\n\t    }\n\t    return AjaxResponse;\n\t}());\n\texports.AjaxResponse = AjaxResponse;\n\t/**\n\t * A normalized AJAX error.\n\t *\n\t * @see {@link ajax}\n\t *\n\t * @class AjaxError\n\t */\n\tvar AjaxError = (function (_super) {\n\t    __extends(AjaxError, _super);\n\t    function AjaxError(message, xhr, request) {\n\t        _super.call(this, message);\n\t        this.message = message;\n\t        this.xhr = xhr;\n\t        this.request = request;\n\t        this.status = xhr.status;\n\t    }\n\t    return AjaxError;\n\t}(Error));\n\texports.AjaxError = AjaxError;\n\t/**\n\t * @see {@link ajax}\n\t *\n\t * @class AjaxTimeoutError\n\t */\n\tvar AjaxTimeoutError = (function (_super) {\n\t    __extends(AjaxTimeoutError, _super);\n\t    function AjaxTimeoutError(xhr, request) {\n\t        _super.call(this, 'ajax timeout', xhr, request);\n\t    }\n\t    return AjaxTimeoutError;\n\t}(AjaxError));\n\texports.AjaxTimeoutError = AjaxTimeoutError;\n\n\n/***/ },\n/* 119 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar webSocket_1 = __webpack_require__(120);\n\tObservable_1.Observable.webSocket = webSocket_1.webSocket;\n\n\n/***/ },\n/* 120 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar WebSocketSubject_1 = __webpack_require__(121);\n\texports.webSocket = WebSocketSubject_1.WebSocketSubject.create;\n\n\n/***/ },\n/* 121 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar root_1 = __webpack_require__(8);\n\tvar ReplaySubject_1 = __webpack_require__(122);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar assign_1 = __webpack_require__(124);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar WebSocketSubject = (function (_super) {\n\t    __extends(WebSocketSubject, _super);\n\t    function WebSocketSubject(urlConfigOrSource, destination) {\n\t        if (urlConfigOrSource instanceof Observable_1.Observable) {\n\t            _super.call(this, destination, urlConfigOrSource);\n\t        }\n\t        else {\n\t            _super.call(this);\n\t            this.WebSocketCtor = root_1.root.WebSocket;\n\t            this._output = new Subject_1.Subject();\n\t            if (typeof urlConfigOrSource === 'string') {\n\t                this.url = urlConfigOrSource;\n\t            }\n\t            else {\n\t                // WARNING: config object could override important members here.\n\t                assign_1.assign(this, urlConfigOrSource);\n\t            }\n\t            if (!this.WebSocketCtor) {\n\t                throw new Error('no WebSocket constructor can be found');\n\t            }\n\t            this.destination = new ReplaySubject_1.ReplaySubject();\n\t        }\n\t    }\n\t    WebSocketSubject.prototype.resultSelector = function (e) {\n\t        return JSON.parse(e.data);\n\t    };\n\t    /**\n\t     * @param urlConfigOrSource\n\t     * @return {WebSocketSubject}\n\t     * @static true\n\t     * @name webSocket\n\t     * @owner Observable\n\t     */\n\t    WebSocketSubject.create = function (urlConfigOrSource) {\n\t        return new WebSocketSubject(urlConfigOrSource);\n\t    };\n\t    WebSocketSubject.prototype.lift = function (operator) {\n\t        var sock = new WebSocketSubject(this, this.destination);\n\t        sock.operator = operator;\n\t        return sock;\n\t    };\n\t    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n\t    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n\t        var self = this;\n\t        return new Observable_1.Observable(function (observer) {\n\t            var result = tryCatch_1.tryCatch(subMsg)();\n\t            if (result === errorObject_1.errorObject) {\n\t                observer.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                self.next(result);\n\t            }\n\t            var subscription = self.subscribe(function (x) {\n\t                var result = tryCatch_1.tryCatch(messageFilter)(x);\n\t                if (result === errorObject_1.errorObject) {\n\t                    observer.error(errorObject_1.errorObject.e);\n\t                }\n\t                else if (result) {\n\t                    observer.next(x);\n\t                }\n\t            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n\t            return function () {\n\t                var result = tryCatch_1.tryCatch(unsubMsg)();\n\t                if (result === errorObject_1.errorObject) {\n\t                    observer.error(errorObject_1.errorObject.e);\n\t                }\n\t                else {\n\t                    self.next(result);\n\t                }\n\t                subscription.unsubscribe();\n\t            };\n\t        });\n\t    };\n\t    WebSocketSubject.prototype._connectSocket = function () {\n\t        var _this = this;\n\t        var WebSocketCtor = this.WebSocketCtor;\n\t        var socket = this.protocol ?\n\t            new WebSocketCtor(this.url, this.protocol) :\n\t            new WebSocketCtor(this.url);\n\t        this.socket = socket;\n\t        var subscription = new Subscription_1.Subscription(function () {\n\t            _this.socket = null;\n\t            if (socket && socket.readyState === 1) {\n\t                socket.close();\n\t            }\n\t        });\n\t        var observer = this._output;\n\t        socket.onopen = function (e) {\n\t            var openObserver = _this.openObserver;\n\t            if (openObserver) {\n\t                openObserver.next(e);\n\t            }\n\t            var queue = _this.destination;\n\t            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n\t                var closingObserver = _this.closingObserver;\n\t                if (closingObserver) {\n\t                    closingObserver.next(undefined);\n\t                }\n\t                if (e && e.code) {\n\t                    socket.close(e.code, e.reason);\n\t                }\n\t                else {\n\t                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n\t                        'and an optional reason: { code: number, reason: string }'));\n\t                }\n\t                _this.destination = new ReplaySubject_1.ReplaySubject();\n\t                _this.socket = null;\n\t            }, function () {\n\t                var closingObserver = _this.closingObserver;\n\t                if (closingObserver) {\n\t                    closingObserver.next(undefined);\n\t                }\n\t                socket.close();\n\t                _this.destination = new ReplaySubject_1.ReplaySubject();\n\t                _this.socket = null;\n\t            });\n\t            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n\t                subscription.add(queue.subscribe(_this.destination));\n\t            }\n\t        };\n\t        socket.onerror = function (e) { return observer.error(e); };\n\t        socket.onclose = function (e) {\n\t            var closeObserver = _this.closeObserver;\n\t            if (closeObserver) {\n\t                closeObserver.next(e);\n\t            }\n\t            if (e.wasClean) {\n\t                observer.complete();\n\t            }\n\t            else {\n\t                observer.error(e);\n\t            }\n\t        };\n\t        socket.onmessage = function (e) {\n\t            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n\t            if (result === errorObject_1.errorObject) {\n\t                observer.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                observer.next(result);\n\t            }\n\t        };\n\t    };\n\t    WebSocketSubject.prototype._subscribe = function (subscriber) {\n\t        var _this = this;\n\t        var source = this.source;\n\t        if (source) {\n\t            return source.subscribe(subscriber);\n\t        }\n\t        if (!this.socket) {\n\t            this._connectSocket();\n\t        }\n\t        var subscription = new Subscription_1.Subscription();\n\t        subscription.add(this._output.subscribe(subscriber));\n\t        subscription.add(function () {\n\t            var socket = _this.socket;\n\t            if (socket && socket.readyState === 1) {\n\t                socket.close();\n\t                _this.socket = null;\n\t            }\n\t        });\n\t        return subscription;\n\t    };\n\t    WebSocketSubject.prototype.unsubscribe = function () {\n\t        var _a = this, source = _a.source, socket = _a.socket;\n\t        if (socket && socket.readyState === 1) {\n\t            socket.close();\n\t            this.socket = null;\n\t        }\n\t        _super.prototype.unsubscribe.call(this);\n\t        if (!source) {\n\t            this.destination = new ReplaySubject_1.ReplaySubject();\n\t        }\n\t    };\n\t    return WebSocketSubject;\n\t}(Subject_1.AnonymousSubject));\n\texports.WebSocketSubject = WebSocketSubject;\n\n\n/***/ },\n/* 122 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar queue_1 = __webpack_require__(123);\n\tvar observeOn_1 = __webpack_require__(63);\n\t/**\n\t * @class ReplaySubject<T>\n\t */\n\tvar ReplaySubject = (function (_super) {\n\t    __extends(ReplaySubject, _super);\n\t    function ReplaySubject(bufferSize, windowTime, scheduler) {\n\t        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n\t        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t        this._events = [];\n\t        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n\t        this._windowTime = windowTime < 1 ? 1 : windowTime;\n\t    }\n\t    ReplaySubject.prototype.next = function (value) {\n\t        var now = this._getNow();\n\t        this._events.push(new ReplayEvent(now, value));\n\t        this._trimBufferThenGetEvents();\n\t        _super.prototype.next.call(this, value);\n\t    };\n\t    ReplaySubject.prototype._subscribe = function (subscriber) {\n\t        var _events = this._trimBufferThenGetEvents();\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n\t        }\n\t        var len = _events.length;\n\t        for (var i = 0; i < len && !subscriber.isUnsubscribed; i++) {\n\t            subscriber.next(_events[i].value);\n\t        }\n\t        return _super.prototype._subscribe.call(this, subscriber);\n\t    };\n\t    ReplaySubject.prototype._getNow = function () {\n\t        return (this.scheduler || queue_1.queue).now();\n\t    };\n\t    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n\t        var now = this._getNow();\n\t        var _bufferSize = this._bufferSize;\n\t        var _windowTime = this._windowTime;\n\t        var _events = this._events;\n\t        var eventsCount = _events.length;\n\t        var spliceCount = 0;\n\t        // Trim events that fall out of the time window.\n\t        // Start at the front of the list. Break early once\n\t        // we encounter an event that falls within the window.\n\t        while (spliceCount < eventsCount) {\n\t            if ((now - _events[spliceCount].time) < _windowTime) {\n\t                break;\n\t            }\n\t            spliceCount++;\n\t        }\n\t        if (eventsCount > _bufferSize) {\n\t            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n\t        }\n\t        if (spliceCount > 0) {\n\t            _events.splice(0, spliceCount);\n\t        }\n\t        return _events;\n\t    };\n\t    return ReplaySubject;\n\t}(Subject_1.Subject));\n\texports.ReplaySubject = ReplaySubject;\n\tvar ReplayEvent = (function () {\n\t    function ReplayEvent(time, value) {\n\t        this.time = time;\n\t        this.value = value;\n\t    }\n\t    return ReplayEvent;\n\t}());\n\n\n/***/ },\n/* 123 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar QueueScheduler_1 = __webpack_require__(85);\n\texports.queue = new QueueScheduler_1.QueueScheduler();\n\n\n/***/ },\n/* 124 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar Object = root_1.root.Object;\n\tif (typeof Object.assign != 'function') {\n\t    (function () {\n\t        Object.assign = function assignPolyfill(target) {\n\t            var sources = [];\n\t            for (var _i = 1; _i < arguments.length; _i++) {\n\t                sources[_i - 1] = arguments[_i];\n\t            }\n\t            if (target === undefined || target === null) {\n\t                throw new TypeError('Cannot convert undefined or null to object');\n\t            }\n\t            var output = Object(target);\n\t            var len = sources.length;\n\t            for (var index = 0; index < len; index++) {\n\t                var source = sources[index];\n\t                if (source !== undefined && source !== null) {\n\t                    for (var key in source) {\n\t                        if (source.hasOwnProperty(key)) {\n\t                            output[key] = source[key];\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return output;\n\t        };\n\t    })();\n\t}\n\texports.assign = Object.assign;\n\n\n/***/ },\n/* 125 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar buffer_1 = __webpack_require__(126);\n\tObservable_1.Observable.prototype.buffer = buffer_1.buffer;\n\n\n/***/ },\n/* 126 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Buffers the source Observable values until `closingNotifier` emits.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array, and emits\n\t * that array only when another Observable emits.</span>\n\t *\n\t * <img src=\"./img/buffer.png\" width=\"100%\">\n\t *\n\t * Buffers the incoming Observable values until the given `closingNotifier`\n\t * Observable emits a value, at which point it emits the buffer on the output\n\t * Observable and starts a new buffer internally, awaiting the next time\n\t * `closingNotifier` emits.\n\t *\n\t * @example <caption>On every click, emit array of most recent interval events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var interval = Rx.Observable.interval(1000);\n\t * var buffered = interval.buffer(clicks);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link bufferCount}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferToggle}\n\t * @see {@link bufferWhen}\n\t * @see {@link window}\n\t *\n\t * @param {Observable<any>} closingNotifier An Observable that signals the\n\t * buffer to be emitted on the output Observable.\n\t * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n\t * values.\n\t * @method buffer\n\t * @owner Observable\n\t */\n\tfunction buffer(closingNotifier) {\n\t    return this.lift(new BufferOperator(closingNotifier));\n\t}\n\texports.buffer = buffer;\n\tvar BufferOperator = (function () {\n\t    function BufferOperator(closingNotifier) {\n\t        this.closingNotifier = closingNotifier;\n\t    }\n\t    BufferOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n\t    };\n\t    return BufferOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferSubscriber = (function (_super) {\n\t    __extends(BufferSubscriber, _super);\n\t    function BufferSubscriber(destination, closingNotifier) {\n\t        _super.call(this, destination);\n\t        this.buffer = [];\n\t        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n\t    }\n\t    BufferSubscriber.prototype._next = function (value) {\n\t        this.buffer.push(value);\n\t    };\n\t    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var buffer = this.buffer;\n\t        this.buffer = [];\n\t        this.destination.next(buffer);\n\t    };\n\t    return BufferSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 127 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferCount_1 = __webpack_require__(128);\n\tObservable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;\n\n\n/***/ },\n/* 128 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Buffers the source Observable values until the size hits the maximum\n\t * `bufferSize` given.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array, and emits\n\t * that array only when its size reaches `bufferSize`.</span>\n\t *\n\t * <img src=\"./img/bufferCount.png\" width=\"100%\">\n\t *\n\t * Buffers a number of values from the source Observable by `bufferSize` then\n\t * emits the buffer and clears it, and starts a new buffer each\n\t * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n\t * `null`, then new buffers are started immediately at the start of the source\n\t * and when each buffer closes and is emitted.\n\t *\n\t * @example <caption>Emit the last two click events as an array</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferCount(2);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>On every click, emit the last two click events as an array</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferCount(2, 1);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferToggle}\n\t * @see {@link bufferWhen}\n\t * @see {@link pairwise}\n\t * @see {@link windowCount}\n\t *\n\t * @param {number} bufferSize The maximum size of the buffer emitted.\n\t * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n\t * For example if `startBufferEvery` is `2`, then a new buffer will be started\n\t * on every other value from the source. A new buffer is started at the\n\t * beginning of the source by default.\n\t * @return {Observable<T[]>} An Observable of arrays of buffered values.\n\t * @method bufferCount\n\t * @owner Observable\n\t */\n\tfunction bufferCount(bufferSize, startBufferEvery) {\n\t    if (startBufferEvery === void 0) { startBufferEvery = null; }\n\t    return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n\t}\n\texports.bufferCount = bufferCount;\n\tvar BufferCountOperator = (function () {\n\t    function BufferCountOperator(bufferSize, startBufferEvery) {\n\t        this.bufferSize = bufferSize;\n\t        this.startBufferEvery = startBufferEvery;\n\t    }\n\t    BufferCountOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n\t    };\n\t    return BufferCountOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferCountSubscriber = (function (_super) {\n\t    __extends(BufferCountSubscriber, _super);\n\t    function BufferCountSubscriber(destination, bufferSize, startBufferEvery) {\n\t        _super.call(this, destination);\n\t        this.bufferSize = bufferSize;\n\t        this.startBufferEvery = startBufferEvery;\n\t        this.buffers = [[]];\n\t        this.count = 0;\n\t    }\n\t    BufferCountSubscriber.prototype._next = function (value) {\n\t        var count = (this.count += 1);\n\t        var destination = this.destination;\n\t        var bufferSize = this.bufferSize;\n\t        var startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n\t        var buffers = this.buffers;\n\t        var len = buffers.length;\n\t        var remove = -1;\n\t        if (count % startBufferEvery === 0) {\n\t            buffers.push([]);\n\t        }\n\t        for (var i = 0; i < len; i++) {\n\t            var buffer = buffers[i];\n\t            buffer.push(value);\n\t            if (buffer.length === bufferSize) {\n\t                remove = i;\n\t                destination.next(buffer);\n\t            }\n\t        }\n\t        if (remove !== -1) {\n\t            buffers.splice(remove, 1);\n\t        }\n\t    };\n\t    BufferCountSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        var buffers = this.buffers;\n\t        while (buffers.length > 0) {\n\t            var buffer = buffers.shift();\n\t            if (buffer.length > 0) {\n\t                destination.next(buffer);\n\t            }\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    return BufferCountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 129 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferTime_1 = __webpack_require__(130);\n\tObservable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;\n\n\n/***/ },\n/* 130 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\tvar isScheduler_1 = __webpack_require__(35);\n\t/**\n\t * Buffers the source Observable values for a specific time period.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array, and emits\n\t * those arrays periodically in time.</span>\n\t *\n\t * <img src=\"./img/bufferTime.png\" width=\"100%\">\n\t *\n\t * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n\t * Unless the optional argument `bufferCreationInterval` is given, it emits and\n\t * resets the buffer every `bufferTimeSpan` milliseconds. If\n\t * `bufferCreationInterval` is given, this operator opens the buffer every\n\t * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n\t * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n\t * `maxBufferSize` is specified, the buffer will be closed either after\n\t * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n\t *\n\t * @example <caption>Every second, emit an array of the recent click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferTime(1000);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferTime(2000, 5000);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t * @see {@link bufferToggle}\n\t * @see {@link bufferWhen}\n\t * @see {@link windowTime}\n\t *\n\t * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n\t * @param {number} [bufferCreationInterval] The interval at which to start new\n\t * buffers.\n\t * @param {number} [maxBufferSize] The maximum buffer size.\n\t * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n\t * intervals that determine buffer boundaries.\n\t * @return {Observable<T[]>} An observable of arrays of buffered values.\n\t * @method bufferTime\n\t * @owner Observable\n\t */\n\tfunction bufferTime(bufferTimeSpan) {\n\t    var length = arguments.length;\n\t    var scheduler = async_1.async;\n\t    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n\t        scheduler = arguments[arguments.length - 1];\n\t        length--;\n\t    }\n\t    var bufferCreationInterval = null;\n\t    if (length >= 2) {\n\t        bufferCreationInterval = arguments[1];\n\t    }\n\t    var maxBufferSize = Number.POSITIVE_INFINITY;\n\t    if (length >= 3) {\n\t        maxBufferSize = arguments[2];\n\t    }\n\t    return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n\t}\n\texports.bufferTime = bufferTime;\n\tvar BufferTimeOperator = (function () {\n\t    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n\t        this.bufferTimeSpan = bufferTimeSpan;\n\t        this.bufferCreationInterval = bufferCreationInterval;\n\t        this.maxBufferSize = maxBufferSize;\n\t        this.scheduler = scheduler;\n\t    }\n\t    BufferTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n\t    };\n\t    return BufferTimeOperator;\n\t}());\n\tvar Context = (function () {\n\t    function Context() {\n\t        this.buffer = [];\n\t    }\n\t    return Context;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferTimeSubscriber = (function (_super) {\n\t    __extends(BufferTimeSubscriber, _super);\n\t    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n\t        _super.call(this, destination);\n\t        this.bufferTimeSpan = bufferTimeSpan;\n\t        this.bufferCreationInterval = bufferCreationInterval;\n\t        this.maxBufferSize = maxBufferSize;\n\t        this.scheduler = scheduler;\n\t        this.contexts = [];\n\t        var context = this.openContext();\n\t        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n\t        if (this.timespanOnly) {\n\t            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n\t            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n\t        }\n\t        else {\n\t            var closeState = { subscriber: this, context: context };\n\t            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };\n\t            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n\t            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n\t        }\n\t    }\n\t    BufferTimeSubscriber.prototype._next = function (value) {\n\t        var contexts = this.contexts;\n\t        var len = contexts.length;\n\t        var filledBufferContext;\n\t        for (var i = 0; i < len; i++) {\n\t            var context = contexts[i];\n\t            var buffer = context.buffer;\n\t            buffer.push(value);\n\t            if (buffer.length == this.maxBufferSize) {\n\t                filledBufferContext = context;\n\t            }\n\t        }\n\t        if (filledBufferContext) {\n\t            this.onBufferFull(filledBufferContext);\n\t        }\n\t    };\n\t    BufferTimeSubscriber.prototype._error = function (err) {\n\t        this.contexts.length = 0;\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    BufferTimeSubscriber.prototype._complete = function () {\n\t        var _a = this, contexts = _a.contexts, destination = _a.destination;\n\t        while (contexts.length > 0) {\n\t            var context = contexts.shift();\n\t            destination.next(context.buffer);\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    BufferTimeSubscriber.prototype._unsubscribe = function () {\n\t        this.contexts = null;\n\t    };\n\t    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n\t        this.closeContext(context);\n\t        var closeAction = context.closeAction;\n\t        closeAction.unsubscribe();\n\t        this.remove(closeAction);\n\t        if (this.timespanOnly) {\n\t            context = this.openContext();\n\t            var bufferTimeSpan = this.bufferTimeSpan;\n\t            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n\t            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n\t        }\n\t    };\n\t    BufferTimeSubscriber.prototype.openContext = function () {\n\t        var context = new Context();\n\t        this.contexts.push(context);\n\t        return context;\n\t    };\n\t    BufferTimeSubscriber.prototype.closeContext = function (context) {\n\t        this.destination.next(context.buffer);\n\t        var contexts = this.contexts;\n\t        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n\t        if (spliceIndex >= 0) {\n\t            contexts.splice(contexts.indexOf(context), 1);\n\t        }\n\t    };\n\t    return BufferTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchBufferTimeSpanOnly(state) {\n\t    var subscriber = state.subscriber;\n\t    var prevContext = state.context;\n\t    if (prevContext) {\n\t        subscriber.closeContext(prevContext);\n\t    }\n\t    if (!subscriber.isUnsubscribed) {\n\t        state.context = subscriber.openContext();\n\t        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n\t    }\n\t}\n\tfunction dispatchBufferCreation(state) {\n\t    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n\t    var context = subscriber.openContext();\n\t    var action = this;\n\t    if (!subscriber.isUnsubscribed) {\n\t        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n\t        action.schedule(state, bufferCreationInterval);\n\t    }\n\t}\n\tfunction dispatchBufferClose(arg) {\n\t    var subscriber = arg.subscriber, context = arg.context;\n\t    subscriber.closeContext(context);\n\t}\n\n\n/***/ },\n/* 131 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferToggle_1 = __webpack_require__(132);\n\tObservable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;\n\n\n/***/ },\n/* 132 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * Buffers the source Observable values starting from an emission from\n\t * `openings` and ending when the output of `closingSelector` emits.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array. Starts\n\t * collecting only when `opening` emits, and calls the `closingSelector`\n\t * function to get an Observable that tells when to close the buffer.</span>\n\t *\n\t * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n\t *\n\t * Buffers values from the source by opening the buffer via signals from an\n\t * Observable provided to `openings`, and closing and sending the buffers when\n\t * a Subscribable or Promise returned by the `closingSelector` function emits.\n\t *\n\t * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var openings = Rx.Observable.interval(1000);\n\t * var buffered = clicks.bufferToggle(openings, i =>\n\t *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n\t * );\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferWhen}\n\t * @see {@link windowToggle}\n\t *\n\t * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n\t * buffers.\n\t * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n\t * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n\t * which, when it emits, signals that the associated buffer should be emitted\n\t * and cleared.\n\t * @return {Observable<T[]>} An observable of arrays of buffered values.\n\t * @method bufferToggle\n\t * @owner Observable\n\t */\n\tfunction bufferToggle(openings, closingSelector) {\n\t    return this.lift(new BufferToggleOperator(openings, closingSelector));\n\t}\n\texports.bufferToggle = bufferToggle;\n\tvar BufferToggleOperator = (function () {\n\t    function BufferToggleOperator(openings, closingSelector) {\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    BufferToggleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n\t    };\n\t    return BufferToggleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferToggleSubscriber = (function (_super) {\n\t    __extends(BufferToggleSubscriber, _super);\n\t    function BufferToggleSubscriber(destination, openings, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t        this.contexts = [];\n\t        this.add(subscribeToResult_1.subscribeToResult(this, openings));\n\t    }\n\t    BufferToggleSubscriber.prototype._next = function (value) {\n\t        var contexts = this.contexts;\n\t        var len = contexts.length;\n\t        for (var i = 0; i < len; i++) {\n\t            contexts[i].buffer.push(value);\n\t        }\n\t    };\n\t    BufferToggleSubscriber.prototype._error = function (err) {\n\t        var contexts = this.contexts;\n\t        while (contexts.length > 0) {\n\t            var context = contexts.shift();\n\t            context.subscription.unsubscribe();\n\t            context.buffer = null;\n\t            context.subscription = null;\n\t        }\n\t        this.contexts = null;\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    BufferToggleSubscriber.prototype._complete = function () {\n\t        var contexts = this.contexts;\n\t        while (contexts.length > 0) {\n\t            var context = contexts.shift();\n\t            this.destination.next(context.buffer);\n\t            context.subscription.unsubscribe();\n\t            context.buffer = null;\n\t            context.subscription = null;\n\t        }\n\t        this.contexts = null;\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n\t    };\n\t    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.closeBuffer(innerSub.context);\n\t    };\n\t    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n\t        try {\n\t            var closingSelector = this.closingSelector;\n\t            var closingNotifier = closingSelector.call(this, value);\n\t            if (closingNotifier) {\n\t                this.trySubscribe(closingNotifier);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n\t        var contexts = this.contexts;\n\t        if (contexts && context) {\n\t            var buffer = context.buffer, subscription = context.subscription;\n\t            this.destination.next(buffer);\n\t            contexts.splice(contexts.indexOf(context), 1);\n\t            this.remove(subscription);\n\t            subscription.unsubscribe();\n\t        }\n\t    };\n\t    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n\t        var contexts = this.contexts;\n\t        var buffer = [];\n\t        var subscription = new Subscription_1.Subscription();\n\t        var context = { buffer: buffer, subscription: subscription };\n\t        contexts.push(context);\n\t        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n\t        if (!innerSubscription || innerSubscription.isUnsubscribed) {\n\t            this.closeBuffer(context);\n\t        }\n\t        else {\n\t            innerSubscription.context = context;\n\t            this.add(innerSubscription);\n\t            subscription.add(innerSubscription);\n\t        }\n\t    };\n\t    return BufferToggleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 133 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferWhen_1 = __webpack_require__(134);\n\tObservable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;\n\n\n/***/ },\n/* 134 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Buffers the source Observable values, using a factory function of closing\n\t * Observables to determine when to close, emit, and reset the buffer.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array. When it\n\t * starts collecting values, it calls a function that returns an Observable that\n\t * tells when to close the buffer and restart collecting.</span>\n\t *\n\t * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n\t *\n\t * Opens a buffer immediately, then closes the buffer when the observable\n\t * returned by calling `closingSelector` function emits a value. When it closes\n\t * the buffer, it immediately opens a new buffer and repeats the process.\n\t *\n\t * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferWhen(() =>\n\t *   Rx.Observable.interval(1000 + Math.random() * 4000)\n\t * );\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferToggle}\n\t * @see {@link windowWhen}\n\t *\n\t * @param {function(): Observable} closingSelector A function that takes no\n\t * arguments and returns an Observable that signals buffer closure.\n\t * @return {Observable<T[]>} An observable of arrays of buffered values.\n\t * @method bufferWhen\n\t * @owner Observable\n\t */\n\tfunction bufferWhen(closingSelector) {\n\t    return this.lift(new BufferWhenOperator(closingSelector));\n\t}\n\texports.bufferWhen = bufferWhen;\n\tvar BufferWhenOperator = (function () {\n\t    function BufferWhenOperator(closingSelector) {\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    BufferWhenOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n\t    };\n\t    return BufferWhenOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferWhenSubscriber = (function (_super) {\n\t    __extends(BufferWhenSubscriber, _super);\n\t    function BufferWhenSubscriber(destination, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.closingSelector = closingSelector;\n\t        this.subscribing = false;\n\t        this.openBuffer();\n\t    }\n\t    BufferWhenSubscriber.prototype._next = function (value) {\n\t        this.buffer.push(value);\n\t    };\n\t    BufferWhenSubscriber.prototype._complete = function () {\n\t        var buffer = this.buffer;\n\t        if (buffer) {\n\t            this.destination.next(buffer);\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    BufferWhenSubscriber.prototype._unsubscribe = function () {\n\t        this.buffer = null;\n\t        this.subscribing = false;\n\t    };\n\t    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.openBuffer();\n\t    };\n\t    BufferWhenSubscriber.prototype.notifyComplete = function () {\n\t        if (this.subscribing) {\n\t            this.complete();\n\t        }\n\t        else {\n\t            this.openBuffer();\n\t        }\n\t    };\n\t    BufferWhenSubscriber.prototype.openBuffer = function () {\n\t        var closingSubscription = this.closingSubscription;\n\t        if (closingSubscription) {\n\t            this.remove(closingSubscription);\n\t            closingSubscription.unsubscribe();\n\t        }\n\t        var buffer = this.buffer;\n\t        if (this.buffer) {\n\t            this.destination.next(buffer);\n\t        }\n\t        this.buffer = [];\n\t        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n\t        if (closingNotifier === errorObject_1.errorObject) {\n\t            this.error(errorObject_1.errorObject.e);\n\t        }\n\t        else {\n\t            closingSubscription = new Subscription_1.Subscription();\n\t            this.closingSubscription = closingSubscription;\n\t            this.add(closingSubscription);\n\t            this.subscribing = true;\n\t            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n\t            this.subscribing = false;\n\t        }\n\t    };\n\t    return BufferWhenSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 135 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar cache_1 = __webpack_require__(136);\n\tObservable_1.Observable.prototype.cache = cache_1.cache;\n\n\n/***/ },\n/* 136 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ReplaySubject_1 = __webpack_require__(122);\n\t/**\n\t * @param bufferSize\n\t * @param windowTime\n\t * @param scheduler\n\t * @return {Observable<any>}\n\t * @method cache\n\t * @owner Observable\n\t */\n\tfunction cache(bufferSize, windowTime, scheduler) {\n\t    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n\t    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n\t    var subject;\n\t    var source = this;\n\t    var refs = 0;\n\t    var outerSub;\n\t    var getSubject = function () {\n\t        subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n\t        return subject;\n\t    };\n\t    return new Observable_1.Observable(function (observer) {\n\t        if (!subject) {\n\t            subject = getSubject();\n\t            outerSub = source.subscribe(function (value) { return subject.next(value); }, function (err) {\n\t                var s = subject;\n\t                subject = null;\n\t                s.error(err);\n\t            }, function () { return subject.complete(); });\n\t        }\n\t        refs++;\n\t        if (!subject) {\n\t            subject = getSubject();\n\t        }\n\t        var innerSub = subject.subscribe(observer);\n\t        return function () {\n\t            refs--;\n\t            if (innerSub) {\n\t                innerSub.unsubscribe();\n\t            }\n\t            if (refs === 0) {\n\t                outerSub.unsubscribe();\n\t            }\n\t        };\n\t    });\n\t}\n\texports.cache = cache;\n\n\n/***/ },\n/* 137 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar catch_1 = __webpack_require__(138);\n\tObservable_1.Observable.prototype.catch = catch_1._catch;\n\n\n/***/ },\n/* 138 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n\t * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n\t *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n\t *  is returned by the `selector` will be used to continue the observable chain.\n\t * @return {Observable} an observable that originates from either the source or the observable returned by the\n\t *  catch `selector` function.\n\t * @method catch\n\t * @owner Observable\n\t */\n\tfunction _catch(selector) {\n\t    var operator = new CatchOperator(selector);\n\t    var caught = this.lift(operator);\n\t    return (operator.caught = caught);\n\t}\n\texports._catch = _catch;\n\tvar CatchOperator = (function () {\n\t    function CatchOperator(selector) {\n\t        this.selector = selector;\n\t    }\n\t    CatchOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n\t    };\n\t    return CatchOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar CatchSubscriber = (function (_super) {\n\t    __extends(CatchSubscriber, _super);\n\t    function CatchSubscriber(destination, selector, caught) {\n\t        _super.call(this, destination);\n\t        this.selector = selector;\n\t        this.caught = caught;\n\t    }\n\t    // NOTE: overriding `error` instead of `_error` because we don't want\n\t    // to have this flag this subscriber as `isStopped`.\n\t    CatchSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var result = void 0;\n\t            try {\n\t                result = this.selector(err, this.caught);\n\t            }\n\t            catch (err) {\n\t                this.destination.error(err);\n\t                return;\n\t            }\n\t            this._innerSub(result);\n\t        }\n\t    };\n\t    CatchSubscriber.prototype._innerSub = function (result) {\n\t        this.unsubscribe();\n\t        this.destination.remove(this);\n\t        result.subscribe(this.destination);\n\t    };\n\t    return CatchSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 139 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar combineAll_1 = __webpack_require__(140);\n\tObservable_1.Observable.prototype.combineAll = combineAll_1.combineAll;\n\n\n/***/ },\n/* 140 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar combineLatest_1 = __webpack_require__(39);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by waiting\n\t * for the outer Observable to complete, then applying {@link combineLatest}.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n\t * {@link combineLatest} when the Observable-of-Observables completes.</span>\n\t *\n\t * <img src=\"./img/combineAll.png\" width=\"100%\">\n\t *\n\t * Takes an Observable of Observables, and collects all Observables from it.\n\t * Once the outer Observable completes, it subscribes to all collected\n\t * Observables and combines their values using the {@link combineLatest}\n\t * strategy, such that:\n\t * - Every time an inner Observable emits, the output Observable emits.\n\t * - When the returned observable emits, it emits all of the latest values by:\n\t *   - If a `project` function is provided, it is called with each recent value\n\t *     from each inner Observable in whatever order they arrived, and the result\n\t *     of the `project` function is what is emitted by the output Observable.\n\t *   - If there is no `project` function, an array of all of the most recent\n\t *     values is emitted by the output Observable.\n\t *\n\t * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map(ev =>\n\t *   Rx.Observable.interval(Math.random()*2000).take(3)\n\t * ).take(2);\n\t * var result = higherOrder.combineAll();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineLatest}\n\t * @see {@link mergeAll}\n\t *\n\t * @param {function} [project] An optional function to map the most recent\n\t * values from each inner Observable into a new result. Takes each of the most\n\t * recent values from each collected inner Observable as arguments, in order.\n\t * @return {Observable} An Observable of projected results or arrays of recent\n\t * values.\n\t * @method combineAll\n\t * @owner Observable\n\t */\n\tfunction combineAll(project) {\n\t    return this.lift(new combineLatest_1.CombineLatestOperator(project));\n\t}\n\texports.combineAll = combineAll;\n\n\n/***/ },\n/* 141 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar combineLatest_1 = __webpack_require__(39);\n\tObservable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;\n\n\n/***/ },\n/* 142 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concat_1 = __webpack_require__(47);\n\tObservable_1.Observable.prototype.concat = concat_1.concat;\n\n\n/***/ },\n/* 143 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concatAll_1 = __webpack_require__(144);\n\tObservable_1.Observable.prototype.concatAll = concatAll_1.concatAll;\n\n\n/***/ },\n/* 144 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar mergeAll_1 = __webpack_require__(48);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by\n\t * concatenating the inner Observables in order.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n\t * inner Observable after the other.</span>\n\t *\n\t * <img src=\"./img/concatAll.png\" width=\"100%\">\n\t *\n\t * Joins every Observable emitted by the source (a higher-order Observable), in\n\t * a serial fashion. It subscribes to each inner Observable only after the\n\t * previous inner Observable has completed, and merges all of their values into\n\t * the returned observable.\n\t *\n\t * __Warning:__ If the source Observable emits Observables quickly and\n\t * endlessly, and the inner Observables it emits generally complete slower than\n\t * the source emits, you can run into memory issues as the incoming Observables\n\t * collect in an unbounded buffer.\n\t *\n\t * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n\t * to `1`.\n\t *\n\t * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n\t * var firstOrder = higherOrder.concatAll();\n\t * firstOrder.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concat}\n\t * @see {@link concatMap}\n\t * @see {@link concatMapTo}\n\t * @see {@link exhaust}\n\t * @see {@link mergeAll}\n\t * @see {@link switch}\n\t * @see {@link zipAll}\n\t *\n\t * @return {Observable} An Observable emitting values from all the inner\n\t * Observables concatenated.\n\t * @method concatAll\n\t * @owner Observable\n\t */\n\tfunction concatAll() {\n\t    return this.lift(new mergeAll_1.MergeAllOperator(1));\n\t}\n\texports.concatAll = concatAll;\n\n\n/***/ },\n/* 145 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concatMap_1 = __webpack_require__(146);\n\tObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n\n\n/***/ },\n/* 146 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar mergeMap_1 = __webpack_require__(147);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable, in a serialized fashion waiting for each one to complete before\n\t * merging the next.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link concatAll}.</span>\n\t *\n\t * <img src=\"./img/concatMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an (so-called \"inner\") Observable. Each new inner Observable is\n\t * concatenated with the previous inner Observable.\n\t *\n\t * __Warning:__ if source values arrive endlessly and faster than their\n\t * corresponding inner Observables can complete, it will result in memory issues\n\t * as inner Observables amass in an unbounded buffer waiting for their turn to\n\t * be subscribed to.\n\t *\n\t * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n\t * to `1`.\n\t *\n\t * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concat}\n\t * @see {@link concatAll}\n\t * @see {@link concatMapTo}\n\t * @see {@link exhaustMap}\n\t * @see {@link mergeMap}\n\t * @see {@link switchMap}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} an observable of values merged from the projected\n\t * Observables as they were subscribed to, one at a time. Optionally, these\n\t * values may have been projected from a passed `projectResult` argument.\n\t * @return {Observable} An Observable that emits the result of applying the\n\t * projection function (and the optional `resultSelector`) to each item emitted\n\t * by the source Observable and taking values from each projected inner\n\t * Observable sequentially.\n\t * @method concatMap\n\t * @owner Observable\n\t */\n\tfunction concatMap(project, resultSelector) {\n\t    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));\n\t}\n\texports.concatMap = concatMap;\n\n\n/***/ },\n/* 147 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link mergeAll}.</span>\n\t *\n\t * <img src=\"./img/mergeMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an Observable, and then merging those resulting Observables and\n\t * emitting the results of this merger.\n\t *\n\t * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n\t * var letters = Rx.Observable.of('a', 'b', 'c');\n\t * var result = letters.mergeMap(x =>\n\t *   Rx.Observable.interval(1000).map(i => x+i)\n\t * );\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMap}\n\t * @see {@link exhaustMap}\n\t * @see {@link merge}\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t * @see {@link switchMap}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @return {Observable} An Observable that emits the result of applying the\n\t * projection function (and the optional `resultSelector`) to each item emitted\n\t * by the source Observable and merging the results of the Observables obtained\n\t * from this transformation.\n\t * @method mergeMap\n\t * @owner Observable\n\t */\n\tfunction mergeMap(project, resultSelector, concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    if (typeof resultSelector === 'number') {\n\t        concurrent = resultSelector;\n\t        resultSelector = null;\n\t    }\n\t    return this.lift(new MergeMapOperator(project, resultSelector, concurrent));\n\t}\n\texports.mergeMap = mergeMap;\n\tvar MergeMapOperator = (function () {\n\t    function MergeMapOperator(project, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeMapOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n\t    };\n\t    return MergeMapOperator;\n\t}());\n\texports.MergeMapOperator = MergeMapOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeMapSubscriber = (function (_super) {\n\t    __extends(MergeMapSubscriber, _super);\n\t    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t        this.index = 0;\n\t    }\n\t    MergeMapSubscriber.prototype._next = function (value) {\n\t        if (this.active < this.concurrent) {\n\t            this._tryNext(value);\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype._tryNext = function (value) {\n\t        var result;\n\t        var index = this.index++;\n\t        try {\n\t            result = this.project(value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.active++;\n\t        this._innerSub(result, value, index);\n\t    };\n\t    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n\t        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n\t    };\n\t    MergeMapSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (this.resultSelector) {\n\t            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            this.destination.next(innerValue);\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeMapSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeMapSubscriber = MergeMapSubscriber;\n\n\n/***/ },\n/* 148 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concatMapTo_1 = __webpack_require__(149);\n\tObservable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;\n\n\n/***/ },\n/* 149 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar mergeMapTo_1 = __webpack_require__(150);\n\t/**\n\t * Projects each source value to the same Observable which is merged multiple\n\t * times in a serialized fashion on the output Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n\t * always to the same inner Observable.</span>\n\t *\n\t * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n\t *\n\t * Maps each source value to the given Observable `innerObservable` regardless\n\t * of the source value, and then flattens those resulting Observables into one\n\t * single Observable, which is the output Observable. Each new `innerObservable`\n\t * instance emitted on the output Observable is concatenated with the previous\n\t * `innerObservable` instance.\n\t *\n\t * __Warning:__ if source values arrive endlessly and faster than their\n\t * corresponding inner Observables can complete, it will result in memory issues\n\t * as inner Observables amass in an unbounded buffer waiting for their turn to\n\t * be subscribed to.\n\t *\n\t * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n\t * set to `1`.\n\t *\n\t * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concat}\n\t * @see {@link concatAll}\n\t * @see {@link concatMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link switchMapTo}\n\t *\n\t * @param {Observable} innerObservable An Observable to replace each value from\n\t * the source Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An observable of values merged together by joining the\n\t * passed observable with itself, one after the other, for each value emitted\n\t * from the source.\n\t * @method concatMapTo\n\t * @owner Observable\n\t */\n\tfunction concatMapTo(innerObservable, resultSelector) {\n\t    return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable, resultSelector, 1));\n\t}\n\texports.concatMapTo = concatMapTo;\n\n\n/***/ },\n/* 150 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Projects each source value to the same Observable which is merged multiple\n\t * times in the output Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n\t * to the same inner Observable.</span>\n\t *\n\t * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n\t *\n\t * Maps each source value to the given Observable `innerObservable` regardless\n\t * of the source value, and then merges those resulting Observables into one\n\t * single Observable, which is the output Observable.\n\t *\n\t * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMapTo}\n\t * @see {@link merge}\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeScan}\n\t * @see {@link switchMapTo}\n\t *\n\t * @param {Observable} innerObservable An Observable to replace each value from\n\t * the source Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @return {Observable} An Observable that emits items from the given\n\t * `innerObservable` (and optionally transformed through `resultSelector`) every\n\t * time a value is emitted on the source Observable.\n\t * @method mergeMapTo\n\t * @owner Observable\n\t */\n\tfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    if (typeof resultSelector === 'number') {\n\t        concurrent = resultSelector;\n\t        resultSelector = null;\n\t    }\n\t    return this.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));\n\t}\n\texports.mergeMapTo = mergeMapTo;\n\t// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n\t//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\n\tvar MergeMapToOperator = (function () {\n\t    function MergeMapToOperator(ish, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        this.ish = ish;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeMapToOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n\t    };\n\t    return MergeMapToOperator;\n\t}());\n\texports.MergeMapToOperator = MergeMapToOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeMapToSubscriber = (function (_super) {\n\t    __extends(MergeMapToSubscriber, _super);\n\t    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        _super.call(this, destination);\n\t        this.ish = ish;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t        this.index = 0;\n\t    }\n\t    MergeMapToSubscriber.prototype._next = function (value) {\n\t        if (this.active < this.concurrent) {\n\t            var resultSelector = this.resultSelector;\n\t            var index = this.index++;\n\t            var ish = this.ish;\n\t            var destination = this.destination;\n\t            this.active++;\n\t            this._innerSub(ish, destination, resultSelector, value, index);\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n\t        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n\t    };\n\t    MergeMapToSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        if (resultSelector) {\n\t            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            destination.next(innerValue);\n\t        }\n\t    };\n\t    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        var result;\n\t        try {\n\t            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t            return;\n\t        }\n\t        destination.next(result);\n\t    };\n\t    MergeMapToSubscriber.prototype.notifyError = function (err) {\n\t        this.destination.error(err);\n\t    };\n\t    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeMapToSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeMapToSubscriber = MergeMapToSubscriber;\n\n\n/***/ },\n/* 151 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar count_1 = __webpack_require__(152);\n\tObservable_1.Observable.prototype.count = count_1.count;\n\n\n/***/ },\n/* 152 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Counts the number of emissions on the source and emits that number when the\n\t * source completes.\n\t *\n\t * <span class=\"informal\">Tells how many values were emitted, when the source\n\t * completes.</span>\n\t *\n\t * <img src=\"./img/count.png\" width=\"100%\">\n\t *\n\t * `count` transforms an Observable that emits values into an Observable that\n\t * emits a single value that represents the number of values emitted by the\n\t * source Observable. If the source Observable terminates with an error, `count`\n\t * will pass this error notification along without emitting an value first. If\n\t * the source Observable does not terminate at all, `count` will neither emit\n\t * a value nor terminate. This operator takes an optional `predicate` function\n\t * as argument, in which case the output emission will represent the number of\n\t * source values that matched `true` with the `predicate`.\n\t *\n\t * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n\t * var seconds = Rx.Observable.interval(1000);\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var secondsBeforeClick = seconds.takeUntil(clicks);\n\t * var result = secondsBeforeClick.count();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n\t * var numbers = Rx.Observable.range(1, 7);\n\t * var result = numbers.count(i => i % 2 === 1);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link max}\n\t * @see {@link min}\n\t * @see {@link reduce}\n\t *\n\t * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n\t * boolean function to select what values are to be counted. It is provided with\n\t * arguments of:\n\t * - `value`: the value from the source Observable.\n\t * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n\t * - `source`: the source Observable instance itself.\n\t * @return {Observable} An Observable of one number that represents the count as\n\t * described above.\n\t * @method count\n\t * @owner Observable\n\t */\n\tfunction count(predicate) {\n\t    return this.lift(new CountOperator(predicate, this));\n\t}\n\texports.count = count;\n\tvar CountOperator = (function () {\n\t    function CountOperator(predicate, source) {\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t    }\n\t    CountOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n\t    };\n\t    return CountOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar CountSubscriber = (function (_super) {\n\t    __extends(CountSubscriber, _super);\n\t    function CountSubscriber(destination, predicate, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.count = 0;\n\t        this.index = 0;\n\t    }\n\t    CountSubscriber.prototype._next = function (value) {\n\t        if (this.predicate) {\n\t            this._tryPredicate(value);\n\t        }\n\t        else {\n\t            this.count++;\n\t        }\n\t    };\n\t    CountSubscriber.prototype._tryPredicate = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, this.index++, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            this.count++;\n\t        }\n\t    };\n\t    CountSubscriber.prototype._complete = function () {\n\t        this.destination.next(this.count);\n\t        this.destination.complete();\n\t    };\n\t    return CountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 153 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar dematerialize_1 = __webpack_require__(154);\n\tObservable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;\n\n\n/***/ },\n/* 154 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Converts an Observable of {@link Notification} objects into the emissions\n\t * that they represent.\n\t *\n\t * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n\t * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n\t *\n\t * <img src=\"./img/dematerialize.png\" width=\"100%\">\n\t *\n\t * `dematerialize` is assumed to operate an Observable that only emits\n\t * {@link Notification} objects as `next` emissions, and does not emit any\n\t * `error`. Such Observable is the output of a `materialize` operation. Those\n\t * notifications are then unwrapped using the metadata they contain, and emitted\n\t * as `next`, `error`, and `complete` on the output Observable.\n\t *\n\t * Use this operator in conjunction with {@link materialize}.\n\t *\n\t * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n\t * var notifA = new Rx.Notification('N', 'A');\n\t * var notifB = new Rx.Notification('N', 'B');\n\t * var notifE = new Rx.Notification('E', void 0,\n\t *   new TypeError('x.toUpperCase is not a function')\n\t * );\n\t * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n\t * var upperCase = materialized.dematerialize();\n\t * upperCase.subscribe(x => console.log(x), e => console.error(e));\n\t *\n\t * @see {@link Notification}\n\t * @see {@link materialize}\n\t *\n\t * @return {Observable} An Observable that emits items and notifications\n\t * embedded in Notification objects emitted by the source Observable.\n\t * @method dematerialize\n\t * @owner Observable\n\t */\n\tfunction dematerialize() {\n\t    return this.lift(new DeMaterializeOperator());\n\t}\n\texports.dematerialize = dematerialize;\n\tvar DeMaterializeOperator = (function () {\n\t    function DeMaterializeOperator() {\n\t    }\n\t    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DeMaterializeSubscriber(subscriber));\n\t    };\n\t    return DeMaterializeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DeMaterializeSubscriber = (function (_super) {\n\t    __extends(DeMaterializeSubscriber, _super);\n\t    function DeMaterializeSubscriber(destination) {\n\t        _super.call(this, destination);\n\t    }\n\t    DeMaterializeSubscriber.prototype._next = function (value) {\n\t        value.observe(this.destination);\n\t    };\n\t    return DeMaterializeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 155 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar debounce_1 = __webpack_require__(156);\n\tObservable_1.Observable.prototype.debounce = debounce_1.debounce;\n\n\n/***/ },\n/* 156 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Emits a value from the source Observable only after a particular time span\n\t * determined by another Observable has passed without another source emission.\n\t *\n\t * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n\t * emission silence is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/debounce.png\" width=\"100%\">\n\t *\n\t * `debounce` delays values emitted by the source Observable, but drops previous\n\t * pending delayed emissions if a new value arrives on the source Observable.\n\t * This operator keeps track of the most recent value from the source\n\t * Observable, and spawns a duration Observable by calling the\n\t * `durationSelector` function. The value is emitted only when the duration\n\t * Observable emits a value or completes, and if no other value was emitted on\n\t * the source Observable since the duration Observable was spawned. If a new\n\t * value appears before the duration Observable emits, the previous value will\n\t * be dropped and will not be emitted on the output Observable.\n\t *\n\t * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n\t * delay-like operator since output emissions do not necessarily occur at the\n\t * same time as they did on the source Observable.\n\t *\n\t * @example <caption>Emit the most recent click after a burst of clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounceTime}\n\t * @see {@link delayWhen}\n\t * @see {@link throttle}\n\t *\n\t * @param {function(value: T): Observable|Promise} durationSelector A function\n\t * that receives a value from the source Observable, for computing the timeout\n\t * duration for each source value, returned as an Observable or a Promise.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by the specified duration Observable returned by\n\t * `durationSelector`, and may drop some values if they occur too frequently.\n\t * @method debounce\n\t * @owner Observable\n\t */\n\tfunction debounce(durationSelector) {\n\t    return this.lift(new DebounceOperator(durationSelector));\n\t}\n\texports.debounce = debounce;\n\tvar DebounceOperator = (function () {\n\t    function DebounceOperator(durationSelector) {\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    DebounceOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n\t    };\n\t    return DebounceOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DebounceSubscriber = (function (_super) {\n\t    __extends(DebounceSubscriber, _super);\n\t    function DebounceSubscriber(destination, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.durationSelector = durationSelector;\n\t        this.hasValue = false;\n\t        this.durationSubscription = null;\n\t    }\n\t    DebounceSubscriber.prototype._next = function (value) {\n\t        try {\n\t            var result = this.durationSelector.call(this, value);\n\t            if (result) {\n\t                this._tryNext(value, result);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    DebounceSubscriber.prototype._complete = function () {\n\t        this.emitValue();\n\t        this.destination.complete();\n\t    };\n\t    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n\t        var subscription = this.durationSubscription;\n\t        this.value = value;\n\t        this.hasValue = true;\n\t        if (subscription) {\n\t            subscription.unsubscribe();\n\t            this.remove(subscription);\n\t        }\n\t        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n\t        if (!subscription.isUnsubscribed) {\n\t            this.add(this.durationSubscription = subscription);\n\t        }\n\t    };\n\t    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.emitValue();\n\t    };\n\t    DebounceSubscriber.prototype.notifyComplete = function () {\n\t        this.emitValue();\n\t    };\n\t    DebounceSubscriber.prototype.emitValue = function () {\n\t        if (this.hasValue) {\n\t            var value = this.value;\n\t            var subscription = this.durationSubscription;\n\t            if (subscription) {\n\t                this.durationSubscription = null;\n\t                subscription.unsubscribe();\n\t                this.remove(subscription);\n\t            }\n\t            this.value = null;\n\t            this.hasValue = false;\n\t            _super.prototype._next.call(this, value);\n\t        }\n\t    };\n\t    return DebounceSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 157 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar debounceTime_1 = __webpack_require__(158);\n\tObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n\n\n/***/ },\n/* 158 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * Emits a value from the source Observable only after a particular time span\n\t * has passed without another source emission.\n\t *\n\t * <span class=\"informal\">It's like {@link delay}, but passes only the most\n\t * recent value from each burst of emissions.</span>\n\t *\n\t * <img src=\"./img/debounceTime.png\" width=\"100%\">\n\t *\n\t * `debounceTime` delays values emitted by the source Observable, but drops\n\t * previous pending delayed emissions if a new value arrives on the source\n\t * Observable. This operator keeps track of the most recent value from the\n\t * source Observable, and emits that only when `dueTime` enough time has passed\n\t * without any other value appearing on the source Observable. If a new value\n\t * appears before `dueTime` silence occurs, the previous value will be dropped\n\t * and will not be emitted on the output Observable.\n\t *\n\t * This is a rate-limiting operator, because it is impossible for more than one\n\t * value to be emitted in any time window of duration `dueTime`, but it is also\n\t * a delay-like operator since output emissions do not occur at the same time as\n\t * they did on the source Observable. Optionally takes a {@link Scheduler} for\n\t * managing timers.\n\t *\n\t * @example <caption>Emit the most recent click after a burst of clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.debounceTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounce}\n\t * @see {@link delay}\n\t * @see {@link sampleTime}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {number} dueTime The timeout duration in milliseconds (or the time\n\t * unit determined internally by the optional `scheduler`) for the window of\n\t * time required to wait for emission silence before emitting the most recent\n\t * source value.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the timeout for each value.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by the specified `dueTime`, and may drop some values if they occur\n\t * too frequently.\n\t * @method debounceTime\n\t * @owner Observable\n\t */\n\tfunction debounceTime(dueTime, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n\t}\n\texports.debounceTime = debounceTime;\n\tvar DebounceTimeOperator = (function () {\n\t    function DebounceTimeOperator(dueTime, scheduler) {\n\t        this.dueTime = dueTime;\n\t        this.scheduler = scheduler;\n\t    }\n\t    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n\t    };\n\t    return DebounceTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DebounceTimeSubscriber = (function (_super) {\n\t    __extends(DebounceTimeSubscriber, _super);\n\t    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n\t        _super.call(this, destination);\n\t        this.dueTime = dueTime;\n\t        this.scheduler = scheduler;\n\t        this.debouncedSubscription = null;\n\t        this.lastValue = null;\n\t        this.hasValue = false;\n\t    }\n\t    DebounceTimeSubscriber.prototype._next = function (value) {\n\t        this.clearDebounce();\n\t        this.lastValue = value;\n\t        this.hasValue = true;\n\t        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n\t    };\n\t    DebounceTimeSubscriber.prototype._complete = function () {\n\t        this.debouncedNext();\n\t        this.destination.complete();\n\t    };\n\t    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n\t        this.clearDebounce();\n\t        if (this.hasValue) {\n\t            this.destination.next(this.lastValue);\n\t            this.lastValue = null;\n\t            this.hasValue = false;\n\t        }\n\t    };\n\t    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n\t        var debouncedSubscription = this.debouncedSubscription;\n\t        if (debouncedSubscription !== null) {\n\t            this.remove(debouncedSubscription);\n\t            debouncedSubscription.unsubscribe();\n\t            this.debouncedSubscription = null;\n\t        }\n\t    };\n\t    return DebounceTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNext(subscriber) {\n\t    subscriber.debouncedNext();\n\t}\n\n\n/***/ },\n/* 159 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar defaultIfEmpty_1 = __webpack_require__(160);\n\tObservable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\n\n\n/***/ },\n/* 160 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits a given value if the source Observable completes without emitting any\n\t * `next` value, otherwise mirrors the source Observable.\n\t *\n\t * <span class=\"informal\">If the source Observable turns out to be empty, then\n\t * this operator will emit a default value.</span>\n\t *\n\t * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n\t *\n\t * `defaultIfEmpty` emits the values emitted by the source Observable or a\n\t * specified default value if the source Observable is empty (completes without\n\t * having emitted any `next` value).\n\t *\n\t * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n\t * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link empty}\n\t * @see {@link last}\n\t *\n\t * @param {any} [defaultValue=null] The default value used if the source\n\t * Observable is empty.\n\t * @return {Observable} An Observable that emits either the specified\n\t * `defaultValue` if the source Observable emits no items, or the values emitted\n\t * by the source Observable.\n\t * @method defaultIfEmpty\n\t * @owner Observable\n\t */\n\tfunction defaultIfEmpty(defaultValue) {\n\t    if (defaultValue === void 0) { defaultValue = null; }\n\t    return this.lift(new DefaultIfEmptyOperator(defaultValue));\n\t}\n\texports.defaultIfEmpty = defaultIfEmpty;\n\tvar DefaultIfEmptyOperator = (function () {\n\t    function DefaultIfEmptyOperator(defaultValue) {\n\t        this.defaultValue = defaultValue;\n\t    }\n\t    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n\t    };\n\t    return DefaultIfEmptyOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DefaultIfEmptySubscriber = (function (_super) {\n\t    __extends(DefaultIfEmptySubscriber, _super);\n\t    function DefaultIfEmptySubscriber(destination, defaultValue) {\n\t        _super.call(this, destination);\n\t        this.defaultValue = defaultValue;\n\t        this.isEmpty = true;\n\t    }\n\t    DefaultIfEmptySubscriber.prototype._next = function (value) {\n\t        this.isEmpty = false;\n\t        this.destination.next(value);\n\t    };\n\t    DefaultIfEmptySubscriber.prototype._complete = function () {\n\t        if (this.isEmpty) {\n\t            this.destination.next(this.defaultValue);\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    return DefaultIfEmptySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 161 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar delay_1 = __webpack_require__(162);\n\tObservable_1.Observable.prototype.delay = delay_1.delay;\n\n\n/***/ },\n/* 162 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(82);\n\tvar isDate_1 = __webpack_require__(112);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Notification_1 = __webpack_require__(64);\n\t/**\n\t * Delays the emission of items from the source Observable by a given timeout or\n\t * until a given Date.\n\t *\n\t * <span class=\"informal\">Time shifts each item by some specified amount of\n\t * milliseconds.</span>\n\t *\n\t * <img src=\"./img/delay.png\" width=\"100%\">\n\t *\n\t * If the delay argument is a Number, this operator time shifts the source\n\t * Observable by that amount of time expressed in milliseconds. The relative\n\t * time intervals between the values are preserved.\n\t *\n\t * If the delay argument is a Date, this operator time shifts the start of the\n\t * Observable execution until the given date occurs.\n\t *\n\t * @example <caption>Delay each click by one second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n\t * delayedClicks.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Delay all clicks until a future date happens</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var date = new Date('March 15, 2050 12:00:00'); // in the future\n\t * var delayedClicks = clicks.delay(date); // click emitted only after that date\n\t * delayedClicks.subscribe(x => console.log(x));\n\t *\n\t * @see {@link debounceTime}\n\t * @see {@link delayWhen}\n\t *\n\t * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n\t * a `Date` until which the emission of the source items is delayed.\n\t * @param {Scheduler} [scheduler=async] The Scheduler to use for\n\t * managing the timers that handle the time-shift for each item.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by the specified timeout or Date.\n\t * @method delay\n\t * @owner Observable\n\t */\n\tfunction delay(delay, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    var absoluteDelay = isDate_1.isDate(delay);\n\t    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n\t    return this.lift(new DelayOperator(delayFor, scheduler));\n\t}\n\texports.delay = delay;\n\tvar DelayOperator = (function () {\n\t    function DelayOperator(delay, scheduler) {\n\t        this.delay = delay;\n\t        this.scheduler = scheduler;\n\t    }\n\t    DelayOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n\t    };\n\t    return DelayOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DelaySubscriber = (function (_super) {\n\t    __extends(DelaySubscriber, _super);\n\t    function DelaySubscriber(destination, delay, scheduler) {\n\t        _super.call(this, destination);\n\t        this.delay = delay;\n\t        this.scheduler = scheduler;\n\t        this.queue = [];\n\t        this.active = false;\n\t        this.errored = false;\n\t    }\n\t    DelaySubscriber.dispatch = function (state) {\n\t        var source = state.source;\n\t        var queue = source.queue;\n\t        var scheduler = state.scheduler;\n\t        var destination = state.destination;\n\t        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n\t            queue.shift().notification.observe(destination);\n\t        }\n\t        if (queue.length > 0) {\n\t            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n\t            this.schedule(state, delay_1);\n\t        }\n\t        else {\n\t            source.active = false;\n\t        }\n\t    };\n\t    DelaySubscriber.prototype._schedule = function (scheduler) {\n\t        this.active = true;\n\t        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n\t            source: this, destination: this.destination, scheduler: scheduler\n\t        }));\n\t    };\n\t    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n\t        if (this.errored === true) {\n\t            return;\n\t        }\n\t        var scheduler = this.scheduler;\n\t        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n\t        this.queue.push(message);\n\t        if (this.active === false) {\n\t            this._schedule(scheduler);\n\t        }\n\t    };\n\t    DelaySubscriber.prototype._next = function (value) {\n\t        this.scheduleNotification(Notification_1.Notification.createNext(value));\n\t    };\n\t    DelaySubscriber.prototype._error = function (err) {\n\t        this.errored = true;\n\t        this.queue = [];\n\t        this.destination.error(err);\n\t    };\n\t    DelaySubscriber.prototype._complete = function () {\n\t        this.scheduleNotification(Notification_1.Notification.createComplete());\n\t    };\n\t    return DelaySubscriber;\n\t}(Subscriber_1.Subscriber));\n\tvar DelayMessage = (function () {\n\t    function DelayMessage(time, notification) {\n\t        this.time = time;\n\t        this.notification = notification;\n\t    }\n\t    return DelayMessage;\n\t}());\n\n\n/***/ },\n/* 163 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar delayWhen_1 = __webpack_require__(164);\n\tObservable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;\n\n\n/***/ },\n/* 164 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Delays the emission of items from the source Observable by a given time span\n\t * determined by the emissions of another Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link delay}, but the time span of the\n\t * delay duration is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/delayWhen.png\" width=\"100%\">\n\t *\n\t * `delayWhen` time shifts each emitted value from the source Observable by a\n\t * time span determined by another Observable. When the source emits a value,\n\t * the `delayDurationSelector` function is called with the source value as\n\t * argument, and should return an Observable, called the \"duration\" Observable.\n\t * The source value is emitted on the output Observable only when the duration\n\t * Observable emits a value or completes.\n\t *\n\t * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n\t * is an Observable. When `subscriptionDelay` emits its first value or\n\t * completes, the source Observable is subscribed to and starts behaving like\n\t * described in the previous paragraph. If `subscriptionDelay` is not provided,\n\t * `delayWhen` will subscribe to the source Observable as soon as the output\n\t * Observable is subscribed.\n\t *\n\t * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var delayedClicks = clicks.delayWhen(event =>\n\t *   Rx.Observable.interval(Math.random() * 5000)\n\t * );\n\t * delayedClicks.subscribe(x => console.log(x));\n\t *\n\t * @see {@link debounce}\n\t * @see {@link delay}\n\t *\n\t * @param {function(value: T): Observable} delayDurationSelector A function that\n\t * returns an Observable for each value emitted by the source Observable, which\n\t * is then used to delay the emission of that item on the output Observable\n\t * until the Observable returned from this function emits a value.\n\t * @param {Observable} subscriptionDelay An Observable that triggers the\n\t * subscription to the source Observable once it emits any value.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by an amount of time specified by the Observable returned by\n\t * `delayDurationSelector`.\n\t * @method delayWhen\n\t * @owner Observable\n\t */\n\tfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n\t    if (subscriptionDelay) {\n\t        return new SubscriptionDelayObservable(this, subscriptionDelay)\n\t            .lift(new DelayWhenOperator(delayDurationSelector));\n\t    }\n\t    return this.lift(new DelayWhenOperator(delayDurationSelector));\n\t}\n\texports.delayWhen = delayWhen;\n\tvar DelayWhenOperator = (function () {\n\t    function DelayWhenOperator(delayDurationSelector) {\n\t        this.delayDurationSelector = delayDurationSelector;\n\t    }\n\t    DelayWhenOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n\t    };\n\t    return DelayWhenOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DelayWhenSubscriber = (function (_super) {\n\t    __extends(DelayWhenSubscriber, _super);\n\t    function DelayWhenSubscriber(destination, delayDurationSelector) {\n\t        _super.call(this, destination);\n\t        this.delayDurationSelector = delayDurationSelector;\n\t        this.completed = false;\n\t        this.delayNotifierSubscriptions = [];\n\t        this.values = [];\n\t    }\n\t    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.destination.next(outerValue);\n\t        this.removeSubscription(innerSub);\n\t        this.tryComplete();\n\t    };\n\t    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var value = this.removeSubscription(innerSub);\n\t        if (value) {\n\t            this.destination.next(value);\n\t        }\n\t        this.tryComplete();\n\t    };\n\t    DelayWhenSubscriber.prototype._next = function (value) {\n\t        try {\n\t            var delayNotifier = this.delayDurationSelector(value);\n\t            if (delayNotifier) {\n\t                this.tryDelay(delayNotifier, value);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    DelayWhenSubscriber.prototype._complete = function () {\n\t        this.completed = true;\n\t        this.tryComplete();\n\t    };\n\t    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n\t        subscription.unsubscribe();\n\t        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n\t        var value = null;\n\t        if (subscriptionIdx !== -1) {\n\t            value = this.values[subscriptionIdx];\n\t            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n\t            this.values.splice(subscriptionIdx, 1);\n\t        }\n\t        return value;\n\t    };\n\t    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n\t        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n\t        this.add(notifierSubscription);\n\t        this.delayNotifierSubscriptions.push(notifierSubscription);\n\t        this.values.push(value);\n\t    };\n\t    DelayWhenSubscriber.prototype.tryComplete = function () {\n\t        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return DelayWhenSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubscriptionDelayObservable = (function (_super) {\n\t    __extends(SubscriptionDelayObservable, _super);\n\t    function SubscriptionDelayObservable(source, subscriptionDelay) {\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.subscriptionDelay = subscriptionDelay;\n\t    }\n\t    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n\t        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n\t    };\n\t    return SubscriptionDelayObservable;\n\t}(Observable_1.Observable));\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubscriptionDelaySubscriber = (function (_super) {\n\t    __extends(SubscriptionDelaySubscriber, _super);\n\t    function SubscriptionDelaySubscriber(parent, source) {\n\t        _super.call(this);\n\t        this.parent = parent;\n\t        this.source = source;\n\t        this.sourceSubscribed = false;\n\t    }\n\t    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n\t        this.subscribeToSource();\n\t    };\n\t    SubscriptionDelaySubscriber.prototype._error = function (err) {\n\t        this.unsubscribe();\n\t        this.parent.error(err);\n\t    };\n\t    SubscriptionDelaySubscriber.prototype._complete = function () {\n\t        this.subscribeToSource();\n\t    };\n\t    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n\t        if (!this.sourceSubscribed) {\n\t            this.sourceSubscribed = true;\n\t            this.unsubscribe();\n\t            this.source.subscribe(this.parent);\n\t        }\n\t    };\n\t    return SubscriptionDelaySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 165 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinct_1 = __webpack_require__(166);\n\tObservable_1.Observable.prototype.distinct = distinct_1.distinct;\n\n\n/***/ },\n/* 166 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n\t * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n\t * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n\t * @method distinct\n\t * @owner Observable\n\t */\n\tfunction distinct(compare, flushes) {\n\t    return this.lift(new DistinctOperator(compare, flushes));\n\t}\n\texports.distinct = distinct;\n\tvar DistinctOperator = (function () {\n\t    function DistinctOperator(compare, flushes) {\n\t        this.compare = compare;\n\t        this.flushes = flushes;\n\t    }\n\t    DistinctOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n\t    };\n\t    return DistinctOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DistinctSubscriber = (function (_super) {\n\t    __extends(DistinctSubscriber, _super);\n\t    function DistinctSubscriber(destination, compare, flushes) {\n\t        _super.call(this, destination);\n\t        this.values = [];\n\t        if (typeof compare === 'function') {\n\t            this.compare = compare;\n\t        }\n\t        if (flushes) {\n\t            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n\t        }\n\t    }\n\t    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.values.length = 0;\n\t    };\n\t    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    DistinctSubscriber.prototype._next = function (value) {\n\t        var found = false;\n\t        var values = this.values;\n\t        var len = values.length;\n\t        try {\n\t            for (var i = 0; i < len; i++) {\n\t                if (this.compare(values[i], value)) {\n\t                    found = true;\n\t                    return;\n\t                }\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.values.push(value);\n\t        this.destination.next(value);\n\t    };\n\t    DistinctSubscriber.prototype.compare = function (x, y) {\n\t        return x === y;\n\t    };\n\t    return DistinctSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.DistinctSubscriber = DistinctSubscriber;\n\n\n/***/ },\n/* 167 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinctKey_1 = __webpack_require__(168);\n\tObservable_1.Observable.prototype.distinctKey = distinctKey_1.distinctKey;\n\n\n/***/ },\n/* 168 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar distinct_1 = __webpack_require__(166);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n\t * using a property accessed by using the key provided to check if the two items are distinct.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n\t * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n\t * @param {string} key string key for object property lookup on each item.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n\t * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n\t * @method distinctKey\n\t * @owner Observable\n\t */\n\tfunction distinctKey(key, compare, flushes) {\n\t    return distinct_1.distinct.call(this, function (x, y) {\n\t        if (compare) {\n\t            return compare(x[key], y[key]);\n\t        }\n\t        return x[key] === y[key];\n\t    }, flushes);\n\t}\n\texports.distinctKey = distinctKey;\n\n\n/***/ },\n/* 169 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinctUntilChanged_1 = __webpack_require__(170);\n\tObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n\n\n/***/ },\n/* 170 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n\t * @method distinctUntilChanged\n\t * @owner Observable\n\t */\n\tfunction distinctUntilChanged(compare, keySelector) {\n\t    return this.lift(new DistinctUntilChangedOperator(compare, keySelector));\n\t}\n\texports.distinctUntilChanged = distinctUntilChanged;\n\tvar DistinctUntilChangedOperator = (function () {\n\t    function DistinctUntilChangedOperator(compare, keySelector) {\n\t        this.compare = compare;\n\t        this.keySelector = keySelector;\n\t    }\n\t    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n\t    };\n\t    return DistinctUntilChangedOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DistinctUntilChangedSubscriber = (function (_super) {\n\t    __extends(DistinctUntilChangedSubscriber, _super);\n\t    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n\t        _super.call(this, destination);\n\t        this.keySelector = keySelector;\n\t        this.hasKey = false;\n\t        if (typeof compare === 'function') {\n\t            this.compare = compare;\n\t        }\n\t    }\n\t    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n\t        return x === y;\n\t    };\n\t    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n\t        var keySelector = this.keySelector;\n\t        var key = value;\n\t        if (keySelector) {\n\t            key = tryCatch_1.tryCatch(this.keySelector)(value);\n\t            if (key === errorObject_1.errorObject) {\n\t                return this.destination.error(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        var result = false;\n\t        if (this.hasKey) {\n\t            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n\t            if (result === errorObject_1.errorObject) {\n\t                return this.destination.error(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        else {\n\t            this.hasKey = true;\n\t        }\n\t        if (Boolean(result) === false) {\n\t            this.key = key;\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    return DistinctUntilChangedSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 171 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinctUntilKeyChanged_1 = __webpack_require__(172);\n\tObservable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\n\n\n/***/ },\n/* 172 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar distinctUntilChanged_1 = __webpack_require__(170);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n\t * using a property accessed by using the key provided to check if the two items are distinct.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * @param {string} key string key for object property lookup on each item.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n\t * @method distinctUntilKeyChanged\n\t * @owner Observable\n\t */\n\tfunction distinctUntilKeyChanged(key, compare) {\n\t    return distinctUntilChanged_1.distinctUntilChanged.call(this, function (x, y) {\n\t        if (compare) {\n\t            return compare(x[key], y[key]);\n\t        }\n\t        return x[key] === y[key];\n\t    });\n\t}\n\texports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\n\n/***/ },\n/* 173 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar do_1 = __webpack_require__(174);\n\tObservable_1.Observable.prototype.do = do_1._do;\n\n\n/***/ },\n/* 174 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Perform a side effect for every emission on the source Observable, but return\n\t * an Observable that is identical to the source.\n\t *\n\t * <span class=\"informal\">Intercepts each emission on the source and runs a\n\t * function, but returns an output which is identical to the source.</span>\n\t *\n\t * <img src=\"./img/do.png\" width=\"100%\">\n\t *\n\t * Returns a mirrored Observable of the source Observable, but modified so that\n\t * the provided Observer is called to perform a side effect for every value,\n\t * error, and completion emitted by the source. Any errors that are thrown in\n\t * the aforementioned Observer or handlers are safely sent down the error path\n\t * of the output Observable.\n\t *\n\t * This operator is useful for debugging your Observables for the correct values\n\t * or performing other side effects.\n\t *\n\t * Note: this is different to a `subscribe` on the Observable. If the Observable\n\t * returned by `do` is not subscribed, the side effects specified by the\n\t * Observer will never happen. `do` therefore simply spies on existing\n\t * execution, it does not trigger an execution to happen like `subscribe` does.\n\t *\n\t * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var positions = clicks\n\t *   .do(ev => console.log(ev))\n\t *   .map(ev => ev.clientX);\n\t * positions.subscribe(x => console.log(x));\n\t *\n\t * @see {@link map}\n\t * @see {@link subscribe}\n\t *\n\t * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n\t * callback for `next`.\n\t * @param {function} [error] Callback for errors in the source.\n\t * @param {function} [complete] Callback for the completion of the source.\n\t * @return {Observable} An Observable identical to the source, but runs the\n\t * specified Observer or callback(s) for each item.\n\t * @method do\n\t * @name do\n\t * @owner Observable\n\t */\n\tfunction _do(nextOrObserver, error, complete) {\n\t    return this.lift(new DoOperator(nextOrObserver, error, complete));\n\t}\n\texports._do = _do;\n\tvar DoOperator = (function () {\n\t    function DoOperator(nextOrObserver, error, complete) {\n\t        this.nextOrObserver = nextOrObserver;\n\t        this.error = error;\n\t        this.complete = complete;\n\t    }\n\t    DoOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n\t    };\n\t    return DoOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DoSubscriber = (function (_super) {\n\t    __extends(DoSubscriber, _super);\n\t    function DoSubscriber(destination, nextOrObserver, error, complete) {\n\t        _super.call(this, destination);\n\t        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n\t        safeSubscriber.syncErrorThrowable = true;\n\t        this.add(safeSubscriber);\n\t        this.safeSubscriber = safeSubscriber;\n\t    }\n\t    DoSubscriber.prototype._next = function (value) {\n\t        var safeSubscriber = this.safeSubscriber;\n\t        safeSubscriber.next(value);\n\t        if (safeSubscriber.syncErrorThrown) {\n\t            this.destination.error(safeSubscriber.syncErrorValue);\n\t        }\n\t        else {\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    DoSubscriber.prototype._error = function (err) {\n\t        var safeSubscriber = this.safeSubscriber;\n\t        safeSubscriber.error(err);\n\t        if (safeSubscriber.syncErrorThrown) {\n\t            this.destination.error(safeSubscriber.syncErrorValue);\n\t        }\n\t        else {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    DoSubscriber.prototype._complete = function () {\n\t        var safeSubscriber = this.safeSubscriber;\n\t        safeSubscriber.complete();\n\t        if (safeSubscriber.syncErrorThrown) {\n\t            this.destination.error(safeSubscriber.syncErrorValue);\n\t        }\n\t        else {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return DoSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 175 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar exhaust_1 = __webpack_require__(176);\n\tObservable_1.Observable.prototype.exhaust = exhaust_1.exhaust;\n\n\n/***/ },\n/* 176 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by dropping\n\t * inner Observables while the previous inner Observable has not yet completed.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n\t * next inner Observables while the current inner is still executing.</span>\n\t *\n\t * <img src=\"./img/exhaust.png\" width=\"100%\">\n\t *\n\t * `exhaust` subscribes to an Observable that emits Observables, also known as a\n\t * higher-order Observable. Each time it observes one of these emitted inner\n\t * Observables, the output Observable begins emitting the items emitted by that\n\t * inner Observable. So far, it behaves like {@link mergeAll}. However,\n\t * `exhaust` ignores every new inner Observable if the previous Observable has\n\t * not yet completed. Once that one completes, it will accept and flatten the\n\t * next inner Observable and repeat this process.\n\t *\n\t * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n\t * var result = higherOrder.exhaust();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concatAll}\n\t * @see {@link switch}\n\t * @see {@link mergeAll}\n\t * @see {@link exhaustMap}\n\t * @see {@link zipAll}\n\t *\n\t * @return {Observable} Returns an Observable that takes a source of Observables\n\t * and propagates the first observable exclusively until it completes before\n\t * subscribing to the next.\n\t * @method exhaust\n\t * @owner Observable\n\t */\n\tfunction exhaust() {\n\t    return this.lift(new SwitchFirstOperator());\n\t}\n\texports.exhaust = exhaust;\n\tvar SwitchFirstOperator = (function () {\n\t    function SwitchFirstOperator() {\n\t    }\n\t    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchFirstSubscriber(subscriber));\n\t    };\n\t    return SwitchFirstOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchFirstSubscriber = (function (_super) {\n\t    __extends(SwitchFirstSubscriber, _super);\n\t    function SwitchFirstSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.hasCompleted = false;\n\t        this.hasSubscription = false;\n\t    }\n\t    SwitchFirstSubscriber.prototype._next = function (value) {\n\t        if (!this.hasSubscription) {\n\t            this.hasSubscription = true;\n\t            this.add(subscribeToResult_1.subscribeToResult(this, value));\n\t        }\n\t    };\n\t    SwitchFirstSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (!this.hasSubscription) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.hasSubscription = false;\n\t        if (this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return SwitchFirstSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 177 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar exhaustMap_1 = __webpack_require__(178);\n\tObservable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;\n\n\n/***/ },\n/* 178 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable only if the previous projected Observable has completed.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link exhaust}.</span>\n\t *\n\t * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an (so-called \"inner\") Observable. When it projects a source value to\n\t * an Observable, the output Observable begins emitting the items emitted by\n\t * that projected Observable. However, `exhaustMap` ignores every new projected\n\t * Observable if the previous projected Observable has not yet completed. Once\n\t * that one completes, it will accept and flatten the next projected Observable\n\t * and repeat this process.\n\t *\n\t * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMap}\n\t * @see {@link exhaust}\n\t * @see {@link mergeMap}\n\t * @see {@link switchMap}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An Observable containing projected Observables\n\t * of each item of the source, ignoring projected Observables that start before\n\t * their preceding Observable has completed.\n\t * @method exhaustMap\n\t * @owner Observable\n\t */\n\tfunction exhaustMap(project, resultSelector) {\n\t    return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n\t}\n\texports.exhaustMap = exhaustMap;\n\tvar SwitchFirstMapOperator = (function () {\n\t    function SwitchFirstMapOperator(project, resultSelector) {\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n\t    };\n\t    return SwitchFirstMapOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchFirstMapSubscriber = (function (_super) {\n\t    __extends(SwitchFirstMapSubscriber, _super);\n\t    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.hasSubscription = false;\n\t        this.hasCompleted = false;\n\t        this.index = 0;\n\t    }\n\t    SwitchFirstMapSubscriber.prototype._next = function (value) {\n\t        if (!this.hasSubscription) {\n\t            this.tryNext(value);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n\t        var index = this.index++;\n\t        var destination = this.destination;\n\t        try {\n\t            var result = this.project(value, index);\n\t            this.hasSubscription = true;\n\t            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (!this.hasSubscription) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        if (resultSelector) {\n\t            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            destination.next(innerValue);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        try {\n\t            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t            destination.next(result);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n\t        this.destination.error(err);\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.hasSubscription = false;\n\t        if (this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return SwitchFirstMapSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 179 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar expand_1 = __webpack_require__(180);\n\tObservable_1.Observable.prototype.expand = expand_1.expand;\n\n\n/***/ },\n/* 180 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Returns an Observable where for each item in the source Observable, the supplied function is applied to each item,\n\t * resulting in a new value to then be applied again with the function.\n\t * @param {function} project the function for projecting the next emitted item of the Observable.\n\t * @param {number} [concurrent] the max number of observables that can be created concurrently. defaults to infinity.\n\t * @param {Scheduler} [scheduler] The Scheduler to use for managing the expansions.\n\t * @return {Observable} an Observable containing the expansions of the source Observable.\n\t * @method expand\n\t * @owner Observable\n\t */\n\tfunction expand(project, concurrent, scheduler) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    if (scheduler === void 0) { scheduler = undefined; }\n\t    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\t    return this.lift(new ExpandOperator(project, concurrent, scheduler));\n\t}\n\texports.expand = expand;\n\tvar ExpandOperator = (function () {\n\t    function ExpandOperator(project, concurrent, scheduler) {\n\t        this.project = project;\n\t        this.concurrent = concurrent;\n\t        this.scheduler = scheduler;\n\t    }\n\t    ExpandOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n\t    };\n\t    return ExpandOperator;\n\t}());\n\texports.ExpandOperator = ExpandOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ExpandSubscriber = (function (_super) {\n\t    __extends(ExpandSubscriber, _super);\n\t    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.concurrent = concurrent;\n\t        this.scheduler = scheduler;\n\t        this.index = 0;\n\t        this.active = 0;\n\t        this.hasCompleted = false;\n\t        if (concurrent < Number.POSITIVE_INFINITY) {\n\t            this.buffer = [];\n\t        }\n\t    }\n\t    ExpandSubscriber.dispatch = function (arg) {\n\t        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n\t        subscriber.subscribeToProjection(result, value, index);\n\t    };\n\t    ExpandSubscriber.prototype._next = function (value) {\n\t        var destination = this.destination;\n\t        if (destination.isUnsubscribed) {\n\t            this._complete();\n\t            return;\n\t        }\n\t        var index = this.index++;\n\t        if (this.active < this.concurrent) {\n\t            destination.next(value);\n\t            var result = tryCatch_1.tryCatch(this.project)(value, index);\n\t            if (result === errorObject_1.errorObject) {\n\t                destination.error(errorObject_1.errorObject.e);\n\t            }\n\t            else if (!this.scheduler) {\n\t                this.subscribeToProjection(result, value, index);\n\t            }\n\t            else {\n\t                var state = { subscriber: this, result: result, value: value, index: index };\n\t                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n\t            }\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n\t        this.active++;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n\t    };\n\t    ExpandSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.hasCompleted && this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this._next(innerValue);\n\t    };\n\t    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer && buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        if (this.hasCompleted && this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return ExpandSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.ExpandSubscriber = ExpandSubscriber;\n\n\n/***/ },\n/* 181 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar elementAt_1 = __webpack_require__(182);\n\tObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n\n\n/***/ },\n/* 182 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(183);\n\t/**\n\t * Emits the single value at the specified `index` in a sequence of emissions\n\t * from the source Observable.\n\t *\n\t * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n\t *\n\t * <img src=\"./img/elementAt.png\" width=\"100%\">\n\t *\n\t * `elementAt` returns an Observable that emits the item at the specified\n\t * `index` in the source Observable, or a default value if that `index` is out\n\t * of range and the `default` argument is provided. If the `default` argument is\n\t * not given and the `index` is out of range, the output Observable will emit an\n\t * `ArgumentOutOfRangeError` error.\n\t *\n\t * @example <caption>Emit only the third click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.elementAt(2);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link first}\n\t * @see {@link last}\n\t * @see {@link skip}\n\t * @see {@link single}\n\t * @see {@link take}\n\t *\n\t * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n\t * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n\t * Observable has completed before emitting the i-th `next` notification.\n\t *\n\t * @param {number} index Is the number `i` for the i-th source emission that has\n\t * happened since the subscription, starting from the number `0`.\n\t * @param {T} [defaultValue] The default value returned for missing indices.\n\t * @return {Observable} An Observable that emits a single item, if it is found.\n\t * Otherwise, will emit the default value if given. If not, then emits an error.\n\t * @method elementAt\n\t * @owner Observable\n\t */\n\tfunction elementAt(index, defaultValue) {\n\t    return this.lift(new ElementAtOperator(index, defaultValue));\n\t}\n\texports.elementAt = elementAt;\n\tvar ElementAtOperator = (function () {\n\t    function ElementAtOperator(index, defaultValue) {\n\t        this.index = index;\n\t        this.defaultValue = defaultValue;\n\t        if (index < 0) {\n\t            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\t        }\n\t    }\n\t    ElementAtOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n\t    };\n\t    return ElementAtOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ElementAtSubscriber = (function (_super) {\n\t    __extends(ElementAtSubscriber, _super);\n\t    function ElementAtSubscriber(destination, index, defaultValue) {\n\t        _super.call(this, destination);\n\t        this.index = index;\n\t        this.defaultValue = defaultValue;\n\t    }\n\t    ElementAtSubscriber.prototype._next = function (x) {\n\t        if (this.index-- === 0) {\n\t            this.destination.next(x);\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ElementAtSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (this.index >= 0) {\n\t            if (typeof this.defaultValue !== 'undefined') {\n\t                destination.next(this.defaultValue);\n\t            }\n\t            else {\n\t                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n\t            }\n\t        }\n\t        destination.complete();\n\t    };\n\t    return ElementAtSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 183 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an element was queried at a certain index of an\n\t * Observable, but no such index or position exists in that sequence.\n\t *\n\t * @see {@link elementAt}\n\t * @see {@link take}\n\t * @see {@link takeLast}\n\t *\n\t * @class ArgumentOutOfRangeError\n\t */\n\tvar ArgumentOutOfRangeError = (function (_super) {\n\t    __extends(ArgumentOutOfRangeError, _super);\n\t    function ArgumentOutOfRangeError() {\n\t        var err = _super.call(this, 'argument out of range');\n\t        this.name = err.name = 'ArgumentOutOfRangeError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return ArgumentOutOfRangeError;\n\t}(Error));\n\texports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n\n\n/***/ },\n/* 184 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar filter_1 = __webpack_require__(185);\n\tObservable_1.Observable.prototype.filter = filter_1.filter;\n\n\n/***/ },\n/* 185 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Filter items emitted by the source Observable by only emitting those that\n\t * satisfy a specified predicate.\n\t *\n\t * <span class=\"informal\">Like\n\t * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n\t * it only emits a value from the source if it passes a criterion function.</span>\n\t *\n\t * <img src=\"./img/filter.png\" width=\"100%\">\n\t *\n\t * Similar to the well-known `Array.prototype.filter` method, this operator\n\t * takes values from the source Observable, passes them through a `predicate`\n\t * function and only emits those values that yielded `true`.\n\t *\n\t * @example <caption>Emit only click events whose target was a DIV element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n\t * clicksOnDivs.subscribe(x => console.log(x));\n\t *\n\t * @see {@link distinct}\n\t * @see {@link distinctKey}\n\t * @see {@link distinctUntilChanged}\n\t * @see {@link distinctUntilKeyChanged}\n\t * @see {@link ignoreElements}\n\t * @see {@link partition}\n\t * @see {@link skip}\n\t *\n\t * @param {function(value: T, index: number): boolean} predicate A function that\n\t * evaluates each value emitted by the source Observable. If it returns `true`,\n\t * the value is emitted, if `false` the value is not passed to the output\n\t * Observable. The `index` parameter is the number `i` for the i-th source\n\t * emission that has happened since the subscription, starting from the number\n\t * `0`.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {Observable} An Observable of values from the source that were\n\t * allowed by the `predicate` function.\n\t * @method filter\n\t * @owner Observable\n\t */\n\tfunction filter(predicate, thisArg) {\n\t    return this.lift(new FilterOperator(predicate, thisArg));\n\t}\n\texports.filter = filter;\n\tvar FilterOperator = (function () {\n\t    function FilterOperator(predicate, thisArg) {\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t    }\n\t    FilterOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n\t    };\n\t    return FilterOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FilterSubscriber = (function (_super) {\n\t    __extends(FilterSubscriber, _super);\n\t    function FilterSubscriber(destination, predicate, thisArg) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t        this.count = 0;\n\t        this.predicate = predicate;\n\t    }\n\t    // the try catch block below is left specifically for\n\t    // optimization and perf reasons. a tryCatcher is not necessary here.\n\t    FilterSubscriber.prototype._next = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.predicate.call(this.thisArg, value, this.count++);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    return FilterSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 186 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar finally_1 = __webpack_require__(187);\n\tObservable_1.Observable.prototype.finally = finally_1._finally;\n\n\n/***/ },\n/* 187 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * Returns an Observable that mirrors the source Observable, but will call a specified function when\n\t * the source terminates on complete or error.\n\t * @param {function} callback function to be called when source terminates.\n\t * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n\t * @method finally\n\t * @owner Observable\n\t */\n\tfunction _finally(callback) {\n\t    return this.lift(new FinallyOperator(callback));\n\t}\n\texports._finally = _finally;\n\tvar FinallyOperator = (function () {\n\t    function FinallyOperator(callback) {\n\t        this.callback = callback;\n\t    }\n\t    FinallyOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n\t    };\n\t    return FinallyOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FinallySubscriber = (function (_super) {\n\t    __extends(FinallySubscriber, _super);\n\t    function FinallySubscriber(destination, callback) {\n\t        _super.call(this, destination);\n\t        this.add(new Subscription_1.Subscription(callback));\n\t    }\n\t    return FinallySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 188 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar find_1 = __webpack_require__(189);\n\tObservable_1.Observable.prototype.find = find_1.find;\n\n\n/***/ },\n/* 189 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits only the first value emitted by the source Observable that meets some\n\t * condition.\n\t *\n\t * <span class=\"informal\">Finds the first value that passes some test and emits\n\t * that.</span>\n\t *\n\t * <img src=\"./img/find.png\" width=\"100%\">\n\t *\n\t * `find` searches for the first item in the source Observable that matches the\n\t * specified condition embodied by the `predicate`, and returns the first\n\t * occurrence in the source. Unlike {@link first}, the `predicate` is required\n\t * in `find`, and does not emit an error if a valid value is not found.\n\t *\n\t * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link filter}\n\t * @see {@link first}\n\t * @see {@link findIndex}\n\t * @see {@link take}\n\t *\n\t * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n\t * A function called with each item to test for condition matching.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {Observable<T>} An Observable of the first item that matches the\n\t * condition.\n\t * @method find\n\t * @owner Observable\n\t */\n\tfunction find(predicate, thisArg) {\n\t    if (typeof predicate !== 'function') {\n\t        throw new TypeError('predicate is not a function');\n\t    }\n\t    return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n\t}\n\texports.find = find;\n\tvar FindValueOperator = (function () {\n\t    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.yieldIndex = yieldIndex;\n\t        this.thisArg = thisArg;\n\t    }\n\t    FindValueOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n\t    };\n\t    return FindValueOperator;\n\t}());\n\texports.FindValueOperator = FindValueOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FindValueSubscriber = (function (_super) {\n\t    __extends(FindValueSubscriber, _super);\n\t    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.yieldIndex = yieldIndex;\n\t        this.thisArg = thisArg;\n\t        this.index = 0;\n\t    }\n\t    FindValueSubscriber.prototype.notifyComplete = function (value) {\n\t        var destination = this.destination;\n\t        destination.next(value);\n\t        destination.complete();\n\t    };\n\t    FindValueSubscriber.prototype._next = function (value) {\n\t        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n\t        var index = this.index++;\n\t        try {\n\t            var result = predicate.call(thisArg || this, value, index, this.source);\n\t            if (result) {\n\t                this.notifyComplete(this.yieldIndex ? index : value);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    FindValueSubscriber.prototype._complete = function () {\n\t        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n\t    };\n\t    return FindValueSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.FindValueSubscriber = FindValueSubscriber;\n\n\n/***/ },\n/* 190 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar findIndex_1 = __webpack_require__(191);\n\tObservable_1.Observable.prototype.findIndex = findIndex_1.findIndex;\n\n\n/***/ },\n/* 191 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar find_1 = __webpack_require__(189);\n\t/**\n\t * Emits only the index of the first value emitted by the source Observable that\n\t * meets some condition.\n\t *\n\t * <span class=\"informal\">It's like {@link find}, but emits the index of the\n\t * found value, not the value itself.</span>\n\t *\n\t * <img src=\"./img/findIndex.png\" width=\"100%\">\n\t *\n\t * `findIndex` searches for the first item in the source Observable that matches\n\t * the specified condition embodied by the `predicate`, and returns the\n\t * (zero-based) index of the first occurrence in the source. Unlike\n\t * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n\t * an error if a valid value is not found.\n\t *\n\t * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link filter}\n\t * @see {@link find}\n\t * @see {@link first}\n\t * @see {@link take}\n\t *\n\t * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n\t * A function called with each item to test for condition matching.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {Observable} An Observable of the index of the first item that\n\t * matches the condition.\n\t * @method find\n\t * @owner Observable\n\t */\n\tfunction findIndex(predicate, thisArg) {\n\t    return this.lift(new find_1.FindValueOperator(predicate, this, true, thisArg));\n\t}\n\texports.findIndex = findIndex;\n\n\n/***/ },\n/* 192 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar first_1 = __webpack_require__(193);\n\tObservable_1.Observable.prototype.first = first_1.first;\n\n\n/***/ },\n/* 193 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyError_1 = __webpack_require__(194);\n\t/**\n\t * Emits only the first value (or the first value that meets some condition)\n\t * emitted by the source Observable.\n\t *\n\t * <span class=\"informal\">Emits only the first value. Or emits only the first\n\t * value that passes some test.</span>\n\t *\n\t * <img src=\"./img/first.png\" width=\"100%\">\n\t *\n\t * If called with no arguments, `first` emits the first value of the source\n\t * Observable, then completes. If called with a `predicate` function, `first`\n\t * emits the first value of the source that matches the specified condition. It\n\t * may also take a `resultSelector` function to produce the output value from\n\t * the input value, and a `defaultValue` to emit in case the source completes\n\t * before it is able to emit a valid value. Throws an error if `defaultValue`\n\t * was not provided and a matching element is not found.\n\t *\n\t * @example <caption>Emit only the first click that happens on the DOM</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.first();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Emits the first click that happens on a DIV</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link filter}\n\t * @see {@link find}\n\t * @see {@link take}\n\t *\n\t * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n\t * callback if the Observable completes before any `next` notification was sent.\n\t *\n\t * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n\t * An optional function called with each item to test for condition matching.\n\t * @param {function(value: T, index: number): R} [resultSelector] A function to\n\t * produce the value on the output Observable based on the values\n\t * and the indices of the source Observable. The arguments passed to this\n\t * function are:\n\t * - `value`: the value that was emitted on the source.\n\t * - `index`: the \"index\" of the value from the source.\n\t * @param {R} [defaultValue] The default value emitted in case no valid value\n\t * was found on the source.\n\t * @return {Observable<T|R>} an Observable of the first item that matches the\n\t * condition.\n\t * @method first\n\t * @owner Observable\n\t */\n\tfunction first(predicate, resultSelector, defaultValue) {\n\t    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n\t}\n\texports.first = first;\n\tvar FirstOperator = (function () {\n\t    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t    }\n\t    FirstOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n\t    };\n\t    return FirstOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FirstSubscriber = (function (_super) {\n\t    __extends(FirstSubscriber, _super);\n\t    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t        this.index = 0;\n\t        this.hasCompleted = false;\n\t    }\n\t    FirstSubscriber.prototype._next = function (value) {\n\t        var index = this.index++;\n\t        if (this.predicate) {\n\t            this._tryPredicate(value, index);\n\t        }\n\t        else {\n\t            this._emit(value, index);\n\t        }\n\t    };\n\t    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, index, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            this._emit(value, index);\n\t        }\n\t    };\n\t    FirstSubscriber.prototype._emit = function (value, index) {\n\t        if (this.resultSelector) {\n\t            this._tryResultSelector(value, index);\n\t            return;\n\t        }\n\t        this._emitFinal(value);\n\t    };\n\t    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this._emitFinal(result);\n\t    };\n\t    FirstSubscriber.prototype._emitFinal = function (value) {\n\t        var destination = this.destination;\n\t        destination.next(value);\n\t        destination.complete();\n\t        this.hasCompleted = true;\n\t    };\n\t    FirstSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n\t            destination.next(this.defaultValue);\n\t            destination.complete();\n\t        }\n\t        else if (!this.hasCompleted) {\n\t            destination.error(new EmptyError_1.EmptyError);\n\t        }\n\t    };\n\t    return FirstSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 194 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an Observable or a sequence was queried but has no\n\t * elements.\n\t *\n\t * @see {@link first}\n\t * @see {@link last}\n\t * @see {@link single}\n\t *\n\t * @class EmptyError\n\t */\n\tvar EmptyError = (function (_super) {\n\t    __extends(EmptyError, _super);\n\t    function EmptyError() {\n\t        var err = _super.call(this, 'no elements in sequence');\n\t        this.name = err.name = 'EmptyError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return EmptyError;\n\t}(Error));\n\texports.EmptyError = EmptyError;\n\n\n/***/ },\n/* 195 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar groupBy_1 = __webpack_require__(196);\n\tObservable_1.Observable.prototype.groupBy = groupBy_1.groupBy;\n\n\n/***/ },\n/* 196 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Map_1 = __webpack_require__(197);\n\tvar FastMap_1 = __webpack_require__(199);\n\t/**\n\t * Groups the items emitted by an Observable according to a specified criterion,\n\t * and emits these grouped items as `GroupedObservables`, one\n\t * {@link GroupedObservable} per group.\n\t *\n\t * <img src=\"./img/groupBy.png\" width=\"100%\">\n\t *\n\t * @param {function(value: T): K} keySelector a function that extracts the key\n\t * for each item.\n\t * @param {function(value: T): R} [elementSelector] a function that extracts the\n\t * return element for each item.\n\t * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n\t * a function that returns an Observable to determine how long each group should\n\t * exist.\n\t * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n\t * GroupedObservables, each of which corresponds to a unique key value and each\n\t * of which emits those items from the source Observable that share that key\n\t * value.\n\t * @method groupBy\n\t * @owner Observable\n\t */\n\tfunction groupBy(keySelector, elementSelector, durationSelector) {\n\t    return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n\t}\n\texports.groupBy = groupBy;\n\tvar GroupByOperator = (function () {\n\t    function GroupByOperator(source, keySelector, elementSelector, durationSelector) {\n\t        this.source = source;\n\t        this.keySelector = keySelector;\n\t        this.elementSelector = elementSelector;\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    GroupByOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector));\n\t    };\n\t    return GroupByOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar GroupBySubscriber = (function (_super) {\n\t    __extends(GroupBySubscriber, _super);\n\t    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.keySelector = keySelector;\n\t        this.elementSelector = elementSelector;\n\t        this.durationSelector = durationSelector;\n\t        this.groups = null;\n\t        this.attemptedToUnsubscribe = false;\n\t        this.count = 0;\n\t    }\n\t    GroupBySubscriber.prototype._next = function (value) {\n\t        var key;\n\t        try {\n\t            key = this.keySelector(value);\n\t        }\n\t        catch (err) {\n\t            this.error(err);\n\t            return;\n\t        }\n\t        this._group(value, key);\n\t    };\n\t    GroupBySubscriber.prototype._group = function (value, key) {\n\t        var groups = this.groups;\n\t        if (!groups) {\n\t            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();\n\t        }\n\t        var group = groups.get(key);\n\t        var element;\n\t        if (this.elementSelector) {\n\t            try {\n\t                element = this.elementSelector(value);\n\t            }\n\t            catch (err) {\n\t                this.error(err);\n\t            }\n\t        }\n\t        else {\n\t            element = value;\n\t        }\n\t        if (!group) {\n\t            groups.set(key, group = new Subject_1.Subject());\n\t            var groupedObservable = new GroupedObservable(key, group, this);\n\t            this.destination.next(groupedObservable);\n\t            if (this.durationSelector) {\n\t                var duration = void 0;\n\t                try {\n\t                    duration = this.durationSelector(new GroupedObservable(key, group));\n\t                }\n\t                catch (err) {\n\t                    this.error(err);\n\t                    return;\n\t                }\n\t                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n\t            }\n\t        }\n\t        if (!group.isUnsubscribed) {\n\t            group.next(element);\n\t        }\n\t    };\n\t    GroupBySubscriber.prototype._error = function (err) {\n\t        var groups = this.groups;\n\t        if (groups) {\n\t            groups.forEach(function (group, key) {\n\t                group.error(err);\n\t            });\n\t            groups.clear();\n\t        }\n\t        this.destination.error(err);\n\t    };\n\t    GroupBySubscriber.prototype._complete = function () {\n\t        var groups = this.groups;\n\t        if (groups) {\n\t            groups.forEach(function (group, key) {\n\t                group.complete();\n\t            });\n\t            groups.clear();\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    GroupBySubscriber.prototype.removeGroup = function (key) {\n\t        this.groups.delete(key);\n\t    };\n\t    GroupBySubscriber.prototype.unsubscribe = function () {\n\t        if (!this.isUnsubscribed && !this.attemptedToUnsubscribe) {\n\t            this.attemptedToUnsubscribe = true;\n\t            if (this.count === 0) {\n\t                _super.prototype.unsubscribe.call(this);\n\t            }\n\t        }\n\t    };\n\t    return GroupBySubscriber;\n\t}(Subscriber_1.Subscriber));\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar GroupDurationSubscriber = (function (_super) {\n\t    __extends(GroupDurationSubscriber, _super);\n\t    function GroupDurationSubscriber(key, group, parent) {\n\t        _super.call(this);\n\t        this.key = key;\n\t        this.group = group;\n\t        this.parent = parent;\n\t    }\n\t    GroupDurationSubscriber.prototype._next = function (value) {\n\t        this._complete();\n\t    };\n\t    GroupDurationSubscriber.prototype._error = function (err) {\n\t        var group = this.group;\n\t        if (!group.isUnsubscribed) {\n\t            group.error(err);\n\t        }\n\t        this.parent.removeGroup(this.key);\n\t    };\n\t    GroupDurationSubscriber.prototype._complete = function () {\n\t        var group = this.group;\n\t        if (!group.isUnsubscribed) {\n\t            group.complete();\n\t        }\n\t        this.parent.removeGroup(this.key);\n\t    };\n\t    return GroupDurationSubscriber;\n\t}(Subscriber_1.Subscriber));\n\t/**\n\t * An Observable representing values belonging to the same group represented by\n\t * a common key. The values emitted by a GroupedObservable come from the source\n\t * Observable. The common key is available as the field `key` on a\n\t * GroupedObservable instance.\n\t *\n\t * @class GroupedObservable<K, T>\n\t */\n\tvar GroupedObservable = (function (_super) {\n\t    __extends(GroupedObservable, _super);\n\t    function GroupedObservable(key, groupSubject, refCountSubscription) {\n\t        _super.call(this);\n\t        this.key = key;\n\t        this.groupSubject = groupSubject;\n\t        this.refCountSubscription = refCountSubscription;\n\t    }\n\t    GroupedObservable.prototype._subscribe = function (subscriber) {\n\t        var subscription = new Subscription_1.Subscription();\n\t        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n\t        if (refCountSubscription && !refCountSubscription.isUnsubscribed) {\n\t            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n\t        }\n\t        subscription.add(groupSubject.subscribe(subscriber));\n\t        return subscription;\n\t    };\n\t    return GroupedObservable;\n\t}(Observable_1.Observable));\n\texports.GroupedObservable = GroupedObservable;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar InnerRefCountSubscription = (function (_super) {\n\t    __extends(InnerRefCountSubscription, _super);\n\t    function InnerRefCountSubscription(parent) {\n\t        _super.call(this);\n\t        this.parent = parent;\n\t        parent.count++;\n\t    }\n\t    InnerRefCountSubscription.prototype.unsubscribe = function () {\n\t        var parent = this.parent;\n\t        if (!parent.isUnsubscribed && !this.isUnsubscribed) {\n\t            _super.prototype.unsubscribe.call(this);\n\t            parent.count -= 1;\n\t            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n\t                parent.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    return InnerRefCountSubscription;\n\t}(Subscription_1.Subscription));\n\n\n/***/ },\n/* 197 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar MapPolyfill_1 = __webpack_require__(198);\n\texports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();\n\n\n/***/ },\n/* 198 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar MapPolyfill = (function () {\n\t    function MapPolyfill() {\n\t        this.size = 0;\n\t        this._values = [];\n\t        this._keys = [];\n\t    }\n\t    MapPolyfill.prototype.get = function (key) {\n\t        var i = this._keys.indexOf(key);\n\t        return i === -1 ? undefined : this._values[i];\n\t    };\n\t    MapPolyfill.prototype.set = function (key, value) {\n\t        var i = this._keys.indexOf(key);\n\t        if (i === -1) {\n\t            this._keys.push(key);\n\t            this._values.push(value);\n\t            this.size++;\n\t        }\n\t        else {\n\t            this._values[i] = value;\n\t        }\n\t        return this;\n\t    };\n\t    MapPolyfill.prototype.delete = function (key) {\n\t        var i = this._keys.indexOf(key);\n\t        if (i === -1) {\n\t            return false;\n\t        }\n\t        this._values.splice(i, 1);\n\t        this._keys.splice(i, 1);\n\t        this.size--;\n\t        return true;\n\t    };\n\t    MapPolyfill.prototype.clear = function () {\n\t        this._keys.length = 0;\n\t        this._values.length = 0;\n\t        this.size = 0;\n\t    };\n\t    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n\t        for (var i = 0; i < this.size; i++) {\n\t            cb.call(thisArg, this._values[i], this._keys[i]);\n\t        }\n\t    };\n\t    return MapPolyfill;\n\t}());\n\texports.MapPolyfill = MapPolyfill;\n\n\n/***/ },\n/* 199 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar FastMap = (function () {\n\t    function FastMap() {\n\t        this.values = {};\n\t    }\n\t    FastMap.prototype.delete = function (key) {\n\t        this.values[key] = null;\n\t        return true;\n\t    };\n\t    FastMap.prototype.set = function (key, value) {\n\t        this.values[key] = value;\n\t        return this;\n\t    };\n\t    FastMap.prototype.get = function (key) {\n\t        return this.values[key];\n\t    };\n\t    FastMap.prototype.forEach = function (cb, thisArg) {\n\t        var values = this.values;\n\t        for (var key in values) {\n\t            if (values.hasOwnProperty(key) && values[key] !== null) {\n\t                cb.call(thisArg, values[key], key);\n\t            }\n\t        }\n\t    };\n\t    FastMap.prototype.clear = function () {\n\t        this.values = {};\n\t    };\n\t    return FastMap;\n\t}());\n\texports.FastMap = FastMap;\n\n\n/***/ },\n/* 200 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ignoreElements_1 = __webpack_require__(201);\n\tObservable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;\n\n\n/***/ },\n/* 201 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar noop_1 = __webpack_require__(95);\n\t/**\n\t * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n\t *\n\t * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n\t *\n\t * @return {Observable} an empty Observable that only calls `complete`\n\t * or `error`, based on which one is called by the source Observable.\n\t * @method ignoreElements\n\t * @owner Observable\n\t */\n\tfunction ignoreElements() {\n\t    return this.lift(new IgnoreElementsOperator());\n\t}\n\texports.ignoreElements = ignoreElements;\n\t;\n\tvar IgnoreElementsOperator = (function () {\n\t    function IgnoreElementsOperator() {\n\t    }\n\t    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n\t    };\n\t    return IgnoreElementsOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar IgnoreElementsSubscriber = (function (_super) {\n\t    __extends(IgnoreElementsSubscriber, _super);\n\t    function IgnoreElementsSubscriber() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    IgnoreElementsSubscriber.prototype._next = function (unused) {\n\t        noop_1.noop();\n\t    };\n\t    return IgnoreElementsSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 202 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar isEmpty_1 = __webpack_require__(203);\n\tObservable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;\n\n\n/***/ },\n/* 203 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n\t *\n\t * <img src=\"./img/isEmpty.png\" width=\"100%\">\n\t *\n\t * @return {Observable} an Observable that emits a Boolean.\n\t * @method isEmpty\n\t * @owner Observable\n\t */\n\tfunction isEmpty() {\n\t    return this.lift(new IsEmptyOperator());\n\t}\n\texports.isEmpty = isEmpty;\n\tvar IsEmptyOperator = (function () {\n\t    function IsEmptyOperator() {\n\t    }\n\t    IsEmptyOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new IsEmptySubscriber(observer));\n\t    };\n\t    return IsEmptyOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar IsEmptySubscriber = (function (_super) {\n\t    __extends(IsEmptySubscriber, _super);\n\t    function IsEmptySubscriber(destination) {\n\t        _super.call(this, destination);\n\t    }\n\t    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n\t        var destination = this.destination;\n\t        destination.next(isEmpty);\n\t        destination.complete();\n\t    };\n\t    IsEmptySubscriber.prototype._next = function (value) {\n\t        this.notifyComplete(false);\n\t    };\n\t    IsEmptySubscriber.prototype._complete = function () {\n\t        this.notifyComplete(true);\n\t    };\n\t    return IsEmptySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 204 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar audit_1 = __webpack_require__(205);\n\tObservable_1.Observable.prototype.audit = audit_1.audit;\n\n\n/***/ },\n/* 205 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Ignores source values for a duration determined by another Observable, then\n\t * emits the most recent value from the source Observable, then repeats this\n\t * process.\n\t *\n\t * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n\t * duration is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/audit.png\" width=\"100%\">\n\t *\n\t * `audit` is similar to `throttle`, but emits the last value from the silenced\n\t * time window, instead of the first value. `audit` emits the most recent value\n\t * from the source Observable on the output Observable as soon as its internal\n\t * timer becomes disabled, and ignores source values while the timer is enabled.\n\t * Initially, the timer is disabled. As soon as the first source value arrives,\n\t * the timer is enabled by calling the `durationSelector` function with the\n\t * source value, which returns the \"duration\" Observable. When the duration\n\t * Observable emits a value or completes, the timer is disabled, then the most\n\t * recent source value is emitted on the output Observable, and this process\n\t * repeats for the next source value.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounce}\n\t * @see {@link delayWhen}\n\t * @see {@link sample}\n\t * @see {@link throttle}\n\t *\n\t * @param {function(value: T): Observable|Promise} durationSelector A function\n\t * that receives a value from the source Observable, for computing the silencing\n\t * duration, returned as an Observable or a Promise.\n\t * @return {Observable<T>} An Observable that performs rate-limiting of\n\t * emissions from the source Observable.\n\t * @method audit\n\t * @owner Observable\n\t */\n\tfunction audit(durationSelector) {\n\t    return this.lift(new AuditOperator(durationSelector));\n\t}\n\texports.audit = audit;\n\tvar AuditOperator = (function () {\n\t    function AuditOperator(durationSelector) {\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    AuditOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n\t    };\n\t    return AuditOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AuditSubscriber = (function (_super) {\n\t    __extends(AuditSubscriber, _super);\n\t    function AuditSubscriber(destination, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.durationSelector = durationSelector;\n\t        this.hasValue = false;\n\t    }\n\t    AuditSubscriber.prototype._next = function (value) {\n\t        this.value = value;\n\t        this.hasValue = true;\n\t        if (!this.throttled) {\n\t            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n\t            if (duration === errorObject_1.errorObject) {\n\t                this.destination.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n\t            }\n\t        }\n\t    };\n\t    AuditSubscriber.prototype.clearThrottle = function () {\n\t        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n\t        if (throttled) {\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t            throttled.unsubscribe();\n\t        }\n\t        if (hasValue) {\n\t            this.value = null;\n\t            this.hasValue = false;\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        this.clearThrottle();\n\t    };\n\t    AuditSubscriber.prototype.notifyComplete = function () {\n\t        this.clearThrottle();\n\t    };\n\t    return AuditSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 206 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar auditTime_1 = __webpack_require__(207);\n\tObservable_1.Observable.prototype.auditTime = auditTime_1.auditTime;\n\n\n/***/ },\n/* 207 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(82);\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Ignores source values for `duration` milliseconds, then emits the most recent\n\t * value from the source Observable, then repeats this process.\n\t *\n\t * <span class=\"informal\">When it sees a source values, it ignores that plus\n\t * the next ones for `duration` milliseconds, and then it emits the most recent\n\t * value from the source.</span>\n\t *\n\t * <img src=\"./img/auditTime.png\" width=\"100%\">\n\t *\n\t * `auditTime` is similar to `throttleTime`, but emits the last value from the\n\t * silenced time window, instead of the first value. `auditTime` emits the most\n\t * recent value from the source Observable on the output Observable as soon as\n\t * its internal timer becomes disabled, and ignores source values while the\n\t * timer is enabled. Initially, the timer is disabled. As soon as the first\n\t * source value arrives, the timer is enabled. After `duration` milliseconds (or\n\t * the time unit determined internally by the optional `scheduler`) has passed,\n\t * the timer is disabled, then the most recent source value is emitted on the\n\t * output Observable, and this process repeats for the next source value.\n\t * Optionally takes a {@link Scheduler} for managing timers.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.auditTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounceTime}\n\t * @see {@link delay}\n\t * @see {@link sampleTime}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {number} duration Time to wait before emitting the most recent source\n\t * value, measured in milliseconds or the time unit determined internally\n\t * by the optional `scheduler`.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the rate-limiting behavior.\n\t * @return {Observable<T>} An Observable that performs rate-limiting of\n\t * emissions from the source Observable.\n\t * @method auditTime\n\t * @owner Observable\n\t */\n\tfunction auditTime(duration, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new AuditTimeOperator(duration, scheduler));\n\t}\n\texports.auditTime = auditTime;\n\tvar AuditTimeOperator = (function () {\n\t    function AuditTimeOperator(duration, scheduler) {\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t    }\n\t    AuditTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n\t    };\n\t    return AuditTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AuditTimeSubscriber = (function (_super) {\n\t    __extends(AuditTimeSubscriber, _super);\n\t    function AuditTimeSubscriber(destination, duration, scheduler) {\n\t        _super.call(this, destination);\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t        this.hasValue = false;\n\t    }\n\t    AuditTimeSubscriber.prototype._next = function (value) {\n\t        this.value = value;\n\t        this.hasValue = true;\n\t        if (!this.throttled) {\n\t            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n\t        }\n\t    };\n\t    AuditTimeSubscriber.prototype.clearThrottle = function () {\n\t        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n\t        if (throttled) {\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t            throttled.unsubscribe();\n\t        }\n\t        if (hasValue) {\n\t            this.value = null;\n\t            this.hasValue = false;\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    return AuditTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNext(subscriber) {\n\t    subscriber.clearThrottle();\n\t}\n\n\n/***/ },\n/* 208 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar last_1 = __webpack_require__(209);\n\tObservable_1.Observable.prototype.last = last_1.last;\n\n\n/***/ },\n/* 209 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyError_1 = __webpack_require__(194);\n\t/**\n\t * Returns an Observable that emits only the last item emitted by the source Observable.\n\t * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n\t * the last item from the source Observable, the resulting Observable will emit the last item\n\t * from the source Observable that satisfies the predicate.\n\t *\n\t * <img src=\"./img/last.png\" width=\"100%\">\n\t *\n\t * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n\t * callback if the Observable completes before any `next` notification was sent.\n\t * @param {function} predicate - the condition any source emitted item has to satisfy.\n\t * @return {Observable} an Observable that emits only the last item satisfying the given condition\n\t * from the source, or an NoSuchElementException if no such items are emitted.\n\t * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n\t * @method last\n\t * @owner Observable\n\t */\n\tfunction last(predicate, resultSelector, defaultValue) {\n\t    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n\t}\n\texports.last = last;\n\tvar LastOperator = (function () {\n\t    function LastOperator(predicate, resultSelector, defaultValue, source) {\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t    }\n\t    LastOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n\t    };\n\t    return LastOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar LastSubscriber = (function (_super) {\n\t    __extends(LastSubscriber, _super);\n\t    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t        this.hasValue = false;\n\t        this.index = 0;\n\t        if (typeof defaultValue !== 'undefined') {\n\t            this.lastValue = defaultValue;\n\t            this.hasValue = true;\n\t        }\n\t    }\n\t    LastSubscriber.prototype._next = function (value) {\n\t        var index = this.index++;\n\t        if (this.predicate) {\n\t            this._tryPredicate(value, index);\n\t        }\n\t        else {\n\t            if (this.resultSelector) {\n\t                this._tryResultSelector(value, index);\n\t                return;\n\t            }\n\t            this.lastValue = value;\n\t            this.hasValue = true;\n\t        }\n\t    };\n\t    LastSubscriber.prototype._tryPredicate = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, index, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            if (this.resultSelector) {\n\t                this._tryResultSelector(value, index);\n\t                return;\n\t            }\n\t            this.lastValue = value;\n\t            this.hasValue = true;\n\t        }\n\t    };\n\t    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.lastValue = result;\n\t        this.hasValue = true;\n\t    };\n\t    LastSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (this.hasValue) {\n\t            destination.next(this.lastValue);\n\t            destination.complete();\n\t        }\n\t        else {\n\t            destination.error(new EmptyError_1.EmptyError);\n\t        }\n\t    };\n\t    return LastSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 210 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar let_1 = __webpack_require__(211);\n\tObservable_1.Observable.prototype.let = let_1.letProto;\n\tObservable_1.Observable.prototype.letBind = let_1.letProto;\n\n\n/***/ },\n/* 211 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * @param func\n\t * @return {Observable<R>}\n\t * @method let\n\t * @owner Observable\n\t */\n\tfunction letProto(func) {\n\t    return func(this);\n\t}\n\texports.letProto = letProto;\n\n\n/***/ },\n/* 212 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar every_1 = __webpack_require__(213);\n\tObservable_1.Observable.prototype.every = every_1.every;\n\n\n/***/ },\n/* 213 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n\t * @param {function} predicate a function for determining if an item meets a specified condition.\n\t * @param {any} [thisArg] optional object to use for `this` in the callback\n\t * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n\t * @method every\n\t * @owner Observable\n\t */\n\tfunction every(predicate, thisArg) {\n\t    return this.lift(new EveryOperator(predicate, thisArg, this));\n\t}\n\texports.every = every;\n\tvar EveryOperator = (function () {\n\t    function EveryOperator(predicate, thisArg, source) {\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t        this.source = source;\n\t    }\n\t    EveryOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n\t    };\n\t    return EveryOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar EverySubscriber = (function (_super) {\n\t    __extends(EverySubscriber, _super);\n\t    function EverySubscriber(destination, predicate, thisArg, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t        this.source = source;\n\t        this.index = 0;\n\t        this.thisArg = thisArg || this;\n\t    }\n\t    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n\t        this.destination.next(everyValueMatch);\n\t        this.destination.complete();\n\t    };\n\t    EverySubscriber.prototype._next = function (value) {\n\t        var result = false;\n\t        try {\n\t            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (!result) {\n\t            this.notifyComplete(false);\n\t        }\n\t    };\n\t    EverySubscriber.prototype._complete = function () {\n\t        this.notifyComplete(true);\n\t    };\n\t    return EverySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 214 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar map_1 = __webpack_require__(215);\n\tObservable_1.Observable.prototype.map = map_1.map;\n\n\n/***/ },\n/* 215 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Applies a given `project` function to each value emitted by the source\n\t * Observable, and emits the resulting values as an Observable.\n\t *\n\t * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n\t * it passes each source value through a transformation function to get\n\t * corresponding output values.</span>\n\t *\n\t * <img src=\"./img/map.png\" width=\"100%\">\n\t *\n\t * Similar to the well known `Array.prototype.map` function, this operator\n\t * applies a projection to each value and emits that projection in the output\n\t * Observable.\n\t *\n\t * @example <caption>Map every every click to the clientX position of that click</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var positions = clicks.map(ev => ev.clientX);\n\t * positions.subscribe(x => console.log(x));\n\t *\n\t * @see {@link mapTo}\n\t * @see {@link pluck}\n\t *\n\t * @param {function(value: T, index: number): R} project The function to apply\n\t * to each `value` emitted by the source Observable. The `index` parameter is\n\t * the number `i` for the i-th emission that has happened since the\n\t * subscription, starting from the number `0`.\n\t * @param {any} [thisArg] An optional argument to define what `this` is in the\n\t * `project` function.\n\t * @return {Observable<R>} An Observable that emits the values from the source\n\t * Observable transformed by the given `project` function.\n\t * @method map\n\t * @owner Observable\n\t */\n\tfunction map(project, thisArg) {\n\t    if (typeof project !== 'function') {\n\t        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n\t    }\n\t    return this.lift(new MapOperator(project, thisArg));\n\t}\n\texports.map = map;\n\tvar MapOperator = (function () {\n\t    function MapOperator(project, thisArg) {\n\t        this.project = project;\n\t        this.thisArg = thisArg;\n\t    }\n\t    MapOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n\t    };\n\t    return MapOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MapSubscriber = (function (_super) {\n\t    __extends(MapSubscriber, _super);\n\t    function MapSubscriber(destination, project, thisArg) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.count = 0;\n\t        this.thisArg = thisArg || this;\n\t    }\n\t    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n\t    // using try/catch optimizations.\n\t    MapSubscriber.prototype._next = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.project.call(this.thisArg, value, this.count++);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return MapSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 216 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mapTo_1 = __webpack_require__(217);\n\tObservable_1.Observable.prototype.mapTo = mapTo_1.mapTo;\n\n\n/***/ },\n/* 217 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits the given constant value on the output Observable every time the source\n\t * Observable emits a value.\n\t *\n\t * <span class=\"informal\">Like {@link map}, but it maps every source value to\n\t * the same output value every time.</span>\n\t *\n\t * <img src=\"./img/mapTo.png\" width=\"100%\">\n\t *\n\t * Takes a constant `value` as argument, and emits that whenever the source\n\t * Observable emits a value. In other words, ignores the actual source value,\n\t * and simply uses the emission moment to know when to emit the given `value`.\n\t *\n\t * @example <caption>Map every every click to the string 'Hi'</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var greetings = clicks.mapTo('Hi');\n\t * greetings.subscribe(x => console.log(x));\n\t *\n\t * @see {@link map}\n\t *\n\t * @param {any} value The value to map each source value to.\n\t * @return {Observable} An Observable that emits the given `value` every time\n\t * the source Observable emits something.\n\t * @method mapTo\n\t * @owner Observable\n\t */\n\tfunction mapTo(value) {\n\t    return this.lift(new MapToOperator(value));\n\t}\n\texports.mapTo = mapTo;\n\tvar MapToOperator = (function () {\n\t    function MapToOperator(value) {\n\t        this.value = value;\n\t    }\n\t    MapToOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MapToSubscriber(subscriber, this.value));\n\t    };\n\t    return MapToOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MapToSubscriber = (function (_super) {\n\t    __extends(MapToSubscriber, _super);\n\t    function MapToSubscriber(destination, value) {\n\t        _super.call(this, destination);\n\t        this.value = value;\n\t    }\n\t    MapToSubscriber.prototype._next = function (x) {\n\t        this.destination.next(this.value);\n\t    };\n\t    return MapToSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 218 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar materialize_1 = __webpack_require__(219);\n\tObservable_1.Observable.prototype.materialize = materialize_1.materialize;\n\n\n/***/ },\n/* 219 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Notification_1 = __webpack_require__(64);\n\t/**\n\t * Represents all of the notifications from the source Observable as `next`\n\t * emissions marked with their original types within {@link Notification}\n\t * objects.\n\t *\n\t * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n\t * {@link Notification} objects, emitted as `next` on the output Observable.\n\t * </span>\n\t *\n\t * <img src=\"./img/materialize.png\" width=\"100%\">\n\t *\n\t * `materialize` returns an Observable that emits a `next` notification for each\n\t * `next`, `error`, or `complete` emission of the source Observable. When the\n\t * source Observable emits `complete`, the output Observable will emit `next` as\n\t * a Notification of type \"complete\", and then it will emit `complete` as well.\n\t * When the source Observable emits `error`, the output will emit `next` as a\n\t * Notification of type \"error\", and then `complete`.\n\t *\n\t * This operator is useful for producing metadata of the source Observable, to\n\t * be consumed as `next` emissions. Use it in conjunction with\n\t * {@link dematerialize}.\n\t *\n\t * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n\t * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n\t * var upperCase = letters.map(x => x.toUpperCase());\n\t * var materialized = upperCase.materialize();\n\t * materialized.subscribe(x => console.log(x));\n\t *\n\t * @see {@link Notification}\n\t * @see {@link dematerialize}\n\t *\n\t * @return {Observable<Notification<T>>} An Observable that emits\n\t * {@link Notification} objects that wrap the original emissions from the source\n\t * Observable with metadata.\n\t * @method materialize\n\t * @owner Observable\n\t */\n\tfunction materialize() {\n\t    return this.lift(new MaterializeOperator());\n\t}\n\texports.materialize = materialize;\n\tvar MaterializeOperator = (function () {\n\t    function MaterializeOperator() {\n\t    }\n\t    MaterializeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MaterializeSubscriber(subscriber));\n\t    };\n\t    return MaterializeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MaterializeSubscriber = (function (_super) {\n\t    __extends(MaterializeSubscriber, _super);\n\t    function MaterializeSubscriber(destination) {\n\t        _super.call(this, destination);\n\t    }\n\t    MaterializeSubscriber.prototype._next = function (value) {\n\t        this.destination.next(Notification_1.Notification.createNext(value));\n\t    };\n\t    MaterializeSubscriber.prototype._error = function (err) {\n\t        var destination = this.destination;\n\t        destination.next(Notification_1.Notification.createError(err));\n\t        destination.complete();\n\t    };\n\t    MaterializeSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        destination.next(Notification_1.Notification.createComplete());\n\t        destination.complete();\n\t    };\n\t    return MaterializeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 220 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar max_1 = __webpack_require__(221);\n\tObservable_1.Observable.prototype.max = max_1.max;\n\n\n/***/ },\n/* 221 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar reduce_1 = __webpack_require__(222);\n\t/**\n\t * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n\t * and when source Observable completes it emits a single item: the item with the largest number.\n\t *\n\t * <img src=\"./img/max.png\" width=\"100%\">\n\t *\n\t * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n\t * items.\n\t * @return {Observable} an Observable that emits item with the largest number.\n\t * @method max\n\t * @owner Observable\n\t */\n\tfunction max(comparer) {\n\t    var max = (typeof comparer === 'function')\n\t        ? comparer\n\t        : function (x, y) { return x > y ? x : y; };\n\t    return this.lift(new reduce_1.ReduceOperator(max));\n\t}\n\texports.max = max;\n\n\n/***/ },\n/* 222 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Applies an accumulator function over the source Observable, and returns the\n\t * accumulated result when the source completes, given an optional seed value.\n\t *\n\t * <span class=\"informal\">Combines together all values emitted on the source,\n\t * using an accumulator function that knows how to join a new source value into\n\t * the accumulation from the past.</span>\n\t *\n\t * <img src=\"./img/reduce.png\" width=\"100%\">\n\t *\n\t * Like\n\t * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n\t * `reduce` applies an `accumulator` function against an accumulation and each\n\t * value of the source Observable (from the past) to reduce it to a single\n\t * value, emitted on the output Observable. Note that `reduce` will only emit\n\t * one value, only when the source Observable completes. It is equivalent to\n\t * applying operator {@link scan} followed by operator {@link last}.\n\t *\n\t * Returns an Observable that applies a specified `accumulator` function to each\n\t * item emitted by the source Observable. If a `seed` value is specified, then\n\t * that value will be used as the initial value for the accumulator. If no seed\n\t * value is specified, the first item of the source is used as the seed.\n\t *\n\t * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n\t * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n\t *   .takeUntil(Rx.Observable.interval(5000));\n\t * var ones = clicksInFiveSeconds.mapTo(1);\n\t * var seed = 0;\n\t * var count = ones.reduce((acc, one) => acc + one, seed);\n\t * count.subscribe(x => console.log(x));\n\t *\n\t * @see {@link count}\n\t * @see {@link expand}\n\t * @see {@link mergeScan}\n\t * @see {@link scan}\n\t *\n\t * @param {function(acc: R, value: T): R} accumulator The accumulator function\n\t * called on each source value.\n\t * @param {R} [seed] The initial accumulation value.\n\t * @return {Observable<R>} An observable of the accumulated values.\n\t * @return {Observable<R>} An Observable that emits a single value that is the\n\t * result of accumulating the values emitted by the source Observable.\n\t * @method reduce\n\t * @owner Observable\n\t */\n\tfunction reduce(accumulator, seed) {\n\t    return this.lift(new ReduceOperator(accumulator, seed));\n\t}\n\texports.reduce = reduce;\n\tvar ReduceOperator = (function () {\n\t    function ReduceOperator(accumulator, seed) {\n\t        this.accumulator = accumulator;\n\t        this.seed = seed;\n\t    }\n\t    ReduceOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n\t    };\n\t    return ReduceOperator;\n\t}());\n\texports.ReduceOperator = ReduceOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ReduceSubscriber = (function (_super) {\n\t    __extends(ReduceSubscriber, _super);\n\t    function ReduceSubscriber(destination, accumulator, seed) {\n\t        _super.call(this, destination);\n\t        this.accumulator = accumulator;\n\t        this.hasValue = false;\n\t        this.acc = seed;\n\t        this.accumulator = accumulator;\n\t        this.hasSeed = typeof seed !== 'undefined';\n\t    }\n\t    ReduceSubscriber.prototype._next = function (value) {\n\t        if (this.hasValue || (this.hasValue = this.hasSeed)) {\n\t            this._tryReduce(value);\n\t        }\n\t        else {\n\t            this.acc = value;\n\t            this.hasValue = true;\n\t        }\n\t    };\n\t    ReduceSubscriber.prototype._tryReduce = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.accumulator(this.acc, value);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.acc = result;\n\t    };\n\t    ReduceSubscriber.prototype._complete = function () {\n\t        if (this.hasValue || this.hasSeed) {\n\t            this.destination.next(this.acc);\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    return ReduceSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.ReduceSubscriber = ReduceSubscriber;\n\n\n/***/ },\n/* 223 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar merge_1 = __webpack_require__(89);\n\tObservable_1.Observable.prototype.merge = merge_1.merge;\n\n\n/***/ },\n/* 224 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeAll_1 = __webpack_require__(48);\n\tObservable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;\n\n\n/***/ },\n/* 225 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeMap_1 = __webpack_require__(147);\n\tObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\n\tObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n\n\n/***/ },\n/* 226 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeMapTo_1 = __webpack_require__(150);\n\tObservable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;\n\tObservable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;\n\n\n/***/ },\n/* 227 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeScan_1 = __webpack_require__(228);\n\tObservable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;\n\n\n/***/ },\n/* 228 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * @param project\n\t * @param seed\n\t * @param concurrent\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method mergeScan\n\t * @owner Observable\n\t */\n\tfunction mergeScan(project, seed, concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    return this.lift(new MergeScanOperator(project, seed, concurrent));\n\t}\n\texports.mergeScan = mergeScan;\n\tvar MergeScanOperator = (function () {\n\t    function MergeScanOperator(project, seed, concurrent) {\n\t        this.project = project;\n\t        this.seed = seed;\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeScanOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MergeScanSubscriber(subscriber, this.project, this.seed, this.concurrent));\n\t    };\n\t    return MergeScanOperator;\n\t}());\n\texports.MergeScanOperator = MergeScanOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeScanSubscriber = (function (_super) {\n\t    __extends(MergeScanSubscriber, _super);\n\t    function MergeScanSubscriber(destination, project, acc, concurrent) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.acc = acc;\n\t        this.concurrent = concurrent;\n\t        this.hasValue = false;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t        this.index = 0;\n\t    }\n\t    MergeScanSubscriber.prototype._next = function (value) {\n\t        if (this.active < this.concurrent) {\n\t            var index = this.index++;\n\t            var ish = tryCatch_1.tryCatch(this.project)(this.acc, value);\n\t            var destination = this.destination;\n\t            if (ish === errorObject_1.errorObject) {\n\t                destination.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                this.active++;\n\t                this._innerSub(ish, value, index);\n\t            }\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n\t        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n\t    };\n\t    MergeScanSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            if (this.hasValue === false) {\n\t                this.destination.next(this.acc);\n\t            }\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var destination = this.destination;\n\t        this.acc = innerValue;\n\t        this.hasValue = true;\n\t        destination.next(innerValue);\n\t    };\n\t    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            if (this.hasValue === false) {\n\t                this.destination.next(this.acc);\n\t            }\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeScanSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeScanSubscriber = MergeScanSubscriber;\n\n\n/***/ },\n/* 229 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar min_1 = __webpack_require__(230);\n\tObservable_1.Observable.prototype.min = min_1.min;\n\n\n/***/ },\n/* 230 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar reduce_1 = __webpack_require__(222);\n\t/**\n\t * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n\t * and when source Observable completes it emits a single item: the item with the smallest number.\n\t *\n\t * <img src=\"./img/min.png\" width=\"100%\">\n\t *\n\t * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n\t * @return {Observable<R>} an Observable that emits item with the smallest number.\n\t * @method min\n\t * @owner Observable\n\t */\n\tfunction min(comparer) {\n\t    var min = (typeof comparer === 'function')\n\t        ? comparer\n\t        : function (x, y) { return x < y ? x : y; };\n\t    return this.lift(new reduce_1.ReduceOperator(min));\n\t}\n\texports.min = min;\n\n\n/***/ },\n/* 231 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar multicast_1 = __webpack_require__(232);\n\tObservable_1.Observable.prototype.multicast = multicast_1.multicast;\n\n\n/***/ },\n/* 232 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar MulticastObservable_1 = __webpack_require__(233);\n\tvar ConnectableObservable_1 = __webpack_require__(234);\n\t/**\n\t * Returns an Observable that emits the results of invoking a specified selector on items\n\t * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n\t *\n\t * <img src=\"./img/multicast.png\" width=\"100%\">\n\t *\n\t * @param {Function|Subject} Factory function to create an intermediate subject through\n\t * which the source sequence's elements will be multicast to the selector function\n\t * or Subject to push source elements into.\n\t * @param {Function} Optional selector function that can use the multicasted source stream\n\t * as many times as needed, without causing multiple subscriptions to the source stream.\n\t * Subscribers to the given source will receive all notifications of the source from the\n\t * time of the subscription forward.\n\t * @return {Observable} an Observable that emits the results of invoking the selector\n\t * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n\t * the underlying stream.\n\t * @method multicast\n\t * @owner Observable\n\t */\n\tfunction multicast(subjectOrSubjectFactory, selector) {\n\t    var subjectFactory;\n\t    if (typeof subjectOrSubjectFactory === 'function') {\n\t        subjectFactory = subjectOrSubjectFactory;\n\t    }\n\t    else {\n\t        subjectFactory = function subjectFactory() {\n\t            return subjectOrSubjectFactory;\n\t        };\n\t    }\n\t    return !selector ?\n\t        new ConnectableObservable_1.ConnectableObservable(this, subjectFactory) :\n\t        new MulticastObservable_1.MulticastObservable(this, subjectFactory, selector);\n\t}\n\texports.multicast = multicast;\n\n\n/***/ },\n/* 233 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ConnectableObservable_1 = __webpack_require__(234);\n\tvar MulticastObservable = (function (_super) {\n\t    __extends(MulticastObservable, _super);\n\t    function MulticastObservable(source, subjectFactory, selector) {\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.subjectFactory = subjectFactory;\n\t        this.selector = selector;\n\t    }\n\t    MulticastObservable.prototype._subscribe = function (subscriber) {\n\t        var _a = this, selector = _a.selector, source = _a.source;\n\t        var connectable = new ConnectableObservable_1.ConnectableObservable(source, this.subjectFactory);\n\t        var subscription = selector(connectable).subscribe(subscriber);\n\t        subscription.add(connectable.connect());\n\t        return subscription;\n\t    };\n\t    return MulticastObservable;\n\t}(Observable_1.Observable));\n\texports.MulticastObservable = MulticastObservable;\n\n\n/***/ },\n/* 234 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * @class ConnectableObservable<T>\n\t */\n\tvar ConnectableObservable = (function (_super) {\n\t    __extends(ConnectableObservable, _super);\n\t    function ConnectableObservable(source, subjectFactory) {\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.subjectFactory = subjectFactory;\n\t        this._refCount = 0;\n\t    }\n\t    ConnectableObservable.prototype._subscribe = function (subscriber) {\n\t        return this.getSubject().subscribe(subscriber);\n\t    };\n\t    ConnectableObservable.prototype.getSubject = function () {\n\t        var subject = this._subject;\n\t        if (!subject || subject.isStopped) {\n\t            this._subject = this.subjectFactory();\n\t        }\n\t        return this._subject;\n\t    };\n\t    ConnectableObservable.prototype.connect = function () {\n\t        var connection = this._connection;\n\t        if (!connection) {\n\t            connection = this._connection = new Subscription_1.Subscription();\n\t            connection.add(this.source\n\t                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\t            if (connection.isUnsubscribed) {\n\t                this._connection = null;\n\t                connection = Subscription_1.Subscription.EMPTY;\n\t            }\n\t            else {\n\t                this._connection = connection;\n\t            }\n\t        }\n\t        return connection;\n\t    };\n\t    ConnectableObservable.prototype.refCount = function () {\n\t        return this.lift(new RefCountOperator(this));\n\t    };\n\t    return ConnectableObservable;\n\t}(Observable_1.Observable));\n\texports.ConnectableObservable = ConnectableObservable;\n\tvar ConnectableSubscriber = (function (_super) {\n\t    __extends(ConnectableSubscriber, _super);\n\t    function ConnectableSubscriber(destination, connectable) {\n\t        _super.call(this, destination);\n\t        this.connectable = connectable;\n\t    }\n\t    ConnectableSubscriber.prototype._error = function (err) {\n\t        this._unsubscribe();\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    ConnectableSubscriber.prototype._complete = function () {\n\t        this._unsubscribe();\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    ConnectableSubscriber.prototype._unsubscribe = function () {\n\t        var connectable = this.connectable;\n\t        if (connectable) {\n\t            this.connectable = null;\n\t            var connection = connectable._connection;\n\t            connectable._refCount = 0;\n\t            connectable._subject = null;\n\t            connectable._connection = null;\n\t            if (connection) {\n\t                connection.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    return ConnectableSubscriber;\n\t}(Subject_1.SubjectSubscriber));\n\tvar RefCountOperator = (function () {\n\t    function RefCountOperator(connectable) {\n\t        this.connectable = connectable;\n\t    }\n\t    RefCountOperator.prototype.call = function (subscriber, source) {\n\t        var connectable = this.connectable;\n\t        connectable._refCount++;\n\t        var refCounter = new RefCountSubscriber(subscriber, connectable);\n\t        var subscription = source._subscribe(refCounter);\n\t        if (!refCounter.isUnsubscribed) {\n\t            refCounter.connection = connectable.connect();\n\t        }\n\t        return subscription;\n\t    };\n\t    return RefCountOperator;\n\t}());\n\tvar RefCountSubscriber = (function (_super) {\n\t    __extends(RefCountSubscriber, _super);\n\t    function RefCountSubscriber(destination, connectable) {\n\t        _super.call(this, destination);\n\t        this.connectable = connectable;\n\t    }\n\t    RefCountSubscriber.prototype._unsubscribe = function () {\n\t        var connectable = this.connectable;\n\t        if (!connectable) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        this.connectable = null;\n\t        var refCount = connectable._refCount;\n\t        if (refCount <= 0) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        connectable._refCount = refCount - 1;\n\t        if (refCount > 1) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        ///\n\t        // Compare the local RefCountSubscriber's connection Subscription to the\n\t        // connection Subscription on the shared ConnectableObservable. In cases\n\t        // where the ConnectableObservable source synchronously emits values, and\n\t        // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n\t        // execution continues to here before the RefCountOperator has a chance to\n\t        // supply the RefCountSubscriber with the shared connection Subscription.\n\t        // For example:\n\t        // ```\n\t        // Observable.range(0, 10)\n\t        //   .publish()\n\t        //   .refCount()\n\t        //   .take(5)\n\t        //   .subscribe();\n\t        // ```\n\t        // In order to account for this case, RefCountSubscriber should only dispose\n\t        // the ConnectableObservable's shared connection Subscription if the\n\t        // connection Subscription exists, *and* either:\n\t        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n\t        //      Subscription yet, or,\n\t        //   b. RefCountSubscriber's connection Subscription reference is identical\n\t        //      to the shared connection Subscription\n\t        ///\n\t        var connection = this.connection;\n\t        var sharedConnection = connectable._connection;\n\t        this.connection = null;\n\t        if (sharedConnection && (!connection || sharedConnection === connection)) {\n\t            sharedConnection.unsubscribe();\n\t        }\n\t    };\n\t    return RefCountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 235 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar observeOn_1 = __webpack_require__(63);\n\tObservable_1.Observable.prototype.observeOn = observeOn_1.observeOn;\n\n\n/***/ },\n/* 236 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar onErrorResumeNext_1 = __webpack_require__(99);\n\tObservable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n\n\n/***/ },\n/* 237 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar pairwise_1 = __webpack_require__(238);\n\tObservable_1.Observable.prototype.pairwise = pairwise_1.pairwise;\n\n\n/***/ },\n/* 238 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Groups pairs of consecutive emissions together and emits them as an array of\n\t * two values.\n\t *\n\t * <span class=\"informal\">Puts the current value and previous value together as\n\t * an array, and emits that.</span>\n\t *\n\t * <img src=\"./img/pairwise.png\" width=\"100%\">\n\t *\n\t * The Nth emission from the source Observable will cause the output Observable\n\t * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n\t * pair. For this reason, `pairwise` emits on the second and subsequent\n\t * emissions from the source Observable, but not on the first emission, because\n\t * there is no previous value in that case.\n\t *\n\t * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var pairs = clicks.pairwise();\n\t * var distance = pairs.map(pair => {\n\t *   var x0 = pair[0].clientX;\n\t *   var y0 = pair[0].clientY;\n\t *   var x1 = pair[1].clientX;\n\t *   var y1 = pair[1].clientY;\n\t *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n\t * });\n\t * distance.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t *\n\t * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n\t * consecutive values from the source Observable.\n\t * @method pairwise\n\t * @owner Observable\n\t */\n\tfunction pairwise() {\n\t    return this.lift(new PairwiseOperator());\n\t}\n\texports.pairwise = pairwise;\n\tvar PairwiseOperator = (function () {\n\t    function PairwiseOperator() {\n\t    }\n\t    PairwiseOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new PairwiseSubscriber(subscriber));\n\t    };\n\t    return PairwiseOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar PairwiseSubscriber = (function (_super) {\n\t    __extends(PairwiseSubscriber, _super);\n\t    function PairwiseSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.hasPrev = false;\n\t    }\n\t    PairwiseSubscriber.prototype._next = function (value) {\n\t        if (this.hasPrev) {\n\t            this.destination.next([this.prev, value]);\n\t        }\n\t        else {\n\t            this.hasPrev = true;\n\t        }\n\t        this.prev = value;\n\t    };\n\t    return PairwiseSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 239 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar partition_1 = __webpack_require__(240);\n\tObservable_1.Observable.prototype.partition = partition_1.partition;\n\n\n/***/ },\n/* 240 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar not_1 = __webpack_require__(241);\n\tvar filter_1 = __webpack_require__(185);\n\t/**\n\t * Splits the source Observable into two, one with values that satisfy a\n\t * predicate, and another with values that don't satisfy the predicate.\n\t *\n\t * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n\t * one like the output of {@link filter}, and the other with values that did not\n\t * pass the condition.</span>\n\t *\n\t * <img src=\"./img/partition.png\" width=\"100%\">\n\t *\n\t * `partition` outputs an array with two Observables that partition the values\n\t * from the source Observable through the given `predicate` function. The first\n\t * Observable in that array emits source values for which the predicate argument\n\t * returns true. The second Observable emits source values for which the\n\t * predicate returns false. The first behaves like {@link filter} and the second\n\t * behaves like {@link filter} with the predicate negated.\n\t *\n\t * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n\t * var clicksOnDivs = parts[0];\n\t * var clicksElsewhere = parts[1];\n\t * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n\t * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n\t *\n\t * @see {@link filter}\n\t *\n\t * @param {function(value: T, index: number): boolean} predicate A function that\n\t * evaluates each value emitted by the source Observable. If it returns `true`,\n\t * the value is emitted on the first Observable in the returned array, if\n\t * `false` the value is emitted on the second Observable in the array. The\n\t * `index` parameter is the number `i` for the i-th source emission that has\n\t * happened since the subscription, starting from the number `0`.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n\t * with values that passed the predicate, and another with values that did not\n\t * pass the predicate.\n\t * @method partition\n\t * @owner Observable\n\t */\n\tfunction partition(predicate, thisArg) {\n\t    return [\n\t        filter_1.filter.call(this, predicate),\n\t        filter_1.filter.call(this, not_1.not(predicate, thisArg))\n\t    ];\n\t}\n\texports.partition = partition;\n\n\n/***/ },\n/* 241 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction not(pred, thisArg) {\n\t    function notPred() {\n\t        return !(notPred.pred.apply(notPred.thisArg, arguments));\n\t    }\n\t    notPred.pred = pred;\n\t    notPred.thisArg = thisArg;\n\t    return notPred;\n\t}\n\texports.not = not;\n\n\n/***/ },\n/* 242 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar pluck_1 = __webpack_require__(243);\n\tObservable_1.Observable.prototype.pluck = pluck_1.pluck;\n\n\n/***/ },\n/* 243 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar map_1 = __webpack_require__(215);\n\t/**\n\t * Maps each source value (an object) to its specified nested property.\n\t *\n\t * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n\t * the nested properties of every emitted object.</span>\n\t *\n\t * <img src=\"./img/pluck.png\" width=\"100%\">\n\t *\n\t * Given a list of strings describing a path to an object property, retrieves\n\t * the value of a specified nested property from all values in the source\n\t * Observable. If a property can't be resolved, it will return `undefined` for\n\t * that value.\n\t *\n\t * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var tagNames = clicks.pluck('target', 'tagName');\n\t * tagNames.subscribe(x => console.log(x));\n\t *\n\t * @see {@link map}\n\t *\n\t * @param {...string} properties The nested properties to pluck from each source\n\t * value (an object).\n\t * @return {Observable} Returns a new Observable of property values from the\n\t * source values.\n\t * @method pluck\n\t * @owner Observable\n\t */\n\tfunction pluck() {\n\t    var properties = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        properties[_i - 0] = arguments[_i];\n\t    }\n\t    var length = properties.length;\n\t    if (length === 0) {\n\t        throw new Error('List of properties cannot be empty.');\n\t    }\n\t    return map_1.map.call(this, plucker(properties, length));\n\t}\n\texports.pluck = pluck;\n\tfunction plucker(props, length) {\n\t    var mapper = function (x) {\n\t        var currentProp = x;\n\t        for (var i = 0; i < length; i++) {\n\t            var p = currentProp[props[i]];\n\t            if (typeof p !== 'undefined') {\n\t                currentProp = p;\n\t            }\n\t            else {\n\t                return undefined;\n\t            }\n\t        }\n\t        return currentProp;\n\t    };\n\t    return mapper;\n\t}\n\n\n/***/ },\n/* 244 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publish_1 = __webpack_require__(245);\n\tObservable_1.Observable.prototype.publish = publish_1.publish;\n\n\n/***/ },\n/* 245 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subject_1 = __webpack_require__(6);\n\tvar multicast_1 = __webpack_require__(232);\n\t/**\n\t * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n\t * before it begins emitting items to those Observers that have subscribed to it.\n\t *\n\t * <img src=\"./img/publish.png\" width=\"100%\">\n\t *\n\t * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n\t * without causing multiple subscriptions to the source sequence.\n\t * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n\t * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n\t * @method publish\n\t * @owner Observable\n\t */\n\tfunction publish(selector) {\n\t    return selector ? multicast_1.multicast.call(this, function () { return new Subject_1.Subject(); }, selector) :\n\t        multicast_1.multicast.call(this, new Subject_1.Subject());\n\t}\n\texports.publish = publish;\n\n\n/***/ },\n/* 246 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publishBehavior_1 = __webpack_require__(247);\n\tObservable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;\n\n\n/***/ },\n/* 247 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar BehaviorSubject_1 = __webpack_require__(248);\n\tvar multicast_1 = __webpack_require__(232);\n\t/**\n\t * @param value\n\t * @return {ConnectableObservable<T>}\n\t * @method publishBehavior\n\t * @owner Observable\n\t */\n\tfunction publishBehavior(value) {\n\t    return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));\n\t}\n\texports.publishBehavior = publishBehavior;\n\n\n/***/ },\n/* 248 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar throwError_1 = __webpack_require__(249);\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(24);\n\t/**\n\t * @class BehaviorSubject<T>\n\t */\n\tvar BehaviorSubject = (function (_super) {\n\t    __extends(BehaviorSubject, _super);\n\t    function BehaviorSubject(_value) {\n\t        _super.call(this);\n\t        this._value = _value;\n\t    }\n\t    BehaviorSubject.prototype.getValue = function () {\n\t        if (this.hasError) {\n\t            throwError_1.throwError(this.thrownError);\n\t        }\n\t        else if (this.isUnsubscribed) {\n\t            throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());\n\t        }\n\t        else {\n\t            return this._value;\n\t        }\n\t    };\n\t    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n\t        get: function () {\n\t            return this.getValue();\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    BehaviorSubject.prototype._subscribe = function (subscriber) {\n\t        var subscription = _super.prototype._subscribe.call(this, subscriber);\n\t        if (subscription && !subscription.isUnsubscribed) {\n\t            subscriber.next(this._value);\n\t        }\n\t        return subscription;\n\t    };\n\t    BehaviorSubject.prototype.next = function (value) {\n\t        _super.prototype.next.call(this, this._value = value);\n\t    };\n\t    return BehaviorSubject;\n\t}(Subject_1.Subject));\n\texports.BehaviorSubject = BehaviorSubject;\n\n\n/***/ },\n/* 249 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction throwError(e) { throw e; }\n\texports.throwError = throwError;\n\n\n/***/ },\n/* 250 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publishReplay_1 = __webpack_require__(251);\n\tObservable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;\n\n\n/***/ },\n/* 251 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ReplaySubject_1 = __webpack_require__(122);\n\tvar multicast_1 = __webpack_require__(232);\n\t/**\n\t * @param bufferSize\n\t * @param windowTime\n\t * @param scheduler\n\t * @return {ConnectableObservable<T>}\n\t * @method publishReplay\n\t * @owner Observable\n\t */\n\tfunction publishReplay(bufferSize, windowTime, scheduler) {\n\t    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n\t    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n\t    return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));\n\t}\n\texports.publishReplay = publishReplay;\n\n\n/***/ },\n/* 252 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publishLast_1 = __webpack_require__(253);\n\tObservable_1.Observable.prototype.publishLast = publishLast_1.publishLast;\n\n\n/***/ },\n/* 253 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AsyncSubject_1 = __webpack_require__(29);\n\tvar multicast_1 = __webpack_require__(232);\n\t/**\n\t * @return {ConnectableObservable<T>}\n\t * @method publishLast\n\t * @owner Observable\n\t */\n\tfunction publishLast() {\n\t    return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());\n\t}\n\texports.publishLast = publishLast;\n\n\n/***/ },\n/* 254 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar race_1 = __webpack_require__(91);\n\tObservable_1.Observable.prototype.race = race_1.race;\n\n\n/***/ },\n/* 255 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar reduce_1 = __webpack_require__(222);\n\tObservable_1.Observable.prototype.reduce = reduce_1.reduce;\n\n\n/***/ },\n/* 256 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar repeat_1 = __webpack_require__(257);\n\tObservable_1.Observable.prototype.repeat = repeat_1.repeat;\n\n\n/***/ },\n/* 257 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\t/**\n\t * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n\t * on a particular Scheduler.\n\t *\n\t * <img src=\"./img/repeat.png\" width=\"100%\">\n\t *\n\t * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n\t * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n\t * an empty Observable.\n\t * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n\t * count times.\n\t * @method repeat\n\t * @owner Observable\n\t */\n\tfunction repeat(count) {\n\t    if (count === void 0) { count = -1; }\n\t    if (count === 0) {\n\t        return new EmptyObservable_1.EmptyObservable();\n\t    }\n\t    else if (count < 0) {\n\t        return this.lift(new RepeatOperator(-1, this));\n\t    }\n\t    else {\n\t        return this.lift(new RepeatOperator(count - 1, this));\n\t    }\n\t}\n\texports.repeat = repeat;\n\tvar RepeatOperator = (function () {\n\t    function RepeatOperator(count, source) {\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RepeatOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n\t    };\n\t    return RepeatOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RepeatSubscriber = (function (_super) {\n\t    __extends(RepeatSubscriber, _super);\n\t    function RepeatSubscriber(destination, count, source) {\n\t        _super.call(this, destination);\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RepeatSubscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            var _a = this, source = _a.source, count = _a.count;\n\t            if (count === 0) {\n\t                return _super.prototype.complete.call(this);\n\t            }\n\t            else if (count > -1) {\n\t                this.count = count - 1;\n\t            }\n\t            this.unsubscribe();\n\t            this.isStopped = false;\n\t            this.isUnsubscribed = false;\n\t            source.subscribe(this);\n\t        }\n\t    };\n\t    return RepeatSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 258 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar retry_1 = __webpack_require__(259);\n\tObservable_1.Observable.prototype.retry = retry_1.retry;\n\n\n/***/ },\n/* 259 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n\t * predicate returns true for that specific exception and retry count.\n\t * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n\t * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n\t *\n\t * <img src=\"./img/retry.png\" width=\"100%\">\n\t *\n\t * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n\t * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n\t * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n\t * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n\t * @param {number} number of retry attempts before failing.\n\t * @return {Observable} the source Observable modified with the retry logic.\n\t * @method retry\n\t * @owner Observable\n\t */\n\tfunction retry(count) {\n\t    if (count === void 0) { count = -1; }\n\t    return this.lift(new RetryOperator(count, this));\n\t}\n\texports.retry = retry;\n\tvar RetryOperator = (function () {\n\t    function RetryOperator(count, source) {\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RetryOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n\t    };\n\t    return RetryOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RetrySubscriber = (function (_super) {\n\t    __extends(RetrySubscriber, _super);\n\t    function RetrySubscriber(destination, count, source) {\n\t        _super.call(this, destination);\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RetrySubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var _a = this, source = _a.source, count = _a.count;\n\t            if (count === 0) {\n\t                return _super.prototype.error.call(this, err);\n\t            }\n\t            else if (count > -1) {\n\t                this.count = count - 1;\n\t            }\n\t            this.unsubscribe();\n\t            this.isStopped = false;\n\t            this.isUnsubscribed = false;\n\t            source.subscribe(this);\n\t        }\n\t    };\n\t    return RetrySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 260 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar retryWhen_1 = __webpack_require__(261);\n\tObservable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;\n\n\n/***/ },\n/* 261 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n\t * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n\t * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n\t * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n\t * Scheduler.\n\t *\n\t * <img src=\"./img/retryWhen.png\" width=\"100%\">\n\t *\n\t * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n\t * aborting the retry.\n\t * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n\t * @return {Observable} the source Observable modified with retry logic.\n\t * @method retryWhen\n\t * @owner Observable\n\t */\n\tfunction retryWhen(notifier) {\n\t    return this.lift(new RetryWhenOperator(notifier, this));\n\t}\n\texports.retryWhen = retryWhen;\n\tvar RetryWhenOperator = (function () {\n\t    function RetryWhenOperator(notifier, source) {\n\t        this.notifier = notifier;\n\t        this.source = source;\n\t    }\n\t    RetryWhenOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n\t    };\n\t    return RetryWhenOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RetryWhenSubscriber = (function (_super) {\n\t    __extends(RetryWhenSubscriber, _super);\n\t    function RetryWhenSubscriber(destination, notifier, source) {\n\t        _super.call(this, destination);\n\t        this.notifier = notifier;\n\t        this.source = source;\n\t    }\n\t    RetryWhenSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var errors = this.errors;\n\t            var retries = this.retries;\n\t            var retriesSubscription = this.retriesSubscription;\n\t            if (!retries) {\n\t                errors = new Subject_1.Subject();\n\t                retries = tryCatch_1.tryCatch(this.notifier)(errors);\n\t                if (retries === errorObject_1.errorObject) {\n\t                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n\t                }\n\t                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n\t            }\n\t            else {\n\t                this.errors = null;\n\t                this.retriesSubscription = null;\n\t            }\n\t            this.unsubscribe();\n\t            this.isUnsubscribed = false;\n\t            this.errors = errors;\n\t            this.retries = retries;\n\t            this.retriesSubscription = retriesSubscription;\n\t            errors.next(err);\n\t        }\n\t    };\n\t    RetryWhenSubscriber.prototype._unsubscribe = function () {\n\t        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n\t        if (errors) {\n\t            errors.unsubscribe();\n\t            this.errors = null;\n\t        }\n\t        if (retriesSubscription) {\n\t            retriesSubscription.unsubscribe();\n\t            this.retriesSubscription = null;\n\t        }\n\t        this.retries = null;\n\t    };\n\t    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n\t        this.errors = null;\n\t        this.retries = null;\n\t        this.retriesSubscription = null;\n\t        this.unsubscribe();\n\t        this.isStopped = false;\n\t        this.isUnsubscribed = false;\n\t        this.errors = errors;\n\t        this.retries = retries;\n\t        this.retriesSubscription = retriesSubscription;\n\t        this.source.subscribe(this);\n\t    };\n\t    return RetryWhenSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 262 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar sample_1 = __webpack_require__(263);\n\tObservable_1.Observable.prototype.sample = sample_1.sample;\n\n\n/***/ },\n/* 263 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Emits the most recently emitted value from the source Observable whenever\n\t * another Observable, the `notifier`, emits.\n\t *\n\t * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n\t * the `notifier` Observable emits something.</span>\n\t *\n\t * <img src=\"./img/sample.png\" width=\"100%\">\n\t *\n\t * Whenever the `notifier` Observable emits a value or completes, `sample`\n\t * looks at the source Observable and emits whichever value it has most recently\n\t * emitted since the previous sampling, unless the source has not emitted\n\t * anything since the previous sampling. The `notifier` is subscribed to as soon\n\t * as the output Observable is subscribed.\n\t *\n\t * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n\t * var seconds = Rx.Observable.interval(1000);\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = seconds.sample(clicks);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounce}\n\t * @see {@link sampleTime}\n\t * @see {@link throttle}\n\t *\n\t * @param {Observable<any>} notifier The Observable to use for sampling the\n\t * source Observable.\n\t * @return {Observable<T>} An Observable that emits the results of sampling the\n\t * values emitted by the source Observable whenever the notifier Observable\n\t * emits value or completes.\n\t * @method sample\n\t * @owner Observable\n\t */\n\tfunction sample(notifier) {\n\t    return this.lift(new SampleOperator(notifier));\n\t}\n\texports.sample = sample;\n\tvar SampleOperator = (function () {\n\t    function SampleOperator(notifier) {\n\t        this.notifier = notifier;\n\t    }\n\t    SampleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n\t    };\n\t    return SampleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SampleSubscriber = (function (_super) {\n\t    __extends(SampleSubscriber, _super);\n\t    function SampleSubscriber(destination, notifier) {\n\t        _super.call(this, destination);\n\t        this.hasValue = false;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n\t    }\n\t    SampleSubscriber.prototype._next = function (value) {\n\t        this.value = value;\n\t        this.hasValue = true;\n\t    };\n\t    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.emitValue();\n\t    };\n\t    SampleSubscriber.prototype.notifyComplete = function () {\n\t        this.emitValue();\n\t    };\n\t    SampleSubscriber.prototype.emitValue = function () {\n\t        if (this.hasValue) {\n\t            this.hasValue = false;\n\t            this.destination.next(this.value);\n\t        }\n\t    };\n\t    return SampleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 264 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar sampleTime_1 = __webpack_require__(265);\n\tObservable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;\n\n\n/***/ },\n/* 265 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * Emits the most recently emitted value from the source Observable within\n\t * periodic time intervals.\n\t *\n\t * <span class=\"informal\">Samples the source Observable at periodic time\n\t * intervals, emitting what it samples.</span>\n\t *\n\t * <img src=\"./img/sampleTime.png\" width=\"100%\">\n\t *\n\t * `sampleTime` periodically looks at the source Observable and emits whichever\n\t * value it has most recently emitted since the previous sampling, unless the\n\t * source has not emitted anything since the previous sampling. The sampling\n\t * happens periodically in time every `period` milliseconds (or the time unit\n\t * defined by the optional `scheduler` argument). The sampling starts as soon as\n\t * the output Observable is subscribed.\n\t *\n\t * @example <caption>Every second, emit the most recent click at most once</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.sampleTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounceTime}\n\t * @see {@link delay}\n\t * @see {@link sample}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {number} period The sampling period expressed in milliseconds or the\n\t * time unit determined internally by the optional `scheduler`.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the sampling.\n\t * @return {Observable<T>} An Observable that emits the results of sampling the\n\t * values emitted by the source Observable at the specified time interval.\n\t * @method sampleTime\n\t * @owner Observable\n\t */\n\tfunction sampleTime(period, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new SampleTimeOperator(period, scheduler));\n\t}\n\texports.sampleTime = sampleTime;\n\tvar SampleTimeOperator = (function () {\n\t    function SampleTimeOperator(period, scheduler) {\n\t        this.period = period;\n\t        this.scheduler = scheduler;\n\t    }\n\t    SampleTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n\t    };\n\t    return SampleTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SampleTimeSubscriber = (function (_super) {\n\t    __extends(SampleTimeSubscriber, _super);\n\t    function SampleTimeSubscriber(destination, period, scheduler) {\n\t        _super.call(this, destination);\n\t        this.period = period;\n\t        this.scheduler = scheduler;\n\t        this.hasValue = false;\n\t        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\n\t    }\n\t    SampleTimeSubscriber.prototype._next = function (value) {\n\t        this.lastValue = value;\n\t        this.hasValue = true;\n\t    };\n\t    SampleTimeSubscriber.prototype.notifyNext = function () {\n\t        if (this.hasValue) {\n\t            this.hasValue = false;\n\t            this.destination.next(this.lastValue);\n\t        }\n\t    };\n\t    return SampleTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNotification(state) {\n\t    var subscriber = state.subscriber, period = state.period;\n\t    subscriber.notifyNext();\n\t    this.schedule(state, period);\n\t}\n\n\n/***/ },\n/* 266 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar scan_1 = __webpack_require__(267);\n\tObservable_1.Observable.prototype.scan = scan_1.scan;\n\n\n/***/ },\n/* 267 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Applies an accumulator function over the source Observable, and returns each\n\t * intermediate result, with an optional seed value.\n\t *\n\t * <span class=\"informal\">It's like {@link reduce}, but emits the current\n\t * accumulation whenever the source emits a value.</span>\n\t *\n\t * <img src=\"./img/scan.png\" width=\"100%\">\n\t *\n\t * Combines together all values emitted on the source, using an accumulator\n\t * function that knows how to join a new source value into the accumulation from\n\t * the past. Is similar to {@link reduce}, but emits the intermediate\n\t * accumulations.\n\t *\n\t * Returns an Observable that applies a specified `accumulator` function to each\n\t * item emitted by the source Observable. If a `seed` value is specified, then\n\t * that value will be used as the initial value for the accumulator. If no seed\n\t * value is specified, the first item of the source is used as the seed.\n\t *\n\t * @example <caption>Count the number of click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var ones = clicks.mapTo(1);\n\t * var seed = 0;\n\t * var count = ones.scan((acc, one) => acc + one, seed);\n\t * count.subscribe(x => console.log(x));\n\t *\n\t * @see {@link expand}\n\t * @see {@link mergeScan}\n\t * @see {@link reduce}\n\t *\n\t * @param {function(acc: R, value: T, index: number): R} accumulator\n\t * The accumulator function called on each source value.\n\t * @param {T|R} [seed] The initial accumulation value.\n\t * @return {Observable<R>} An observable of the accumulated values.\n\t * @method scan\n\t * @owner Observable\n\t */\n\tfunction scan(accumulator, seed) {\n\t    return this.lift(new ScanOperator(accumulator, seed));\n\t}\n\texports.scan = scan;\n\tvar ScanOperator = (function () {\n\t    function ScanOperator(accumulator, seed) {\n\t        this.accumulator = accumulator;\n\t        this.seed = seed;\n\t    }\n\t    ScanOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n\t    };\n\t    return ScanOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ScanSubscriber = (function (_super) {\n\t    __extends(ScanSubscriber, _super);\n\t    function ScanSubscriber(destination, accumulator, seed) {\n\t        _super.call(this, destination);\n\t        this.accumulator = accumulator;\n\t        this.index = 0;\n\t        this.accumulatorSet = false;\n\t        this.seed = seed;\n\t        this.accumulatorSet = typeof seed !== 'undefined';\n\t    }\n\t    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n\t        get: function () {\n\t            return this._seed;\n\t        },\n\t        set: function (value) {\n\t            this.accumulatorSet = true;\n\t            this._seed = value;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    ScanSubscriber.prototype._next = function (value) {\n\t        if (!this.accumulatorSet) {\n\t            this.seed = value;\n\t            this.destination.next(value);\n\t        }\n\t        else {\n\t            return this._tryNext(value);\n\t        }\n\t    };\n\t    ScanSubscriber.prototype._tryNext = function (value) {\n\t        var index = this.index++;\n\t        var result;\n\t        try {\n\t            result = this.accumulator(this.seed, value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t        this.seed = result;\n\t        this.destination.next(result);\n\t    };\n\t    return ScanSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 268 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar share_1 = __webpack_require__(269);\n\tObservable_1.Observable.prototype.share = share_1.share;\n\n\n/***/ },\n/* 269 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar multicast_1 = __webpack_require__(232);\n\tvar Subject_1 = __webpack_require__(6);\n\tfunction shareSubjectFactory() {\n\t    return new Subject_1.Subject();\n\t}\n\t/**\n\t * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n\t * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n\t * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n\t * This is an alias for .publish().refCount().\n\t *\n\t * <img src=\"./img/share.png\" width=\"100%\">\n\t *\n\t * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n\t * @method share\n\t * @owner Observable\n\t */\n\tfunction share() {\n\t    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();\n\t}\n\texports.share = share;\n\t;\n\n\n/***/ },\n/* 270 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar single_1 = __webpack_require__(271);\n\tObservable_1.Observable.prototype.single = single_1.single;\n\n\n/***/ },\n/* 271 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyError_1 = __webpack_require__(194);\n\t/**\n\t * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n\t * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n\t * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n\t *\n\t * <img src=\"./img/single.png\" width=\"100%\">\n\t *\n\t * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n\t * callback if the Observable completes before any `next` notification was sent.\n\t * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n\t * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n\t * the predicate.\n\t .\n\t * @method single\n\t * @owner Observable\n\t */\n\tfunction single(predicate) {\n\t    return this.lift(new SingleOperator(predicate, this));\n\t}\n\texports.single = single;\n\tvar SingleOperator = (function () {\n\t    function SingleOperator(predicate, source) {\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t    }\n\t    SingleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n\t    };\n\t    return SingleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SingleSubscriber = (function (_super) {\n\t    __extends(SingleSubscriber, _super);\n\t    function SingleSubscriber(destination, predicate, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.seenValue = false;\n\t        this.index = 0;\n\t    }\n\t    SingleSubscriber.prototype.applySingleValue = function (value) {\n\t        if (this.seenValue) {\n\t            this.destination.error('Sequence contains more than one element');\n\t        }\n\t        else {\n\t            this.seenValue = true;\n\t            this.singleValue = value;\n\t        }\n\t    };\n\t    SingleSubscriber.prototype._next = function (value) {\n\t        var predicate = this.predicate;\n\t        this.index++;\n\t        if (predicate) {\n\t            this.tryNext(value);\n\t        }\n\t        else {\n\t            this.applySingleValue(value);\n\t        }\n\t    };\n\t    SingleSubscriber.prototype.tryNext = function (value) {\n\t        try {\n\t            var result = this.predicate(value, this.index, this.source);\n\t            if (result) {\n\t                this.applySingleValue(value);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    SingleSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (this.index > 0) {\n\t            destination.next(this.seenValue ? this.singleValue : undefined);\n\t            destination.complete();\n\t        }\n\t        else {\n\t            destination.error(new EmptyError_1.EmptyError);\n\t        }\n\t    };\n\t    return SingleSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 272 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar skip_1 = __webpack_require__(273);\n\tObservable_1.Observable.prototype.skip = skip_1.skip;\n\n\n/***/ },\n/* 273 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that skips `n` items emitted by an Observable.\n\t *\n\t * <img src=\"./img/skip.png\" width=\"100%\">\n\t *\n\t * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n\t * @return {Observable} an Observable that skips values emitted by the source Observable.\n\t *\n\t * @method skip\n\t * @owner Observable\n\t */\n\tfunction skip(total) {\n\t    return this.lift(new SkipOperator(total));\n\t}\n\texports.skip = skip;\n\tvar SkipOperator = (function () {\n\t    function SkipOperator(total) {\n\t        this.total = total;\n\t    }\n\t    SkipOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SkipSubscriber(subscriber, this.total));\n\t    };\n\t    return SkipOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SkipSubscriber = (function (_super) {\n\t    __extends(SkipSubscriber, _super);\n\t    function SkipSubscriber(destination, total) {\n\t        _super.call(this, destination);\n\t        this.total = total;\n\t        this.count = 0;\n\t    }\n\t    SkipSubscriber.prototype._next = function (x) {\n\t        if (++this.count > this.total) {\n\t            this.destination.next(x);\n\t        }\n\t    };\n\t    return SkipSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 274 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar skipUntil_1 = __webpack_require__(275);\n\tObservable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;\n\n\n/***/ },\n/* 275 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n\t *\n\t * <img src=\"./img/skipUntil.png\" width=\"100%\">\n\t *\n\t * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n\t * be mirrored by the resulting Observable.\n\t * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n\t * an item, then emits the remaining items.\n\t * @method skipUntil\n\t * @owner Observable\n\t */\n\tfunction skipUntil(notifier) {\n\t    return this.lift(new SkipUntilOperator(notifier));\n\t}\n\texports.skipUntil = skipUntil;\n\tvar SkipUntilOperator = (function () {\n\t    function SkipUntilOperator(notifier) {\n\t        this.notifier = notifier;\n\t    }\n\t    SkipUntilOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n\t    };\n\t    return SkipUntilOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SkipUntilSubscriber = (function (_super) {\n\t    __extends(SkipUntilSubscriber, _super);\n\t    function SkipUntilSubscriber(destination, notifier) {\n\t        _super.call(this, destination);\n\t        this.hasValue = false;\n\t        this.isInnerStopped = false;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n\t    }\n\t    SkipUntilSubscriber.prototype._next = function (value) {\n\t        if (this.hasValue) {\n\t            _super.prototype._next.call(this, value);\n\t        }\n\t    };\n\t    SkipUntilSubscriber.prototype._complete = function () {\n\t        if (this.isInnerStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t        else {\n\t            this.unsubscribe();\n\t        }\n\t    };\n\t    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.hasValue = true;\n\t    };\n\t    SkipUntilSubscriber.prototype.notifyComplete = function () {\n\t        this.isInnerStopped = true;\n\t        if (this.isStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    return SkipUntilSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 276 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar skipWhile_1 = __webpack_require__(277);\n\tObservable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;\n\n\n/***/ },\n/* 277 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n\t * true, but emits all further source items as soon as the condition becomes false.\n\t *\n\t * <img src=\"./img/skipWhile.png\" width=\"100%\">\n\t *\n\t * @param {Function} predicate - a function to test each item emitted from the source Observable.\n\t * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n\t * specified predicate becomes false.\n\t * @method skipWhile\n\t * @owner Observable\n\t */\n\tfunction skipWhile(predicate) {\n\t    return this.lift(new SkipWhileOperator(predicate));\n\t}\n\texports.skipWhile = skipWhile;\n\tvar SkipWhileOperator = (function () {\n\t    function SkipWhileOperator(predicate) {\n\t        this.predicate = predicate;\n\t    }\n\t    SkipWhileOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n\t    };\n\t    return SkipWhileOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SkipWhileSubscriber = (function (_super) {\n\t    __extends(SkipWhileSubscriber, _super);\n\t    function SkipWhileSubscriber(destination, predicate) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.skipping = true;\n\t        this.index = 0;\n\t    }\n\t    SkipWhileSubscriber.prototype._next = function (value) {\n\t        var destination = this.destination;\n\t        if (this.skipping) {\n\t            this.tryCallPredicate(value);\n\t        }\n\t        if (!this.skipping) {\n\t            destination.next(value);\n\t        }\n\t    };\n\t    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n\t        try {\n\t            var result = this.predicate(value, this.index++);\n\t            this.skipping = Boolean(result);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    return SkipWhileSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 278 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar startWith_1 = __webpack_require__(279);\n\tObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n\n\n/***/ },\n/* 279 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar ScalarObservable_1 = __webpack_require__(37);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\tvar concat_1 = __webpack_require__(47);\n\tvar isScheduler_1 = __webpack_require__(35);\n\t/**\n\t * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n\t * source Observable.\n\t *\n\t * <img src=\"./img/startWith.png\" width=\"100%\">\n\t *\n\t * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n\t * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n\t * emitted by the source Observable.\n\t * @method startWith\n\t * @owner Observable\n\t */\n\tfunction startWith() {\n\t    var array = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        array[_i - 0] = arguments[_i];\n\t    }\n\t    var scheduler = array[array.length - 1];\n\t    if (isScheduler_1.isScheduler(scheduler)) {\n\t        array.pop();\n\t    }\n\t    else {\n\t        scheduler = null;\n\t    }\n\t    var len = array.length;\n\t    if (len === 1) {\n\t        return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);\n\t    }\n\t    else if (len > 1) {\n\t        return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);\n\t    }\n\t    else {\n\t        return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);\n\t    }\n\t}\n\texports.startWith = startWith;\n\n\n/***/ },\n/* 280 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeOn_1 = __webpack_require__(281);\n\tObservable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;\n\n\n/***/ },\n/* 281 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar SubscribeOnObservable_1 = __webpack_require__(282);\n\t/**\n\t * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n\t *\n\t * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n\t *\n\t * @param {Scheduler} the Scheduler to perform subscription actions on.\n\t * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n\t .\n\t * @method subscribeOn\n\t * @owner Observable\n\t */\n\tfunction subscribeOn(scheduler, delay) {\n\t    if (delay === void 0) { delay = 0; }\n\t    return new SubscribeOnObservable_1.SubscribeOnObservable(this, delay, scheduler);\n\t}\n\texports.subscribeOn = subscribeOn;\n\n\n/***/ },\n/* 282 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar asap_1 = __webpack_require__(283);\n\tvar isNumeric_1 = __webpack_require__(81);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar SubscribeOnObservable = (function (_super) {\n\t    __extends(SubscribeOnObservable, _super);\n\t    function SubscribeOnObservable(source, delayTime, scheduler) {\n\t        if (delayTime === void 0) { delayTime = 0; }\n\t        if (scheduler === void 0) { scheduler = asap_1.asap; }\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.delayTime = delayTime;\n\t        this.scheduler = scheduler;\n\t        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {\n\t            this.delayTime = 0;\n\t        }\n\t        if (!scheduler || typeof scheduler.schedule !== 'function') {\n\t            this.scheduler = asap_1.asap;\n\t        }\n\t    }\n\t    SubscribeOnObservable.create = function (source, delay, scheduler) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (scheduler === void 0) { scheduler = asap_1.asap; }\n\t        return new SubscribeOnObservable(source, delay, scheduler);\n\t    };\n\t    SubscribeOnObservable.dispatch = function (arg) {\n\t        var source = arg.source, subscriber = arg.subscriber;\n\t        return source.subscribe(subscriber);\n\t    };\n\t    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n\t        var delay = this.delayTime;\n\t        var source = this.source;\n\t        var scheduler = this.scheduler;\n\t        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n\t            source: source, subscriber: subscriber\n\t        });\n\t    };\n\t    return SubscribeOnObservable;\n\t}(Observable_1.Observable));\n\texports.SubscribeOnObservable = SubscribeOnObservable;\n\n\n/***/ },\n/* 283 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AsapScheduler_1 = __webpack_require__(284);\n\texports.asap = new AsapScheduler_1.AsapScheduler();\n\n\n/***/ },\n/* 284 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar AsapAction_1 = __webpack_require__(285);\n\tvar QueueScheduler_1 = __webpack_require__(85);\n\tvar AsapScheduler = (function (_super) {\n\t    __extends(AsapScheduler, _super);\n\t    function AsapScheduler() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AsapScheduler.prototype.scheduleNow = function (work, state) {\n\t        return new AsapAction_1.AsapAction(this, work).schedule(state);\n\t    };\n\t    return AsapScheduler;\n\t}(QueueScheduler_1.QueueScheduler));\n\texports.AsapScheduler = AsapScheduler;\n\n\n/***/ },\n/* 285 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Immediate_1 = __webpack_require__(286);\n\tvar FutureAction_1 = __webpack_require__(84);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AsapAction = (function (_super) {\n\t    __extends(AsapAction, _super);\n\t    function AsapAction() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AsapAction.prototype._schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (delay > 0) {\n\t            return _super.prototype._schedule.call(this, state, delay);\n\t        }\n\t        this.delay = delay;\n\t        this.state = state;\n\t        var scheduler = this.scheduler;\n\t        scheduler.actions.push(this);\n\t        if (!scheduler.scheduledId) {\n\t            scheduler.scheduledId = Immediate_1.Immediate.setImmediate(function () {\n\t                scheduler.scheduledId = null;\n\t                scheduler.flush();\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    AsapAction.prototype._unsubscribe = function () {\n\t        var scheduler = this.scheduler;\n\t        var scheduledId = scheduler.scheduledId, actions = scheduler.actions;\n\t        _super.prototype._unsubscribe.call(this);\n\t        if (actions.length === 0) {\n\t            scheduler.active = false;\n\t            if (scheduledId != null) {\n\t                scheduler.scheduledId = null;\n\t                Immediate_1.Immediate.clearImmediate(scheduledId);\n\t            }\n\t        }\n\t    };\n\t    return AsapAction;\n\t}(FutureAction_1.FutureAction));\n\texports.AsapAction = AsapAction;\n\n\n/***/ },\n/* 286 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(clearImmediate, setImmediate) {/**\n\tSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n\t*/\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar ImmediateDefinition = (function () {\n\t    function ImmediateDefinition(root) {\n\t        this.root = root;\n\t        if (root.setImmediate && typeof root.setImmediate === 'function') {\n\t            this.setImmediate = root.setImmediate.bind(root);\n\t            this.clearImmediate = root.clearImmediate.bind(root);\n\t        }\n\t        else {\n\t            this.nextHandle = 1;\n\t            this.tasksByHandle = {};\n\t            this.currentlyRunningATask = false;\n\t            // Don't get fooled by e.g. browserify environments.\n\t            if (this.canUseProcessNextTick()) {\n\t                // For Node.js before 0.9\n\t                this.setImmediate = this.createProcessNextTickSetImmediate();\n\t            }\n\t            else if (this.canUsePostMessage()) {\n\t                // For non-IE10 modern browsers\n\t                this.setImmediate = this.createPostMessageSetImmediate();\n\t            }\n\t            else if (this.canUseMessageChannel()) {\n\t                // For web workers, where supported\n\t                this.setImmediate = this.createMessageChannelSetImmediate();\n\t            }\n\t            else if (this.canUseReadyStateChange()) {\n\t                // For IE 6–8\n\t                this.setImmediate = this.createReadyStateChangeSetImmediate();\n\t            }\n\t            else {\n\t                // For older browsers\n\t                this.setImmediate = this.createSetTimeoutSetImmediate();\n\t            }\n\t            var ci = function clearImmediate(handle) {\n\t                delete clearImmediate.instance.tasksByHandle[handle];\n\t            };\n\t            ci.instance = this;\n\t            this.clearImmediate = ci;\n\t        }\n\t    }\n\t    ImmediateDefinition.prototype.identify = function (o) {\n\t        return this.root.Object.prototype.toString.call(o);\n\t    };\n\t    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n\t        return this.identify(this.root.process) === '[object process]';\n\t    };\n\t    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n\t        return Boolean(this.root.MessageChannel);\n\t    };\n\t    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n\t        var document = this.root.document;\n\t        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n\t    };\n\t    ImmediateDefinition.prototype.canUsePostMessage = function () {\n\t        var root = this.root;\n\t        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n\t        // where `root.postMessage` means something completely different and can't be used for this purpose.\n\t        if (root.postMessage && !root.importScripts) {\n\t            var postMessageIsAsynchronous_1 = true;\n\t            var oldOnMessage = root.onmessage;\n\t            root.onmessage = function () {\n\t                postMessageIsAsynchronous_1 = false;\n\t            };\n\t            root.postMessage('', '*');\n\t            root.onmessage = oldOnMessage;\n\t            return postMessageIsAsynchronous_1;\n\t        }\n\t        return false;\n\t    };\n\t    // This function accepts the same arguments as setImmediate, but\n\t    // returns a function that requires no arguments.\n\t    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n\t        var args = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            args[_i - 1] = arguments[_i];\n\t        }\n\t        var fn = function result() {\n\t            var _a = result, handler = _a.handler, args = _a.args;\n\t            if (typeof handler === 'function') {\n\t                handler.apply(undefined, args);\n\t            }\n\t            else {\n\t                (new Function('' + handler))();\n\t            }\n\t        };\n\t        fn.handler = handler;\n\t        fn.args = args;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n\t        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n\t        return this.nextHandle++;\n\t    };\n\t    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n\t        var fn = function setImmediate() {\n\t            var instance = setImmediate.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n\t        // Installs an event handler on `global` for the `message` event: see\n\t        // * https://developer.mozilla.org/en/DOM/window.postMessage\n\t        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\t        var root = this.root;\n\t        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n\t        var onGlobalMessage = function globalMessageHandler(event) {\n\t            var instance = globalMessageHandler.instance;\n\t            if (event.source === root &&\n\t                typeof event.data === 'string' &&\n\t                event.data.indexOf(messagePrefix) === 0) {\n\t                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n\t            }\n\t        };\n\t        onGlobalMessage.instance = this;\n\t        root.addEventListener('message', onGlobalMessage, false);\n\t        var fn = function setImmediate() {\n\t            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            instance.root.postMessage(messagePrefix + handle, '*');\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        fn.messagePrefix = messagePrefix;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n\t        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n\t        // So if we're currently running a task, we'll need to delay this invocation.\n\t        if (this.currentlyRunningATask) {\n\t            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n\t            // 'too much recursion' error.\n\t            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n\t        }\n\t        else {\n\t            var task = this.tasksByHandle[handle];\n\t            if (task) {\n\t                this.currentlyRunningATask = true;\n\t                try {\n\t                    task();\n\t                }\n\t                finally {\n\t                    this.clearImmediate(handle);\n\t                    this.currentlyRunningATask = false;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n\t        var _this = this;\n\t        var channel = new this.root.MessageChannel();\n\t        channel.port1.onmessage = function (event) {\n\t            var handle = event.data;\n\t            _this.runIfPresent(handle);\n\t        };\n\t        var fn = function setImmediate() {\n\t            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            channel.port2.postMessage(handle);\n\t            return handle;\n\t        };\n\t        fn.channel = channel;\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n\t        var fn = function setImmediate() {\n\t            var instance = setImmediate.instance;\n\t            var root = instance.root;\n\t            var doc = root.document;\n\t            var html = doc.documentElement;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n\t            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\t            var script = doc.createElement('script');\n\t            script.onreadystatechange = function () {\n\t                instance.runIfPresent(handle);\n\t                script.onreadystatechange = null;\n\t                html.removeChild(script);\n\t                script = null;\n\t            };\n\t            html.appendChild(script);\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n\t        var fn = function setImmediate() {\n\t            var instance = setImmediate.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    return ImmediateDefinition;\n\t}());\n\texports.ImmediateDefinition = ImmediateDefinition;\n\texports.Immediate = new ImmediateDefinition(root_1.root);\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(287).clearImmediate, __webpack_require__(287).setImmediate))\n\n/***/ },\n/* 287 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(288).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(287).setImmediate, __webpack_require__(287).clearImmediate))\n\n/***/ },\n/* 288 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\t(function () {\n\t  try {\n\t    cachedSetTimeout = setTimeout;\n\t  } catch (e) {\n\t    cachedSetTimeout = function () {\n\t      throw new Error('setTimeout is not defined');\n\t    }\n\t  }\n\t  try {\n\t    cachedClearTimeout = clearTimeout;\n\t  } catch (e) {\n\t    cachedClearTimeout = function () {\n\t      throw new Error('clearTimeout is not defined');\n\t    }\n\t  }\n\t} ())\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = cachedSetTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    cachedClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        cachedSetTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 289 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar switch_1 = __webpack_require__(290);\n\tObservable_1.Observable.prototype.switch = switch_1._switch;\n\n\n/***/ },\n/* 290 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by\n\t * subscribing to only the most recently emitted of those inner Observables.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n\t * previous inner Observable once a new one appears.</span>\n\t *\n\t * <img src=\"./img/switch.png\" width=\"100%\">\n\t *\n\t * `switch` subscribes to an Observable that emits Observables, also known as a\n\t * higher-order Observable. Each time it observes one of these emitted inner\n\t * Observables, the output Observable subscribes to the inner Observable and\n\t * begins emitting the items emitted by that. So far, it behaves\n\t * like {@link mergeAll}. However, when a new inner Observable is emitted,\n\t * `switch` unsubscribes from the earlier-emitted inner Observable and\n\t * subscribes to the new inner Observable and begins emitting items from it. It\n\t * continues to behave like this for subsequent inner Observables.\n\t *\n\t * @example <caption>Rerun an interval Observable on every click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * // Each click event is mapped to an Observable that ticks every second\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n\t * var switched = higherOrder.switch();\n\t * // The outcome is that `switched` is essentially a timer that restarts\n\t * // on every click. The interval Observables from older clicks do not merge\n\t * // with the current interval Observable.\n\t * switched.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concatAll}\n\t * @see {@link exhaust}\n\t * @see {@link mergeAll}\n\t * @see {@link switchMap}\n\t * @see {@link switchMapTo}\n\t * @see {@link zipAll}\n\t *\n\t * @return {Observable<T>} An Observable that emits the items emitted by the\n\t * Observable most recently emitted by the source Observable.\n\t * @method switch\n\t * @name switch\n\t * @owner Observable\n\t */\n\tfunction _switch() {\n\t    return this.lift(new SwitchOperator());\n\t}\n\texports._switch = _switch;\n\tvar SwitchOperator = (function () {\n\t    function SwitchOperator() {\n\t    }\n\t    SwitchOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchSubscriber(subscriber));\n\t    };\n\t    return SwitchOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchSubscriber = (function (_super) {\n\t    __extends(SwitchSubscriber, _super);\n\t    function SwitchSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.active = 0;\n\t        this.hasCompleted = false;\n\t    }\n\t    SwitchSubscriber.prototype._next = function (value) {\n\t        this.unsubscribeInner();\n\t        this.active++;\n\t        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));\n\t    };\n\t    SwitchSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    SwitchSubscriber.prototype.unsubscribeInner = function () {\n\t        this.active = this.active > 0 ? this.active - 1 : 0;\n\t        var innerSubscription = this.innerSubscription;\n\t        if (innerSubscription) {\n\t            innerSubscription.unsubscribe();\n\t            this.remove(innerSubscription);\n\t        }\n\t    };\n\t    SwitchSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.destination.next(innerValue);\n\t    };\n\t    SwitchSubscriber.prototype.notifyError = function (err) {\n\t        this.destination.error(err);\n\t    };\n\t    SwitchSubscriber.prototype.notifyComplete = function () {\n\t        this.unsubscribeInner();\n\t        if (this.hasCompleted && this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return SwitchSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 291 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar switchMap_1 = __webpack_require__(292);\n\tObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n\n\n/***/ },\n/* 292 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable, emitting values only from the most recently projected Observable.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link switch}.</span>\n\t *\n\t * <img src=\"./img/switchMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an (so-called \"inner\") Observable. Each time it observes one of these\n\t * inner Observables, the output Observable begins emitting the items emitted by\n\t * that inner Observable. When a new inner Observable is emitted, `switchMap`\n\t * stops emitting items from the earlier-emitted inner Observable and begins\n\t * emitting items from the new one. It continues to behave like this for\n\t * subsequent inner Observables.\n\t *\n\t * @example <caption>Rerun an interval Observable on every click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMap}\n\t * @see {@link exhaustMap}\n\t * @see {@link mergeMap}\n\t * @see {@link switch}\n\t * @see {@link switchMapTo}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An Observable that emits the result of applying the\n\t * projection function (and the optional `resultSelector`) to each item emitted\n\t * by the source Observable and taking only the values from the most recently\n\t * projected inner Observable.\n\t * @method switchMap\n\t * @owner Observable\n\t */\n\tfunction switchMap(project, resultSelector) {\n\t    return this.lift(new SwitchMapOperator(project, resultSelector));\n\t}\n\texports.switchMap = switchMap;\n\tvar SwitchMapOperator = (function () {\n\t    function SwitchMapOperator(project, resultSelector) {\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    SwitchMapOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n\t    };\n\t    return SwitchMapOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchMapSubscriber = (function (_super) {\n\t    __extends(SwitchMapSubscriber, _super);\n\t    function SwitchMapSubscriber(destination, project, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.index = 0;\n\t    }\n\t    SwitchMapSubscriber.prototype._next = function (value) {\n\t        var result;\n\t        var index = this.index++;\n\t        try {\n\t            result = this.project(value, index);\n\t        }\n\t        catch (error) {\n\t            this.destination.error(error);\n\t            return;\n\t        }\n\t        this._innerSub(result, value, index);\n\t    };\n\t    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (innerSubscription) {\n\t            innerSubscription.unsubscribe();\n\t        }\n\t        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n\t    };\n\t    SwitchMapSubscriber.prototype._complete = function () {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (!innerSubscription || innerSubscription.isUnsubscribed) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype._unsubscribe = function () {\n\t        this.innerSubscription = null;\n\t    };\n\t    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.innerSubscription = null;\n\t        if (this.isStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (this.resultSelector) {\n\t            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            this.destination.next(innerValue);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return SwitchMapSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 293 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar switchMapTo_1 = __webpack_require__(294);\n\tObservable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;\n\n\n/***/ },\n/* 294 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Projects each source value to the same Observable which is flattened multiple\n\t * times with {@link switch} in the output Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n\t * always to the same inner Observable.</span>\n\t *\n\t * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n\t *\n\t * Maps each source value to the given Observable `innerObservable` regardless\n\t * of the source value, and then flattens those resulting Observables into one\n\t * single Observable, which is the output Observable. The output Observables\n\t * emits values only from the most recently emitted instance of\n\t * `innerObservable`.\n\t *\n\t * @example <caption>Rerun an interval Observable on every click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMapTo}\n\t * @see {@link switch}\n\t * @see {@link switchMap}\n\t * @see {@link mergeMapTo}\n\t *\n\t * @param {Observable} innerObservable An Observable to replace each value from\n\t * the source Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An Observable that emits items from the given\n\t * `innerObservable` every time a value is emitted on the source Observable.\n\t * @return {Observable} An Observable that emits items from the given\n\t * `innerObservable` (and optionally transformed through `resultSelector`) every\n\t * time a value is emitted on the source Observable, and taking only the values\n\t * from the most recently projected inner Observable.\n\t * @method switchMapTo\n\t * @owner Observable\n\t */\n\tfunction switchMapTo(innerObservable, resultSelector) {\n\t    return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n\t}\n\texports.switchMapTo = switchMapTo;\n\tvar SwitchMapToOperator = (function () {\n\t    function SwitchMapToOperator(observable, resultSelector) {\n\t        this.observable = observable;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n\t    };\n\t    return SwitchMapToOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchMapToSubscriber = (function (_super) {\n\t    __extends(SwitchMapToSubscriber, _super);\n\t    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.inner = inner;\n\t        this.resultSelector = resultSelector;\n\t        this.index = 0;\n\t    }\n\t    SwitchMapToSubscriber.prototype._next = function (value) {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (innerSubscription) {\n\t            innerSubscription.unsubscribe();\n\t        }\n\t        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n\t    };\n\t    SwitchMapToSubscriber.prototype._complete = function () {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (!innerSubscription || innerSubscription.isUnsubscribed) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapToSubscriber.prototype._unsubscribe = function () {\n\t        this.innerSubscription = null;\n\t    };\n\t    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.innerSubscription = null;\n\t        if (this.isStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        if (resultSelector) {\n\t            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            destination.next(innerValue);\n\t        }\n\t    };\n\t    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        var result;\n\t        try {\n\t            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t            return;\n\t        }\n\t        destination.next(result);\n\t    };\n\t    return SwitchMapToSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 295 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar take_1 = __webpack_require__(296);\n\tObservable_1.Observable.prototype.take = take_1.take;\n\n\n/***/ },\n/* 296 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(183);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\t/**\n\t * Emits only the first `count` values emitted by the source Observable.\n\t *\n\t * <span class=\"informal\">Takes the first `count` values from the source, then\n\t * completes.</span>\n\t *\n\t * <img src=\"./img/take.png\" width=\"100%\">\n\t *\n\t * `take` returns an Observable that emits only the first `count` values emitted\n\t * by the source Observable. If the source emits fewer than `count` values then\n\t * all of its values are emitted. After that, it completes, regardless if the\n\t * source completes.\n\t *\n\t * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n\t * var interval = Rx.Observable.interval(1000);\n\t * var five = interval.take(5);\n\t * five.subscribe(x => console.log(x));\n\t *\n\t * @see {@link takeLast}\n\t * @see {@link takeUntil}\n\t * @see {@link takeWhile}\n\t * @see {@link skip}\n\t *\n\t * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n\t * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n\t *\n\t * @param {number} count The maximum number of `next` values to emit.\n\t * @return {Observable<T>} An Observable that emits only the first `count`\n\t * values emitted by the source Observable, or all of the values from the source\n\t * if the source emits fewer than `count` values.\n\t * @method take\n\t * @owner Observable\n\t */\n\tfunction take(count) {\n\t    if (count === 0) {\n\t        return new EmptyObservable_1.EmptyObservable();\n\t    }\n\t    else {\n\t        return this.lift(new TakeOperator(count));\n\t    }\n\t}\n\texports.take = take;\n\tvar TakeOperator = (function () {\n\t    function TakeOperator(total) {\n\t        this.total = total;\n\t        if (this.total < 0) {\n\t            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\t        }\n\t    }\n\t    TakeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeSubscriber(subscriber, this.total));\n\t    };\n\t    return TakeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeSubscriber = (function (_super) {\n\t    __extends(TakeSubscriber, _super);\n\t    function TakeSubscriber(destination, total) {\n\t        _super.call(this, destination);\n\t        this.total = total;\n\t        this.count = 0;\n\t    }\n\t    TakeSubscriber.prototype._next = function (value) {\n\t        var total = this.total;\n\t        if (++this.count <= total) {\n\t            this.destination.next(value);\n\t            if (this.count === total) {\n\t                this.destination.complete();\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    return TakeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 297 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar takeLast_1 = __webpack_require__(298);\n\tObservable_1.Observable.prototype.takeLast = takeLast_1.takeLast;\n\n\n/***/ },\n/* 298 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(183);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\t/**\n\t * Emits only the last `count` values emitted by the source Observable.\n\t *\n\t * <span class=\"informal\">Remembers the latest `count` values, then emits those\n\t * only when the source completes.</span>\n\t *\n\t * <img src=\"./img/takeLast.png\" width=\"100%\">\n\t *\n\t * `takeLast` returns an Observable that emits at most the last `count` values\n\t * emitted by the source Observable. If the source emits fewer than `count`\n\t * values then all of its values are emitted. This operator must wait until the\n\t * `complete` notification emission from the source in order to emit the `next`\n\t * values on the output Observable, because otherwise it is impossible to know\n\t * whether or not more values will be emitted on the source. For this reason,\n\t * all values are emitted synchronously, followed by the complete notification.\n\t *\n\t * @example <caption>Take the last 3 values of an Observable with many values</caption>\n\t * var many = Rx.Observable.range(1, 100);\n\t * var lastThree = many.takeLast(3);\n\t * lastThree.subscribe(x => console.log(x));\n\t *\n\t * @see {@link take}\n\t * @see {@link takeUntil}\n\t * @see {@link takeWhile}\n\t * @see {@link skip}\n\t *\n\t * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n\t * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n\t *\n\t * @param {number} count The maximum number of values to emit from the end of\n\t * the sequence of values emitted by the source Observable.\n\t * @return {Observable<T>} An Observable that emits at most the last count\n\t * values emitted by the source Observable.\n\t * @method takeLast\n\t * @owner Observable\n\t */\n\tfunction takeLast(count) {\n\t    if (count === 0) {\n\t        return new EmptyObservable_1.EmptyObservable();\n\t    }\n\t    else {\n\t        return this.lift(new TakeLastOperator(count));\n\t    }\n\t}\n\texports.takeLast = takeLast;\n\tvar TakeLastOperator = (function () {\n\t    function TakeLastOperator(total) {\n\t        this.total = total;\n\t        if (this.total < 0) {\n\t            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\t        }\n\t    }\n\t    TakeLastOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n\t    };\n\t    return TakeLastOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeLastSubscriber = (function (_super) {\n\t    __extends(TakeLastSubscriber, _super);\n\t    function TakeLastSubscriber(destination, total) {\n\t        _super.call(this, destination);\n\t        this.total = total;\n\t        this.ring = new Array();\n\t        this.count = 0;\n\t    }\n\t    TakeLastSubscriber.prototype._next = function (value) {\n\t        var ring = this.ring;\n\t        var total = this.total;\n\t        var count = this.count++;\n\t        if (ring.length < total) {\n\t            ring.push(value);\n\t        }\n\t        else {\n\t            var index = count % total;\n\t            ring[index] = value;\n\t        }\n\t    };\n\t    TakeLastSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        var count = this.count;\n\t        if (count > 0) {\n\t            var total = this.count >= this.total ? this.total : this.count;\n\t            var ring = this.ring;\n\t            for (var i = 0; i < total; i++) {\n\t                var idx = (count++) % total;\n\t                destination.next(ring[idx]);\n\t            }\n\t        }\n\t        destination.complete();\n\t    };\n\t    return TakeLastSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 299 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar takeUntil_1 = __webpack_require__(300);\n\tObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n\n\n/***/ },\n/* 300 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Emits the values emitted by the source Observable until a `notifier`\n\t * Observable emits a value.\n\t *\n\t * <span class=\"informal\">Lets values pass until a second Observable,\n\t * `notifier`, emits something. Then, it completes.</span>\n\t *\n\t * <img src=\"./img/takeUntil.png\" width=\"100%\">\n\t *\n\t * `takeUntil` subscribes and begins mirroring the source Observable. It also\n\t * monitors a second Observable, `notifier` that you provide. If the `notifier`\n\t * emits a value or a complete notification, the output Observable stops\n\t * mirroring the source Observable and completes.\n\t *\n\t * @example <caption>Tick every second until the first click happens</caption>\n\t * var interval = Rx.Observable.interval(1000);\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = interval.takeUntil(clicks);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link take}\n\t * @see {@link takeLast}\n\t * @see {@link takeWhile}\n\t * @see {@link skip}\n\t *\n\t * @param {Observable} notifier The Observable whose first emitted value will\n\t * cause the output Observable of `takeUntil` to stop emitting values from the\n\t * source Observable.\n\t * @return {Observable<T>} An Observable that emits the values from the source\n\t * Observable until such time as `notifier` emits its first value.\n\t * @method takeUntil\n\t * @owner Observable\n\t */\n\tfunction takeUntil(notifier) {\n\t    return this.lift(new TakeUntilOperator(notifier));\n\t}\n\texports.takeUntil = takeUntil;\n\tvar TakeUntilOperator = (function () {\n\t    function TakeUntilOperator(notifier) {\n\t        this.notifier = notifier;\n\t    }\n\t    TakeUntilOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n\t    };\n\t    return TakeUntilOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeUntilSubscriber = (function (_super) {\n\t    __extends(TakeUntilSubscriber, _super);\n\t    function TakeUntilSubscriber(destination, notifier) {\n\t        _super.call(this, destination);\n\t        this.notifier = notifier;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n\t    }\n\t    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.complete();\n\t    };\n\t    TakeUntilSubscriber.prototype.notifyComplete = function () {\n\t        // noop\n\t    };\n\t    return TakeUntilSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 301 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar takeWhile_1 = __webpack_require__(302);\n\tObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n\n\n/***/ },\n/* 302 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits values emitted by the source Observable so long as each value satisfies\n\t * the given `predicate`, and then completes as soon as this `predicate` is not\n\t * satisfied.\n\t *\n\t * <span class=\"informal\">Takes values from the source only while they pass the\n\t * condition given. When the first value does not satisfy, it completes.</span>\n\t *\n\t * <img src=\"./img/takeWhile.png\" width=\"100%\">\n\t *\n\t * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n\t * emitted on the source is given to the `predicate` function which returns a\n\t * boolean, representing a condition to be satisfied by the source values. The\n\t * output Observable emits the source values until such time as the `predicate`\n\t * returns false, at which point `takeWhile` stops mirroring the source\n\t * Observable and completes the output Observable.\n\t *\n\t * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.takeWhile(ev => ev.clientX > 200);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link take}\n\t * @see {@link takeLast}\n\t * @see {@link takeUntil}\n\t * @see {@link skip}\n\t *\n\t * @param {function(value: T, index: number): boolean} predicate A function that\n\t * evaluates a value emitted by the source Observable and returns a boolean.\n\t * Also takes the (zero-based) index as the second argument.\n\t * @return {Observable<T>} An Observable that emits the values from the source\n\t * Observable so long as each value satisfies the condition defined by the\n\t * `predicate`, then completes.\n\t * @method takeWhile\n\t * @owner Observable\n\t */\n\tfunction takeWhile(predicate) {\n\t    return this.lift(new TakeWhileOperator(predicate));\n\t}\n\texports.takeWhile = takeWhile;\n\tvar TakeWhileOperator = (function () {\n\t    function TakeWhileOperator(predicate) {\n\t        this.predicate = predicate;\n\t    }\n\t    TakeWhileOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n\t    };\n\t    return TakeWhileOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeWhileSubscriber = (function (_super) {\n\t    __extends(TakeWhileSubscriber, _super);\n\t    function TakeWhileSubscriber(destination, predicate) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.index = 0;\n\t    }\n\t    TakeWhileSubscriber.prototype._next = function (value) {\n\t        var destination = this.destination;\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, this.index++);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t            return;\n\t        }\n\t        this.nextOrComplete(value, result);\n\t    };\n\t    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n\t        var destination = this.destination;\n\t        if (Boolean(predicateResult)) {\n\t            destination.next(value);\n\t        }\n\t        else {\n\t            destination.complete();\n\t        }\n\t    };\n\t    return TakeWhileSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 303 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar throttle_1 = __webpack_require__(304);\n\tObservable_1.Observable.prototype.throttle = throttle_1.throttle;\n\n\n/***/ },\n/* 304 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Emits a value from the source Observable, then ignores subsequent source\n\t * values for a duration determined by another Observable, then repeats this\n\t * process.\n\t *\n\t * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n\t * duration is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/throttle.png\" width=\"100%\">\n\t *\n\t * `throttle` emits the source Observable values on the output Observable\n\t * when its internal timer is disabled, and ignores source values when the timer\n\t * is enabled. Initially, the timer is disabled. As soon as the first source\n\t * value arrives, it is forwarded to the output Observable, and then the timer\n\t * is enabled by calling the `durationSelector` function with the source value,\n\t * which returns the \"duration\" Observable. When the duration Observable emits a\n\t * value or completes, the timer is disabled, and this process repeats for the\n\t * next source value.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounce}\n\t * @see {@link delayWhen}\n\t * @see {@link sample}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {function(value: T): Observable|Promise} durationSelector A function\n\t * that receives a value from the source Observable, for computing the silencing\n\t * duration for each source value, returned as an Observable or a Promise.\n\t * @return {Observable<T>} An Observable that performs the throttle operation to\n\t * limit the rate of emissions from the source.\n\t * @method throttle\n\t * @owner Observable\n\t */\n\tfunction throttle(durationSelector) {\n\t    return this.lift(new ThrottleOperator(durationSelector));\n\t}\n\texports.throttle = throttle;\n\tvar ThrottleOperator = (function () {\n\t    function ThrottleOperator(durationSelector) {\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    ThrottleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n\t    };\n\t    return ThrottleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ThrottleSubscriber = (function (_super) {\n\t    __extends(ThrottleSubscriber, _super);\n\t    function ThrottleSubscriber(destination, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    ThrottleSubscriber.prototype._next = function (value) {\n\t        if (!this.throttled) {\n\t            this.tryDurationSelector(value);\n\t        }\n\t    };\n\t    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n\t        var duration = null;\n\t        try {\n\t            duration = this.durationSelector(value);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.emitAndThrottle(value, duration);\n\t    };\n\t    ThrottleSubscriber.prototype.emitAndThrottle = function (value, duration) {\n\t        this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n\t        this.destination.next(value);\n\t    };\n\t    ThrottleSubscriber.prototype._unsubscribe = function () {\n\t        var throttled = this.throttled;\n\t        if (throttled) {\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t            throttled.unsubscribe();\n\t        }\n\t    };\n\t    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this._unsubscribe();\n\t    };\n\t    ThrottleSubscriber.prototype.notifyComplete = function () {\n\t        this._unsubscribe();\n\t    };\n\t    return ThrottleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 305 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar throttleTime_1 = __webpack_require__(306);\n\tObservable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;\n\n\n/***/ },\n/* 306 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * Emits a value from the source Observable, then ignores subsequent source\n\t * values for `duration` milliseconds, then repeats this process.\n\t *\n\t * <span class=\"informal\">Lets a value pass, then ignores source values for the\n\t * next `duration` milliseconds.</span>\n\t *\n\t * <img src=\"./img/throttleTime.png\" width=\"100%\">\n\t *\n\t * `throttleTime` emits the source Observable values on the output Observable\n\t * when its internal timer is disabled, and ignores source values when the timer\n\t * is enabled. Initially, the timer is disabled. As soon as the first source\n\t * value arrives, it is forwarded to the output Observable, and then the timer\n\t * is enabled. After `duration` milliseconds (or the time unit determined\n\t * internally by the optional `scheduler`) has passed, the timer is disabled,\n\t * and this process repeats for the next source value. Optionally takes a\n\t * {@link Scheduler} for managing timers.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.throttleTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounceTime}\n\t * @see {@link delay}\n\t * @see {@link sampleTime}\n\t * @see {@link throttle}\n\t *\n\t * @param {number} duration Time to wait before emitting another value after\n\t * emitting the last value, measured in milliseconds or the time unit determined\n\t * internally by the optional `scheduler`.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the sampling.\n\t * @return {Observable<T>} An Observable that performs the throttle operation to\n\t * limit the rate of emissions from the source.\n\t * @method throttleTime\n\t * @owner Observable\n\t */\n\tfunction throttleTime(duration, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new ThrottleTimeOperator(duration, scheduler));\n\t}\n\texports.throttleTime = throttleTime;\n\tvar ThrottleTimeOperator = (function () {\n\t    function ThrottleTimeOperator(duration, scheduler) {\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t    }\n\t    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n\t    };\n\t    return ThrottleTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ThrottleTimeSubscriber = (function (_super) {\n\t    __extends(ThrottleTimeSubscriber, _super);\n\t    function ThrottleTimeSubscriber(destination, duration, scheduler) {\n\t        _super.call(this, destination);\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t    }\n\t    ThrottleTimeSubscriber.prototype._next = function (value) {\n\t        if (!this.throttled) {\n\t            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n\t        var throttled = this.throttled;\n\t        if (throttled) {\n\t            throttled.unsubscribe();\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t        }\n\t    };\n\t    return ThrottleTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNext(arg) {\n\t    var subscriber = arg.subscriber;\n\t    subscriber.clearThrottle();\n\t}\n\n\n/***/ },\n/* 307 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timeInterval_1 = __webpack_require__(308);\n\tObservable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;\n\n\n/***/ },\n/* 308 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * @param scheduler\n\t * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n\t * @method timeInterval\n\t * @owner Observable\n\t */\n\tfunction timeInterval(scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new TimeIntervalOperator(scheduler));\n\t}\n\texports.timeInterval = timeInterval;\n\tvar TimeInterval = (function () {\n\t    function TimeInterval(value, interval) {\n\t        this.value = value;\n\t        this.interval = interval;\n\t    }\n\t    return TimeInterval;\n\t}());\n\texports.TimeInterval = TimeInterval;\n\t;\n\tvar TimeIntervalOperator = (function () {\n\t    function TimeIntervalOperator(scheduler) {\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimeIntervalOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n\t    };\n\t    return TimeIntervalOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TimeIntervalSubscriber = (function (_super) {\n\t    __extends(TimeIntervalSubscriber, _super);\n\t    function TimeIntervalSubscriber(destination, scheduler) {\n\t        _super.call(this, destination);\n\t        this.scheduler = scheduler;\n\t        this.lastTime = 0;\n\t        this.lastTime = scheduler.now();\n\t    }\n\t    TimeIntervalSubscriber.prototype._next = function (value) {\n\t        var now = this.scheduler.now();\n\t        var span = now - this.lastTime;\n\t        this.lastTime = now;\n\t        this.destination.next(new TimeInterval(value, span));\n\t    };\n\t    return TimeIntervalSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 309 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timeout_1 = __webpack_require__(310);\n\tObservable_1.Observable.prototype.timeout = timeout_1.timeout;\n\n\n/***/ },\n/* 310 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(82);\n\tvar isDate_1 = __webpack_require__(112);\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * @param due\n\t * @param errorToSend\n\t * @param scheduler\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method timeout\n\t * @owner Observable\n\t */\n\tfunction timeout(due, errorToSend, scheduler) {\n\t    if (errorToSend === void 0) { errorToSend = null; }\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    var absoluteTimeout = isDate_1.isDate(due);\n\t    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n\t    return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n\t}\n\texports.timeout = timeout;\n\tvar TimeoutOperator = (function () {\n\t    function TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler) {\n\t        this.waitFor = waitFor;\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.errorToSend = errorToSend;\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimeoutOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler));\n\t    };\n\t    return TimeoutOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TimeoutSubscriber = (function (_super) {\n\t    __extends(TimeoutSubscriber, _super);\n\t    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, errorToSend, scheduler) {\n\t        _super.call(this, destination);\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.waitFor = waitFor;\n\t        this.errorToSend = errorToSend;\n\t        this.scheduler = scheduler;\n\t        this.index = 0;\n\t        this._previousIndex = 0;\n\t        this._hasCompleted = false;\n\t        this.scheduleTimeout();\n\t    }\n\t    Object.defineProperty(TimeoutSubscriber.prototype, \"previousIndex\", {\n\t        get: function () {\n\t            return this._previousIndex;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(TimeoutSubscriber.prototype, \"hasCompleted\", {\n\t        get: function () {\n\t            return this._hasCompleted;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    TimeoutSubscriber.dispatchTimeout = function (state) {\n\t        var source = state.subscriber;\n\t        var currentIndex = state.index;\n\t        if (!source.hasCompleted && source.previousIndex === currentIndex) {\n\t            source.notifyTimeout();\n\t        }\n\t    };\n\t    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n\t        var currentIndex = this.index;\n\t        this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n\t        this.index++;\n\t        this._previousIndex = currentIndex;\n\t    };\n\t    TimeoutSubscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t        if (!this.absoluteTimeout) {\n\t            this.scheduleTimeout();\n\t        }\n\t    };\n\t    TimeoutSubscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutSubscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutSubscriber.prototype.notifyTimeout = function () {\n\t        this.error(this.errorToSend || new Error('timeout'));\n\t    };\n\t    return TimeoutSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 311 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timeoutWith_1 = __webpack_require__(312);\n\tObservable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;\n\n\n/***/ },\n/* 312 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(82);\n\tvar isDate_1 = __webpack_require__(112);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * @param due\n\t * @param withObservable\n\t * @param scheduler\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method timeoutWith\n\t * @owner Observable\n\t */\n\tfunction timeoutWith(due, withObservable, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    var absoluteTimeout = isDate_1.isDate(due);\n\t    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n\t    return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n\t}\n\texports.timeoutWith = timeoutWith;\n\tvar TimeoutWithOperator = (function () {\n\t    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n\t        this.waitFor = waitFor;\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.withObservable = withObservable;\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n\t    };\n\t    return TimeoutWithOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TimeoutWithSubscriber = (function (_super) {\n\t    __extends(TimeoutWithSubscriber, _super);\n\t    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n\t        _super.call(this);\n\t        this.destination = destination;\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.waitFor = waitFor;\n\t        this.withObservable = withObservable;\n\t        this.scheduler = scheduler;\n\t        this.timeoutSubscription = undefined;\n\t        this.index = 0;\n\t        this._previousIndex = 0;\n\t        this._hasCompleted = false;\n\t        destination.add(this);\n\t        this.scheduleTimeout();\n\t    }\n\t    Object.defineProperty(TimeoutWithSubscriber.prototype, \"previousIndex\", {\n\t        get: function () {\n\t            return this._previousIndex;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(TimeoutWithSubscriber.prototype, \"hasCompleted\", {\n\t        get: function () {\n\t            return this._hasCompleted;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    TimeoutWithSubscriber.dispatchTimeout = function (state) {\n\t        var source = state.subscriber;\n\t        var currentIndex = state.index;\n\t        if (!source.hasCompleted && source.previousIndex === currentIndex) {\n\t            source.handleTimeout();\n\t        }\n\t    };\n\t    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n\t        var currentIndex = this.index;\n\t        var timeoutState = { subscriber: this, index: currentIndex };\n\t        this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n\t        this.index++;\n\t        this._previousIndex = currentIndex;\n\t    };\n\t    TimeoutWithSubscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t        if (!this.absoluteTimeout) {\n\t            this.scheduleTimeout();\n\t        }\n\t    };\n\t    TimeoutWithSubscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutWithSubscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutWithSubscriber.prototype.handleTimeout = function () {\n\t        if (!this.isUnsubscribed) {\n\t            var withObservable = this.withObservable;\n\t            this.unsubscribe();\n\t            this.destination.add(this.timeoutSubscription = subscribeToResult_1.subscribeToResult(this, withObservable));\n\t        }\n\t    };\n\t    return TimeoutWithSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 313 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timestamp_1 = __webpack_require__(314);\n\tObservable_1.Observable.prototype.timestamp = timestamp_1.timestamp;\n\n\n/***/ },\n/* 314 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * @param scheduler\n\t * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n\t * @method timestamp\n\t * @owner Observable\n\t */\n\tfunction timestamp(scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new TimestampOperator(scheduler));\n\t}\n\texports.timestamp = timestamp;\n\tvar Timestamp = (function () {\n\t    function Timestamp(value, timestamp) {\n\t        this.value = value;\n\t        this.timestamp = timestamp;\n\t    }\n\t    return Timestamp;\n\t}());\n\texports.Timestamp = Timestamp;\n\t;\n\tvar TimestampOperator = (function () {\n\t    function TimestampOperator(scheduler) {\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimestampOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\n\t    };\n\t    return TimestampOperator;\n\t}());\n\tvar TimestampSubscriber = (function (_super) {\n\t    __extends(TimestampSubscriber, _super);\n\t    function TimestampSubscriber(destination, scheduler) {\n\t        _super.call(this, destination);\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimestampSubscriber.prototype._next = function (value) {\n\t        var now = this.scheduler.now();\n\t        this.destination.next(new Timestamp(value, now));\n\t    };\n\t    return TimestampSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 315 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar toArray_1 = __webpack_require__(316);\n\tObservable_1.Observable.prototype.toArray = toArray_1.toArray;\n\n\n/***/ },\n/* 316 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n\t * @method toArray\n\t * @owner Observable\n\t */\n\tfunction toArray() {\n\t    return this.lift(new ToArrayOperator());\n\t}\n\texports.toArray = toArray;\n\tvar ToArrayOperator = (function () {\n\t    function ToArrayOperator() {\n\t    }\n\t    ToArrayOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ToArraySubscriber(subscriber));\n\t    };\n\t    return ToArrayOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ToArraySubscriber = (function (_super) {\n\t    __extends(ToArraySubscriber, _super);\n\t    function ToArraySubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.array = [];\n\t    }\n\t    ToArraySubscriber.prototype._next = function (x) {\n\t        this.array.push(x);\n\t    };\n\t    ToArraySubscriber.prototype._complete = function () {\n\t        this.destination.next(this.array);\n\t        this.destination.complete();\n\t    };\n\t    return ToArraySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 317 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar toPromise_1 = __webpack_require__(318);\n\tObservable_1.Observable.prototype.toPromise = toPromise_1.toPromise;\n\n\n/***/ },\n/* 318 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\t/**\n\t * @param PromiseCtor\n\t * @return {Promise<T>}\n\t * @method toPromise\n\t * @owner Observable\n\t */\n\tfunction toPromise(PromiseCtor) {\n\t    var _this = this;\n\t    if (!PromiseCtor) {\n\t        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t            PromiseCtor = root_1.root.Rx.config.Promise;\n\t        }\n\t        else if (root_1.root.Promise) {\n\t            PromiseCtor = root_1.root.Promise;\n\t        }\n\t    }\n\t    if (!PromiseCtor) {\n\t        throw new Error('no Promise impl found');\n\t    }\n\t    return new PromiseCtor(function (resolve, reject) {\n\t        var value;\n\t        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n\t    });\n\t}\n\texports.toPromise = toPromise;\n\n\n/***/ },\n/* 319 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar window_1 = __webpack_require__(320);\n\tObservable_1.Observable.prototype.window = window_1.window;\n\n\n/***/ },\n/* 320 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Branch out the source Observable values as a nested Observable whenever\n\t * `windowBoundaries` emits.\n\t *\n\t * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n\t * instead of an array.</span>\n\t *\n\t * <img src=\"./img/window.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits connected, non-overlapping\n\t * windows. It emits the current window and opens a new one whenever the\n\t * Observable `windowBoundaries` emits an item. Because each window is an\n\t * Observable, the output is a higher-order Observable.\n\t *\n\t * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var interval = Rx.Observable.interval(1000);\n\t * var result = clicks.window(interval)\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link windowCount}\n\t * @see {@link windowTime}\n\t * @see {@link windowToggle}\n\t * @see {@link windowWhen}\n\t * @see {@link buffer}\n\t *\n\t * @param {Observable<any>} windowBoundaries An Observable that completes the\n\t * previous window and starts a new window.\n\t * @return {Observable<Observable<T>>} An Observable of windows, which are\n\t * Observables emitting values of the source Observable.\n\t * @method window\n\t * @owner Observable\n\t */\n\tfunction window(windowBoundaries) {\n\t    return this.lift(new WindowOperator(windowBoundaries));\n\t}\n\texports.window = window;\n\tvar WindowOperator = (function () {\n\t    function WindowOperator(windowBoundaries) {\n\t        this.windowBoundaries = windowBoundaries;\n\t    }\n\t    WindowOperator.prototype.call = function (subscriber, source) {\n\t        var windowSubscriber = new WindowSubscriber(subscriber);\n\t        var sourceSubscription = source._subscribe(windowSubscriber);\n\t        if (!sourceSubscription.isUnsubscribed) {\n\t            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n\t        }\n\t        return sourceSubscription;\n\t    };\n\t    return WindowOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowSubscriber = (function (_super) {\n\t    __extends(WindowSubscriber, _super);\n\t    function WindowSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.window = new Subject_1.Subject();\n\t        destination.next(this.window);\n\t    }\n\t    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.openWindow();\n\t    };\n\t    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this._complete();\n\t    };\n\t    WindowSubscriber.prototype._next = function (value) {\n\t        this.window.next(value);\n\t    };\n\t    WindowSubscriber.prototype._error = function (err) {\n\t        this.window.error(err);\n\t        this.destination.error(err);\n\t    };\n\t    WindowSubscriber.prototype._complete = function () {\n\t        this.window.complete();\n\t        this.destination.complete();\n\t    };\n\t    WindowSubscriber.prototype._unsubscribe = function () {\n\t        this.window = null;\n\t    };\n\t    WindowSubscriber.prototype.openWindow = function () {\n\t        var prevWindow = this.window;\n\t        if (prevWindow) {\n\t            prevWindow.complete();\n\t        }\n\t        var destination = this.destination;\n\t        var newWindow = this.window = new Subject_1.Subject();\n\t        destination.next(newWindow);\n\t    };\n\t    return WindowSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 321 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowCount_1 = __webpack_require__(322);\n\tObservable_1.Observable.prototype.windowCount = windowCount_1.windowCount;\n\n\n/***/ },\n/* 322 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subject_1 = __webpack_require__(6);\n\t/**\n\t * Branch out the source Observable values as a nested Observable with each\n\t * nested Observable emitting at most `windowSize` values.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowCount.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits windows every `startWindowEvery`\n\t * items, each containing no more than `windowSize` items. When the source\n\t * Observable completes or encounters an error, the output Observable emits\n\t * the current window and propagates the notification from the source\n\t * Observable. If `startWindowEvery` is not provided, then new windows are\n\t * started immediately at the start of the source and when each window completes\n\t * with size `windowSize`.\n\t *\n\t * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowCount(3)\n\t *   .map(win => win.skip(1)) // skip first of every 3 clicks\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowCount(2, 3)\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowTime}\n\t * @see {@link windowToggle}\n\t * @see {@link windowWhen}\n\t * @see {@link bufferCount}\n\t *\n\t * @param {number} windowSize The maximum number of values emitted by each\n\t * window.\n\t * @param {number} [startWindowEvery] Interval at which to start a new window.\n\t * For example if `startWindowEvery` is `2`, then a new window will be started\n\t * on every other value from the source. A new window is started at the\n\t * beginning of the source by default.\n\t * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n\t * are Observable of values.\n\t * @method windowCount\n\t * @owner Observable\n\t */\n\tfunction windowCount(windowSize, startWindowEvery) {\n\t    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n\t    return this.lift(new WindowCountOperator(windowSize, startWindowEvery));\n\t}\n\texports.windowCount = windowCount;\n\tvar WindowCountOperator = (function () {\n\t    function WindowCountOperator(windowSize, startWindowEvery) {\n\t        this.windowSize = windowSize;\n\t        this.startWindowEvery = startWindowEvery;\n\t    }\n\t    WindowCountOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n\t    };\n\t    return WindowCountOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowCountSubscriber = (function (_super) {\n\t    __extends(WindowCountSubscriber, _super);\n\t    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.windowSize = windowSize;\n\t        this.startWindowEvery = startWindowEvery;\n\t        this.windows = [new Subject_1.Subject()];\n\t        this.count = 0;\n\t        destination.next(this.windows[0]);\n\t    }\n\t    WindowCountSubscriber.prototype._next = function (value) {\n\t        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n\t        var destination = this.destination;\n\t        var windowSize = this.windowSize;\n\t        var windows = this.windows;\n\t        var len = windows.length;\n\t        for (var i = 0; i < len && !this.isUnsubscribed; i++) {\n\t            windows[i].next(value);\n\t        }\n\t        var c = this.count - windowSize + 1;\n\t        if (c >= 0 && c % startWindowEvery === 0 && !this.isUnsubscribed) {\n\t            windows.shift().complete();\n\t        }\n\t        if (++this.count % startWindowEvery === 0 && !this.isUnsubscribed) {\n\t            var window_1 = new Subject_1.Subject();\n\t            windows.push(window_1);\n\t            destination.next(window_1);\n\t        }\n\t    };\n\t    WindowCountSubscriber.prototype._error = function (err) {\n\t        var windows = this.windows;\n\t        if (windows) {\n\t            while (windows.length > 0 && !this.isUnsubscribed) {\n\t                windows.shift().error(err);\n\t            }\n\t        }\n\t        this.destination.error(err);\n\t    };\n\t    WindowCountSubscriber.prototype._complete = function () {\n\t        var windows = this.windows;\n\t        if (windows) {\n\t            while (windows.length > 0 && !this.isUnsubscribed) {\n\t                windows.shift().complete();\n\t            }\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    WindowCountSubscriber.prototype._unsubscribe = function () {\n\t        this.count = 0;\n\t        this.windows = null;\n\t    };\n\t    return WindowCountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 323 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowTime_1 = __webpack_require__(324);\n\tObservable_1.Observable.prototype.windowTime = windowTime_1.windowTime;\n\n\n/***/ },\n/* 324 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subject_1 = __webpack_require__(6);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * Branch out the source Observable values as a nested Observable periodically\n\t * in time.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowTime.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable starts a new window periodically, as\n\t * determined by the `windowCreationInterval` argument. It emits each window\n\t * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n\t * source Observable completes or encounters an error, the output Observable\n\t * emits the current window and propagates the notification from the source\n\t * Observable. If `windowCreationInterval` is not provided, the output\n\t * Observable starts a new window when the previous window of duration\n\t * `windowTimeSpan` completes.\n\t *\n\t * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowTime(1000)\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowTime(1000, 5000)\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowCount}\n\t * @see {@link windowToggle}\n\t * @see {@link windowWhen}\n\t * @see {@link bufferTime}\n\t *\n\t * @param {number} windowTimeSpan The amount of time to fill each window.\n\t * @param {number} [windowCreationInterval] The interval at which to start new\n\t * windows.\n\t * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n\t * intervals that determine window boundaries.\n\t * @return {Observable<Observable<T>>} An observable of windows, which in turn\n\t * are Observables.\n\t * @method windowTime\n\t * @owner Observable\n\t */\n\tfunction windowTime(windowTimeSpan, windowCreationInterval, scheduler) {\n\t    if (windowCreationInterval === void 0) { windowCreationInterval = null; }\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler));\n\t}\n\texports.windowTime = windowTime;\n\tvar WindowTimeOperator = (function () {\n\t    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler) {\n\t        this.windowTimeSpan = windowTimeSpan;\n\t        this.windowCreationInterval = windowCreationInterval;\n\t        this.scheduler = scheduler;\n\t    }\n\t    WindowTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler));\n\t    };\n\t    return WindowTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowTimeSubscriber = (function (_super) {\n\t    __extends(WindowTimeSubscriber, _super);\n\t    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, scheduler) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.windowTimeSpan = windowTimeSpan;\n\t        this.windowCreationInterval = windowCreationInterval;\n\t        this.scheduler = scheduler;\n\t        this.windows = [];\n\t        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n\t            var window_1 = this.openWindow();\n\t            var closeState = { subscriber: this, window: window_1, context: null };\n\t            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };\n\t            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n\t            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n\t        }\n\t        else {\n\t            var window_2 = this.openWindow();\n\t            var timeSpanOnlyState = { subscriber: this, window: window_2, windowTimeSpan: windowTimeSpan };\n\t            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n\t        }\n\t    }\n\t    WindowTimeSubscriber.prototype._next = function (value) {\n\t        var windows = this.windows;\n\t        var len = windows.length;\n\t        for (var i = 0; i < len; i++) {\n\t            var window_3 = windows[i];\n\t            if (!window_3.isUnsubscribed) {\n\t                window_3.next(value);\n\t            }\n\t        }\n\t    };\n\t    WindowTimeSubscriber.prototype._error = function (err) {\n\t        var windows = this.windows;\n\t        while (windows.length > 0) {\n\t            windows.shift().error(err);\n\t        }\n\t        this.destination.error(err);\n\t    };\n\t    WindowTimeSubscriber.prototype._complete = function () {\n\t        var windows = this.windows;\n\t        while (windows.length > 0) {\n\t            var window_4 = windows.shift();\n\t            if (!window_4.isUnsubscribed) {\n\t                window_4.complete();\n\t            }\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    WindowTimeSubscriber.prototype.openWindow = function () {\n\t        var window = new Subject_1.Subject();\n\t        this.windows.push(window);\n\t        var destination = this.destination;\n\t        destination.next(window);\n\t        return window;\n\t    };\n\t    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n\t        window.complete();\n\t        var windows = this.windows;\n\t        windows.splice(windows.indexOf(window), 1);\n\t    };\n\t    return WindowTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchWindowTimeSpanOnly(state) {\n\t    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n\t    if (window) {\n\t        window.complete();\n\t    }\n\t    state.window = subscriber.openWindow();\n\t    this.schedule(state, windowTimeSpan);\n\t}\n\tfunction dispatchWindowCreation(state) {\n\t    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n\t    var window = subscriber.openWindow();\n\t    var action = this;\n\t    var context = { action: action, subscription: null };\n\t    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n\t    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n\t    action.add(context.subscription);\n\t    action.schedule(state, windowCreationInterval);\n\t}\n\tfunction dispatchWindowClose(arg) {\n\t    var subscriber = arg.subscriber, window = arg.window, context = arg.context;\n\t    if (context && context.action && context.subscription) {\n\t        context.action.remove(context.subscription);\n\t    }\n\t    subscriber.closeWindow(window);\n\t}\n\n\n/***/ },\n/* 325 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowToggle_1 = __webpack_require__(326);\n\tObservable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;\n\n\n/***/ },\n/* 326 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Branch out the source Observable values as a nested Observable starting from\n\t * an emission from `openings` and ending when the output of `closingSelector`\n\t * emits.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowToggle.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits windows that contain those items\n\t * emitted by the source Observable between the time when the `openings`\n\t * Observable emits an item and when the Observable returned by\n\t * `closingSelector` emits an item.\n\t *\n\t * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var openings = Rx.Observable.interval(1000);\n\t * var result = clicks.windowToggle(openings, i =>\n\t *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n\t * ).mergeAll();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowCount}\n\t * @see {@link windowTime}\n\t * @see {@link windowWhen}\n\t * @see {@link bufferToggle}\n\t *\n\t * @param {Observable<O>} openings An observable of notifications to start new\n\t * windows.\n\t * @param {function(value: O): Observable} closingSelector A function that takes\n\t * the value emitted by the `openings` observable and returns an Observable,\n\t * which, when it emits (either `next` or `complete`), signals that the\n\t * associated window should complete.\n\t * @return {Observable<Observable<T>>} An observable of windows, which in turn\n\t * are Observables.\n\t * @method windowToggle\n\t * @owner Observable\n\t */\n\tfunction windowToggle(openings, closingSelector) {\n\t    return this.lift(new WindowToggleOperator(openings, closingSelector));\n\t}\n\texports.windowToggle = windowToggle;\n\tvar WindowToggleOperator = (function () {\n\t    function WindowToggleOperator(openings, closingSelector) {\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    WindowToggleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n\t    };\n\t    return WindowToggleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowToggleSubscriber = (function (_super) {\n\t    __extends(WindowToggleSubscriber, _super);\n\t    function WindowToggleSubscriber(destination, openings, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t        this.contexts = [];\n\t        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\n\t    }\n\t    WindowToggleSubscriber.prototype._next = function (value) {\n\t        var contexts = this.contexts;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            for (var i = 0; i < len; i++) {\n\t                contexts[i].window.next(value);\n\t            }\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype._error = function (err) {\n\t        var contexts = this.contexts;\n\t        this.contexts = null;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            var index = -1;\n\t            while (++index < len) {\n\t                var context = contexts[index];\n\t                context.window.error(err);\n\t                context.subscription.unsubscribe();\n\t            }\n\t        }\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    WindowToggleSubscriber.prototype._complete = function () {\n\t        var contexts = this.contexts;\n\t        this.contexts = null;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            var index = -1;\n\t            while (++index < len) {\n\t                var context = contexts[index];\n\t                context.window.complete();\n\t                context.subscription.unsubscribe();\n\t            }\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    WindowToggleSubscriber.prototype._unsubscribe = function () {\n\t        var contexts = this.contexts;\n\t        this.contexts = null;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            var index = -1;\n\t            while (++index < len) {\n\t                var context = contexts[index];\n\t                context.window.unsubscribe();\n\t                context.subscription.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (outerValue === this.openings) {\n\t            var closingSelector = this.closingSelector;\n\t            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n\t            if (closingNotifier === errorObject_1.errorObject) {\n\t                return this.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                var window_1 = new Subject_1.Subject();\n\t                var subscription = new Subscription_1.Subscription();\n\t                var context = { window: window_1, subscription: subscription };\n\t                this.contexts.push(context);\n\t                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n\t                if (innerSubscription.isUnsubscribed) {\n\t                    this.closeWindow(this.contexts.length - 1);\n\t                }\n\t                else {\n\t                    innerSubscription.context = context;\n\t                    subscription.add(innerSubscription);\n\t                }\n\t                this.destination.next(window_1);\n\t            }\n\t        }\n\t        else {\n\t            this.closeWindow(this.contexts.indexOf(outerValue));\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype.notifyError = function (err) {\n\t        this.error(err);\n\t    };\n\t    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n\t        if (inner !== this.openSubscription) {\n\t            this.closeWindow(this.contexts.indexOf(inner.context));\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n\t        if (index === -1) {\n\t            return;\n\t        }\n\t        var contexts = this.contexts;\n\t        var context = contexts[index];\n\t        var window = context.window, subscription = context.subscription;\n\t        contexts.splice(index, 1);\n\t        window.complete();\n\t        subscription.unsubscribe();\n\t    };\n\t    return WindowToggleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 327 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowWhen_1 = __webpack_require__(328);\n\tObservable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;\n\n\n/***/ },\n/* 328 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Branch out the source Observable values as a nested Observable using a\n\t * factory function of closing Observables to determine when to start a new\n\t * window.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowWhen.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits connected, non-overlapping windows.\n\t * It emits the current window and opens a new one whenever the Observable\n\t * produced by the specified `closingSelector` function emits an item. The first\n\t * window is opened immediately when subscribing to the output Observable.\n\t *\n\t * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks\n\t *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowCount}\n\t * @see {@link windowTime}\n\t * @see {@link windowToggle}\n\t * @see {@link bufferWhen}\n\t *\n\t * @param {function(): Observable} closingSelector A function that takes no\n\t * arguments and returns an Observable that signals (on either `next` or\n\t * `complete`) when to close the previous window and start a new one.\n\t * @return {Observable<Observable<T>>} An observable of windows, which in turn\n\t * are Observables.\n\t * @method windowWhen\n\t * @owner Observable\n\t */\n\tfunction windowWhen(closingSelector) {\n\t    return this.lift(new WindowOperator(closingSelector));\n\t}\n\texports.windowWhen = windowWhen;\n\tvar WindowOperator = (function () {\n\t    function WindowOperator(closingSelector) {\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    WindowOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n\t    };\n\t    return WindowOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowSubscriber = (function (_super) {\n\t    __extends(WindowSubscriber, _super);\n\t    function WindowSubscriber(destination, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.closingSelector = closingSelector;\n\t        this.openWindow();\n\t    }\n\t    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.openWindow(innerSub);\n\t    };\n\t    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.openWindow(innerSub);\n\t    };\n\t    WindowSubscriber.prototype._next = function (value) {\n\t        this.window.next(value);\n\t    };\n\t    WindowSubscriber.prototype._error = function (err) {\n\t        this.window.error(err);\n\t        this.destination.error(err);\n\t        this.unsubscribeClosingNotification();\n\t    };\n\t    WindowSubscriber.prototype._complete = function () {\n\t        this.window.complete();\n\t        this.destination.complete();\n\t        this.unsubscribeClosingNotification();\n\t    };\n\t    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n\t        if (this.closingNotification) {\n\t            this.closingNotification.unsubscribe();\n\t        }\n\t    };\n\t    WindowSubscriber.prototype.openWindow = function (innerSub) {\n\t        if (innerSub === void 0) { innerSub = null; }\n\t        if (innerSub) {\n\t            this.remove(innerSub);\n\t            innerSub.unsubscribe();\n\t        }\n\t        var prevWindow = this.window;\n\t        if (prevWindow) {\n\t            prevWindow.complete();\n\t        }\n\t        var window = this.window = new Subject_1.Subject();\n\t        this.destination.next(window);\n\t        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n\t        if (closingNotifier === errorObject_1.errorObject) {\n\t            var err = errorObject_1.errorObject.e;\n\t            this.destination.error(err);\n\t            this.window.error(err);\n\t        }\n\t        else {\n\t            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n\t        }\n\t    };\n\t    return WindowSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 329 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar withLatestFrom_1 = __webpack_require__(330);\n\tObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n\n\n/***/ },\n/* 330 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Combines the source Observable with other Observables to create an Observable\n\t * whose values are calculated from the latest values of each, only when the\n\t * source emits.\n\t *\n\t * <span class=\"informal\">Whenever the source Observable emits a value, it\n\t * computes a formula using that value plus the latest values from other input\n\t * Observables, then emits the output of that formula.</span>\n\t *\n\t * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n\t *\n\t * `withLatestFrom` combines each value from the source Observable (the\n\t * instance) with the latest values from the other input Observables only when\n\t * the source emits a value, optionally using a `project` function to determine\n\t * the value to be emitted on the output Observable. All input Observables must\n\t * emit at least one value before the output Observable will emit a value.\n\t *\n\t * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var timer = Rx.Observable.interval(1000);\n\t * var result = clicks.withLatestFrom(timer);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineLatest}\n\t *\n\t * @param {Observable} other An input Observable to combine with the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {Function} [project] Projection function for combining values\n\t * together. Receives all values in order of the Observables passed, where the\n\t * first parameter is a value from the source Observable. (e.g.\n\t * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n\t * passed, arrays will be emitted on the output Observable.\n\t * @return {Observable} An Observable of projected values from the most recent\n\t * values from each input Observable, or an array of the most recent values from\n\t * each input Observable.\n\t * @method withLatestFrom\n\t * @owner Observable\n\t */\n\tfunction withLatestFrom() {\n\t    var args = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        args[_i - 0] = arguments[_i];\n\t    }\n\t    var project;\n\t    if (typeof args[args.length - 1] === 'function') {\n\t        project = args.pop();\n\t    }\n\t    var observables = args;\n\t    return this.lift(new WithLatestFromOperator(observables, project));\n\t}\n\texports.withLatestFrom = withLatestFrom;\n\t/* tslint:enable:max-line-length */\n\tvar WithLatestFromOperator = (function () {\n\t    function WithLatestFromOperator(observables, project) {\n\t        this.observables = observables;\n\t        this.project = project;\n\t    }\n\t    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n\t    };\n\t    return WithLatestFromOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WithLatestFromSubscriber = (function (_super) {\n\t    __extends(WithLatestFromSubscriber, _super);\n\t    function WithLatestFromSubscriber(destination, observables, project) {\n\t        _super.call(this, destination);\n\t        this.observables = observables;\n\t        this.project = project;\n\t        this.toRespond = [];\n\t        var len = observables.length;\n\t        this.values = new Array(len);\n\t        for (var i = 0; i < len; i++) {\n\t            this.toRespond.push(i);\n\t        }\n\t        for (var i = 0; i < len; i++) {\n\t            var observable = observables[i];\n\t            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n\t        }\n\t    }\n\t    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.values[outerIndex] = innerValue;\n\t        var toRespond = this.toRespond;\n\t        if (toRespond.length > 0) {\n\t            var found = toRespond.indexOf(outerIndex);\n\t            if (found !== -1) {\n\t                toRespond.splice(found, 1);\n\t            }\n\t        }\n\t    };\n\t    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n\t        // noop\n\t    };\n\t    WithLatestFromSubscriber.prototype._next = function (value) {\n\t        if (this.toRespond.length === 0) {\n\t            var args = [value].concat(this.values);\n\t            if (this.project) {\n\t                this._tryProject(args);\n\t            }\n\t            else {\n\t                this.destination.next(args);\n\t            }\n\t        }\n\t    };\n\t    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n\t        var result;\n\t        try {\n\t            result = this.project.apply(this, args);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return WithLatestFromSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 331 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar zip_1 = __webpack_require__(115);\n\tObservable_1.Observable.prototype.zip = zip_1.zipProto;\n\n\n/***/ },\n/* 332 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar zipAll_1 = __webpack_require__(333);\n\tObservable_1.Observable.prototype.zipAll = zipAll_1.zipAll;\n\n\n/***/ },\n/* 333 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar zip_1 = __webpack_require__(115);\n\t/**\n\t * @param project\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method zipAll\n\t * @owner Observable\n\t */\n\tfunction zipAll(project) {\n\t    return this.lift(new zip_1.ZipOperator(project));\n\t}\n\texports.zipAll = zipAll;\n\n\n/***/ },\n/* 334 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Operator = (function () {\n\t    function Operator() {\n\t    }\n\t    Operator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new Subscriber_1.Subscriber(subscriber));\n\t    };\n\t    return Operator;\n\t}());\n\texports.Operator = Operator;\n\n\n/***/ },\n/* 335 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar VirtualTimeScheduler_1 = __webpack_require__(336);\n\tvar Notification_1 = __webpack_require__(64);\n\tvar ColdObservable_1 = __webpack_require__(337);\n\tvar HotObservable_1 = __webpack_require__(341);\n\tvar SubscriptionLog_1 = __webpack_require__(339);\n\tvar TestScheduler = (function (_super) {\n\t    __extends(TestScheduler, _super);\n\t    function TestScheduler(assertDeepEqual) {\n\t        _super.call(this);\n\t        this.assertDeepEqual = assertDeepEqual;\n\t        this.hotObservables = [];\n\t        this.coldObservables = [];\n\t        this.flushTests = [];\n\t    }\n\t    TestScheduler.prototype.createTime = function (marbles) {\n\t        var indexOf = marbles.indexOf('|');\n\t        if (indexOf === -1) {\n\t            throw new Error('Marble diagram for time should have a completion marker \"|\"');\n\t        }\n\t        return indexOf * TestScheduler.frameTimeFactor;\n\t    };\n\t    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n\t        if (marbles.indexOf('^') !== -1) {\n\t            throw new Error('Cold observable cannot have subscription offset \"^\"');\n\t        }\n\t        if (marbles.indexOf('!') !== -1) {\n\t            throw new Error('Cold observable cannot have unsubscription marker \"!\"');\n\t        }\n\t        var messages = TestScheduler.parseMarbles(marbles, values, error);\n\t        var cold = new ColdObservable_1.ColdObservable(messages, this);\n\t        this.coldObservables.push(cold);\n\t        return cold;\n\t    };\n\t    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n\t        if (marbles.indexOf('!') !== -1) {\n\t            throw new Error('Hot observable cannot have unsubscription marker \"!\"');\n\t        }\n\t        var messages = TestScheduler.parseMarbles(marbles, values, error);\n\t        var subject = new HotObservable_1.HotObservable(messages, this);\n\t        this.hotObservables.push(subject);\n\t        return subject;\n\t    };\n\t    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n\t        var _this = this;\n\t        var messages = [];\n\t        observable.subscribe(function (value) {\n\t            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n\t        }, function (err) {\n\t            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n\t        }, function () {\n\t            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n\t        });\n\t        return messages;\n\t    };\n\t    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n\t        var _this = this;\n\t        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n\t        var actual = [];\n\t        var flushTest = { actual: actual, ready: false };\n\t        var unsubscriptionFrame = TestScheduler\n\t            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n\t        var subscription;\n\t        this.schedule(function () {\n\t            subscription = observable.subscribe(function (x) {\n\t                var value = x;\n\t                // Support Observable-of-Observables\n\t                if (x instanceof Observable_1.Observable) {\n\t                    value = _this.materializeInnerObservable(value, _this.frame);\n\t                }\n\t                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n\t            }, function (err) {\n\t                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n\t            }, function () {\n\t                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n\t            });\n\t        }, 0);\n\t        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n\t            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n\t        }\n\t        this.flushTests.push(flushTest);\n\t        return {\n\t            toBe: function (marbles, values, errorValue) {\n\t                flushTest.ready = true;\n\t                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n\t            }\n\t        };\n\t    };\n\t    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n\t        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n\t        this.flushTests.push(flushTest);\n\t        return {\n\t            toBe: function (marbles) {\n\t                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n\t                flushTest.ready = true;\n\t                flushTest.expected = marblesArray.map(function (marbles) {\n\t                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n\t                });\n\t            }\n\t        };\n\t    };\n\t    TestScheduler.prototype.flush = function () {\n\t        var hotObservables = this.hotObservables;\n\t        while (hotObservables.length > 0) {\n\t            hotObservables.shift().setup();\n\t        }\n\t        _super.prototype.flush.call(this);\n\t        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n\t        while (readyFlushTests.length > 0) {\n\t            var test = readyFlushTests.shift();\n\t            this.assertDeepEqual(test.actual, test.expected);\n\t        }\n\t    };\n\t    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n\t        if (typeof marbles !== 'string') {\n\t            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n\t        }\n\t        var len = marbles.length;\n\t        var groupStart = -1;\n\t        var subscriptionFrame = Number.POSITIVE_INFINITY;\n\t        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\t        for (var i = 0; i < len; i++) {\n\t            var frame = i * this.frameTimeFactor;\n\t            var c = marbles[i];\n\t            switch (c) {\n\t                case '-':\n\t                case ' ':\n\t                    break;\n\t                case '(':\n\t                    groupStart = frame;\n\t                    break;\n\t                case ')':\n\t                    groupStart = -1;\n\t                    break;\n\t                case '^':\n\t                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n\t                        throw new Error('Found a second subscription point \\'^\\' in a ' +\n\t                            'subscription marble diagram. There can only be one.');\n\t                    }\n\t                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n\t                    break;\n\t                case '!':\n\t                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n\t                        throw new Error('Found a second subscription point \\'^\\' in a ' +\n\t                            'subscription marble diagram. There can only be one.');\n\t                    }\n\t                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n\t                    break;\n\t                default:\n\t                    throw new Error('There can only be \\'^\\' and \\'!\\' markers in a ' +\n\t                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n\t            }\n\t        }\n\t        if (unsubscriptionFrame < 0) {\n\t            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n\t        }\n\t        else {\n\t            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n\t        }\n\t    };\n\t    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n\t        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n\t        if (marbles.indexOf('!') !== -1) {\n\t            throw new Error('Conventional marble diagrams cannot have the ' +\n\t                'unsubscription marker \"!\"');\n\t        }\n\t        var len = marbles.length;\n\t        var testMessages = [];\n\t        var subIndex = marbles.indexOf('^');\n\t        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n\t        var getValue = typeof values !== 'object' ?\n\t            function (x) { return x; } :\n\t            function (x) {\n\t                // Support Observable-of-Observables\n\t                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n\t                    return values[x].messages;\n\t                }\n\t                return values[x];\n\t            };\n\t        var groupStart = -1;\n\t        for (var i = 0; i < len; i++) {\n\t            var frame = i * this.frameTimeFactor + frameOffset;\n\t            var notification = void 0;\n\t            var c = marbles[i];\n\t            switch (c) {\n\t                case '-':\n\t                case ' ':\n\t                    break;\n\t                case '(':\n\t                    groupStart = frame;\n\t                    break;\n\t                case ')':\n\t                    groupStart = -1;\n\t                    break;\n\t                case '|':\n\t                    notification = Notification_1.Notification.createComplete();\n\t                    break;\n\t                case '^':\n\t                    break;\n\t                case '#':\n\t                    notification = Notification_1.Notification.createError(errorValue || 'error');\n\t                    break;\n\t                default:\n\t                    notification = Notification_1.Notification.createNext(getValue(c));\n\t                    break;\n\t            }\n\t            if (notification) {\n\t                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n\t            }\n\t        }\n\t        return testMessages;\n\t    };\n\t    return TestScheduler;\n\t}(VirtualTimeScheduler_1.VirtualTimeScheduler));\n\texports.TestScheduler = TestScheduler;\n\n\n/***/ },\n/* 336 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar VirtualTimeScheduler = (function () {\n\t    function VirtualTimeScheduler() {\n\t        this.actions = []; // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n\t        this.active = false;\n\t        this.scheduledId = null;\n\t        this.index = 0;\n\t        this.sorted = false;\n\t        this.frame = 0;\n\t        this.maxFrames = 750;\n\t    }\n\t    VirtualTimeScheduler.prototype.now = function () {\n\t        return this.frame;\n\t    };\n\t    VirtualTimeScheduler.prototype.flush = function () {\n\t        var actions = this.actions;\n\t        var maxFrames = this.maxFrames;\n\t        while (actions.length > 0) {\n\t            var action = actions.shift();\n\t            this.frame = action.delay;\n\t            if (this.frame <= maxFrames) {\n\t                action.execute();\n\t                if (action.error) {\n\t                    actions.length = 0;\n\t                    this.frame = 0;\n\t                    throw action.error;\n\t                }\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        actions.length = 0;\n\t        this.frame = 0;\n\t    };\n\t    VirtualTimeScheduler.prototype.addAction = function (action) {\n\t        var actions = this.actions;\n\t        actions.push(action);\n\t        actions.sort(function (a, b) {\n\t            if (a.delay === b.delay) {\n\t                if (a.index === b.index) {\n\t                    return 0;\n\t                }\n\t                else if (a.index > b.index) {\n\t                    return 1;\n\t                }\n\t                else {\n\t                    return -1;\n\t                }\n\t            }\n\t            else if (a.delay > b.delay) {\n\t                return 1;\n\t            }\n\t            else {\n\t                return -1;\n\t            }\n\t        });\n\t    };\n\t    VirtualTimeScheduler.prototype.schedule = function (work, delay, state) {\n\t        if (delay === void 0) { delay = 0; }\n\t        this.sorted = false;\n\t        return new VirtualAction(this, work, this.index++).schedule(state, delay);\n\t    };\n\t    VirtualTimeScheduler.frameTimeFactor = 10;\n\t    return VirtualTimeScheduler;\n\t}());\n\texports.VirtualTimeScheduler = VirtualTimeScheduler;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar VirtualAction = (function (_super) {\n\t    __extends(VirtualAction, _super);\n\t    function VirtualAction(scheduler, work, index) {\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t        this.index = index;\n\t        this.calls = 0;\n\t    }\n\t    VirtualAction.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (this.isUnsubscribed) {\n\t            return this;\n\t        }\n\t        var scheduler = this.scheduler;\n\t        var action = null;\n\t        if (this.calls++ === 0) {\n\t            // the action is not being rescheduled.\n\t            action = this;\n\t        }\n\t        else {\n\t            // the action is being rescheduled, and we can't mutate the one in the actions list\n\t            // in the scheduler, so we'll create a new one.\n\t            action = new VirtualAction(scheduler, this.work, scheduler.index += 1);\n\t            this.add(action);\n\t        }\n\t        action.state = state;\n\t        action.delay = scheduler.frame + delay;\n\t        scheduler.addAction(action);\n\t        return this;\n\t    };\n\t    VirtualAction.prototype.execute = function () {\n\t        if (this.isUnsubscribed) {\n\t            throw new Error('How did did we execute a canceled Action?');\n\t        }\n\t        this.work(this.state);\n\t    };\n\t    VirtualAction.prototype.unsubscribe = function () {\n\t        var actions = this.scheduler.actions;\n\t        var index = actions.indexOf(this);\n\t        this.work = void 0;\n\t        this.state = void 0;\n\t        this.scheduler = void 0;\n\t        if (index !== -1) {\n\t            actions.splice(index, 1);\n\t        }\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    return VirtualAction;\n\t}(Subscription_1.Subscription));\n\n\n/***/ },\n/* 337 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar SubscriptionLoggable_1 = __webpack_require__(338);\n\tvar applyMixins_1 = __webpack_require__(340);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ColdObservable = (function (_super) {\n\t    __extends(ColdObservable, _super);\n\t    function ColdObservable(messages, scheduler) {\n\t        _super.call(this, function (subscriber) {\n\t            var observable = this;\n\t            var index = observable.logSubscribedFrame();\n\t            subscriber.add(new Subscription_1.Subscription(function () {\n\t                observable.logUnsubscribedFrame(index);\n\t            }));\n\t            observable.scheduleMessages(subscriber);\n\t            return subscriber;\n\t        });\n\t        this.messages = messages;\n\t        this.subscriptions = [];\n\t        this.scheduler = scheduler;\n\t    }\n\t    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n\t        var messagesLength = this.messages.length;\n\t        for (var i = 0; i < messagesLength; i++) {\n\t            var message = this.messages[i];\n\t            subscriber.add(this.scheduler.schedule(function (_a) {\n\t                var message = _a.message, subscriber = _a.subscriber;\n\t                message.notification.observe(subscriber);\n\t            }, message.frame, { message: message, subscriber: subscriber }));\n\t        }\n\t    };\n\t    return ColdObservable;\n\t}(Observable_1.Observable));\n\texports.ColdObservable = ColdObservable;\n\tapplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n\n\n/***/ },\n/* 338 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar SubscriptionLog_1 = __webpack_require__(339);\n\tvar SubscriptionLoggable = (function () {\n\t    function SubscriptionLoggable() {\n\t        this.subscriptions = [];\n\t    }\n\t    SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n\t        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n\t        return this.subscriptions.length - 1;\n\t    };\n\t    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n\t        var subscriptionLogs = this.subscriptions;\n\t        var oldSubscriptionLog = subscriptionLogs[index];\n\t        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n\t    };\n\t    return SubscriptionLoggable;\n\t}());\n\texports.SubscriptionLoggable = SubscriptionLoggable;\n\n\n/***/ },\n/* 339 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar SubscriptionLog = (function () {\n\t    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {\n\t        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }\n\t        this.subscribedFrame = subscribedFrame;\n\t        this.unsubscribedFrame = unsubscribedFrame;\n\t    }\n\t    return SubscriptionLog;\n\t}());\n\texports.SubscriptionLog = SubscriptionLog;\n\n\n/***/ },\n/* 340 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction applyMixins(derivedCtor, baseCtors) {\n\t    for (var i = 0, len = baseCtors.length; i < len; i++) {\n\t        var baseCtor = baseCtors[i];\n\t        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n\t        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {\n\t            var name_1 = propertyKeys[j];\n\t            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];\n\t        }\n\t    }\n\t}\n\texports.applyMixins = applyMixins;\n\n\n/***/ },\n/* 341 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar SubscriptionLoggable_1 = __webpack_require__(338);\n\tvar applyMixins_1 = __webpack_require__(340);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar HotObservable = (function (_super) {\n\t    __extends(HotObservable, _super);\n\t    function HotObservable(messages, scheduler) {\n\t        _super.call(this);\n\t        this.messages = messages;\n\t        this.subscriptions = [];\n\t        this.scheduler = scheduler;\n\t    }\n\t    HotObservable.prototype._subscribe = function (subscriber) {\n\t        var subject = this;\n\t        var index = subject.logSubscribedFrame();\n\t        subscriber.add(new Subscription_1.Subscription(function () {\n\t            subject.logUnsubscribedFrame(index);\n\t        }));\n\t        return _super.prototype._subscribe.call(this, subscriber);\n\t    };\n\t    HotObservable.prototype.setup = function () {\n\t        var subject = this;\n\t        var messagesLength = subject.messages.length;\n\t        /* tslint:disable:no-var-keyword */\n\t        for (var i = 0; i < messagesLength; i++) {\n\t            (function () {\n\t                var message = subject.messages[i];\n\t                /* tslint:enable */\n\t                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);\n\t            })();\n\t        }\n\t    };\n\t    return HotObservable;\n\t}(Subject_1.Subject));\n\texports.HotObservable = HotObservable;\n\tapplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n\n\n/***/ },\n/* 342 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AnimationFrameScheduler_1 = __webpack_require__(343);\n\texports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler();\n\n\n/***/ },\n/* 343 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar QueueScheduler_1 = __webpack_require__(85);\n\tvar AnimationFrameAction_1 = __webpack_require__(344);\n\tvar AnimationFrameScheduler = (function (_super) {\n\t    __extends(AnimationFrameScheduler, _super);\n\t    function AnimationFrameScheduler() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AnimationFrameScheduler.prototype.scheduleNow = function (work, state) {\n\t        return new AnimationFrameAction_1.AnimationFrameAction(this, work).schedule(state);\n\t    };\n\t    return AnimationFrameScheduler;\n\t}(QueueScheduler_1.QueueScheduler));\n\texports.AnimationFrameScheduler = AnimationFrameScheduler;\n\n\n/***/ },\n/* 344 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar FutureAction_1 = __webpack_require__(84);\n\tvar AnimationFrame_1 = __webpack_require__(345);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AnimationFrameAction = (function (_super) {\n\t    __extends(AnimationFrameAction, _super);\n\t    function AnimationFrameAction() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AnimationFrameAction.prototype._schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (delay > 0) {\n\t            return _super.prototype._schedule.call(this, state, delay);\n\t        }\n\t        this.delay = delay;\n\t        this.state = state;\n\t        var scheduler = this.scheduler;\n\t        scheduler.actions.push(this);\n\t        if (!scheduler.scheduledId) {\n\t            scheduler.scheduledId = AnimationFrame_1.AnimationFrame.requestAnimationFrame(function () {\n\t                scheduler.scheduledId = null;\n\t                scheduler.flush();\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    AnimationFrameAction.prototype._unsubscribe = function () {\n\t        var scheduler = this.scheduler;\n\t        var scheduledId = scheduler.scheduledId, actions = scheduler.actions;\n\t        _super.prototype._unsubscribe.call(this);\n\t        if (actions.length === 0) {\n\t            scheduler.active = false;\n\t            if (scheduledId != null) {\n\t                scheduler.scheduledId = null;\n\t                AnimationFrame_1.AnimationFrame.cancelAnimationFrame(scheduledId);\n\t            }\n\t        }\n\t    };\n\t    return AnimationFrameAction;\n\t}(FutureAction_1.FutureAction));\n\texports.AnimationFrameAction = AnimationFrameAction;\n\n\n/***/ },\n/* 345 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar RequestAnimationFrameDefinition = (function () {\n\t    function RequestAnimationFrameDefinition(root) {\n\t        if (root.requestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.mozRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.webkitRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.msRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.oRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n\t        }\n\t        else {\n\t            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n\t            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n\t        }\n\t    }\n\t    return RequestAnimationFrameDefinition;\n\t}());\n\texports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\n\texports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n\n\n/***/ },\n/* 346 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar rxjs_1 = __webpack_require__(4);\n\tvar domain = \"https://ic-webchat-scratch.azurewebsites.net\";\n\tvar baseUrl = domain + \"/api/conversations\";\n\tvar app_secret = \"acWN4N4CRLc.cwA.NhI.0Tyg-Wl1eJ9SbIaiVuiV233GVCJEkK4xAKZDwv4ebZw\";\n\texports.startConversation = function () {\n\t    return rxjs_1.Observable\n\t        .ajax({\n\t        method: \"POST\",\n\t        url: \"\" + baseUrl,\n\t        headers: {\n\t            \"Accept\": \"application/json\",\n\t            \"Authorization\": \"BotConnector \" + app_secret\n\t        }\n\t    })\n\t        .do(function (ajaxResponse) { return console.log(\"conversation ajaxResponse\", ajaxResponse); })\n\t        .map(function (ajaxResponse) { return ajaxResponse.response; });\n\t};\n\texports.postMessage = function (message, conversation) {\n\t    return rxjs_1.Observable\n\t        .ajax({\n\t        method: \"POST\",\n\t        url: baseUrl + \"/\" + conversation.conversationId + \"/messages\",\n\t        body: message,\n\t        headers: {\n\t            \"Accept\": \"application/json\",\n\t            \"Content-Type\": \"application/json\",\n\t            \"Authorization\": \"BotConnector \" + conversation.token\n\t        }\n\t    })\n\t        .do(function (ajaxResponse) { return console.log(\"post message ajaxResponse\", ajaxResponse); })\n\t        .map(function (ajaxResponse) { return true; });\n\t};\n\texports.getMessages = function (conversation) {\n\t    return new rxjs_1.Observable(function (subscriber) {\n\t        return messageGroupGenerator(conversation, subscriber);\n\t    })\n\t        .concatAll();\n\t};\n\tvar messageGroupGenerator = function (conversation, subscriber, watermark) {\n\t    getMessageGroup(conversation, watermark).subscribe(function (messageGroup) {\n\t        var someMessages = messageGroup && messageGroup.messages && messageGroup.messages.length > 0;\n\t        if (someMessages)\n\t            subscriber.next(rxjs_1.Observable.from(messageGroup.messages));\n\t        setTimeout(function () { return messageGroupGenerator(conversation, subscriber, messageGroup && messageGroup.watermark); }, someMessages && messageGroup.watermark ? 0 : 3000);\n\t    }, function (result) { return subscriber.error(result); });\n\t};\n\tvar getMessageGroup = function (conversation, watermark) {\n\t    return rxjs_1.Observable\n\t        .ajax({\n\t        method: \"GET\",\n\t        url: baseUrl + \"/\" + conversation.conversationId + \"/messages?watermark=\" + watermark,\n\t        headers: {\n\t            \"Accept\": \"application/json\",\n\t            \"Authorization\": \"BotConnector \" + conversation.token\n\t        }\n\t    })\n\t        .do(function (ajaxResponse) { return console.log(\"get messages ajaxResponse\", ajaxResponse); })\n\t        .map(function (ajaxResponse) { return ajaxResponse.response; });\n\t};\n\n\n/***/ },\n/* 347 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\tvar HistoryMessage_tsx_1 = __webpack_require__(348);\n\texports.History = function (props) {\n\t    return React.createElement(\"div\", {id: \"historyFrame\"}, props.messages.map(function (message, index) { return React.createElement(HistoryMessage_tsx_1.HistoryMessage, {key: index.toString(), message: message}); }));\n\t};\n\n\n/***/ },\n/* 348 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\texports.HistoryMessage = function (props) {\n\t    return React.createElement(\"p\", null, props.message.from + \": \" + props.message.text);\n\t};\n\n\n/***/ },\n/* 349 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\texports.Outgoing = function (props) {\n\t    return React.createElement(\"div\", {id: \"outgoingFrame\"}, React.createElement(\"textarea\", {id: \"outgoing\", value: props.outgoingMessage, onChange: function (e) { return props.updateMessage(e.target.value); }, disabled: !props.enableSend}), React.createElement(\"button\", {id: \"send\", onClick: props.sendMessage, disabled: !props.outgoingMessage || props.outgoingMessage.length == 0 || !props.enableSend}, \"send\"));\n\t};\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** public/app.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b801a7369dcdc0a6404f\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Observable, Subscriber, Subject } from '@reactivex/rxjs';\nimport { BotMessage, BotConversation } from './directLineTypes';\nimport { startConversation, getMessages, postMessage } from './directLine';\nimport { History } from './History.tsx'\nimport { Outgoing } from './Outgoing.tsx'\n\nexport interface Message {\n    from: \"me\" | \"bot\";\n    text: string;\n} \n\ninterface State {\n    conversation?: BotConversation; \n    messages?: Message[];\n    outgoingMessage?: string;\n    enableSend?: boolean;\n}\n\nconst outgoing$ = new Subject<Message>();\nconst outgoingMessage$ = new Subject<string>();\n\nclass App extends React.Component<{}, State> {\n    constructor() {\n        super();\n        this.state = {\n            conversation: null,\n            messages: [],\n            outgoingMessage: \"\",\n            enableSend: true\n        }\n\n        startConversation().subscribe(\n            conversation => {\n                this.setState({conversation:conversation});\n\n                getMessages(conversation)\n                .filter(botmessage => botmessage.from === \"TestBot\")\n                .map<Message>(botmessage => ({ text: botmessage.text, from: \"bot\" }))\n                .merge(outgoing$)\n                .scan<Message[]>((messages, message) => [...messages, message], [])\n                .combineLatest(outgoingMessage$, (messages, outgoingMessage) => ({\n                    messages: messages,\n                    outgoingMessage: outgoingMessage\n                }))\n                .subscribe(\n                    state => this.setState(state),\n                    error => console.log(\"error getting messages\", error),\n                    () => console.log(\"done getting messages\")\n                );\n            },\n            error => console.log(\"error starting conversation\", error),\n            () => console.log(\"done starting conversation\")\n        )\n    }\n\n    updateMessage = (text:string) => {\n        outgoingMessage$.next(text);\n    }\n\n    sendMessage = () => {\n        this.setState({enableSend: false});\n        postMessage({\n            text: this.state.outgoingMessage,\n            from: null,\n            conversationId: this.state.conversation.conversationId\n        }, this.state.conversation)\n        .retry(2)\n        .subscribe(\n            () => {\n                outgoing$.next({text: this.state.outgoingMessage, from: \"me\"});\n                this.setState({outgoingMessage: \"\", enableSend:true});\n            },\n            error => {\n                console.log(\"failed to post message\");\n                this.setState({enableSend: true});\n            }\n        );\n    }\n\n    render() {\n        return <div id=\"appFrame\">\n            <Outgoing sendMessage={ this.sendMessage } updateMessage={ this.updateMessage } enableSend={ this.state.enableSend } outgoingMessage={ this.state.outgoingMessage }/>\n            <History messages={ this.state.messages }/> \n        </div>;\n    }\n}\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/App.tsx\n **/","module.exports = React;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = ReactDOM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ReactDOM\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = require('./dist/cjs/Rx');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@reactivex/rxjs/index.js\n ** module id = 4\n ** module chunks = 0\n **/","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/cache';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctKey';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {MulticastObservable} from './observable/MulticastObservable';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport {asap} from './scheduler/asap';\nimport {async} from './scheduler/async';\nimport {queue} from './scheduler/queue';\nimport {animationFrame} from './scheduler/animationFrame';\nimport {AsapScheduler} from './scheduler/AsapScheduler';\nimport {AsyncScheduler} from './scheduler/AsyncScheduler';\nimport {QueueScheduler} from './scheduler/QueueScheduler';\nimport {AnimationFrameScheduler} from './scheduler/AnimationFrameScheduler';\nimport {$$rxSubscriber as rxSubscriber} from './symbol/rxSubscriber';\nimport {$$iterator as iterator} from './symbol/iterator';\nimport observable from 'symbol-observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Rx.ts\n **/","import {Operator} from './Operator';\nimport {Observer} from './Observer';\nimport {Observable} from './Observable';\nimport {Subscriber} from './Subscriber';\nimport {ISubscription, Subscription} from './Subscription';\nimport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nimport {SubjectSubscription} from './SubjectSubscription';\nimport {$$rxSubscriber} from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  isUnsubscribed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  lift<T, R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.isUnsubscribed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.isUnsubscribed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.isUnsubscribed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.isUnsubscribed = true;\n    this.observers = null;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.isUnsubscribed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, protected source?: Observable<T>) {\n    super();\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Subject.ts\n **/","import {PartialObserver} from './Observer';\nimport {Operator} from './Operator';\nimport {Subscriber} from './Subscriber';\nimport {Subscription, AnonymousSubscription, TeardownLogic} from './Subscription';\nimport {root} from './util/root';\nimport {toSubscriber} from './util/toSubscriber';\nimport {IfObservable} from './observable/IfObservable';\nimport {ErrorObservable} from './observable/ErrorObservable';\nimport $$observable from 'symbol-observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | Promise<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this);\n    } else {\n      sink.add(this._subscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` imple will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Observable.ts\n **/","let objectTypes = {\n  'boolean': false,\n  'function': true,\n  'object': true,\n  'number': false,\n  'string': false,\n  'undefined': false\n};\n\ndeclare let global: NodeJS.Global;\ndeclare let module: any;\ndeclare let exports: any;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\nexport let root: any = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n\n/* tslint:disable:no-unused-variable */\nlet freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\nlet freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\nlet freeGlobal = objectTypes[typeof global] && global;\n\nif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n  root = freeGlobal;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/root.ts\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 9\n ** module chunks = 0\n **/","import {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {$$rxSubscriber} from '../symbol/rxSubscriber';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber();\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/toSubscriber.ts\n **/","import {isFunction} from './util/isFunction';\nimport {Observer, PartialObserver} from './Observer';\nimport {Subscription} from './Subscription';\nimport {empty as emptyObserver} from './Observer';\nimport {$$rxSubscriber} from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.isUnsubscribed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Subscriber.ts\n **/","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isFunction.ts\n **/","import {isArray} from './util/isArray';\nimport {isObject} from './util/isObject';\nimport {isFunction} from './util/isFunction';\nimport {tryCatch} from './util/tryCatch';\nimport {errorObject} from './util/errorObject';\nimport {UnsubscriptionError} from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  isUnsubscribed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.isUnsubscribed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public isUnsubscribed: boolean = false;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.isUnsubscribed) {\n      return;\n    }\n\n    this.isUnsubscribed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        (errors = errors || []).push(errorObject.e);\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(err.errors);\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `isUnsubscribed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (\n        teardown === this) || (\n        teardown === Subscription.EMPTY)) {\n      return;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.isUnsubscribed || typeof sub.unsubscribe !== 'function') {\n          break;\n        } else if (this.isUnsubscribed) {\n          sub.unsubscribe();\n        } else {\n          ((<any> this)._subscriptions || ((<any> this)._subscriptions = [])).push(sub);\n        }\n        break;\n      default:\n        throw new Error('Unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    return sub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Subscription.ts\n **/","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isArray.ts\n **/","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isObject.ts\n **/","import {errorObject} from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/tryCatch.ts\n **/","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject: any = { e: {} };\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/errorObject.ts\n **/","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/UnsubscriptionError.ts\n **/","export interface NextObserver<T> {\n  isUnsubscribed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  isUnsubscribed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  isUnsubscribed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  isUnsubscribed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  isUnsubscribed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Observer.ts\n **/","import {root} from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/symbol/rxSubscriber.ts\n **/","module.exports = require('./lib/index');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@reactivex/rxjs/~/symbol-observable/index.js\n ** module id = 21\n ** module chunks = 0\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _ponyfill = require('./ponyfill');\n\nvar _ponyfill2 = _interopRequireDefault(_ponyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar root = undefined; /* global window */\n\nif (typeof global !== 'undefined') {\n\troot = global;\n} else if (typeof window !== 'undefined') {\n\troot = window;\n}\n\nvar result = (0, _ponyfill2.default)(root);\nexports.default = result;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@reactivex/rxjs/~/symbol-observable/lib/index.js\n ** module id = 22\n ** module chunks = 0\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = symbolObservablePonyfill;\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar _Symbol = root.Symbol;\n\n\tif (typeof _Symbol === 'function') {\n\t\tif (_Symbol.observable) {\n\t\t\tresult = _Symbol.observable;\n\t\t} else {\n\t\t\tresult = _Symbol('observable');\n\t\t\t_Symbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@reactivex/rxjs/~/symbol-observable/lib/ponyfill.js\n ** module id = 23\n ** module chunks = 0\n **/","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/ObjectUnsubscribedError.ts\n **/","import {Subject} from './Subject';\nimport {Observer} from './Observer';\nimport {Subscription} from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  isUnsubscribed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.isUnsubscribed) {\n      return;\n    }\n\n    this.isUnsubscribed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.isUnsubscribed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/SubjectSubscription.ts\n **/","import {Observable} from '../../Observable';\nimport {bindCallback as staticBindCallback} from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindCallback.ts\n **/","import { BoundCallbackObservable } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/bindCallback.ts\n **/","import {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {AsyncSubject} from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/BoundCallbackObservable.ts\n **/","import {Subject} from './Subject';\nimport {Subscriber} from './Subscriber';\nimport {Subscription} from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  value: T = null;\n\n  hasNext: boolean = false;\n\n  hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    this.value = value;\n    this.hasNext = true;\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/AsyncSubject.ts\n **/","import {Observable} from '../../Observable';\nimport {bindNodeCallback as staticBindNodeCallback} from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindNodeCallback.ts\n **/","import { BoundNodeCallbackObservable } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/bindNodeCallback.ts\n **/","import {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {AsyncSubject} from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\nfunction dispatch<T>(state: { source: BoundNodeCallbackObservable<T>, subscriber: Subscriber<T> }) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  const { callbackFunc, args, scheduler } = source;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/BoundNodeCallbackObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {combineLatest as combineLatestStatic} from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/combineLatest.ts\n **/","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from './ArrayObservable';\nimport { CombineLatestOperator } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: Scheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: Scheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | Scheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | Scheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | Scheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    Scheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: Scheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <Scheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/combineLatest.ts\n **/","import {Scheduler} from '../Scheduler';\nexport function isScheduler<T>(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isScheduler.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {ScalarObservable} from './ScalarObservable';\nimport {EmptyObservable} from './EmptyObservable';\nimport {Subscriber} from '../Subscriber';\nimport {isScheduler} from '../util/isScheduler';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: Scheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(...array: Array<T | Scheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` Scheduler, which means the `next`\n   * notifications are sent synchronously, although with a different Scheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | Scheduler>): Observable<T> {\n    let scheduler = <Scheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(public array: T[], public scheduler?: Scheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.isUnsubscribed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: Scheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: Scheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.isUnsubscribed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ScalarObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: Scheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/EmptyObservable.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {isArray} from '../util/isArray';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\nconst none = {};\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <any>observables[0];\n  }\n\n  observables.unshift(this);\n\n  return new ArrayObservable(observables).lift(new CombineLatestOperator(project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface CombineLatestSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<T>[]): Observable<Array<T>>;\n  <TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values);\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/combineLatest.ts\n **/","import {Subscriber} from './Subscriber';\nimport {InnerSubscriber} from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/OuterSubscriber.ts\n **/","import {root} from './root';\nimport {isArray} from './isArray';\nimport {isPromise} from './isPromise';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, ObservableInput} from '../Observable';\nimport {$$iterator} from '../symbol/iterator';\nimport {Subscription} from '../Subscription';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {OuterSubscriber} from '../OuterSubscriber';\n\nimport $$observable from 'symbol-observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.isUnsubscribed) {\n    return;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return;\n    } else {\n      return result.subscribe(destination);\n    }\n  }\n\n  if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.isUnsubscribed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.isUnsubscribed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.isUnsubscribed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (typeof result[$$iterator] === 'function') {\n    for (let item of <any>result) {\n      destination.next(<any>item);\n      if (destination.isUnsubscribed) {\n        break;\n      }\n    }\n    if (!destination.isUnsubscribed) {\n      destination.complete();\n    }\n  } else if (typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error('invalid observable');\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    destination.error(new TypeError('unknown type returned'));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/subscribeToResult.ts\n **/","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isPromise.ts\n **/","import {root} from '../util/root';\n\nexport let $$iterator: any;\n\nconst Symbol: any = root.Symbol;\n\nif (typeof Symbol === 'function') {\n  if (Symbol.iterator) {\n    $$iterator = Symbol.iterator;\n  } else if (typeof Symbol.for === 'function') {\n    $$iterator = Symbol.for('iterator');\n  }\n} else {\n    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {\n      // Bug for mozilla version\n      $$iterator = '@@iterator';\n    } else if (root.Map) {\n      // es6-shim specific logic\n      let keys = Object.getOwnPropertyNames(root.Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        if (key !== 'entries' && key !== 'size' && root.Map.prototype[key] === root.Map.prototype['entries']) {\n          $$iterator = key;\n          break;\n        }\n      }\n    } else {\n      $$iterator = '@@iterator';\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/symbol/iterator.ts\n **/","import {Subscriber} from './Subscriber';\nimport {OuterSubscriber} from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/InnerSubscriber.ts\n **/","import {Observable} from '../../Observable';\nimport {concat as concatStatic} from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/concat.ts\n **/","import { concatStatic } from '../operator/concat';\n\nexport const concat = concatStatic;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/concat.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {isScheduler} from '../util/isScheduler';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {MergeAllOperator} from './mergeAll';\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  return concatStatic<T, R>(this, ...observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ConcatSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | Scheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | Scheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  let scheduler: Scheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concat.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Observer} from '../Observer';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): T {\n  return this.lift(new MergeAllOperator<T>(concurrent));\n}\n\nexport interface MergeAllSignature<T> {\n  (concurrent?: number): T;\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeAll.ts\n **/","import {Observable} from '../../Observable';\nimport {defer as staticDefer} from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/defer.ts\n **/","import { DeferObservable } from './DeferObservable';\n\nexport const defer = DeferObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/defer.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/DeferObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {empty as staticEmpty} from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/empty.ts\n **/","import { EmptyObservable } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/empty.ts\n **/","import {Observable} from '../../Observable';\nimport {forkJoin as staticForkJoin} from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/forkJoin.ts\n **/","import { ForkJoinObservable } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/forkJoin.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {EmptyObservable} from './EmptyObservable';\nimport {isArray} from '../util/isArray';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ForkJoinObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {from as staticFrom} from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/from.ts\n **/","import { FromObservable } from './FromObservable';\n\nexport const from = FromObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/from.ts\n **/","import {isArray} from '../util/isArray';\nimport {isFunction} from '../util/isFunction';\nimport {isPromise} from '../util/isPromise';\nimport {isScheduler} from '../util/isScheduler';\nimport {PromiseObservable} from './PromiseObservable';\nimport {IteratorObservable} from'./IteratorObservable';\nimport {ArrayObservable} from './ArrayObservable';\nimport {ArrayLikeObservable} from './ArrayLikeObservable';\n\nimport {Scheduler} from '../Scheduler';\nimport {$$iterator} from '../symbol/iterator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {ObserveOnSubscriber} from '../operator/observeOn';\n\nimport $$observable from 'symbol-observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler: Scheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, mapFn: (x: any, y: number) => R, thisArg?: any, scheduler?: Scheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {function(x: any, i: number): T} [mapFn] A \"map\" function to call\n   * when converting array-like objects, where `x` is a value from the\n   * array-like and `i` is the index of that value in the sequence.\n   * @param {any} [thisArg] The context object to use when calling the `mapFn`,\n   * if provided.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>,\n                   mapFnOrScheduler?: Scheduler | ((x: any, y: number) => T),\n                   thisArg?: any,\n                   lastScheduler?: Scheduler): Observable<T> {\n    let scheduler: Scheduler = null;\n    let mapFn: (x: any, i: number) => T = null;\n    if (isFunction(mapFnOrScheduler)) {\n      scheduler = lastScheduler || null;\n      mapFn = <(x: any, i: number) => T> mapFnOrScheduler;\n    } else if (isScheduler(scheduler)) {\n      scheduler = <Scheduler> mapFnOrScheduler;\n    }\n\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(<any>ish, null, null, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, mapFn, thisArg, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/FromObservable.ts\n **/","import {root} from '../util/root';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler: Scheduler = null): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, public scheduler: Scheduler = null) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.isUnsubscribed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.isUnsubscribed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.isUnsubscribed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.isUnsubscribed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.isUnsubscribed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.isUnsubscribed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.isUnsubscribed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.isUnsubscribed) {\n    subscriber.error(err);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/PromiseObservable.ts\n **/","import {root} from '../util/root';\nimport {isObject} from '../util/isObject';\nimport {tryCatch} from '../util/tryCatch';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {isFunction} from '../util/isFunction';\nimport {$$iterator} from '../symbol/iterator';\nimport {errorObject} from '../util/errorObject';\nimport {TeardownLogic} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any,\n                   project?: ((x?: any, i?: number) => T) | any,\n                   thisArg?: any | Scheduler,\n                   scheduler?: Scheduler) {\n    return new IteratorObservable(iterator, project, thisArg, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, thisArg, project, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    if (project) {\n      result = tryCatch(project).call(thisArg, result.value, index);\n      if (result === errorObject) {\n        state.error = errorObject.e;\n        state.hasError = true;\n      } else {\n        subscriber.next(result);\n        state.index = index + 1;\n      }\n    } else {\n      subscriber.next(result.value);\n      state.index = index + 1;\n    }\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  private thisArg: any;\n  private project: (x?: any, i?: number) => T;\n  private scheduler: Scheduler;\n\n  constructor(iterator: any,\n              project?: ((x?: any, i?: number) => T) | any,\n              thisArg?: any | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    if (isObject(project)) {\n      this.thisArg = project;\n      this.scheduler = thisArg;\n    } else if (isFunction(project)) {\n      this.project = project;\n      this.thisArg = thisArg;\n      this.scheduler = scheduler;\n    } else if (project != null) {\n      throw new Error('When provided, `project` must be a function.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, project, thisArg, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, thisArg, project, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else if (project) {\n          result = tryCatch(project).call(thisArg, result.value, index++);\n          if (result === errorObject) {\n            subscriber.error(errorObject.e);\n            break;\n          }\n          subscriber.next(result);\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.isUnsubscribed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('Object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/IteratorObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {ScalarObservable} from './ScalarObservable';\nimport {EmptyObservable} from './EmptyObservable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  private mapFn: (x: T, y: number) => T;\n\n  static create<T>(arrayLike: ArrayLike<T>, mapFn: (x: T, y: number) => T, thisArg: any, scheduler?: Scheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1 && !mapFn) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, mapFn, subscriber } = state;\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    const result = mapFn ? mapFn(arrayLike[index], index) : arrayLike[index];\n    subscriber.next(result);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, mapFn: (x: T, y: number) => T, thisArg: any, private scheduler?: Scheduler) {\n    super();\n    if (!mapFn && !scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n    if (mapFn) {\n      this.mapFn = mapFn.bind(thisArg);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, mapFn, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, mapFn, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.isUnsubscribed; i++) {\n        const result = mapFn ? mapFn(arrayLike[i], i) : arrayLike[i];\n        subscriber.next(result);\n      }\n      subscriber.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayLikeObservable.ts\n **/","import {Observable} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {Operator} from '../Operator';\nimport {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport interface ObserveOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: Scheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: Scheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n     this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch,\n                                      this.delay,\n                                      new ObserveOnMessage(notification, this.destination)));\n   }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/observeOn.ts\n **/","import {PartialObserver} from './Observer';\nimport {Observable} from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public exception?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.exception);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.exception);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.exception);\n      case 'C':\n        return Observable.empty<T>();\n    }\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` exception.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Notification.ts\n **/","import {Observable} from '../../Observable';\nimport {fromEvent as staticFromEvent} from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEvent.ts\n **/","import { FromEventObservable } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/fromEvent.ts\n **/","import {Observable} from '../Observable';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {Subscription} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\nexport type NodeStyleEventEmmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmmitter(sourceObj: any): sourceObj is NodeStyleEventEmmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T, R> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   selector?: (...args: Array<any>) => T): Observable<T> {\n    return new FromEventObservable(target, eventName, selector);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {fromEventPattern as staticFromEventPattern} from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEventPattern.ts\n **/","import { FromEventPatternObservable } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/fromEventPattern.ts\n **/","import {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T, R> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function): void} removeHandler A function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler: (handler: Function) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler: (handler: Function) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    this._callAddHandler(handler, subscriber);\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler);\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): void {\n    try {\n      this.addHandler(handler);\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventPatternObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {fromPromise as staticFromPromise} from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromPromise.ts\n **/","import { PromiseObservable } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/fromPromise.ts\n **/","import {Observable} from '../../Observable';\nimport {GenerateObservable} from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/generate.ts\n **/","import {Observable} from '../Observable' ;\nimport {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Action} from '../scheduler/Action';\n\nimport {isScheduler} from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Inital state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * Scheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: Scheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: Scheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   * \n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   * \n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   * \n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: Scheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   * \n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   * \n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: Scheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition and scheduler.\n   * \n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition, result selector and scheduler.\n   * \n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | Scheduler,\n                      scheduler?: Scheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <Scheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <Scheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.isUnsubscribed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>) {\n    const { subscriber, condition } = state;\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.isUnsubscribed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/GenerateObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {_if} from '../../observable/if';\n\nObservable.if = _if;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/if.ts\n **/","import { IfObservable } from './IfObservable';\n\nexport const _if = IfObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/if.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/IfObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {interval as staticInterval} from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/interval.ts\n **/","import { IntervalObservable } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/interval.ts\n **/","import {Subscriber} from '../Subscriber';\nimport {isNumeric} from '../util/isNumeric';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {async} from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified Scheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` Scheduler to provide a notion of time, but you may pass any\n   * Scheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: Scheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: Scheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/IntervalObservable.ts\n **/","import {isArray} from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isNumeric.ts\n **/","import {AsyncScheduler} from './AsyncScheduler';\n\nexport const async = new AsyncScheduler();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/async.ts\n **/","import {Action} from './Action';\nimport {FutureAction} from './FutureAction';\nimport {Subscription} from '../Subscription';\nimport {QueueScheduler} from './QueueScheduler';\n\nexport class AsyncScheduler extends QueueScheduler {\n  scheduleNow<T>(work: (x?: T) => Subscription, state?: T): Action<T> {\n    return new FutureAction(this, work).schedule(state, 0);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsyncScheduler.ts\n **/","import {root} from '../util/root';\nimport {Action} from './Action';\nimport {Scheduler} from '../Scheduler';\nimport {Subscription} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FutureAction<T> extends Subscription implements Action<T> {\n\n  public id: number;\n  public state: T;\n  public delay: number;\n  public error: any;\n\n  private pending: boolean = false;\n\n  constructor(public scheduler: Scheduler,\n              public work: (x?: T) => Subscription | void) {\n    super();\n  }\n\n  execute() {\n    if (this.isUnsubscribed) {\n      this.error = new Error('executing a cancelled action');\n    } else {\n      try {\n        this.work(this.state);\n      } catch (e) {\n        this.unsubscribe();\n        this.error = e;\n      }\n    }\n  }\n\n  schedule(state?: T, delay: number = 0): Action<T> {\n    if (this.isUnsubscribed) {\n      return this;\n    }\n    return this._schedule(state, delay);\n  }\n\n  protected _schedule(state?: T, delay: number = 0): Action<T> {\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    // If this action has an intervalID and the specified delay matches the\n    // delay we used to create the intervalID, don't call `setInterval` again.\n    if (id != null && this.delay === delay) {\n      return this;\n    }\n\n    this.delay = delay;\n\n    // If this action has an intervalID, but was rescheduled with a different\n    // `delay` time, cancel the current intervalID and call `setInterval` with\n    // the new `delay` time.\n    if (id != null) {\n      this.id = null;\n      root.clearInterval(id);\n    }\n\n    //\n    // Important implementation note:\n    //\n    // By default, FutureAction only executes once. However, Actions have the\n    // ability to be rescheduled from within the scheduled callback (mimicking\n    // recursion for asynchronous methods). This allows us to implement single\n    // and repeated actions with the same code path without adding API surface\n    // area, and implement tail-call optimization over asynchronous boundaries.\n    //\n    // However, JS runtimes make a distinction between intervals scheduled by\n    // repeatedly calling `setTimeout` vs. a single `setInterval` call, with\n    // the latter providing a better guarantee of precision.\n    //\n    // In order to accommodate both single and repeatedly rescheduled actions,\n    // use `setInterval` here for both cases. By default, the interval will be\n    // canceled after its first execution, or if the action schedules itself to\n    // run again with a different `delay` time.\n    //\n    // If the action recursively schedules itself to run again with the same\n    // `delay` time, the interval is not canceled, but allowed to loop again.\n    // The check of whether the interval should be canceled or not is run every\n    // time the interval is executed. The first time an action fails to\n    // reschedule itself, the interval is canceled.\n    //\n    this.id = root.setInterval(() => {\n\n      this.pending = false;\n      const {id, scheduler} = this;\n      scheduler.actions.push(this);\n      scheduler.flush();\n\n      //\n      // Terminate this interval if the action didn't reschedule itself.\n      // Don't call `this.unsubscribe()` here, because the action could be\n      // rescheduled later. For example:\n      //\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling this action again */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n\n      if (this.pending === false && id != null) {\n        this.id = null;\n        root.clearInterval(id);\n      }\n    }, delay);\n\n    return this;\n  }\n\n  protected _unsubscribe() {\n\n    this.pending = false;\n    const {id, scheduler} = this;\n    const {actions} = scheduler;\n    const index = actions.indexOf(this);\n\n    if (id != null) {\n      this.id = null;\n      root.clearInterval(id);\n    }\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    this.work = null;\n    this.state = null;\n    this.scheduler = null;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/FutureAction.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {QueueAction} from './QueueAction';\nimport {Subscription} from '../Subscription';\nimport {FutureAction} from './FutureAction';\nimport {Action} from './Action';\n\nexport class QueueScheduler implements Scheduler {\n  public active: boolean = false;\n  public actions: QueueAction<any>[] = []; // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n  public scheduledId: number = null;\n\n  now() {\n    return Date.now();\n  }\n\n  flush() {\n    if (this.active || this.scheduledId) {\n      return;\n    }\n    this.active = true;\n    const actions = this.actions;\n    // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n    for (let action: QueueAction<any> = null; action = actions.shift(); ) {\n      action.execute();\n      if (action.error) {\n        this.active = false;\n        throw action.error;\n      }\n    }\n    this.active = false;\n  }\n\n  schedule<T>(work: (x?: T) => Subscription | void, delay: number = 0, state?: T): Subscription {\n    return (delay <= 0) ?\n      this.scheduleNow(work, state) :\n      this.scheduleLater(work, delay, state);\n  }\n\n  scheduleNow<T>(work: (x?: T) => Subscription | void, state?: T): Action<T> {\n    return new QueueAction(this, work).schedule(state);\n  }\n\n  scheduleLater<T>(work: (x?: T) => Subscription | void, delay: number, state?: T): Action<T> {\n    return new FutureAction(this, work).schedule(state, delay);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueScheduler.ts\n **/","import {Action} from './Action';\nimport {FutureAction} from './FutureAction';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends FutureAction<T> {\n  protected _schedule(state?: T, delay: number = 0): Action<T> {\n    if (delay > 0) {\n      return super._schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    const scheduler = this.scheduler;\n    scheduler.actions.push(this);\n    scheduler.flush();\n    return this;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueAction.ts\n **/","import {Observable} from '../../Observable';\nimport {merge as mergeStatic} from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/merge.ts\n **/","import { mergeStatic } from '../operator/merge';\n\nexport const merge = mergeStatic;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/merge.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {MergeAllOperator} from './mergeAll';\nimport {isScheduler} from '../util/isScheduler';\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n  observables.unshift(this);\n  return mergeStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface MergeSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  (concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler | number>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | Scheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | Scheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: Scheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <Scheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/merge.ts\n **/","import {Observable} from '../../Observable';\nimport {raceStatic} from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/race.ts\n **/","import {Observable} from '../Observable';\nimport {isArray} from '../util/isArray';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  observables.unshift(this);\n  return raceStatic.apply(this, observables);\n}\n\nexport interface RaceSignature<T> {\n  (...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\n  <R>(...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n          this.add(subscription);\n        }\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/race.ts\n **/","import {Observable} from '../../Observable';\nimport {never as staticNever} from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/never.ts\n **/","import { NeverObservable } from './NeverObservable';\n\nexport const never = NeverObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/never.ts\n **/","import {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {noop} from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/NeverObservable.ts\n **/","/* tslint:disable:no-empty */\nexport function noop() { }\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/noop.ts\n **/","import {Observable} from '../../Observable';\nimport {of as staticOf} from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/of.ts\n **/","import { ArrayObservable } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/of.ts\n **/","import {Observable} from '../../Observable';\r\nimport {onErrorResumeNextStatic} from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/onErrorResumeNext.ts\n **/","import {Observable, ObservableInput} from '../Observable';\r\nimport {FromObservable} from '../observable/FromObservable';\r\nimport {Operator} from '../Operator';\r\nimport {Subscriber} from '../Subscriber';\r\nimport {isArray} from '../util/isArray';\r\nimport {OuterSubscriber} from '../OuterSubscriber';\r\nimport {InnerSubscriber} from '../InnerSubscriber';\r\nimport {subscribeToResult} from '../util/subscribeToResult';\r\n\r\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                       Array<ObservableInput<any>> |\r\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<Observable<any>>>nextSources[0];\r\n  }\r\n\r\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\n/* tslint:disable:max-line-length */\r\nexport interface OnErrorResumeNextSignature<T> {\r\n  <R>(v: ObservableInput<R>): Observable<R>;\r\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\n  <R>(array: ObservableInput<any>[]): Observable<R>;\r\n}\r\n/* tslint:enable:max-line-length */\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\r\n/* tslint:enable:max-line-length */\r\n\r\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                              Array<ObservableInput<any>> |\r\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\r\n  let source: ObservableInput<any> = null;\r\n\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\r\n  }\r\n  source = nextSources.shift();\r\n\r\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\r\n  constructor(private nextSources: Array<ObservableInput<any>>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\r\n  }\r\n}\r\n\r\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\r\n  constructor(protected destination: Subscriber<T>,\r\n              private nextSources: Array<ObservableInput<any>>) {\r\n    super(destination);\r\n  }\r\n\r\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  private subscribeToNextSource(): void {\r\n    const next = this.nextSources.shift();\r\n    if (next) {\r\n      this.add(subscribeToResult(this, next));\r\n    } else {\r\n      this.destination.complete();\r\n    }\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/onErrorResumeNext.ts\n **/","import {Observable} from '../../Observable';\nimport {range as staticRange} from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/range.ts\n **/","import { RangeObservable } from './RangeObservable';\n\nexport const range = RangeObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/range.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * Scheduler and just delivers the notifications synchronously, but may use\n   * an optional Scheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: Scheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: Scheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: Scheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.isUnsubscribed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/RangeObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {using as staticUsing} from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/using.ts\n **/","import { UsingObservable } from './UsingObservable';\n\nexport const using = UsingObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/using.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {AnonymousSubscription, TeardownLogic} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/UsingObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {_throw} from '../../observable/throw';\n\nObservable.throw = _throw;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/throw.ts\n **/","import { ErrorObservable } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/throw.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: any, scheduler?: Scheduler) {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ErrorObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {timer as staticTimer} from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/timer.ts\n **/","import { TimerObservable } from './TimerObservable';\n\nexport const timer = TimerObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/timer.ts\n **/","import {isNumeric} from '../util/isNumeric';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {async} from '../scheduler/async';\nimport {isScheduler} from '../util/isScheduler';\nimport {isDate} from '../util/isDate';\nimport {TeardownLogic} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` Scheduler to provide a notion of time, but you\n   * may pass any Scheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | Scheduler,\n                scheduler?: Scheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: Scheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <Scheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/TimerObservable.ts\n **/","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isDate.ts\n **/","import {Observable} from '../../Observable';\nimport {zip as zipStatic} from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/zip.ts\n **/","import { zipStatic } from '../operator/zip';\n\nexport const zip = zipStatic;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/zip.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {isArray} from '../util/isArray';\nimport {Operator} from '../Operator';\nimport {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {$$iterator} from '../symbol/iterator';\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  observables.unshift(this);\n  return zipStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ZipSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: Array<ObservableInput<T>>): Observable<R>;\n  <TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private index = 0;\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    const index = this.index++;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>,\n              private index: number) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/zip.ts\n **/","import {Observable} from '../../../Observable';\nimport {ajax as staticAjax} from '../../../observable/dom/ajax';\nimport {AjaxCreationMethod} from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/ajax.ts\n **/","import { AjaxObservable, AjaxCreationMethod } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/ajax.ts\n **/","import {root} from '../../util/root';\nimport {tryCatch} from '../../util/tryCatch';\nimport {errorObject} from '../../util/errorObject';\nimport {Observable} from '../../Observable';\nimport {Subscriber} from '../../Subscriber';\nimport {TeardownLogic} from '../../Subscription';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  resultSelector?: <T>(response: AjaxResponse) => T;\n  responseType?: string;\n}\n\nfunction getCORSRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  <T>(urlOrRequest: string | AjaxRequest): Observable<T>;\n  get<T>(url: string, resultSelector?: (response: AjaxResponse) => T, headers?: Object): Observable<T>;\n  post<T>(url: string, body?: any, headers?: Object): Observable<T>;\n  put<T>(url: string, body?: any, headers?: Object): Observable<T>;\n  delete<T>(url: string, headers?: Object): Observable<T>;\n  getJSON<T, R>(url: string, resultSelector?: (data: T) => R, headers?: Object): Observable<R>;\n}\n\nfunction defaultGetResultSelector<T>(response: AjaxResponse): T {\n  return response.response;\n}\n\nexport function ajaxGet<T>(url: string, resultSelector: (response: AjaxResponse) => T = defaultGetResultSelector, headers: Object = null) {\n  return new AjaxObservable<T>({ method: 'GET', url, resultSelector, headers });\n};\n\nexport function ajaxPost<T>(url: string, body?: any, headers?: Object): Observable<T> {\n  return new AjaxObservable<T>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<T>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut<T>(url: string, body?: any, headers?: Object): Observable<T> {\n  return new AjaxObservable<T>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T, R>(url: string, resultSelector?: (data: T) => R, headers?: Object): Observable<R> {\n  const finalResultSelector = resultSelector ? (res: AjaxResponse) => resultSelector(res.response) : (res: AjaxResponse) => res.response;\n  return new AjaxObservable<R>({ method: 'GET', url, responseType: 'json', resultSelector: finalResultSelector, headers });\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function() {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private resultSelector: (response: AjaxResponse) => T;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData)) {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.resultSelector = request.resultSelector;\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { resultSelector, xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    if (resultSelector) {\n      const result = tryCatch(resultSelector)(response);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n      } else {\n        destination.next(result);\n      }\n    } else {\n      destination.next(response);\n    }\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // open XHR first\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // now set up the events\n      this.setupEvents(xhr, request);\n\n      // finally send the request\n      if (body) {\n        xhr.send(body);\n      } else {\n        xhr.send();\n      }\n    }\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    xhr.ontimeout = function xhrTimeout(e) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    (<any>xhr.ontimeout).request = request;\n    (<any>xhr.ontimeout).subscriber = this;\n    (<any>xhr.ontimeout).progressSubscriber = progressSubscriber;\n\n    if (xhr.upload && 'withCredentials' in xhr && root.XDomainRequest) {\n      if (progressSubscriber) {\n        xhr.onprogress = function xhrProgress(e) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        (<any>xhr.onprogress).progressSubscriber = progressSubscriber;\n      }\n\n      xhr.onerror = function xhrError(e) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      (<any>xhr.onerror).request = request;\n      (<any>xhr.onerror).subscriber = this;\n      (<any>xhr.onerror).progressSubscriber = progressSubscriber;\n    }\n\n    xhr.onreadystatechange = function xhrReadyStateChange(e) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    (<any>xhr.onreadystatechange).subscriber = this;\n    (<any>xhr.onreadystatechange).progressSubscriber = progressSubscriber;\n    (<any>xhr.onreadystatechange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4) {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || '');\n        } else {\n          this.response = JSON.parse(xhr.responseText || '');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/AjaxObservable.ts\n **/","import {Observable} from '../../../Observable';\nimport {webSocket as staticWebSocket} from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/webSocket.ts\n **/","import { WebSocketSubject } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/webSocket.ts\n **/","import {Subject, AnonymousSubject} from '../../Subject';\nimport {Subscriber} from '../../Subscriber';\nimport {Observable} from '../../Observable';\nimport {Subscription} from '../../Subscription';\nimport {Operator} from '../../Operator';\nimport {root} from '../../util/root';\nimport {ReplaySubject} from '../../ReplaySubject';\nimport {Observer, NextObserver} from '../../Observer';\nimport {tryCatch} from '../../util/tryCatch';\nimport {errorObject} from '../../util/errorObject';\nimport {assign} from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * @param urlConfigOrSource\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const socket = this.protocol ?\n      new WebSocketCtor(this.url, this.protocol) :\n      new WebSocketCtor(this.url);\n    this.socket = socket;\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    const observer = this._output;\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => observer.error(e);\n\n    socket.onclose = (e: CloseEvent) => {\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n        this.socket = null;\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this.socket = null;\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/WebSocketSubject.ts\n **/","import {Subject} from './Subject';\nimport {Scheduler} from './Scheduler';\nimport {queue} from './scheduler/queue';\nimport {Subscriber} from './Subscriber';\nimport {Subscription} from './Subscription';\nimport {ObserveOnSubscriber} from './operator/observeOn';\n\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: Scheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.isUnsubscribed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/ReplaySubject.ts\n **/","import {QueueScheduler} from './QueueScheduler';\n\nexport const queue = new QueueScheduler();\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/queue.ts\n **/","import {root} from './root';\n\nconst Object = root.Object;\n\nif (typeof (<any>Object).assign != 'function') {\n  (function () {\n    (<any>Object).assign = function assignPolyfill(target: Object, ...sources: Array<Object>): Object {\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      const output = Object(target);\n      const len = sources.length;\n      for (let index = 0; index < len; index++) {\n        let source = sources[index];\n        if (source !== undefined && source !== null) {\n          for (let key in source) {\n            if (source.hasOwnProperty(key)) {\n              output[key] = source[key];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  })();\n}\n\nexport const assign: (target: Object, ...sources: Array<Object>) => Object = Object.assign;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/assign.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {buffer, BufferSignature} from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: BufferSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/buffer.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nexport interface BufferSignature<T> {\n  (closingNotifier: Observable<any>): Observable<T[]>;\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/buffer.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferCount, BufferCountSignature} from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: BufferCountSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferCount.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nexport interface BufferCountSignature<T> {\n  (bufferSize: number, startBufferEvery?: number): Observable<T[]>;\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [[]];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = (this.count += 1);\n    const destination = this.destination;\n    const bufferSize = this.bufferSize;\n    const startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n    const buffers = this.buffers;\n    const len = buffers.length;\n    let remove = -1;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = 0; i < len; i++) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        remove = i;\n        destination.next(buffer);\n      }\n    }\n\n    if (remove !== -1) {\n      buffers.splice(remove, 1);\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferCount.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferTime, BufferTimeSignature} from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: BufferTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferTime.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {Action} from '../scheduler/Action';\nimport {async} from '../scheduler/async';\nimport {isScheduler} from '../util/isScheduler';\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: Scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nexport interface BufferTimeSignature<T> {\n  (bufferTimeSpan: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: Scheduler): Observable<T[]>;\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: Scheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.isUnsubscribed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = (<any>this).schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.isUnsubscribed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferToggle, BufferToggleSignature} from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: BufferToggleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferToggle.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscription} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface BufferToggleSignature<T> {\n  <O>(openings: SubscribableOrPromise<O>, closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]>;\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.isUnsubscribed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferToggle.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferWhen, BufferWhenSignature} from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: BufferWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nexport interface BufferWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<T[]>;\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferWhen.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {cache, CacheSignature} from '../../operator/cache';\n\nObservable.prototype.cache = cache;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    cache: CacheSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/cache.ts\n **/","import {Observable} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {ReplaySubject} from '../ReplaySubject';\nimport {Observer} from '../Observer';\nimport {Subscription} from '../Subscription';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {Observable<any>}\n * @method cache\n * @owner Observable\n */\nexport function cache<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                         windowTime: number = Number.POSITIVE_INFINITY,\n                         scheduler?: Scheduler): Observable<T> {\n  let subject: ReplaySubject<T>;\n  let source = this;\n  let refs = 0;\n  let outerSub: Subscription;\n\n  const getSubject = () => {\n    subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n    return subject;\n  };\n\n  return new Observable<T>((observer: Observer<T>) => {\n    if (!subject) {\n      subject = getSubject();\n      outerSub = source.subscribe(\n        (value: T) => subject.next(value),\n        (err: any) => {\n          let s = subject;\n          subject = null;\n          s.error(err);\n        },\n        () => subject.complete()\n      );\n    }\n\n    refs++;\n\n    if (!subject) {\n      subject = getSubject();\n    }\n    let innerSub = subject.subscribe(observer);\n\n    return () => {\n      refs--;\n      if (innerSub) {\n        innerSub.unsubscribe();\n      }\n      if (refs === 0) {\n        outerSub.unsubscribe();\n      }\n    };\n  });\n}\n\nexport interface CacheSignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/cache.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {_catch, CatchSignature} from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: CatchSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/catch.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @owner Observable\n */\nexport function _catch<T, R>(selector: (err: any, caught: Observable<T>) => Observable<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nexport interface CatchSignature<T> {\n  (selector: (err: any, caught: Observable<T>) => Observable<T>): Observable<T>;\n  <R>(selector: (err: any, caught: Observable<T>) => Observable<R>): Observable<R>;\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<any>;\n\n  constructor(private selector: (err: any, caught: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<any>) => Observable<any>,\n              private caught: Observable<any>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this._innerSub(result);\n    }\n  }\n\n  private _innerSub(result: Observable<any>) {\n    this.unsubscribe();\n    (<any>this.destination).remove(this);\n    result.subscribe(this.destination);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/catch.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {combineAll, CombineAllSignature} from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: CombineAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineAll.ts\n **/","import {CombineLatestOperator} from './combineLatest';\nimport {Observable} from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n\nexport interface CombineAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/combineAll.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {combineLatest, CombineLatestSignature} from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: CombineLatestSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineLatest.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concat, ConcatSignature} from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: ConcatSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concat.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concatAll, ConcatAllSignature} from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: ConcatAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatAll.ts\n **/","import {Subscribable} from '../Observable';\nimport {MergeAllOperator} from './mergeAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): T {\n  return this.lift(new MergeAllOperator<T>(1));\n}\n\nexport interface ConcatAllSignature<T> {\n  (): T;\n  <R>(): Subscribable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concatAll.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concatMap, ConcatMapSignature} from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: ConcatMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMap.ts\n **/","import {MergeMapOperator} from './mergeMap';\nimport {Observable, ObservableInput} from '../Observable';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n\nexport interface ConcatMapSignature<T> {\n  <R>(project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concatMap.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source._subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concatMapTo, ConcatMapToSignature} from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: ConcatMapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMapTo.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {MergeMapToOperator} from './mergeMapTo';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n\nexport interface ConcatMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concatMapTo.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Operator} from '../Operator';\nimport {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapToSignature<T> {\n  <R>(observable: ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {count, CountSignature} from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: CountSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/count.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Observer} from '../Observer';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nexport interface CountSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number>;\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/count.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {dematerialize, DematerializeSignature} from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: DematerializeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/dematerialize.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nexport interface DematerializeSignature<T> {\n  <R>(): Observable<R>;\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source._subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/dematerialize.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {debounce, DebounceSignature} from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: DebounceSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounce.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nexport interface DebounceSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.isUnsubscribed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/debounce.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {debounceTime, DebounceTimeSignature} from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: DebounceTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounceTime.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {Subscription} from '../Subscription';\nimport {async} from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nexport interface DebounceTimeSignature<T> {\n  (dueTime: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/debounceTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {defaultIfEmpty, DefaultIfEmptySignature} from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: DefaultIfEmptySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/defaultIfEmpty.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nexport interface DefaultIfEmptySignature<T> {\n  (defaultValue?: T): Observable<T>;\n  <R>(defaultValue?: R): Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/defaultIfEmpty.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {delay, DelaySignature} from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: DelaySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/delay.ts\n **/","import {async} from '../scheduler/async';\nimport {isDate} from '../util/isDate';\nimport {Operator} from '../Operator';\nimport {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\nimport {Observable} from '../Observable';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The Scheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: Scheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nexport interface DelaySignature<T> {\n  (delay: number | Date, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: Scheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/delay.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {delayWhen, DelayWhenSignature} from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: DelayWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/delayWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nexport interface DelayWhenSignature<T> {\n  (delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): Observable<T>;\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/delayWhen.ts\n **/","import {Observable} from '../../Observable';\nimport {distinct, DistinctSignature} from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: DistinctSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinct.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T>(compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(compare, flushes));\n}\n\nexport interface DistinctSignature<T> {\n  (compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n\nclass DistinctOperator<T> implements Operator<T, T> {\n  constructor(private compare: (x: T, y: T) => boolean, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T> extends OuterSubscriber<T, T> {\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>, compare: (x: T, y: T) => boolean, flushes: Observable<any>) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.length = 0;\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    let found = false;\n    const values = this.values;\n    const len = values.length;\n    try {\n      for (let i = 0; i < len; i++) {\n        if (this.compare(values[i], value)) {\n          found = true;\n          return;\n        }\n      }\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.values.push(value);\n    this.destination.next(value);\n  }\n\n  private compare(x: T, y: T): boolean {\n    return x === y;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinct.ts\n **/","import {Observable} from '../../Observable';\nimport {distinctKey, DistinctKeySignature} from '../../operator/distinctKey';\n\nObservable.prototype.distinctKey = distinctKey;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctKey: DistinctKeySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctKey.ts\n **/","import {distinct} from './distinct';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctKey\n * @owner Observable\n */\nexport function distinctKey<T>(key: string, compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return distinct.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  }, flushes);\n}\n\nexport interface DistinctKeySignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinctKey.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {distinctUntilChanged, DistinctUntilChangedSignature} from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: DistinctUntilChangedSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilChanged.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nexport interface DistinctUntilChangedSignature<T> {\n (compare?: (x: T, y: T) => boolean): Observable<T>;\n <K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilChanged.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {distinctUntilKeyChanged, DistinctUntilKeyChangedSignature} from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: DistinctUntilKeyChangedSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilKeyChanged.ts\n **/","import {distinctUntilChanged} from './distinctUntilChanged';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n\nexport interface DistinctUntilKeyChangedSignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilKeyChanged.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {_do, DoSignature} from '../../operator/do';\n\nObservable.prototype.do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: DoSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/do.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {PartialObserver} from '../Observer';\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nexport interface DoSignature<T> {\n  (next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\n  (observer: PartialObserver<T>): Observable<T>;\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/do.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {exhaust, SwitchFirstSignature} from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: SwitchFirstSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaust.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nexport interface SwitchFirstSignature<T> {\n  (): T;\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/exhaust.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {exhaustMap, SwitchFirstMapSignature} from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: SwitchFirstMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaustMap.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nexport interface SwitchFirstMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/exhaustMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {expand, ExpandSignature} from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: ExpandSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/expand.ts\n **/","import {Observable} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable where for each item in the source Observable, the supplied function is applied to each item,\n * resulting in a new value to then be applied again with the function.\n * @param {function} project the function for projecting the next emitted item of the Observable.\n * @param {number} [concurrent] the max number of observables that can be created concurrently. defaults to infinity.\n * @param {Scheduler} [scheduler] The Scheduler to use for managing the expansions.\n * @return {Observable} an Observable containing the expansions of the source Observable.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: Scheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport interface ExpandSignature<T> {\n  (project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.isUnsubscribed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/expand.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {elementAt, ElementAtSignature} from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: ElementAtSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/elementAt.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {ArgumentOutOfRangeError} from '../util/ArgumentOutOfRangeError';\nimport {Observable} from '../Observable';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nexport interface ElementAtSignature<T> {\n  (index: number, defaultValue?: T): Observable<T>;\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/elementAt.ts\n **/","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/ArgumentOutOfRangeError.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {filter, FilterSignature} from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: FilterSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/filter.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctKey}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nexport interface FilterSignature<T> {\n  (predicate: (value: T, index: number) => boolean, thisArg?: any): Observable<T>;\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/filter.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {_finally, FinallySignature} from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: FinallySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/finally.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nexport interface FinallySignature<T> {\n  (callback: () => void): Observable<T>;\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/finally.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {find, FindSignature} from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: FindSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/find.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport interface FindSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<T>;\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/find.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {findIndex, FindIndexSignature} from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: FindIndexSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/findIndex.ts\n **/","import {Observable} from '../Observable';\nimport {FindValueOperator} from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return this.lift(new FindValueOperator(predicate, this, true, thisArg));\n}\n\nexport interface FindIndexSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<number>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/findIndex.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {first, FirstSignature} from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: FirstSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/first.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {EmptyError} from '../util/EmptyError';\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface FirstSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    destination.next(value);\n    destination.complete();\n    this.hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/first.ts\n **/","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/EmptyError.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {groupBy, GroupBySignature} from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: GroupBySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/groupBy.ts\n **/","import {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subject} from '../Subject';\nimport {Map} from '../util/Map';\nimport {FastMap} from '../util/FastMap';\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: (value: T) => R,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n}\n\n/* tslint:disable:max-line-length */\nexport interface GroupBySignature<T> {\n  <K>(keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\n  <K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\n  <K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\n}\n/* tslint:enable:max-line-length */\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  isUnsubscribed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(public source: Observable<T>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source._subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      groups.set(key, group = new Subject<R>());\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.isUnsubscribed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.isUnsubscribed && !this.attemptedToUnsubscribe) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.isUnsubscribed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.isUnsubscribed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.isUnsubscribed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.isUnsubscribed && !this.isUnsubscribed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/groupBy.ts\n **/","import {root} from './root';\nimport {MapPolyfill} from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/Map.ts\n **/","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/MapPolyfill.ts\n **/","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/FastMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {ignoreElements, IgnoreElementsSignature} from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: IgnoreElementsSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/ignoreElements.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {noop} from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nexport interface IgnoreElementsSignature<T> {\n  (): Observable<T>;\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/ignoreElements.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {isEmpty, IsEmptySignature} from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: IsEmptySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/isEmpty.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty(): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nexport interface IsEmptySignature<T> {\n  (): Observable<boolean>;\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/isEmpty.ts\n **/","import {Observable} from '../../Observable';\nimport {audit, AuditSignature} from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: AuditSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/audit.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscription} from '../Subscription';\n\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nexport interface AuditSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T>;\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/audit.ts\n **/","import {Observable} from '../../Observable';\nimport {auditTime, AuditTimeSignature} from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: AuditTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/auditTime.ts\n **/","import {async} from '../scheduler/async';\nimport {Operator} from '../Operator';\nimport {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nexport interface AuditTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/auditTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {last, LastSignature} from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: LastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/last.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {EmptyError} from '../util/EmptyError';\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface LastSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/last.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {letProto, LetSignature} from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: LetSignature<T>;\n    letBind: LetSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/let.ts\n **/","import {Observable} from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n\nexport interface LetSignature<T> {\n  <R>(func: (selector: Observable<T>) => Observable<R>): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/let.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {every, EverySignature} from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: EverySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/every.ts\n **/","import {Operator} from '../Operator';\nimport {Observer} from '../Observer';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nexport interface EverySignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<boolean>;\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/every.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {map, MapSignature} from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: MapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/map.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport interface MapSignature<T> {\n  <R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R>;\n}\n\nclass MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/map.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mapTo, MapToSignature} from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: MapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mapTo.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nexport interface MapToSignature<T> {\n  <R>(value: R): Observable<R>;\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {materialize, MaterializeSignature} from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: MaterializeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/materialize.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nexport interface MaterializeSignature<T> {\n  (): Observable<Notification<T>>;\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source._subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/materialize.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {max, MaxSignature} from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: MaxSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/max.ts\n **/","import {Observable} from '../Observable';\nimport {ReduceOperator} from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the largest number.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest number.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => T): Observable<T> {\n  const max: typeof comparer = (typeof comparer === 'function')\n    ? comparer\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n\nexport interface MaxSignature<T> {\n  (comparer?: (x: T, y: T) => T): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/max.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T) => R, seed?: R): Observable<R> {\n  return this.lift(new ReduceOperator(accumulator, seed));\n}\n\nexport interface ReduceSignature<T> {\n  <R>(accumulator: (acc: R, value: T) => R, seed?: R): Observable<R>;\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n\n  constructor(private accumulator: (acc: R, value: T) => R, private seed?: R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n\n  acc: T | R;\n  hasSeed: boolean;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => R,\n              seed?: R) {\n    super(destination);\n    this.acc = seed;\n    this.accumulator = accumulator;\n    this.hasSeed = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/reduce.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {merge, MergeSignature} from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: MergeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/merge.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeAll, MergeAllSignature} from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: MergeAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeAll.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeMap, MergeMapSignature} from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: MergeMapSignature<T>;\n    mergeMap: MergeMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeMapTo, MergeMapToSignature} from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: MergeMapToSignature<T>;\n    mergeMapTo: MergeMapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeScan, MergeScanSignature} from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: MergeScanSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeScan.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(project: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\n\nexport interface MergeScanSignature<T> {\n  <R>(project: (acc: R, value: T) => Observable<R>, seed: R, concurrent?: number): Observable<R>;\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeScanSubscriber(\n      subscriber, this.project, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.project)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeScan.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {min, MinSignature} from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: MinSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/min.ts\n **/","import {Observable} from '../Observable';\nimport {ReduceOperator} from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => T): Observable<T> {\n  const min: typeof comparer = (typeof comparer === 'function')\n    ? comparer\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n\nexport interface MinSignature<T> {\n  (comparer?: (x: T, y: T) => T): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/min.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {multicast, MulticastSignature} from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: MulticastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/multicast.ts\n **/","import {Subject} from '../Subject';\nimport {Observable} from '../Observable';\nimport {MulticastObservable} from '../observable/MulticastObservable';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  return !selector ?\n    new ConnectableObservable(this, subjectFactory) :\n    new MulticastObservable(this, subjectFactory, selector);\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface MulticastSignature<T> {\n  (subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\n  (SubjectFactory: () => Subject<T>, selector?: selector<T>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/multicast.ts\n **/","import {Subject} from '../Subject';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\nexport class MulticastObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>,\n              private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { selector, source } = this;\n    const connectable = new ConnectableObservable(source, this.subjectFactory);\n    const subscription = selector(connectable).subscribe(subscriber);\n    subscription.add(connectable.connect());\n    return subscription;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/MulticastObservable.ts\n **/","import {Subject, SubjectSubscriber} from '../Subject';\nimport {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.isUnsubscribed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source._subscribe(refCounter);\n\n    if (!refCounter.isUnsubscribed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ConnectableObservable.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {observeOn, ObserveOnSignature} from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: ObserveOnSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/observeOn.ts\n **/","import {Observable} from '../../Observable';\r\nimport {onErrorResumeNext, OnErrorResumeNextSignature} from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: OnErrorResumeNextSignature<T>;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/onErrorResumeNext.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {pairwise, PairwiseSignature} from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: PairwiseSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/pairwise.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nexport interface PairwiseSignature<T> {\n  (): Observable<[T, T]>;\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source._subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/pairwise.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {partition, PartitionSignature} from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: PartitionSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/partition.ts\n **/","import {not} from '../util/not';\nimport {filter} from './filter';\nimport {Observable} from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n\nexport interface PartitionSignature<T> {\n  (predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>];\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/partition.ts\n **/","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/not.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {pluck, PluckSignature} from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: PluckSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/pluck.ts\n **/","import {Observable} from '../Observable';\nimport {map} from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<R>(...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('List of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nexport interface PluckSignature<T> {\n  <R>(...properties: string[]): Observable<R>;\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/pluck.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publish, PublishSignature} from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: PublishSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publish.ts\n **/","import {Subject} from '../Subject';\nimport {Observable} from '../Observable';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface PublishSignature<T> {\n  (): ConnectableObservable<T>;\n  (selector: selector<T>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publish.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publishBehavior, PublishBehaviorSignature} from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: PublishBehaviorSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishBehavior.ts\n **/","import {BehaviorSubject} from '../BehaviorSubject';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n\nexport interface PublishBehaviorSignature<T> {\n  (value: T): ConnectableObservable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publishBehavior.ts\n **/","import {Subject} from './Subject';\nimport {Subscriber} from './Subscriber';\nimport {Subscription, ISubscription} from './Subscription';\nimport {throwError} from './util/throwError';\nimport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throwError(this.thrownError);\n    } else if (this.isUnsubscribed) {\n      throwError(new ObjectUnsubscribedError());\n    } else {\n      return this._value;\n    }\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription> subscription).isUnsubscribed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/BehaviorSubject.ts\n **/","export function throwError(e: any) { throw e; }\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/throwError.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publishReplay, PublishReplaySignature} from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: PublishReplaySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishReplay.ts\n **/","import {ReplaySubject} from '../ReplaySubject';\nimport {Scheduler} from '../Scheduler';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: Scheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n\nexport interface PublishReplaySignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): ConnectableObservable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publishReplay.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publishLast, PublishLastSignature} from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: PublishLastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishLast.ts\n **/","import {AsyncSubject} from '../AsyncSubject';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n\nexport interface PublishLastSignature<T> {\n  (): ConnectableObservable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publishLast.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {race, RaceSignature} from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: RaceSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/race.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {reduce, ReduceSignature} from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: ReduceSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/reduce.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {repeat, RepeatSignature} from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: RepeatSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/repeat.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {EmptyObservable} from '../observable/EmptyObservable';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular Scheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nexport interface RepeatSignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.isUnsubscribed = false;\n      source.subscribe(this);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/repeat.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {retry, RetrySignature} from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: RetrySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/retry.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nexport interface RetrySignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.isUnsubscribed = false;\n      source.subscribe(this);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/retry.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {retryWhen, RetryWhenSignature} from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: RetryWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/retryWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\nimport {Subscription} from '../Subscription';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nexport interface RetryWhenSignature<T> {\n  (notifier: (errors: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.isUnsubscribed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.isUnsubscribed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/retryWhen.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {sample, SampleSignature} from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: SampleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/sample.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nexport interface SampleSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<any>, notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/sample.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {sampleTime, SampleTimeSignature} from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: SampleTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/sampleTime.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {async} from '../scheduler/async';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nexport interface SampleTimeSignature<T> {\n  (period: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  (<any>this).schedule(state, period);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/sampleTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {scan, ScanSignature} from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: ScanSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/scan.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  return this.lift(new ScanOperator(accumulator, seed));\n}\n\nexport interface ScanSignature<T> {\n  <R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R>;\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private accumulatorSet: boolean = false;\n  private _seed: T | R;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.accumulatorSet = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, seed?: T|R) {\n    super(destination);\n    this.seed = seed;\n    this.accumulatorSet = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T): void {\n    if (!this.accumulatorSet) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/scan.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {share, ShareSignature} from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: ShareSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/share.ts\n **/","import {Observable} from '../Observable';\nimport {multicast} from './multicast';\nimport {Subject} from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n\nexport interface ShareSignature<T> {\n  (): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/share.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {single, SingleSignature} from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: SingleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/single.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observer} from '../Observer';\nimport {EmptyError} from '../util/EmptyError';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nexport interface SingleSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/single.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {skip, SkipSignature} from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: SkipSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/skip.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nexport interface SkipSignature<T> {\n  (total: number): Observable<T>;\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/skip.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {skipUntil, SkipUntilSignature} from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: SkipUntilSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipUntil.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nexport interface SkipUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/skipUntil.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {skipWhile, SkipWhileSignature} from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: SkipWhileSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipWhile.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nexport interface SkipWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/skipWhile.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {startWith, StartWithSignature} from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: StartWithSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/startWith.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {ScalarObservable} from '../observable/ScalarObservable';\nimport {EmptyObservable} from '../observable/EmptyObservable';\nimport {concatStatic} from './concat';\nimport {isScheduler} from '../util/isScheduler';\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | Scheduler>): Observable<T> {\n  let scheduler = <Scheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n\nexport interface StartWithSignature<T> {\n  (v1: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: Scheduler): Observable<T>;\n  (...array: Array<T | Scheduler>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/startWith.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {subscribeOn, SubscribeOnSignature} from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: SubscribeOnSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/subscribeOn.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {SubscribeOnObservable} from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the Scheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return new SubscribeOnObservable<T>(this, delay, scheduler);\n}\n\nexport interface SubscribeOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/subscribeOn.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\nimport {asap} from '../scheduler/asap';\nimport {isNumeric} from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: Scheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return source.subscribe(subscriber);\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: Scheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/SubscribeOnObservable.ts\n **/","import {AsapScheduler} from './AsapScheduler';\n\nexport const asap = new AsapScheduler();\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/asap.ts\n **/","import {Action} from './Action';\nimport {AsapAction} from './AsapAction';\nimport {Subscription} from '../Subscription';\nimport {QueueScheduler} from './QueueScheduler';\n\nexport class AsapScheduler extends QueueScheduler {\n  scheduleNow<T>(work: (x?: T) => Subscription, state?: T): Action<T> {\n    return new AsapAction(this, work).schedule(state);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapScheduler.ts\n **/","import {Action} from './Action';\nimport {Immediate} from '../util/Immediate';\nimport {FutureAction} from './FutureAction';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends FutureAction<T> {\n\n  protected _schedule(state?: T, delay: number = 0): Action<T> {\n    if (delay > 0) {\n      return super._schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    const {scheduler} = this;\n    scheduler.actions.push(this);\n    if (!scheduler.scheduledId) {\n      scheduler.scheduledId = Immediate.setImmediate(() => {\n        scheduler.scheduledId = null;\n        scheduler.flush();\n      });\n    }\n    return this;\n  }\n\n  protected _unsubscribe(): void {\n\n    const {scheduler} = this;\n    const {scheduledId, actions} = scheduler;\n\n    super._unsubscribe();\n\n    if (actions.length === 0) {\n      scheduler.active = false;\n      if (scheduledId != null) {\n        scheduler.scheduledId = null;\n        Immediate.clearImmediate(scheduledId);\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapAction.ts\n **/","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport { root } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/Immediate.ts\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/timers-browserify/main.js\n ** module id = 287\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 288\n ** module chunks = 0\n **/","\nimport {Observable} from '../../Observable';\nimport {_switch, SwitchSignature} from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: SwitchSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/switch.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(): T {\n  return this.lift(new SwitchOperator());\n}\n\nexport interface SwitchSignature<T> {\n  (): T;\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/switch.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {switchMap, SwitchMapSignature} from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: SwitchMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMap.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nexport interface SwitchMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.isUnsubscribed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/switchMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {switchMapTo, SwitchMapToSignature} from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: SwitchMapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMapTo.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nexport interface SwitchMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.isUnsubscribed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/switchMapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {take, TakeSignature} from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: TakeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/take.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {ArgumentOutOfRangeError} from '../util/ArgumentOutOfRangeError';\nimport {EmptyObservable} from '../observable/EmptyObservable';\nimport {Observable} from '../Observable';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nexport interface TakeSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    if (++this.count <= total) {\n      this.destination.next(value);\n      if (this.count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/take.ts\n **/","import {Observable} from '../../Observable';\nimport {takeLast, TakeLastSignature} from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: TakeLastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeLast.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {ArgumentOutOfRangeError} from '../util/ArgumentOutOfRangeError';\nimport {EmptyObservable} from '../observable/EmptyObservable';\nimport {Observable} from '../Observable';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nexport interface TakeLastSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/takeLast.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {takeUntil, TakeUntilSignature} from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: TakeUntilSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeUntil.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nexport interface TakeUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/takeUntil.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {takeWhile, TakeWhileSignature} from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: TakeWhileSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeWhile.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nexport interface TakeWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/takeWhile.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {throttle, ThrottleSignature} from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: ThrottleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttle.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nexport interface ThrottleSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/throttle.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {throttleTime, ThrottleTimeSignature} from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: ThrottleTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttleTime.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {Subscription} from '../Subscription';\nimport {async} from '../scheduler/async';\nimport {Observable} from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nexport interface ThrottleTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/throttleTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {timeInterval, TimeIntervalSignature} from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: TimeIntervalSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeInterval.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {async} from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(scheduler: Scheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport interface TimeIntervalSignature<T> {\n  (scheduler?: Scheduler): Observable<TimeInterval<T>>;\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: Scheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: Scheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timeInterval.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {timeout, TimeoutSignature} from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: TimeoutSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeout.ts\n **/","import {async} from '../scheduler/async';\nimport {isDate} from '../util/isDate';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\n\n/**\n * @param due\n * @param errorToSend\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           errorToSend: any = null,\n                           scheduler: Scheduler = async): Observable<T> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n}\n\nexport interface TimeoutSignature<T> {\n  (due: number | Date, errorToSend?: any, scheduler?: Scheduler): Observable<T>;\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout() {\n    this.error(this.errorToSend || new Error('timeout'));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timeout.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {timeoutWith, TimeoutWithSignature} from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: TimeoutWithSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeoutWith.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {async} from '../scheduler/async';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\nimport {isDate} from '../util/isDate';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: Observable<R>,\n                                  scheduler: Scheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nexport interface TimeoutWithSignature<T> {\n  (due: number | Date, withObservable: Observable<T>, scheduler?: Scheduler): Observable<T>;\n  <R>(due: number | Date, withObservable: Observable<R>, scheduler?: Scheduler): Observable<T | R>;\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: Observable<any>,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: Observable<any>,\n              private scheduler: Scheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.isUnsubscribed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timeoutWith.ts\n **/","import {Observable} from '../../Observable';\r\nimport {timestamp, TimestampSignature} from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: TimestampSignature<T>;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timestamp.ts\n **/","import {Operator} from '../Operator';\r\nimport {Observable} from '../Observable';\r\nimport {Subscriber} from '../Subscriber';\r\nimport {Scheduler} from '../Scheduler';\r\nimport {async} from '../scheduler/async';\r\n\r\n/**\r\n * @param scheduler\r\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\r\n * @method timestamp\r\n * @owner Observable\r\n */\r\nexport function timestamp<T>(scheduler: Scheduler = async): Observable<Timestamp<T>> {\r\n  return this.lift(new TimestampOperator(scheduler));\r\n}\r\n\r\nexport interface TimestampSignature<T> {\r\n  (scheduler?: Scheduler): Observable<Timestamp<T>>;\r\n}\r\n\r\nexport class Timestamp<T> {\r\n  constructor(public value: T, public timestamp: number) {\r\n  }\r\n};\r\n\r\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\r\n  constructor(private scheduler: Scheduler) {\r\n  }\r\n\r\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\r\n    return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\r\n  }\r\n}\r\n\r\nclass TimestampSubscriber<T> extends Subscriber<T> {\r\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: Scheduler) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const now = this.scheduler.now();\r\n\r\n    this.destination.next(new Timestamp(value, now));\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timestamp.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {toArray, ToArraySignature} from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: ToArraySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/toArray.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nexport interface ToArraySignature<T> {\n  (): Observable<T[]>;\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/toArray.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {toPromise, ToPromiseSignature} from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: ToPromiseSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/toPromise.ts\n **/","import {root} from '../util/root';\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n\nexport interface ToPromiseSignature<T> {\n  (): Promise<T>;\n  (PromiseCtor: typeof Promise): Promise<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/toPromise.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {window, WindowSignature} from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: WindowSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/window.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nexport interface WindowSignature<T> {\n  (windowBoundaries: Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source._subscribe(windowSubscriber);\n    if (!sourceSubscription.isUnsubscribed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/window.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowCount, WindowCountSignature} from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: WindowCountSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowCount.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nexport interface WindowCountSignature<T> {\n  (windowSize: number, startWindowEvery?: number): Observable<Observable<T>>;\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.isUnsubscribed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.isUnsubscribed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.isUnsubscribed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.isUnsubscribed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.isUnsubscribed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowCount.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowTime, WindowTimeSignature} from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: WindowTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowTime.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {Action} from '../scheduler/Action';\nimport {async} from '../scheduler/async';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: Scheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nexport interface WindowTimeSignature<T> {\n  (windowTimeSpan: number, windowCreationInterval?: number, scheduler?: Scheduler): Observable<Observable<T>>;\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: Scheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      let window = this.openWindow();\n      const closeState = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      let window = this.openWindow();\n      const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T) {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.isUnsubscribed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.isUnsubscribed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  closeWindow(window: Subject<T>) {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\ninterface TimeSpanOnlyState<T> {\n  window: Subject<any>;\n  windowTimeSpan: number;\n  subscriber: WindowTimeSubscriber<T>;\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(state: TimeSpanOnlyState<T>) {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    window.complete();\n  }\n  state.window = subscriber.openWindow();\n  (<any>this).schedule(state, windowTimeSpan);\n}\n\ninterface Context<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface DispatchArg<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: Context<T>;\n}\n\nfunction dispatchWindowCreation<T>(state: CreationState<T>) {\n  let { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  let window = subscriber.openWindow();\n  let action = <Action<CreationState<T>>>this;\n  let context: Context<T> = { action, subscription: <any>null };\n  const timeSpanState: DispatchArg<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, window, context } = arg;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowToggle, WindowToggleSignature} from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: WindowToggleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowToggle.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\nimport {Subscription} from '../Subscription';\n\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface WindowToggleSignature<T> {\n  <O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.isUnsubscribed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowToggle.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowWhen, WindowWhenSignature} from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: WindowWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\nimport {Subscription} from '../Subscription';\n\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nexport interface WindowWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowWhen.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {withLatestFrom, WithLatestFromSignature} from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: WithLatestFromSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/withLatestFrom.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, ObservableInput} from '../Observable';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface WithLatestFromSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<any>[]): Observable<R>;\n  <R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/withLatestFrom.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {zipProto, ZipSignature} from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: ZipSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/zip.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {zipAll, ZipAllSignature} from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: ZipAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/zipAll.ts\n **/","import {ZipOperator} from './zip';\nimport {Observable} from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n\nexport interface ZipAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/zipAll.ts\n **/","import {Subscriber} from './Subscriber';\n\nexport class Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new Subscriber<T>(subscriber));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Operator.ts\n **/","import {Observable} from '../Observable';\nimport {VirtualTimeScheduler} from '../scheduler/VirtualTimeScheduler';\nimport {Notification} from '../Notification';\nimport {Subject} from '../Subject';\nimport {ColdObservable} from './ColdObservable';\nimport {HotObservable} from './HotObservable';\nimport {TestMessage} from './TestMessage';\nimport {SubscriptionLog} from './SubscriptionLog';\nimport {Subscription} from '../Subscription';\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super();\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('Marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('Cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('Cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('Hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('Found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('Found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('There can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('Conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/TestScheduler.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Subscription} from '../Subscription';\nimport {Action} from './Action';\n\nexport class VirtualTimeScheduler implements Scheduler {\n  actions: Action<any>[] = []; // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n  active: boolean = false;\n  scheduledId: number = null;\n  index: number = 0;\n  sorted: boolean = false;\n  frame: number = 0;\n  maxFrames: number = 750;\n\n  protected static frameTimeFactor: number = 10;\n\n  now() {\n    return this.frame;\n  }\n\n  flush() {\n    const actions = this.actions;\n    const maxFrames = this.maxFrames;\n    while (actions.length > 0) {\n      let action = actions.shift();\n      this.frame = action.delay;\n      if (this.frame <= maxFrames) {\n        action.execute();\n        if (action.error) {\n          actions.length = 0;\n          this.frame = 0;\n          throw action.error;\n        }\n      } else {\n        break;\n      }\n    }\n    actions.length = 0;\n    this.frame = 0;\n  }\n\n  addAction<T>(action: Action<T>): void {\n    const actions: Action<T>[] = this.actions;\n\n    actions.push(action);\n\n    actions.sort((a: VirtualAction<T>, b: VirtualAction<T>) => {\n      if (a.delay === b.delay) {\n        if (a.index === b.index) {\n          return 0;\n        } else if (a.index > b.index) {\n          return 1;\n        } else {\n          return -1;\n        }\n      } else if (a.delay > b.delay) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n  }\n\n  schedule<T>(work: (x?: T) => Subscription | void, delay: number = 0, state?: T): Subscription {\n    this.sorted = false;\n    return new VirtualAction(this, work, this.index++).schedule(state, delay);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass VirtualAction<T> extends Subscription implements Action<T> {\n  state: T;\n  delay: number;\n  calls = 0;\n  error: any;\n\n  constructor(public scheduler: VirtualTimeScheduler,\n              public work: (x?: T) => Subscription | void,\n              public index: number) {\n    super();\n  }\n\n  schedule(state?: T, delay: number = 0): VirtualAction<T> {\n    if (this.isUnsubscribed) {\n      return this;\n    }\n    const scheduler = this.scheduler;\n    let action: Action<T> = null;\n    if (this.calls++ === 0) {\n      // the action is not being rescheduled.\n      action = this;\n    } else {\n      // the action is being rescheduled, and we can't mutate the one in the actions list\n      // in the scheduler, so we'll create a new one.\n      action = new VirtualAction(scheduler, this.work, scheduler.index += 1);\n      this.add(action);\n    }\n    action.state = state;\n    action.delay = scheduler.frame + delay;\n    scheduler.addAction(action);\n    return this;\n  }\n\n  execute() {\n    if (this.isUnsubscribed) {\n      throw new Error('How did did we execute a canceled Action?');\n    }\n    this.work(this.state);\n  }\n\n  unsubscribe() {\n    const actions = this.scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work = void 0;\n    this.state = void 0;\n    this.scheduler = void 0;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    super.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/VirtualTimeScheduler.ts\n **/","import {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {TestMessage} from './TestMessage';\nimport {SubscriptionLog} from './SubscriptionLog';\nimport {SubscriptionLoggable} from './SubscriptionLoggable';\nimport {applyMixins} from '../util/applyMixins';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/ColdObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {SubscriptionLog} from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLoggable.ts\n **/","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLog.ts\n **/","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/applyMixins.ts\n **/","import {Subject} from '../Subject';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {TestMessage} from './TestMessage';\nimport {SubscriptionLog} from './SubscriptionLog';\nimport {SubscriptionLoggable} from './SubscriptionLoggable';\nimport {applyMixins} from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/HotObservable.ts\n **/","import {AnimationFrameScheduler} from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/animationFrame.ts\n **/","import {Action} from './Action';\nimport {Subscription} from '../Subscription';\nimport {QueueScheduler} from './QueueScheduler';\nimport {AnimationFrameAction} from './AnimationFrameAction';\n\nexport class AnimationFrameScheduler extends QueueScheduler {\n  scheduleNow<T>(work: (x?: T) => Subscription, state?: T): Action<T> {\n    return new AnimationFrameAction(this, work).schedule(state);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameScheduler.ts\n **/","import {Action} from './Action';\nimport {FutureAction} from './FutureAction';\nimport {AnimationFrame} from '../util/AnimationFrame';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends FutureAction<T> {\n\n  protected _schedule(state?: T, delay: number = 0): Action<T> {\n    if (delay > 0) {\n      return super._schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    const {scheduler} = this;\n    scheduler.actions.push(this);\n    if (!scheduler.scheduledId) {\n      scheduler.scheduledId = AnimationFrame.requestAnimationFrame(() => {\n        scheduler.scheduledId = null;\n        scheduler.flush();\n      });\n    }\n    return this;\n  }\n\n  protected _unsubscribe(): void {\n\n    const {scheduler} = this;\n    const {scheduledId, actions} = scheduler;\n\n    super._unsubscribe();\n\n    if (actions.length === 0) {\n      scheduler.active = false;\n      if (scheduledId != null) {\n        scheduler.scheduledId = null;\n        AnimationFrame.cancelAnimationFrame(scheduledId);\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameAction.ts\n **/","import { root } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/AnimationFrame.ts\n **/","import { Observable, Subscriber, AjaxResponse } from '@reactivex/rxjs';\nimport { BotConversation, BotMessage, BotMessageGroup } from './directLineTypes'; \n\nconst domain = \"https://ic-webchat-scratch.azurewebsites.net\";\nconst baseUrl = `${domain}/api/conversations`;\nconst app_secret = \"acWN4N4CRLc.cwA.NhI.0Tyg-Wl1eJ9SbIaiVuiV233GVCJEkK4xAKZDwv4ebZw\";\n\nexport const startConversation = () =>\n    Observable\n        .ajax<AjaxResponse>({\n            method: \"POST\",\n            url: `${baseUrl}`,\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Authorization\": `BotConnector ${app_secret}` \n            }\n        })\n        .do(ajaxResponse => console.log(\"conversation ajaxResponse\", ajaxResponse))\n        .map(ajaxResponse => ajaxResponse.response as BotConversation);\n\nexport const postMessage = (message:BotMessage, conversation:BotConversation) =>\n    Observable\n        .ajax<AjaxResponse>({\n            method: \"POST\",\n            url: `${baseUrl}/${conversation.conversationId}/messages`,\n            body: message,\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `BotConnector ${conversation.token}`\n            }\n        })\n        .do(ajaxResponse => console.log(\"post message ajaxResponse\", ajaxResponse))\n        .map(ajaxResponse => true);\n\nexport const getMessages = (conversation:BotConversation) =>\n    new Observable<Observable<BotMessage>>((subscriber:Subscriber<Observable<BotMessage>>) =>\n        messageGroupGenerator(conversation, subscriber)\n    )\n    .concatAll();\n\nconst messageGroupGenerator = (conversation:BotConversation, subscriber:Subscriber<Observable<BotMessage>>, watermark?:string) => {\n    getMessageGroup(conversation, watermark).subscribe(\n        messageGroup => {\n            const someMessages = messageGroup && messageGroup.messages && messageGroup.messages.length > 0;\n            if (someMessages)\n                subscriber.next(Observable.from(messageGroup.messages));\n\n            setTimeout(\n                () => messageGroupGenerator(conversation, subscriber, messageGroup && messageGroup.watermark),\n                someMessages && messageGroup.watermark ? 0 : 3000\n            );\n        },\n        result => subscriber.error(result)\n    );\n}\n\nconst getMessageGroup = (conversation:BotConversation, watermark?:string) =>\n    Observable\n        .ajax<AjaxResponse>({\n            method: \"GET\",\n            url: `${baseUrl}/${conversation.conversationId}/messages?watermark=${watermark}`,\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Authorization\": `BotConnector ${conversation.token}`\n            }\n        })\n        .do(ajaxResponse => console.log(\"get messages ajaxResponse\", ajaxResponse))\n        .map(ajaxResponse => ajaxResponse.response as BotMessageGroup);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directLine.ts\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Message } from './App.tsx';\nimport { HistoryMessage } from './HistoryMessage.tsx';\n\nexport const History = (props: {\n    messages: Message[]\n}) => \n     <div id=\"historyFrame\">\n        { props.messages.map((message, index) => <HistoryMessage key={ index.toString() } message={ message }/>) }\n    </div>;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/History.tsx\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Message } from './App.tsx';\n\nexport const HistoryMessage = (props:{\n    message:Message\n}) =>\n    <p>{ props.message.from + \": \" + props.message.text }</p>;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/HistoryMessage.tsx\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nexport const Outgoing = (props: {\n    outgoingMessage: string,\n    updateMessage: (string) => void,\n    sendMessage: () => void,\n    enableSend: boolean\n}) =>\n    <div id=\"outgoingFrame\">\n        <textarea id=\"outgoing\" value={ props.outgoingMessage } onChange={ e => props.updateMessage(e.target.value) } disabled={ !props.enableSend } />\n        <button id=\"send\" onClick={ props.sendMessage } disabled={ !props.outgoingMessage || props.outgoingMessage.length == 0 || !props.enableSend } >send</button>\n    </div>;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Outgoing.tsx\n **/"],"sourceRoot":""}