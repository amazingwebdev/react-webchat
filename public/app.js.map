{"version":3,"sources":["webpack:///public/app.js","webpack:///webpack/bootstrap 6a4c924cf6d4e39892fe","webpack:///./src/App.tsx","webpack:///external \"React\"","webpack:///external \"ReactDOM\"","webpack:///./~/@reactivex/rxjs/index.js","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Rx.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Subject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Observable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/root.ts","webpack:///(webpack)/buildin/module.js","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/toSubscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Subscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isFunction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Subscription.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isArray.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isObject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/tryCatch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/errorObject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/UnsubscriptionError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Observer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/symbol/rxSubscriber.ts","webpack:///./~/@reactivex/rxjs/~/symbol-observable/index.js","webpack:///./~/@reactivex/rxjs/~/symbol-observable/lib/index.js","webpack:///./~/@reactivex/rxjs/~/symbol-observable/lib/ponyfill.js","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/ObjectUnsubscribedError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/SubjectSubscription.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/bindCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/BoundCallbackObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/AsyncSubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindNodeCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/bindNodeCallback.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/BoundNodeCallbackObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ScalarObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/EmptyObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/OuterSubscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/subscribeToResult.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/symbol/iterator.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/InnerSubscriber.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/defer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/defer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/DeferObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/empty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/empty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/forkJoin.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/forkJoin.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ForkJoinObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/from.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/from.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/FromObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/PromiseObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/IteratorObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayLikeObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/observeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Notification.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEvent.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/fromEvent.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEventPattern.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/fromEventPattern.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventPatternObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/fromPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/generate.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/GenerateObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/if.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/if.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/IfObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/interval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/interval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/IntervalObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isNumeric.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/async.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsyncScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/FutureAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/race.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/race.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/never.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/never.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/NeverObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/noop.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/of.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/of.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/onErrorResumeNext.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/onErrorResumeNext.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/range.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/range.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/RangeObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/using.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/using.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/UsingObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/throw.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/throw.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ErrorObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/timer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/timer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/TimerObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/isDate.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/ajax.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/ajax.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/AjaxObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/webSocket.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/webSocket.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/dom/WebSocketSubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/ReplaySubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/queue.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/assign.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/buffer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/buffer.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/bufferWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/cache.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/cache.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/catch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/catch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/combineAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineLatest.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concatAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concatMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/concatMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/count.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/count.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/dematerialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/dematerialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/debounce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounceTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/debounceTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/defaultIfEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/defaultIfEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/delay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/delay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/delayWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/delayWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinct.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinct.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctKey.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinctKey.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilKeyChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilKeyChanged.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/do.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/do.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaust.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/exhaust.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaustMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/exhaustMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/expand.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/expand.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/elementAt.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/elementAt.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/ArgumentOutOfRangeError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/filter.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/filter.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/finally.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/finally.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/find.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/find.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/findIndex.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/findIndex.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/first.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/first.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/EmptyError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/groupBy.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/groupBy.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/Map.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/MapPolyfill.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/FastMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/ignoreElements.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/ignoreElements.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/isEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/isEmpty.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/audit.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/audit.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/auditTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/auditTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/last.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/last.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/let.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/let.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/every.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/every.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/map.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/map.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/materialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/materialize.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/max.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/max.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/reduce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/merge.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeScan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/mergeScan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/min.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/min.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/multicast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/multicast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/MulticastObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/ConnectableObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/observeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/onErrorResumeNext.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/pairwise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/pairwise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/partition.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/partition.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/not.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/pluck.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/pluck.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publish.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publish.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishBehavior.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publishBehavior.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/BehaviorSubject.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/throwError.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishReplay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publishReplay.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/publishLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/race.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/reduce.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/repeat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/repeat.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/retry.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/retry.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/retryWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/retryWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/sample.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/sample.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/sampleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/sampleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/scan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/scan.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/share.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/share.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/single.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/single.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/skip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/skip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/skipUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/skipWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/startWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/startWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/subscribeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/subscribeOn.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/observable/SubscribeOnObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/asap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/Immediate.ts","webpack:///(webpack)/~/node-libs-browser/~/timers-browserify/main.js","webpack:///(webpack)/~/node-libs-browser/~/process/browser.js","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/switch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/switch.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/switchMap.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/switchMapTo.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/take.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/take.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/takeLast.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/takeUntil.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/takeWhile.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/throttle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/throttleTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeInterval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timeInterval.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeout.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timeout.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeoutWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timeoutWith.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/timestamp.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/timestamp.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/toArray.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/toArray.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/toPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/toPromise.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/window.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/window.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowCount.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowTime.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowToggle.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/windowWhen.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/withLatestFrom.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/withLatestFrom.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/zip.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/add/operator/zipAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/operator/zipAll.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/Operator.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/TestScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/VirtualTimeScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/ColdObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLoggable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLog.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/applyMixins.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/testing/HotObservable.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/animationFrame.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameScheduler.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameAction.ts","webpack:///./~/@reactivex/rxjs/dist/cjs/src/util/AnimationFrame.ts","webpack:///./src/directLine.ts","webpack:///./src/History.tsx","webpack:///./src/HistoryMessage.tsx","webpack:///./src/Console.tsx"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__extends","this","d","b","__","constructor","hasOwnProperty","prototype","Object","create","__assign","assign","t","s","i","n","arguments","length","React","ReactDOM","rxjs_1","directLine_1","History_tsx_1","Console_tsx_1","outgoing$","Subject","console$","consoleStart","text","enableSend","incoming$","conversation","getMessages","filter","botmessage","from","message$","map","images","path","domain","merge","scan","messages","message","concat","state$","startWith","combineLatest","compose","console","state","log","conversation$","startConversation","getQueryParams","params","location","search","substring","split","forEach","pair","App","_super","_this","consoleActions","updateMessage","next","sendMessage","postMessage","retry","subscribe","error","sendFile","files","_loop_1","numFiles","file","postFile","window","URL","createObjectURL","queryParams","appSecret","flatMap","setState","render","createElement","Console","actions","History","Component","document","getElementById","Subject_1","Observable_1","Observable","Operator_1","Operator","Subscription_1","Subscription","Subscriber_1","Subscriber","AsyncSubject_1","AsyncSubject","ReplaySubject_1","ReplaySubject","BehaviorSubject_1","BehaviorSubject","MulticastObservable_1","MulticastObservable","ConnectableObservable_1","ConnectableObservable","Notification_1","Notification","EmptyError_1","EmptyError","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ObjectUnsubscribedError_1","ObjectUnsubscribedError","UnsubscriptionError_1","UnsubscriptionError","timeInterval_1","TimeInterval","timestamp_1","Timestamp","TestScheduler_1","TestScheduler","VirtualTimeScheduler_1","VirtualTimeScheduler","AjaxObservable_1","AjaxResponse","AjaxError","AjaxTimeoutError","asap_1","async_1","queue_1","animationFrame_1","rxSubscriber_1","iterator_1","symbol_observable_1","Scheduler","asap","queue","animationFrame","async","Symbol","rxSubscriber","$$rxSubscriber","observable","iterator","$$iterator","SubjectSubscription_1","SubjectSubscriber","destination","observers","isUnsubscribed","isStopped","hasError","thrownError","lift","operator","subject","AnonymousSubject","value","len","copy","slice","err","complete","unsubscribe","_subscribe","subscriber","EMPTY","push","SubjectSubscription","asObservable","source","root_1","toSubscriber_1","_isScalar","observerOrNext","sink","toSubscriber","add","syncErrorThrowable","syncErrorThrown","syncErrorValue","PromiseCtor","root","Rx","config","Promise","Error","resolve","reject","subscription","global","objectTypes","boolean","function","object","number","string","undefined","self","freeGlobal","nodeType","webpackPolyfill","deprecate","paths","children","nextOrObserver","isFunction_1","Observer_1","destinationOrNext","empty","SafeSubscriber","_next","_error","_complete","_parent","context","isFunction","bind","_context","__tryOrSetError","__tryOrUnsub","fn","parent","_unsubscribe","x","isArray_1","isObject_1","tryCatch_1","errorObject_1","errors","hasErrors","_a","_subscriptions","trial","tryCatch","errorObject","e","isArray","index","sub","isObject","teardown","remove","subscriptions","subscriptionIndex","indexOf","splice","Array","tryCatcher","tryCatchTarget","apply","toString","join","name","stack","_interopRequireDefault","obj","__esModule","default","defineProperty","_ponyfill","_ponyfill2","result","symbolObservablePonyfill","_Symbol","subscriberIndex","bindCallback_1","bindCallback","BoundCallbackObservable_1","BoundCallbackObservable","dispatchNext","arg","dispatchError","callbackFunc","selector","args","scheduler","func","_i","schedule","dispatch","handler","handlerFn","innerArgs","result_1","result_2","hasNext","hasCompleted","bindNodeCallback_1","bindNodeCallback","BoundNodeCallbackObservable_1","BoundNodeCallbackObservable","shift","combineLatest_1","observables","project","isScheduler_1","isScheduler","pop","ArrayObservable_1","ArrayObservable","CombineLatestOperator","ScalarObservable_1","EmptyObservable_1","array","of","ScalarObservable","EmptyObservable","count","done","unshift","OuterSubscriber_1","subscribeToResult_1","none","CombineLatestSubscriber","active","values","toRespond","subscribeToResult","notifyComplete","unused","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","oldVal","_tryProject","OuterSubscriber","notifyError","outerSubscriber","InnerSubscriber_1","InnerSubscriber","isPromise_1","isPromise","then","setTimeout","item","obs","TypeError","Set","Map","keys","getOwnPropertyNames","key","concat_1","concatStatic","mergeAll_1","MergeAllOperator","mergeAll","concurrent","Number","POSITIVE_INFINITY","observer","MergeAllSubscriber","buffer","defer_1","defer","DeferObservable_1","DeferObservable","observableFactory","DeferSubscriber","factory","tryDefer","_callFactory","empty_1","forkJoin_1","forkJoin","ForkJoinObservable_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","total","innerSubscription","_hasValue","from_1","FromObservable_1","FromObservable","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","isArrayLike","ish","mapFnOrScheduler","thisArg","lastScheduler","mapFn","PromiseObservable","IteratorObservable","ArrayLikeObservable","ObserveOnSubscriber","promise","getIterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","Math","floor","abs","maxSafeInteger","isFinite","valueAsNumber","str","idx","charAt","arr","pow","arrayLike","observeOn","delay","ObserveOnOperator","notification","observe","scheduleMessage","ObserveOnMessage","createNext","createError","createComplete","kind","exception","hasValue","accept","toObservable","undefinedValueNotification","completeNotification","fromEvent_1","fromEvent","FromEventObservable_1","FromEventObservable","isNodeStyleEventEmmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","eventName","target","setupSubscription","source_1","source_2","source_3","fromEventPattern_1","fromEventPattern","FromEventPatternObservable_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","_callAddHandler","errorSubscriber","fromPromise_1","fromPromise","GenerateObservable_1","generate","GenerateObservable","selfSelector","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","if_1","_if","IfObservable_1","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","interval_1","interval","IntervalObservable_1","IntervalObservable","isNumeric_1","period","isNumeric","val","parseFloat","AsyncScheduler_1","AsyncScheduler","FutureAction_1","QueueScheduler_1","scheduleNow","work","FutureAction","QueueScheduler","pending","execute","_schedule","clearInterval","setInterval","flush","QueueAction_1","scheduledId","now","Date","action","scheduleLater","QueueAction","merge_1","mergeStatic","last","race_1","race","raceStatic","RaceOperator","RaceSubscriber","hasFirst","never_1","never","NeverObservable_1","NeverObservable","noop_1","noop","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","range_1","range","RangeObservable_1","RangeObservable","start","_count","using_1","using","UsingObservable_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","throw_1","_throw","ErrorObservable_1","ErrorObservable","timer_1","timer","TimerObservable_1","TimerObservable","isDate_1","dueTime","isDate","initialDelay","zip_1","zip","zipStatic","zipProto","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","ajax_1","ajax","AjaxObservable","getCORSRequest","XMLHttpRequest","xhr","withCredentials","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","defaultGetResultSelector","response","ajaxGet","url","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxGetJSON","finalResultSelector","res","responseType","urlOrRequest","request","createXHR","crossDomain","timeout","prop","AjaxSubscriber","get","post","put","getJSON","FormData","serializeBody","send","_b","user","password","open","setHeaders","setupEvents","contentType","splitIndex","encodeURI","JSON","stringify","setRequestHeader","progressSubscriber","ontimeout","xhrTimeout","upload","onprogress","xhrProgress","onerror","xhrError","onreadystatechange","xhrReadyStateChange","readyState","status_1","status","responseText","abort","originalEvent","parse","responseXML","webSocket_1","webSocket","WebSocketSubject_1","WebSocketSubject","assign_1","urlConfigOrSource","WebSocketCtor","WebSocket","_output","data","sock","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","socket","protocol","close","onopen","openObserver","closingObserver","code","reason","onclose","closeObserver","wasClean","onmessage","bufferSize","windowTime","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","time","max","output","buffer_1","closingNotifier","BufferOperator","BufferSubscriber","bufferCount_1","bufferCount","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","bufferTime_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","spliceIndex","bufferToggle_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferWhen_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","cache_1","cache","outerSub","refs","getSubject","catch_1","_catch","CatchOperator","caught","CatchSubscriber","_innerSub","combineAll_1","combineAll","concatAll_1","concatAll","concatMap_1","concatMap","mergeMap_1","MergeMapOperator","mergeMap","MergeMapSubscriber","_tryNext","_notifyResultSelector","concatMapTo_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","mergeMapTo","MergeMapToSubscriber","trySelectResult","count_1","predicate","CountOperator","CountSubscriber","_tryPredicate","dematerialize_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","debounce_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","durationSubscription","emitValue","duration","debounceTime_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","defaultIfEmpty_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","delay_1","absoluteDelay","delayFor","DelayOperator","DelaySubscriber","errored","scheduleNotification","DelayMessage","delayWhen_1","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","distinct_1","distinct","compare","flushes","DistinctOperator","DistinctSubscriber","found","y","distinctKey_1","distinctKey","distinctUntilChanged_1","distinctUntilChanged","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","Boolean","distinctUntilKeyChanged_1","distinctUntilKeyChanged","do_1","_do","DoOperator","DoSubscriber","safeSubscriber","exhaust_1","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaustMap_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","expand_1","expand","ExpandOperator","ExpandSubscriber","subscribeToProjection","elementAt_1","elementAt","ElementAtOperator","ElementAtSubscriber","filter_1","FilterOperator","FilterSubscriber","finally_1","_finally","callback","FinallyOperator","FinallySubscriber","find_1","find","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex_1","findIndex","first_1","first","FirstOperator","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","groupBy_1","groupBy","elementSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap","element","group","set","groupedObservable","GroupedObservable","GroupDurationSubscriber","clear","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","MapPolyfill_1","MapPolyfill","size","_values","_keys","cb","ignoreElements_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","isEmpty_1","IsEmptyOperator","IsEmptySubscriber","audit_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","auditTime_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","last_1","LastOperator","LastSubscriber","let_1","letProto","letBind","every_1","every","EveryOperator","EverySubscriber","everyValueMatch","map_1","MapOperator","MapSubscriber","mapTo_1","mapTo","MapToOperator","MapToSubscriber","materialize_1","materialize","MaterializeOperator","MaterializeSubscriber","max_1","comparer","reduce_1","ReduceOperator","reduce","accumulator","seed","ReduceSubscriber","acc","hasSeed","_tryReduce","flatMapTo","mergeScan_1","mergeScan","MergeScanOperator","MergeScanSubscriber","min_1","min","multicast_1","multicast","subjectOrSubjectFactory","subjectFactory","connectable","connect","_refCount","_subject","connection","_connection","ConnectableSubscriber","refCount","RefCountOperator","refCounter","RefCountSubscriber","sharedConnection","pairwise_1","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","partition_1","partition","not_1","not","pred","notPred","pluck_1","pluck","properties","plucker","props","mapper","currentProp","publish_1","publish","publishBehavior_1","publishBehavior","throwError_1","_value","getValue","throwError","enumerable","configurable","publishReplay_1","publishReplay","publishLast_1","publishLast","repeat_1","repeat","RepeatOperator","RepeatSubscriber","retry_1","RetryOperator","RetrySubscriber","retryWhen_1","retryWhen","notifier","RetryWhenOperator","RetryWhenSubscriber","retries","retriesSubscription","sample_1","sample","SampleOperator","SampleSubscriber","sampleTime_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","scan_1","ScanOperator","ScanSubscriber","accumulatorSet","_seed","share_1","share","shareSubjectFactory","single_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","skip_1","skip","SkipOperator","SkipSubscriber","skipUntil_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipWhile_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","startWith_1","subscribeOn_1","subscribeOn","SubscribeOnObservable_1","SubscribeOnObservable","delayTime","AsapScheduler_1","AsapScheduler","AsapAction_1","AsapAction","Immediate_1","Immediate","setImmediate","clearImmediate","ImmediateDefinition","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Timeout","clearFn","_id","_clearFn","immediateIds","nextImmediateId","clearTimeout","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","_onTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","cachedSetTimeout","run","cachedClearTimeout","Item","fun","title","browser","env","argv","version","versions","once","removeAllListeners","emit","binding","cwd","chdir","dir","umask","switch_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switchMap_1","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMapTo_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","take_1","take","TakeOperator","TakeSubscriber","takeLast_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeUntil_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeWhile_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","throttle_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttleTime_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","timeInterval","TimeIntervalOperator","TimeIntervalSubscriber","lastTime","span","timeout_1","due","errorToSend","absoluteTimeout","waitFor","TimeoutOperator","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeoutWith_1","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timestamp","TimestampOperator","TimestampSubscriber","toArray_1","toArray","ToArrayOperator","ToArraySubscriber","toPromise_1","toPromise","window_1","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","windowCount_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","windowTime_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","dispatchWindowTimeSpanOnly","dispatchWindowCreation","timeSpanState","dispatchWindowClose","closeWindow","WindowTimeSubscriber","window_2","window_3","window_4","windowToggle_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowWhen_1","windowWhen","unsubscribeClosingNotification","closingNotification","withLatestFrom_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","zipAll_1","zipAll","ColdObservable_1","HotObservable_1","SubscriptionLog_1","assertDeepEqual","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","ColdObservable","createHotObservable","HotObservable","materializeInnerObservable","outerFrame","frame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","unsubscribedFrame","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","setup","readyFlushTests","test","SubscriptionLog","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","sorted","maxFrames","addAction","sort","a","VirtualAction","calls","SubscriptionLoggable_1","applyMixins_1","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","applyMixins","SubscriptionLoggable","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","AnimationFrameScheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameAction","AnimationFrame_1","AnimationFrame","requestAnimationFrame","cancelAnimationFrame","RequestAnimationFrameDefinition","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","baseUrl","Accept","Authorization","ajaxResponse","conversationId","Content-Type","token","formData","append","messageGroupGenerator","watermark","getMessageGroup","messageGroup","someMessages","HistoryMessage_tsx_1","HistoryMessage","inside","src","type","multiple","onChange","disabled","onClick"],"mappings":"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","file":"./public/app.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar __assign = (this && this.__assign) || Object.assign || function(t) {\n\t    for (var s, i = 1, n = arguments.length; i < n; i++) {\n\t        s = arguments[i];\n\t        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n\t            t[p] = s[p];\n\t    }\n\t    return t;\n\t};\n\tvar React = __webpack_require__(2);\n\tvar ReactDOM = __webpack_require__(3);\n\tvar rxjs_1 = __webpack_require__(4);\n\tvar directLine_1 = __webpack_require__(346);\n\tvar History_tsx_1 = __webpack_require__(347);\n\tvar Console_tsx_1 = __webpack_require__(349);\n\tvar outgoing$ = new rxjs_1.Subject();\n\tvar console$ = new rxjs_1.Subject();\n\tvar consoleStart = { text: \"\", enableSend: true };\n\tvar incoming$ = function (conversation) {\n\t    return directLine_1.getMessages(conversation)\n\t        .filter(function (botmessage) { return botmessage.from === \"TestBotV3\"; });\n\t};\n\tvar message$ = function (conversation) {\n\t    return incoming$(conversation)\n\t        .map(function (botmessage) { return ({ text: botmessage.text, images: botmessage.images.map(function (path) { return directLine_1.domain + path; }), from: \"bot\" }); })\n\t        .merge(outgoing$)\n\t        .scan(function (messages, message) { return messages.concat([message]); }, []);\n\t};\n\tvar state$ = function (conversation) {\n\t    return message$(conversation).startWith([])\n\t        .combineLatest(console$.startWith(consoleStart), function (messages, compose) { return ({\n\t        conversation: conversation,\n\t        messages: messages,\n\t        console: compose\n\t    }); })\n\t        .do(function (state) { return console.log(\"state\", state); });\n\t};\n\tvar conversation$ = directLine_1.startConversation;\n\tvar getQueryParams = function () {\n\t    var params = {};\n\t    location.search.\n\t        substring(1).\n\t        split(\"&\").\n\t        forEach(function (pair) {\n\t        var p = pair.split(\"=\");\n\t        params[p[0]] = p[1];\n\t    });\n\t    return params;\n\t};\n\tvar App = (function (_super) {\n\t    __extends(App, _super);\n\t    function App() {\n\t        var _this = this;\n\t        _super.call(this);\n\t        this.consoleActions = {\n\t            updateMessage: function (text) {\n\t                console$.next({ text: text, enableSend: _this.state.console.enableSend });\n\t            },\n\t            sendMessage: function () {\n\t                console$.next({ text: _this.state.console.text, enableSend: false });\n\t                directLine_1.postMessage(_this.state.console.text, _this.state.conversation)\n\t                    .retry(2)\n\t                    .subscribe(function () {\n\t                    outgoing$.next({\n\t                        text: _this.state.console.text,\n\t                        from: \"me\"\n\t                    });\n\t                    console$.next({\n\t                        text: \"\",\n\t                        enableSend: true\n\t                    });\n\t                }, function (error) {\n\t                    console.log(\"failed to post message\");\n\t                    console$.next({ text: _this.state.console.text, enableSend: true });\n\t                });\n\t            },\n\t            sendFile: function (files) {\n\t                var _loop_1 = function(i, numFiles) {\n\t                    var file = files[i];\n\t                    directLine_1.postFile(file, _this.state.conversation)\n\t                        .retry(2)\n\t                        .subscribe(function () {\n\t                        outgoing$.next({\n\t                            images: [window.URL.createObjectURL(file)],\n\t                            from: \"me\"\n\t                        });\n\t                    }, function (error) {\n\t                        console.log(\"failed to post file\");\n\t                    });\n\t                };\n\t                for (var i = 0, numFiles = files.length; i < numFiles; i++) {\n\t                    _loop_1(i, numFiles);\n\t                }\n\t            }\n\t        };\n\t        this.state = {\n\t            conversation: null,\n\t            messages: [],\n\t            console: consoleStart\n\t        };\n\t        var queryParams = getQueryParams();\n\t        var appSecret = queryParams['s'];\n\t        conversation$(appSecret)\n\t            .flatMap(function (conversation) { return state$(conversation); })\n\t            .subscribe(function (state) { return _this.setState(state); }, function (error) { return console.log(\"errors\", error); });\n\t    }\n\t    App.prototype.render = function () {\n\t        return React.createElement(\"div\", {id: \"appFrame\"}, React.createElement(Console_tsx_1.Console, __assign({actions: this.consoleActions}, this.state.console)), React.createElement(History_tsx_1.History, {messages: this.state.messages}));\n\t    };\n\t    return App;\n\t}(React.Component));\n\tReactDOM.render(React.createElement(App, null), document.getElementById(\"app\"));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = React;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = ReactDOM;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(5);\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/* tslint:disable:no-unused-variable */\n\t// Subject imported before Observable to bypass circular dependency issue since\n\t// Subject extends Observable and Observable references Subject in it's\n\t// definition\n\tvar Subject_1 = __webpack_require__(6);\n\texports.Subject = Subject_1.Subject;\n\t/* tslint:enable:no-unused-variable */\n\tvar Observable_1 = __webpack_require__(7);\n\texports.Observable = Observable_1.Observable;\n\t// statics\n\t/* tslint:disable:no-use-before-declare */\n\t__webpack_require__(26);\n\t__webpack_require__(30);\n\t__webpack_require__(33);\n\t__webpack_require__(45);\n\t__webpack_require__(49);\n\t__webpack_require__(52);\n\t__webpack_require__(54);\n\t__webpack_require__(57);\n\t__webpack_require__(65);\n\t__webpack_require__(68);\n\t__webpack_require__(71);\n\t__webpack_require__(73);\n\t__webpack_require__(75);\n\t__webpack_require__(78);\n\t__webpack_require__(87);\n\t__webpack_require__(90);\n\t__webpack_require__(92);\n\t__webpack_require__(96);\n\t__webpack_require__(98);\n\t__webpack_require__(100);\n\t__webpack_require__(103);\n\t__webpack_require__(106);\n\t__webpack_require__(109);\n\t__webpack_require__(113);\n\t//dom\n\t__webpack_require__(116);\n\t__webpack_require__(119);\n\t//operators\n\t__webpack_require__(125);\n\t__webpack_require__(127);\n\t__webpack_require__(129);\n\t__webpack_require__(131);\n\t__webpack_require__(133);\n\t__webpack_require__(135);\n\t__webpack_require__(137);\n\t__webpack_require__(139);\n\t__webpack_require__(141);\n\t__webpack_require__(142);\n\t__webpack_require__(143);\n\t__webpack_require__(145);\n\t__webpack_require__(148);\n\t__webpack_require__(151);\n\t__webpack_require__(153);\n\t__webpack_require__(155);\n\t__webpack_require__(157);\n\t__webpack_require__(159);\n\t__webpack_require__(161);\n\t__webpack_require__(163);\n\t__webpack_require__(165);\n\t__webpack_require__(167);\n\t__webpack_require__(169);\n\t__webpack_require__(171);\n\t__webpack_require__(173);\n\t__webpack_require__(175);\n\t__webpack_require__(177);\n\t__webpack_require__(179);\n\t__webpack_require__(181);\n\t__webpack_require__(184);\n\t__webpack_require__(186);\n\t__webpack_require__(188);\n\t__webpack_require__(190);\n\t__webpack_require__(192);\n\t__webpack_require__(195);\n\t__webpack_require__(200);\n\t__webpack_require__(202);\n\t__webpack_require__(204);\n\t__webpack_require__(206);\n\t__webpack_require__(208);\n\t__webpack_require__(210);\n\t__webpack_require__(212);\n\t__webpack_require__(214);\n\t__webpack_require__(216);\n\t__webpack_require__(218);\n\t__webpack_require__(220);\n\t__webpack_require__(223);\n\t__webpack_require__(224);\n\t__webpack_require__(225);\n\t__webpack_require__(226);\n\t__webpack_require__(227);\n\t__webpack_require__(229);\n\t__webpack_require__(231);\n\t__webpack_require__(235);\n\t__webpack_require__(236);\n\t__webpack_require__(237);\n\t__webpack_require__(239);\n\t__webpack_require__(242);\n\t__webpack_require__(244);\n\t__webpack_require__(246);\n\t__webpack_require__(250);\n\t__webpack_require__(252);\n\t__webpack_require__(254);\n\t__webpack_require__(255);\n\t__webpack_require__(256);\n\t__webpack_require__(258);\n\t__webpack_require__(260);\n\t__webpack_require__(262);\n\t__webpack_require__(264);\n\t__webpack_require__(266);\n\t__webpack_require__(268);\n\t__webpack_require__(270);\n\t__webpack_require__(272);\n\t__webpack_require__(274);\n\t__webpack_require__(276);\n\t__webpack_require__(278);\n\t__webpack_require__(280);\n\t__webpack_require__(289);\n\t__webpack_require__(291);\n\t__webpack_require__(293);\n\t__webpack_require__(295);\n\t__webpack_require__(297);\n\t__webpack_require__(299);\n\t__webpack_require__(301);\n\t__webpack_require__(303);\n\t__webpack_require__(305);\n\t__webpack_require__(307);\n\t__webpack_require__(309);\n\t__webpack_require__(311);\n\t__webpack_require__(313);\n\t__webpack_require__(315);\n\t__webpack_require__(317);\n\t__webpack_require__(319);\n\t__webpack_require__(321);\n\t__webpack_require__(323);\n\t__webpack_require__(325);\n\t__webpack_require__(327);\n\t__webpack_require__(329);\n\t__webpack_require__(331);\n\t__webpack_require__(332);\n\t/* tslint:disable:no-unused-variable */\n\tvar Operator_1 = __webpack_require__(334);\n\texports.Operator = Operator_1.Operator;\n\tvar Subscription_1 = __webpack_require__(13);\n\texports.Subscription = Subscription_1.Subscription;\n\tvar Subscriber_1 = __webpack_require__(11);\n\texports.Subscriber = Subscriber_1.Subscriber;\n\tvar AsyncSubject_1 = __webpack_require__(29);\n\texports.AsyncSubject = AsyncSubject_1.AsyncSubject;\n\tvar ReplaySubject_1 = __webpack_require__(122);\n\texports.ReplaySubject = ReplaySubject_1.ReplaySubject;\n\tvar BehaviorSubject_1 = __webpack_require__(248);\n\texports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;\n\tvar MulticastObservable_1 = __webpack_require__(233);\n\texports.MulticastObservable = MulticastObservable_1.MulticastObservable;\n\tvar ConnectableObservable_1 = __webpack_require__(234);\n\texports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;\n\tvar Notification_1 = __webpack_require__(64);\n\texports.Notification = Notification_1.Notification;\n\tvar EmptyError_1 = __webpack_require__(194);\n\texports.EmptyError = EmptyError_1.EmptyError;\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(183);\n\texports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(24);\n\texports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;\n\tvar UnsubscriptionError_1 = __webpack_require__(18);\n\texports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;\n\tvar timeInterval_1 = __webpack_require__(308);\n\texports.TimeInterval = timeInterval_1.TimeInterval;\n\tvar timestamp_1 = __webpack_require__(314);\n\texports.Timestamp = timestamp_1.Timestamp;\n\tvar TestScheduler_1 = __webpack_require__(335);\n\texports.TestScheduler = TestScheduler_1.TestScheduler;\n\tvar VirtualTimeScheduler_1 = __webpack_require__(336);\n\texports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;\n\tvar AjaxObservable_1 = __webpack_require__(118);\n\texports.AjaxResponse = AjaxObservable_1.AjaxResponse;\n\texports.AjaxError = AjaxObservable_1.AjaxError;\n\texports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;\n\tvar asap_1 = __webpack_require__(283);\n\tvar async_1 = __webpack_require__(82);\n\tvar queue_1 = __webpack_require__(123);\n\tvar animationFrame_1 = __webpack_require__(342);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\tvar iterator_1 = __webpack_require__(43);\n\tvar symbol_observable_1 = __webpack_require__(21);\n\t/* tslint:enable:no-unused-variable */\n\t/**\n\t * @typedef {Object} Rx.Scheduler\n\t * @property {Scheduler} queue Schedules on a queue in the current event frame\n\t * (trampoline scheduler). Use this for iteration operations.\n\t * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n\t * fastest transport mechanism available, either Node.js' `process.nextTick()`\n\t * or Web Worker MessageChannel or setTimeout or others. Use this for\n\t * asynchronous conversions.\n\t * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n\t * time-based operations.\n\t */\n\tvar Scheduler = {\n\t    asap: asap_1.asap,\n\t    queue: queue_1.queue,\n\t    animationFrame: animationFrame_1.animationFrame,\n\t    async: async_1.async\n\t};\n\texports.Scheduler = Scheduler;\n\t/**\n\t * @typedef {Object} Rx.Symbol\n\t * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n\t * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n\t * an object that has all of the traits of an Rx Subscriber, including the\n\t * ability to add and remove subscriptions to the subscription chain and\n\t * guarantees involving event triggering (can't \"next\" after unsubscription,\n\t * etc).\n\t * @property {Symbol|string} observable A symbol to use as a property name to\n\t * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n\t * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n\t * to retrieve an iterator from an object.\n\t */\n\tvar Symbol = {\n\t    rxSubscriber: rxSubscriber_1.$$rxSubscriber,\n\t    observable: symbol_observable_1.default,\n\t    iterator: iterator_1.$$iterator\n\t};\n\texports.Symbol = Symbol;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(24);\n\tvar SubjectSubscription_1 = __webpack_require__(25);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\t/**\n\t * @class SubjectSubscriber<T>\n\t */\n\tvar SubjectSubscriber = (function (_super) {\n\t    __extends(SubjectSubscriber, _super);\n\t    function SubjectSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t    }\n\t    return SubjectSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.SubjectSubscriber = SubjectSubscriber;\n\t/**\n\t * @class Subject<T>\n\t */\n\tvar Subject = (function (_super) {\n\t    __extends(Subject, _super);\n\t    function Subject() {\n\t        _super.call(this);\n\t        this.observers = [];\n\t        this.isUnsubscribed = false;\n\t        this.isStopped = false;\n\t        this.hasError = false;\n\t        this.thrownError = null;\n\t    }\n\t    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {\n\t        return new SubjectSubscriber(this);\n\t    };\n\t    Subject.prototype.lift = function (operator) {\n\t        var subject = new AnonymousSubject(this, this);\n\t        subject.operator = operator;\n\t        return subject;\n\t    };\n\t    Subject.prototype.next = function (value) {\n\t        if (this.isUnsubscribed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        if (!this.isStopped) {\n\t            var observers = this.observers;\n\t            var len = observers.length;\n\t            var copy = observers.slice();\n\t            for (var i = 0; i < len; i++) {\n\t                copy[i].next(value);\n\t            }\n\t        }\n\t    };\n\t    Subject.prototype.error = function (err) {\n\t        if (this.isUnsubscribed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.hasError = true;\n\t        this.thrownError = err;\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].error(err);\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.complete = function () {\n\t        if (this.isUnsubscribed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].complete();\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.unsubscribe = function () {\n\t        this.isStopped = true;\n\t        this.isUnsubscribed = true;\n\t        this.observers = null;\n\t    };\n\t    Subject.prototype._subscribe = function (subscriber) {\n\t        if (this.isUnsubscribed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else if (this.hasError) {\n\t            subscriber.error(this.thrownError);\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else if (this.isStopped) {\n\t            subscriber.complete();\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else {\n\t            this.observers.push(subscriber);\n\t            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n\t        }\n\t    };\n\t    Subject.prototype.asObservable = function () {\n\t        var observable = new Observable_1.Observable();\n\t        observable.source = this;\n\t        return observable;\n\t    };\n\t    Subject.create = function (destination, source) {\n\t        return new AnonymousSubject(destination, source);\n\t    };\n\t    return Subject;\n\t}(Observable_1.Observable));\n\texports.Subject = Subject;\n\t/**\n\t * @class AnonymousSubject<T>\n\t */\n\tvar AnonymousSubject = (function (_super) {\n\t    __extends(AnonymousSubject, _super);\n\t    function AnonymousSubject(destination, source) {\n\t        _super.call(this);\n\t        this.destination = destination;\n\t        this.source = source;\n\t    }\n\t    AnonymousSubject.prototype.next = function (value) {\n\t        var destination = this.destination;\n\t        if (destination && destination.next) {\n\t            destination.next(value);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.error = function (err) {\n\t        var destination = this.destination;\n\t        if (destination && destination.error) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.complete = function () {\n\t        var destination = this.destination;\n\t        if (destination && destination.complete) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    AnonymousSubject.prototype._subscribe = function (subscriber) {\n\t        var source = this.source;\n\t        if (source) {\n\t            return this.source.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t    };\n\t    return AnonymousSubject;\n\t}(Subject));\n\texports.AnonymousSubject = AnonymousSubject;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar toSubscriber_1 = __webpack_require__(10);\n\tvar symbol_observable_1 = __webpack_require__(21);\n\t/**\n\t * A representation of any set of values over any amount of time. This the most basic building block\n\t * of RxJS.\n\t *\n\t * @class Observable<T>\n\t */\n\tvar Observable = (function () {\n\t    /**\n\t     * @constructor\n\t     * @param {Function} subscribe the function that is  called when the Observable is\n\t     * initially subscribed to. This function is given a Subscriber, to which new values\n\t     * can be `next`ed, or an `error` method can be called to raise an error, or\n\t     * `complete` can be called to notify of a successful completion.\n\t     */\n\t    function Observable(subscribe) {\n\t        this._isScalar = false;\n\t        if (subscribe) {\n\t            this._subscribe = subscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Creates a new Observable, with this Observable as the source, and the passed\n\t     * operator defined as the new observable's operator.\n\t     * @method lift\n\t     * @param {Operator} operator the operator defining the operation to take on the observable\n\t     * @return {Observable} a new observable with the Operator applied\n\t     */\n\t    Observable.prototype.lift = function (operator) {\n\t        var observable = new Observable();\n\t        observable.source = this;\n\t        observable.operator = operator;\n\t        return observable;\n\t    };\n\t    /**\n\t     * Registers handlers for handling emitted values, error and completions from the observable, and\n\t     *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n\t     * @method subscribe\n\t     * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n\t     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n\t     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n\t     *  the error will be thrown as unhandled\n\t     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n\t     * @return {ISubscription} a subscription reference to the registered handlers\n\t     */\n\t    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n\t        var operator = this.operator;\n\t        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n\t        if (operator) {\n\t            operator.call(sink, this);\n\t        }\n\t        else {\n\t            sink.add(this._subscribe(sink));\n\t        }\n\t        if (sink.syncErrorThrowable) {\n\t            sink.syncErrorThrowable = false;\n\t            if (sink.syncErrorThrown) {\n\t                throw sink.syncErrorValue;\n\t            }\n\t        }\n\t        return sink;\n\t    };\n\t    /**\n\t     * @method forEach\n\t     * @param {Function} next a handler for each value emitted by the observable\n\t     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n\t     * @return {Promise} a promise that either resolves on observable completion or\n\t     *  rejects with the handled error\n\t     */\n\t    Observable.prototype.forEach = function (next, PromiseCtor) {\n\t        var _this = this;\n\t        if (!PromiseCtor) {\n\t            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t                PromiseCtor = root_1.root.Rx.config.Promise;\n\t            }\n\t            else if (root_1.root.Promise) {\n\t                PromiseCtor = root_1.root.Promise;\n\t            }\n\t        }\n\t        if (!PromiseCtor) {\n\t            throw new Error('no Promise impl found');\n\t        }\n\t        return new PromiseCtor(function (resolve, reject) {\n\t            var subscription = _this.subscribe(function (value) {\n\t                if (subscription) {\n\t                    // if there is a subscription, then we can surmise\n\t                    // the next handling is asynchronous. Any errors thrown\n\t                    // need to be rejected explicitly and unsubscribe must be\n\t                    // called manually\n\t                    try {\n\t                        next(value);\n\t                    }\n\t                    catch (err) {\n\t                        reject(err);\n\t                        subscription.unsubscribe();\n\t                    }\n\t                }\n\t                else {\n\t                    // if there is NO subscription, then we're getting a nexted\n\t                    // value synchronously during subscription. We can just call it.\n\t                    // If it errors, Observable's `subscribe` imple will ensure the\n\t                    // unsubscription logic is called, then synchronously rethrow the error.\n\t                    // After that, Promise will trap the error and send it\n\t                    // down the rejection path.\n\t                    next(value);\n\t                }\n\t            }, reject, resolve);\n\t        });\n\t    };\n\t    Observable.prototype._subscribe = function (subscriber) {\n\t        return this.source.subscribe(subscriber);\n\t    };\n\t    /**\n\t     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n\t     * @method Symbol.observable\n\t     * @return {Observable} this instance of the observable\n\t     */\n\t    Observable.prototype[symbol_observable_1.default] = function () {\n\t        return this;\n\t    };\n\t    // HACK: Since TypeScript inherits static properties too, we have to\n\t    // fight against TypeScript here so Subject can have a different static create signature\n\t    /**\n\t     * Creates a new cold Observable by calling the Observable constructor\n\t     * @static true\n\t     * @owner Observable\n\t     * @method create\n\t     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n\t     * @return {Observable} a new cold observable\n\t     */\n\t    Observable.create = function (subscribe) {\n\t        return new Observable(subscribe);\n\t    };\n\t    return Observable;\n\t}());\n\texports.Observable = Observable;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module, global) {\"use strict\";\n\tvar objectTypes = {\n\t    'boolean': false,\n\t    'function': true,\n\t    'object': true,\n\t    'number': false,\n\t    'string': false,\n\t    'undefined': false\n\t};\n\texports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n\t/* tslint:disable:no-unused-variable */\n\tvar freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\tvar freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\tvar freeGlobal = objectTypes[typeof global] && global;\n\tif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n\t    exports.root = freeGlobal;\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)(module), (function() { return this; }())))\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\tfunction toSubscriber(nextOrObserver, error, complete) {\n\t    if (nextOrObserver) {\n\t        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n\t            return nextOrObserver;\n\t        }\n\t        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {\n\t            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();\n\t        }\n\t    }\n\t    if (!nextOrObserver && !error && !complete) {\n\t        return new Subscriber_1.Subscriber();\n\t    }\n\t    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n\t}\n\texports.toSubscriber = toSubscriber;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isFunction_1 = __webpack_require__(12);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar Observer_1 = __webpack_require__(19);\n\tvar rxSubscriber_1 = __webpack_require__(20);\n\t/**\n\t * Implements the {@link Observer} interface and extends the\n\t * {@link Subscription} class. While the {@link Observer} is the public API for\n\t * consuming the values of an {@link Observable}, all Observers get converted to\n\t * a Subscriber, in order to provide Subscription-like capabilities such as\n\t * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n\t * implementing operators, but it is rarely used as a public API.\n\t *\n\t * @class Subscriber<T>\n\t */\n\tvar Subscriber = (function (_super) {\n\t    __extends(Subscriber, _super);\n\t    /**\n\t     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n\t     * defined Observer or a `next` callback function.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     */\n\t    function Subscriber(destinationOrNext, error, complete) {\n\t        _super.call(this);\n\t        this.syncErrorValue = null;\n\t        this.syncErrorThrown = false;\n\t        this.syncErrorThrowable = false;\n\t        this.isStopped = false;\n\t        switch (arguments.length) {\n\t            case 0:\n\t                this.destination = Observer_1.empty;\n\t                break;\n\t            case 1:\n\t                if (!destinationOrNext) {\n\t                    this.destination = Observer_1.empty;\n\t                    break;\n\t                }\n\t                if (typeof destinationOrNext === 'object') {\n\t                    if (destinationOrNext instanceof Subscriber) {\n\t                        this.destination = destinationOrNext;\n\t                        this.destination.add(this);\n\t                    }\n\t                    else {\n\t                        this.syncErrorThrowable = true;\n\t                        this.destination = new SafeSubscriber(this, destinationOrNext);\n\t                    }\n\t                    break;\n\t                }\n\t            default:\n\t                this.syncErrorThrowable = true;\n\t                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n\t                break;\n\t        }\n\t    }\n\t    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };\n\t    /**\n\t     * A static factory for a Subscriber, given a (potentially partial) definition\n\t     * of an Observer.\n\t     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n\t     * Observer represented by the given arguments.\n\t     */\n\t    Subscriber.create = function (next, error, complete) {\n\t        var subscriber = new Subscriber(next, error, complete);\n\t        subscriber.syncErrorThrowable = false;\n\t        return subscriber;\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `next` from\n\t     * the Observable, with a value. The Observable may call this method 0 or more\n\t     * times.\n\t     * @param {T} [value] The `next` value.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.next = function (value) {\n\t        if (!this.isStopped) {\n\t            this._next(value);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `error` from\n\t     * the Observable, with an attached {@link Error}. Notifies the Observer that\n\t     * the Observable has experienced an error condition.\n\t     * @param {any} [err] The `error` exception.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._error(err);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive a valueless notification of type\n\t     * `complete` from the Observable. Notifies the Observer that the Observable\n\t     * has finished sending push-based notifications.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._complete();\n\t        }\n\t    };\n\t    Subscriber.prototype.unsubscribe = function () {\n\t        if (this.isUnsubscribed) {\n\t            return;\n\t        }\n\t        this.isStopped = true;\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    Subscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t    };\n\t    Subscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this.unsubscribe();\n\t    };\n\t    Subscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this.unsubscribe();\n\t    };\n\t    return Subscriber;\n\t}(Subscription_1.Subscription));\n\texports.Subscriber = Subscriber;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SafeSubscriber = (function (_super) {\n\t    __extends(SafeSubscriber, _super);\n\t    function SafeSubscriber(_parent, observerOrNext, error, complete) {\n\t        _super.call(this);\n\t        this._parent = _parent;\n\t        var next;\n\t        var context = this;\n\t        if (isFunction_1.isFunction(observerOrNext)) {\n\t            next = observerOrNext;\n\t        }\n\t        else if (observerOrNext) {\n\t            context = observerOrNext;\n\t            next = observerOrNext.next;\n\t            error = observerOrNext.error;\n\t            complete = observerOrNext.complete;\n\t            if (isFunction_1.isFunction(context.unsubscribe)) {\n\t                this.add(context.unsubscribe.bind(context));\n\t            }\n\t            context.unsubscribe = this.unsubscribe.bind(this);\n\t        }\n\t        this._context = context;\n\t        this._next = next;\n\t        this._error = error;\n\t        this._complete = complete;\n\t    }\n\t    SafeSubscriber.prototype.next = function (value) {\n\t        if (!this.isStopped && this._next) {\n\t            var _parent = this._parent;\n\t            if (!_parent.syncErrorThrowable) {\n\t                this.__tryOrUnsub(this._next, value);\n\t            }\n\t            else if (this.__tryOrSetError(_parent, this._next, value)) {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var _parent = this._parent;\n\t            if (this._error) {\n\t                if (!_parent.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parent, this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else if (!_parent.syncErrorThrowable) {\n\t                this.unsubscribe();\n\t                throw err;\n\t            }\n\t            else {\n\t                _parent.syncErrorValue = err;\n\t                _parent.syncErrorThrown = true;\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            var _parent = this._parent;\n\t            if (this._complete) {\n\t                if (!_parent.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(this._complete);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parent, this._complete);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            this.unsubscribe();\n\t            throw err;\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            parent.syncErrorValue = err;\n\t            parent.syncErrorThrown = true;\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    SafeSubscriber.prototype._unsubscribe = function () {\n\t        var _parent = this._parent;\n\t        this._context = null;\n\t        this._parent = null;\n\t        _parent.unsubscribe();\n\t    };\n\t    return SafeSubscriber;\n\t}(Subscriber));\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isFunction(x) {\n\t    return typeof x === 'function';\n\t}\n\texports.isFunction = isFunction;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isArray_1 = __webpack_require__(14);\n\tvar isObject_1 = __webpack_require__(15);\n\tvar isFunction_1 = __webpack_require__(12);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar UnsubscriptionError_1 = __webpack_require__(18);\n\t/**\n\t * Represents a disposable resource, such as the execution of an Observable. A\n\t * Subscription has one important method, `unsubscribe`, that takes no argument\n\t * and just disposes the resource held by the subscription.\n\t *\n\t * Additionally, subscriptions may be grouped together through the `add()`\n\t * method, which will attach a child Subscription to the current Subscription.\n\t * When a Subscription is unsubscribed, all its children (and its grandchildren)\n\t * will be unsubscribed as well.\n\t *\n\t * @class Subscription\n\t */\n\tvar Subscription = (function () {\n\t    /**\n\t     * @param {function(): void} [unsubscribe] A function describing how to\n\t     * perform the disposal of resources when the `unsubscribe` method is called.\n\t     */\n\t    function Subscription(unsubscribe) {\n\t        /**\n\t         * A flag to indicate whether this Subscription has already been unsubscribed.\n\t         * @type {boolean}\n\t         */\n\t        this.isUnsubscribed = false;\n\t        if (unsubscribe) {\n\t            this._unsubscribe = unsubscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Disposes the resources held by the subscription. May, for instance, cancel\n\t     * an ongoing Observable execution or cancel any other type of work that\n\t     * started when the Subscription was created.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.unsubscribe = function () {\n\t        var hasErrors = false;\n\t        var errors;\n\t        if (this.isUnsubscribed) {\n\t            return;\n\t        }\n\t        this.isUnsubscribed = true;\n\t        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n\t        this._subscriptions = null;\n\t        if (isFunction_1.isFunction(_unsubscribe)) {\n\t            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n\t            if (trial === errorObject_1.errorObject) {\n\t                hasErrors = true;\n\t                (errors = errors || []).push(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        if (isArray_1.isArray(_subscriptions)) {\n\t            var index = -1;\n\t            var len = _subscriptions.length;\n\t            while (++index < len) {\n\t                var sub = _subscriptions[index];\n\t                if (isObject_1.isObject(sub)) {\n\t                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n\t                    if (trial === errorObject_1.errorObject) {\n\t                        hasErrors = true;\n\t                        errors = errors || [];\n\t                        var err = errorObject_1.errorObject.e;\n\t                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n\t                            errors = errors.concat(err.errors);\n\t                        }\n\t                        else {\n\t                            errors.push(err);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (hasErrors) {\n\t            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n\t        }\n\t    };\n\t    /**\n\t     * Adds a tear down to be called during the unsubscribe() of this\n\t     * Subscription.\n\t     *\n\t     * If the tear down being added is a subscription that is already\n\t     * unsubscribed, is the same reference `add` is being called on, or is\n\t     * `Subscription.EMPTY`, it will not be added.\n\t     *\n\t     * If this subscription is already in an `isUnsubscribed` state, the passed\n\t     * tear down logic will be executed immediately.\n\t     *\n\t     * @param {TeardownLogic} teardown The additional logic to execute on\n\t     * teardown.\n\t     * @return {Subscription} Returns the Subscription used or created to be\n\t     * added to the inner subscriptions list. This Subscription can be used with\n\t     * `remove()` to remove the passed teardown logic from the inner subscriptions\n\t     * list.\n\t     */\n\t    Subscription.prototype.add = function (teardown) {\n\t        if (!teardown || (teardown === this) || (teardown === Subscription.EMPTY)) {\n\t            return;\n\t        }\n\t        var sub = teardown;\n\t        switch (typeof teardown) {\n\t            case 'function':\n\t                sub = new Subscription(teardown);\n\t            case 'object':\n\t                if (sub.isUnsubscribed || typeof sub.unsubscribe !== 'function') {\n\t                    break;\n\t                }\n\t                else if (this.isUnsubscribed) {\n\t                    sub.unsubscribe();\n\t                }\n\t                else {\n\t                    (this._subscriptions || (this._subscriptions = [])).push(sub);\n\t                }\n\t                break;\n\t            default:\n\t                throw new Error('Unrecognized teardown ' + teardown + ' added to Subscription.');\n\t        }\n\t        return sub;\n\t    };\n\t    /**\n\t     * Removes a Subscription from the internal list of subscriptions that will\n\t     * unsubscribe during the unsubscribe process of this Subscription.\n\t     * @param {Subscription} subscription The subscription to remove.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.remove = function (subscription) {\n\t        // HACK: This might be redundant because of the logic in `add()`\n\t        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {\n\t            return;\n\t        }\n\t        var subscriptions = this._subscriptions;\n\t        if (subscriptions) {\n\t            var subscriptionIndex = subscriptions.indexOf(subscription);\n\t            if (subscriptionIndex !== -1) {\n\t                subscriptions.splice(subscriptionIndex, 1);\n\t            }\n\t        }\n\t    };\n\t    Subscription.EMPTY = (function (empty) {\n\t        empty.isUnsubscribed = true;\n\t        return empty;\n\t    }(new Subscription()));\n\t    return Subscription;\n\t}());\n\texports.Subscription = Subscription;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isObject(x) {\n\t    return x != null && typeof x === 'object';\n\t}\n\texports.isObject = isObject;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar tryCatchTarget;\n\tfunction tryCatcher() {\n\t    try {\n\t        return tryCatchTarget.apply(this, arguments);\n\t    }\n\t    catch (e) {\n\t        errorObject_1.errorObject.e = e;\n\t        return errorObject_1.errorObject;\n\t    }\n\t}\n\tfunction tryCatch(fn) {\n\t    tryCatchTarget = fn;\n\t    return tryCatcher;\n\t}\n\texports.tryCatch = tryCatch;\n\t;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// typeof any so that it we don't have to cast when comparing a result to the error object\n\texports.errorObject = { e: {} };\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when one or more errors have occurred during the\n\t * `unsubscribe` of a {@link Subscription}.\n\t */\n\tvar UnsubscriptionError = (function (_super) {\n\t    __extends(UnsubscriptionError, _super);\n\t    function UnsubscriptionError(errors) {\n\t        _super.call(this);\n\t        this.errors = errors;\n\t        var err = Error.call(this, errors ?\n\t            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n\t        this.name = err.name = 'UnsubscriptionError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return UnsubscriptionError;\n\t}(Error));\n\texports.UnsubscriptionError = UnsubscriptionError;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.empty = {\n\t    isUnsubscribed: true,\n\t    next: function (value) { },\n\t    error: function (err) { throw err; },\n\t    complete: function () { }\n\t};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar Symbol = root_1.root.Symbol;\n\texports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n\t    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(22);\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _ponyfill = __webpack_require__(23);\n\t\n\tvar _ponyfill2 = _interopRequireDefault(_ponyfill);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar root = undefined; /* global window */\n\t\n\tif (typeof global !== 'undefined') {\n\t\troot = global;\n\t} else if (typeof window !== 'undefined') {\n\t\troot = window;\n\t}\n\t\n\tvar result = (0, _ponyfill2.default)(root);\n\texports.default = result;\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\texports.default = symbolObservablePonyfill;\n\tfunction symbolObservablePonyfill(root) {\n\t\tvar result;\n\t\tvar _Symbol = root.Symbol;\n\t\n\t\tif (typeof _Symbol === 'function') {\n\t\t\tif (_Symbol.observable) {\n\t\t\t\tresult = _Symbol.observable;\n\t\t\t} else {\n\t\t\t\tresult = _Symbol('observable');\n\t\t\t\t_Symbol.observable = result;\n\t\t\t}\n\t\t} else {\n\t\t\tresult = '@@observable';\n\t\t}\n\t\n\t\treturn result;\n\t};\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an action is invalid because the object has been\n\t * unsubscribed.\n\t *\n\t * @see {@link Subject}\n\t * @see {@link BehaviorSubject}\n\t *\n\t * @class ObjectUnsubscribedError\n\t */\n\tvar ObjectUnsubscribedError = (function (_super) {\n\t    __extends(ObjectUnsubscribedError, _super);\n\t    function ObjectUnsubscribedError() {\n\t        var err = _super.call(this, 'object unsubscribed');\n\t        this.name = err.name = 'ObjectUnsubscribedError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return ObjectUnsubscribedError;\n\t}(Error));\n\texports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubjectSubscription = (function (_super) {\n\t    __extends(SubjectSubscription, _super);\n\t    function SubjectSubscription(subject, subscriber) {\n\t        _super.call(this);\n\t        this.subject = subject;\n\t        this.subscriber = subscriber;\n\t        this.isUnsubscribed = false;\n\t    }\n\t    SubjectSubscription.prototype.unsubscribe = function () {\n\t        if (this.isUnsubscribed) {\n\t            return;\n\t        }\n\t        this.isUnsubscribed = true;\n\t        var subject = this.subject;\n\t        var observers = subject.observers;\n\t        this.subject = null;\n\t        if (!observers || observers.length === 0 || subject.isStopped || subject.isUnsubscribed) {\n\t            return;\n\t        }\n\t        var subscriberIndex = observers.indexOf(this.subscriber);\n\t        if (subscriberIndex !== -1) {\n\t            observers.splice(subscriberIndex, 1);\n\t        }\n\t    };\n\t    return SubjectSubscription;\n\t}(Subscription_1.Subscription));\n\texports.SubjectSubscription = SubjectSubscription;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bindCallback_1 = __webpack_require__(27);\n\tObservable_1.Observable.bindCallback = bindCallback_1.bindCallback;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar BoundCallbackObservable_1 = __webpack_require__(28);\n\texports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar AsyncSubject_1 = __webpack_require__(29);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar BoundCallbackObservable = (function (_super) {\n\t    __extends(BoundCallbackObservable, _super);\n\t    function BoundCallbackObservable(callbackFunc, selector, args, scheduler) {\n\t        _super.call(this);\n\t        this.callbackFunc = callbackFunc;\n\t        this.selector = selector;\n\t        this.args = args;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /* tslint:enable:max-line-length */\n\t    /**\n\t     * Converts a callback API to a function that returns an Observable.\n\t     *\n\t     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n\t     * it will return a function `g` that when called as `g(x)` will output an\n\t     * Observable.</span>\n\t     *\n\t     * `bindCallback` is not an operator because its input and output are not\n\t     * Observables. The input is a function `func` with some parameters, but the\n\t     * last parameter must be a callback function that `func` calls when it is\n\t     * done. The output of `bindCallback` is a function that takes the same\n\t     * parameters as `func`, except the last one (the callback). When the output\n\t     * function is called with arguments, it will return an Observable where the\n\t     * results will be delivered to.\n\t     *\n\t     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n\t     * // Suppose we have jQuery.getJSON('/my/url', callback)\n\t     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n\t     * var result = getJSONAsObservable('/my/url');\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link bindNodeCallback}\n\t     * @see {@link from}\n\t     * @see {@link fromPromise}\n\t     *\n\t     * @param {function} func Function with a callback as the last parameter.\n\t     * @param {function} selector A function which takes the arguments from the\n\t     * callback and maps those a value to emit on the output Observable.\n\t     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n\t     * callbacks.\n\t     * @return {function(...params: *): Observable} A function which returns the\n\t     * Observable that delivers the same values the callback would deliver.\n\t     * @static true\n\t     * @name bindCallback\n\t     * @owner Observable\n\t     */\n\t    BoundCallbackObservable.create = function (func, selector, scheduler) {\n\t        if (selector === void 0) { selector = undefined; }\n\t        return function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            return new BoundCallbackObservable(func, selector, args, scheduler);\n\t        };\n\t    };\n\t    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n\t        var callbackFunc = this.callbackFunc;\n\t        var args = this.args;\n\t        var scheduler = this.scheduler;\n\t        var subject = this.subject;\n\t        if (!scheduler) {\n\t            if (!subject) {\n\t                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n\t                var handler = function handlerFn() {\n\t                    var innerArgs = [];\n\t                    for (var _i = 0; _i < arguments.length; _i++) {\n\t                        innerArgs[_i - 0] = arguments[_i];\n\t                    }\n\t                    var source = handlerFn.source;\n\t                    var selector = source.selector, subject = source.subject;\n\t                    if (selector) {\n\t                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                        if (result_1 === errorObject_1.errorObject) {\n\t                            subject.error(errorObject_1.errorObject.e);\n\t                        }\n\t                        else {\n\t                            subject.next(result_1);\n\t                            subject.complete();\n\t                        }\n\t                    }\n\t                    else {\n\t                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n\t                        subject.complete();\n\t                    }\n\t                };\n\t                // use named function instance to avoid closure.\n\t                handler.source = this;\n\t                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t                if (result === errorObject_1.errorObject) {\n\t                    subject.error(errorObject_1.errorObject.e);\n\t                }\n\t            }\n\t            return subject.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber });\n\t        }\n\t    };\n\t    BoundCallbackObservable.dispatch = function (state) {\n\t        var self = this;\n\t        var source = state.source, subscriber = state.subscriber;\n\t        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n\t        var subject = source.subject;\n\t        if (!subject) {\n\t            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n\t            var handler = function handlerFn() {\n\t                var innerArgs = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    innerArgs[_i - 0] = arguments[_i];\n\t                }\n\t                var source = handlerFn.source;\n\t                var selector = source.selector, subject = source.subject;\n\t                if (selector) {\n\t                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                    if (result_2 === errorObject_1.errorObject) {\n\t                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n\t                    }\n\t                    else {\n\t                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n\t                    }\n\t                }\n\t                else {\n\t                    var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n\t                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n\t                }\n\t            };\n\t            // use named function to pass values in without closure\n\t            handler.source = source;\n\t            var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t            if (result === errorObject_1.errorObject) {\n\t                subject.error(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        self.add(subject.subscribe(subscriber));\n\t    };\n\t    return BoundCallbackObservable;\n\t}(Observable_1.Observable));\n\texports.BoundCallbackObservable = BoundCallbackObservable;\n\tfunction dispatchNext(arg) {\n\t    var value = arg.value, subject = arg.subject;\n\t    subject.next(value);\n\t    subject.complete();\n\t}\n\tfunction dispatchError(arg) {\n\t    var err = arg.err, subject = arg.subject;\n\t    subject.error(err);\n\t}\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * @class AsyncSubject<T>\n\t */\n\tvar AsyncSubject = (function (_super) {\n\t    __extends(AsyncSubject, _super);\n\t    function AsyncSubject() {\n\t        _super.apply(this, arguments);\n\t        this.value = null;\n\t        this.hasNext = false;\n\t        this.hasCompleted = false;\n\t    }\n\t    AsyncSubject.prototype._subscribe = function (subscriber) {\n\t        if (this.hasCompleted && this.hasNext) {\n\t            subscriber.next(this.value);\n\t            subscriber.complete();\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else if (this.hasError) {\n\t            subscriber.error(this.thrownError);\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        return _super.prototype._subscribe.call(this, subscriber);\n\t    };\n\t    AsyncSubject.prototype.next = function (value) {\n\t        this.value = value;\n\t        this.hasNext = true;\n\t    };\n\t    AsyncSubject.prototype.complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.hasNext) {\n\t            _super.prototype.next.call(this, this.value);\n\t        }\n\t        _super.prototype.complete.call(this);\n\t    };\n\t    return AsyncSubject;\n\t}(Subject_1.Subject));\n\texports.AsyncSubject = AsyncSubject;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bindNodeCallback_1 = __webpack_require__(31);\n\tObservable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar BoundNodeCallbackObservable_1 = __webpack_require__(32);\n\texports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar AsyncSubject_1 = __webpack_require__(29);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar BoundNodeCallbackObservable = (function (_super) {\n\t    __extends(BoundNodeCallbackObservable, _super);\n\t    function BoundNodeCallbackObservable(callbackFunc, selector, args, scheduler) {\n\t        _super.call(this);\n\t        this.callbackFunc = callbackFunc;\n\t        this.selector = selector;\n\t        this.args = args;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /* tslint:enable:max-line-length */\n\t    /**\n\t     * Converts a Node.js-style callback API to a function that returns an\n\t     * Observable.\n\t     *\n\t     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n\t     * callback is expected to be of type `callback(error, result)`.</span>\n\t     *\n\t     * `bindNodeCallback` is not an operator because its input and output are not\n\t     * Observables. The input is a function `func` with some parameters, but the\n\t     * last parameter must be a callback function that `func` calls when it is\n\t     * done. The callback function is expected to follow Node.js conventions,\n\t     * where the first argument to the callback is an error, while remaining\n\t     * arguments are the callback result. The output of `bindNodeCallback` is a\n\t     * function that takes the same parameters as `func`, except the last one (the\n\t     * callback). When the output function is called with arguments, it will\n\t     * return an Observable where the results will be delivered to.\n\t     *\n\t     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n\t     * import * as fs from 'fs';\n\t     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n\t     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link bindCallback}\n\t     * @see {@link from}\n\t     * @see {@link fromPromise}\n\t     *\n\t     * @param {function} func Function with a callback as the last parameter.\n\t     * @param {function} selector A function which takes the arguments from the\n\t     * callback and maps those a value to emit on the output Observable.\n\t     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n\t     * callbacks.\n\t     * @return {function(...params: *): Observable} A function which returns the\n\t     * Observable that delivers the same values the Node.js callback would\n\t     * deliver.\n\t     * @static true\n\t     * @name bindNodeCallback\n\t     * @owner Observable\n\t     */\n\t    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n\t        if (selector === void 0) { selector = undefined; }\n\t        return function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            return new BoundNodeCallbackObservable(func, selector, args, scheduler);\n\t        };\n\t    };\n\t    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n\t        var callbackFunc = this.callbackFunc;\n\t        var args = this.args;\n\t        var scheduler = this.scheduler;\n\t        var subject = this.subject;\n\t        if (!scheduler) {\n\t            if (!subject) {\n\t                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n\t                var handler = function handlerFn() {\n\t                    var innerArgs = [];\n\t                    for (var _i = 0; _i < arguments.length; _i++) {\n\t                        innerArgs[_i - 0] = arguments[_i];\n\t                    }\n\t                    var source = handlerFn.source;\n\t                    var selector = source.selector, subject = source.subject;\n\t                    var err = innerArgs.shift();\n\t                    if (err) {\n\t                        subject.error(err);\n\t                    }\n\t                    else if (selector) {\n\t                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                        if (result_1 === errorObject_1.errorObject) {\n\t                            subject.error(errorObject_1.errorObject.e);\n\t                        }\n\t                        else {\n\t                            subject.next(result_1);\n\t                            subject.complete();\n\t                        }\n\t                    }\n\t                    else {\n\t                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n\t                        subject.complete();\n\t                    }\n\t                };\n\t                // use named function instance to avoid closure.\n\t                handler.source = this;\n\t                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t                if (result === errorObject_1.errorObject) {\n\t                    subject.error(errorObject_1.errorObject.e);\n\t                }\n\t            }\n\t            return subject.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber });\n\t        }\n\t    };\n\t    return BoundNodeCallbackObservable;\n\t}(Observable_1.Observable));\n\texports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\n\tfunction dispatch(state) {\n\t    var self = this;\n\t    var source = state.source, subscriber = state.subscriber;\n\t    var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n\t    var subject = source.subject;\n\t    if (!subject) {\n\t        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n\t        var handler = function handlerFn() {\n\t            var innerArgs = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                innerArgs[_i - 0] = arguments[_i];\n\t            }\n\t            var source = handlerFn.source;\n\t            var selector = source.selector, subject = source.subject;\n\t            var err = innerArgs.shift();\n\t            if (err) {\n\t                subject.error(err);\n\t            }\n\t            else if (selector) {\n\t                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\t                if (result_2 === errorObject_1.errorObject) {\n\t                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n\t                }\n\t                else {\n\t                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n\t                }\n\t            }\n\t            else {\n\t                var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n\t                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n\t            }\n\t        };\n\t        // use named function to pass values in without closure\n\t        handler.source = source;\n\t        var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));\n\t        if (result === errorObject_1.errorObject) {\n\t            subject.error(errorObject_1.errorObject.e);\n\t        }\n\t    }\n\t    self.add(subject.subscribe(subscriber));\n\t}\n\tfunction dispatchNext(arg) {\n\t    var value = arg.value, subject = arg.subject;\n\t    subject.next(value);\n\t    subject.complete();\n\t}\n\tfunction dispatchError(arg) {\n\t    var err = arg.err, subject = arg.subject;\n\t    subject.error(err);\n\t}\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar combineLatest_1 = __webpack_require__(34);\n\tObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isScheduler_1 = __webpack_require__(35);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar combineLatest_1 = __webpack_require__(39);\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Combines multiple Observables to create an Observable whose values are\n\t * calculated from the latest values of each of its input Observables.\n\t *\n\t * <span class=\"informal\">Whenever any input Observable emits a value, it\n\t * computes a formula using the latest values from all the inputs, then emits\n\t * the output of that formula.</span>\n\t *\n\t * <img src=\"./img/combineLatest.png\" width=\"100%\">\n\t *\n\t * `combineLatest` combines the values from all the Observables passed as\n\t * arguments. This is done by subscribing to each Observable, in order, and\n\t * collecting an array of each of the most recent values any time any of the\n\t * input Observables emits, then either taking that array and passing it as\n\t * arguments to an optional `project` function and emitting the return value of\n\t * that, or just emitting the array of recent values directly if there is no\n\t * `project` function.\n\t *\n\t * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n\t * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n\t * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n\t * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n\t * bmi.subscribe(x => console.log('BMI is ' + x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link merge}\n\t * @see {@link withLatestFrom}\n\t *\n\t * @param {Observable} observable1 An input Observable to combine with the\n\t * source Observable.\n\t * @param {Observable} observable2 An input Observable to combine with the\n\t * source Observable. More than one input Observables may be given as argument.\n\t * @param {function} [project] An optional function to project the values from\n\t * the combined latest values into a new value on the output Observable.\n\t * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n\t * each input Observable.\n\t * @return {Observable} An Observable of projected values from the most recent\n\t * values from each input Observable, or an array of the most recent values from\n\t * each input Observable.\n\t * @static true\n\t * @name combineLatest\n\t * @owner Observable\n\t */\n\tfunction combineLatest() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var project = null;\n\t    var scheduler = null;\n\t    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n\t        scheduler = observables.pop();\n\t    }\n\t    if (typeof observables[observables.length - 1] === 'function') {\n\t        project = observables.pop();\n\t    }\n\t    // if the first and only other argument besides the resultSelector is an array\n\t    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n\t    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n\t        observables = observables[0];\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n\t}\n\texports.combineLatest = combineLatest;\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isScheduler(value) {\n\t    return value && typeof value.schedule === 'function';\n\t}\n\texports.isScheduler = isScheduler;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ScalarObservable_1 = __webpack_require__(37);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\tvar isScheduler_1 = __webpack_require__(35);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ArrayObservable = (function (_super) {\n\t    __extends(ArrayObservable, _super);\n\t    function ArrayObservable(array, scheduler) {\n\t        _super.call(this);\n\t        this.array = array;\n\t        this.scheduler = scheduler;\n\t        if (!scheduler && array.length === 1) {\n\t            this._isScalar = true;\n\t            this.value = array[0];\n\t        }\n\t    }\n\t    ArrayObservable.create = function (array, scheduler) {\n\t        return new ArrayObservable(array, scheduler);\n\t    };\n\t    /**\n\t     * Creates an Observable that emits some values you specify as arguments,\n\t     * immediately one after the other, and then emits a complete notification.\n\t     *\n\t     * <span class=\"informal\">Emits the arguments you provide, then completes.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/of.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that only\n\t     * emits the arguments given, and the complete notification thereafter. It can\n\t     * be used for composing with other Observables, such as with {@link concat}.\n\t     * By default, it uses a `null` Scheduler, which means the `next`\n\t     * notifications are sent synchronously, although with a different Scheduler\n\t     * it is possible to determine when those notifications will be delivered.\n\t     *\n\t     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n\t     * var numbers = Rx.Observable.of(10, 20, 30);\n\t     * var letters = Rx.Observable.of('a', 'b', 'c');\n\t     * var interval = Rx.Observable.interval(1000);\n\t     * var result = numbers.concat(letters).concat(interval);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link empty}\n\t     * @see {@link never}\n\t     * @see {@link throw}\n\t     *\n\t     * @param {...T} values Arguments that represent `next` values to be emitted.\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emissions of the `next` notifications.\n\t     * @return {Observable<T>} An Observable that emits each given input value.\n\t     * @static true\n\t     * @name of\n\t     * @owner Observable\n\t     */\n\t    ArrayObservable.of = function () {\n\t        var array = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            array[_i - 0] = arguments[_i];\n\t        }\n\t        var scheduler = array[array.length - 1];\n\t        if (isScheduler_1.isScheduler(scheduler)) {\n\t            array.pop();\n\t        }\n\t        else {\n\t            scheduler = null;\n\t        }\n\t        var len = array.length;\n\t        if (len > 1) {\n\t            return new ArrayObservable(array, scheduler);\n\t        }\n\t        else if (len === 1) {\n\t            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n\t        }\n\t        else {\n\t            return new EmptyObservable_1.EmptyObservable(scheduler);\n\t        }\n\t    };\n\t    ArrayObservable.dispatch = function (state) {\n\t        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n\t        if (index >= count) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(array[index]);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        state.index = index + 1;\n\t        this.schedule(state);\n\t    };\n\t    ArrayObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var array = this.array;\n\t        var count = array.length;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n\t                array: array, index: index, count: count, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            for (var i = 0; i < count && !subscriber.isUnsubscribed; i++) {\n\t                subscriber.next(array[i]);\n\t            }\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return ArrayObservable;\n\t}(Observable_1.Observable));\n\texports.ArrayObservable = ArrayObservable;\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ScalarObservable = (function (_super) {\n\t    __extends(ScalarObservable, _super);\n\t    function ScalarObservable(value, scheduler) {\n\t        _super.call(this);\n\t        this.value = value;\n\t        this.scheduler = scheduler;\n\t        this._isScalar = true;\n\t        if (scheduler) {\n\t            this._isScalar = false;\n\t        }\n\t    }\n\t    ScalarObservable.create = function (value, scheduler) {\n\t        return new ScalarObservable(value, scheduler);\n\t    };\n\t    ScalarObservable.dispatch = function (state) {\n\t        var done = state.done, value = state.value, subscriber = state.subscriber;\n\t        if (done) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(value);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        state.done = true;\n\t        this.schedule(state);\n\t    };\n\t    ScalarObservable.prototype._subscribe = function (subscriber) {\n\t        var value = this.value;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n\t                done: false, value: value, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            subscriber.next(value);\n\t            if (!subscriber.isUnsubscribed) {\n\t                subscriber.complete();\n\t            }\n\t        }\n\t    };\n\t    return ScalarObservable;\n\t}(Observable_1.Observable));\n\texports.ScalarObservable = ScalarObservable;\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar EmptyObservable = (function (_super) {\n\t    __extends(EmptyObservable, _super);\n\t    function EmptyObservable(scheduler) {\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits no items to the Observer and immediately\n\t     * emits a complete notification.\n\t     *\n\t     * <span class=\"informal\">Just emits 'complete', and nothing else.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/empty.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that only\n\t     * emits the complete notification. It can be used for composing with other\n\t     * Observables, such as in a {@link mergeMap}.\n\t     *\n\t     * @example <caption>Emit the number 7, then complete.</caption>\n\t     * var result = Rx.Observable.empty().startWith(7);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n\t     * var interval = Rx.Observable.interval(1000);\n\t     * var result = interval.mergeMap(x =>\n\t     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n\t     * );\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link never}\n\t     * @see {@link of}\n\t     * @see {@link throw}\n\t     *\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emission of the complete notification.\n\t     * @return {Observable} An \"empty\" Observable: emits only the complete\n\t     * notification.\n\t     * @static true\n\t     * @name empty\n\t     * @owner Observable\n\t     */\n\t    EmptyObservable.create = function (scheduler) {\n\t        return new EmptyObservable(scheduler);\n\t    };\n\t    EmptyObservable.dispatch = function (arg) {\n\t        var subscriber = arg.subscriber;\n\t        subscriber.complete();\n\t    };\n\t    EmptyObservable.prototype._subscribe = function (subscriber) {\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n\t        }\n\t        else {\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return EmptyObservable;\n\t}(Observable_1.Observable));\n\texports.EmptyObservable = EmptyObservable;\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar none = {};\n\t/**\n\t * Combines multiple Observables to create an Observable whose values are\n\t * calculated from the latest values of each of its input Observables.\n\t *\n\t * <span class=\"informal\">Whenever any input Observable emits a value, it\n\t * computes a formula using the latest values from all the inputs, then emits\n\t * the output of that formula.</span>\n\t *\n\t * <img src=\"./img/combineLatest.png\" width=\"100%\">\n\t *\n\t * `combineLatest` combines the values from this Observable with values from\n\t * Observables passed as arguments. This is done by subscribing to each\n\t * Observable, in order, and collecting an array of each of the most recent\n\t * values any time any of the input Observables emits, then either taking that\n\t * array and passing it as arguments to an optional `project` function and\n\t * emitting the return value of that, or just emitting the array of recent\n\t * values directly if there is no `project` function.\n\t *\n\t * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n\t * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n\t * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n\t * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n\t * bmi.subscribe(x => console.log('BMI is ' + x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link merge}\n\t * @see {@link withLatestFrom}\n\t *\n\t * @param {Observable} other An input Observable to combine with the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {function} [project] An optional function to project the values from\n\t * the combined latest values into a new value on the output Observable.\n\t * @return {Observable} An Observable of projected values from the most recent\n\t * values from each input Observable, or an array of the most recent values from\n\t * each input Observable.\n\t * @method combineLatest\n\t * @owner Observable\n\t */\n\tfunction combineLatest() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var project = null;\n\t    if (typeof observables[observables.length - 1] === 'function') {\n\t        project = observables.pop();\n\t    }\n\t    // if the first and only other argument besides the resultSelector is an array\n\t    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n\t    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n\t        observables = observables[0];\n\t    }\n\t    observables.unshift(this);\n\t    return new ArrayObservable_1.ArrayObservable(observables).lift(new CombineLatestOperator(project));\n\t}\n\texports.combineLatest = combineLatest;\n\t/* tslint:enable:max-line-length */\n\tvar CombineLatestOperator = (function () {\n\t    function CombineLatestOperator(project) {\n\t        this.project = project;\n\t    }\n\t    CombineLatestOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n\t    };\n\t    return CombineLatestOperator;\n\t}());\n\texports.CombineLatestOperator = CombineLatestOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar CombineLatestSubscriber = (function (_super) {\n\t    __extends(CombineLatestSubscriber, _super);\n\t    function CombineLatestSubscriber(destination, project) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.active = 0;\n\t        this.values = [];\n\t        this.observables = [];\n\t    }\n\t    CombineLatestSubscriber.prototype._next = function (observable) {\n\t        this.values.push(none);\n\t        this.observables.push(observable);\n\t    };\n\t    CombineLatestSubscriber.prototype._complete = function () {\n\t        var observables = this.observables;\n\t        var len = observables.length;\n\t        if (len === 0) {\n\t            this.destination.complete();\n\t        }\n\t        else {\n\t            this.active = len;\n\t            this.toRespond = len;\n\t            for (var i = 0; i < len; i++) {\n\t                var observable = observables[i];\n\t                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n\t            }\n\t        }\n\t    };\n\t    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n\t        if ((this.active -= 1) === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var values = this.values;\n\t        var oldVal = values[outerIndex];\n\t        var toRespond = !this.toRespond\n\t            ? 0\n\t            : oldVal === none ? --this.toRespond : this.toRespond;\n\t        values[outerIndex] = innerValue;\n\t        if (toRespond === 0) {\n\t            if (this.project) {\n\t                this._tryProject(values);\n\t            }\n\t            else {\n\t                this.destination.next(values);\n\t            }\n\t        }\n\t    };\n\t    CombineLatestSubscriber.prototype._tryProject = function (values) {\n\t        var result;\n\t        try {\n\t            result = this.project.apply(this, values);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return CombineLatestSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.CombineLatestSubscriber = CombineLatestSubscriber;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar OuterSubscriber = (function (_super) {\n\t    __extends(OuterSubscriber, _super);\n\t    function OuterSubscriber() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.destination.next(innerValue);\n\t    };\n\t    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this.destination.error(error);\n\t    };\n\t    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.destination.complete();\n\t    };\n\t    return OuterSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.OuterSubscriber = OuterSubscriber;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar isPromise_1 = __webpack_require__(42);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar iterator_1 = __webpack_require__(43);\n\tvar InnerSubscriber_1 = __webpack_require__(44);\n\tvar symbol_observable_1 = __webpack_require__(21);\n\tfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n\t    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\t    if (destination.isUnsubscribed) {\n\t        return;\n\t    }\n\t    if (result instanceof Observable_1.Observable) {\n\t        if (result._isScalar) {\n\t            destination.next(result.value);\n\t            destination.complete();\n\t            return;\n\t        }\n\t        else {\n\t            return result.subscribe(destination);\n\t        }\n\t    }\n\t    if (isArray_1.isArray(result)) {\n\t        for (var i = 0, len = result.length; i < len && !destination.isUnsubscribed; i++) {\n\t            destination.next(result[i]);\n\t        }\n\t        if (!destination.isUnsubscribed) {\n\t            destination.complete();\n\t        }\n\t    }\n\t    else if (isPromise_1.isPromise(result)) {\n\t        result.then(function (value) {\n\t            if (!destination.isUnsubscribed) {\n\t                destination.next(value);\n\t                destination.complete();\n\t            }\n\t        }, function (err) { return destination.error(err); })\n\t            .then(null, function (err) {\n\t            // Escaping the Promise trap: globally throw unhandled errors\n\t            root_1.root.setTimeout(function () { throw err; });\n\t        });\n\t        return destination;\n\t    }\n\t    else if (typeof result[iterator_1.$$iterator] === 'function') {\n\t        for (var _i = 0, _a = result; _i < _a.length; _i++) {\n\t            var item = _a[_i];\n\t            destination.next(item);\n\t            if (destination.isUnsubscribed) {\n\t                break;\n\t            }\n\t        }\n\t        if (!destination.isUnsubscribed) {\n\t            destination.complete();\n\t        }\n\t    }\n\t    else if (typeof result[symbol_observable_1.default] === 'function') {\n\t        var obs = result[symbol_observable_1.default]();\n\t        if (typeof obs.subscribe !== 'function') {\n\t            destination.error('invalid observable');\n\t        }\n\t        else {\n\t            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n\t        }\n\t    }\n\t    else {\n\t        destination.error(new TypeError('unknown type returned'));\n\t    }\n\t}\n\texports.subscribeToResult = subscribeToResult;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isPromise(value) {\n\t    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n\t}\n\texports.isPromise = isPromise;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar Symbol = root_1.root.Symbol;\n\tif (typeof Symbol === 'function') {\n\t    if (Symbol.iterator) {\n\t        exports.$$iterator = Symbol.iterator;\n\t    }\n\t    else if (typeof Symbol.for === 'function') {\n\t        exports.$$iterator = Symbol.for('iterator');\n\t    }\n\t}\n\telse {\n\t    if (root_1.root.Set && typeof new root_1.root.Set()['@@iterator'] === 'function') {\n\t        // Bug for mozilla version\n\t        exports.$$iterator = '@@iterator';\n\t    }\n\t    else if (root_1.root.Map) {\n\t        // es6-shim specific logic\n\t        var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);\n\t        for (var i = 0; i < keys.length; ++i) {\n\t            var key = keys[i];\n\t            if (key !== 'entries' && key !== 'size' && root_1.root.Map.prototype[key] === root_1.root.Map.prototype['entries']) {\n\t                exports.$$iterator = key;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t    else {\n\t        exports.$$iterator = '@@iterator';\n\t    }\n\t}\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar InnerSubscriber = (function (_super) {\n\t    __extends(InnerSubscriber, _super);\n\t    function InnerSubscriber(parent, outerValue, outerIndex) {\n\t        _super.call(this);\n\t        this.parent = parent;\n\t        this.outerValue = outerValue;\n\t        this.outerIndex = outerIndex;\n\t        this.index = 0;\n\t    }\n\t    InnerSubscriber.prototype._next = function (value) {\n\t        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n\t    };\n\t    InnerSubscriber.prototype._error = function (error) {\n\t        this.parent.notifyError(error, this);\n\t        this.unsubscribe();\n\t    };\n\t    InnerSubscriber.prototype._complete = function () {\n\t        this.parent.notifyComplete(this);\n\t        this.unsubscribe();\n\t    };\n\t    return InnerSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.InnerSubscriber = InnerSubscriber;\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concat_1 = __webpack_require__(46);\n\tObservable_1.Observable.concat = concat_1.concat;\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar concat_1 = __webpack_require__(47);\n\texports.concat = concat_1.concatStatic;\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isScheduler_1 = __webpack_require__(35);\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar mergeAll_1 = __webpack_require__(48);\n\t/**\n\t * Creates an output Observable which sequentially emits all values from every\n\t * given input Observable after the current Observable.\n\t *\n\t * <span class=\"informal\">Concatenates multiple Observables together by\n\t * sequentially emitting their values, one Observable after the other.</span>\n\t *\n\t * <img src=\"./img/concat.png\" width=\"100%\">\n\t *\n\t * Joins this Observable with multiple other Observables by subscribing to them\n\t * one at a time, starting with the source, and merging their results into the\n\t * output Observable. Will wait for each Observable to complete before moving\n\t * on to the next.\n\t *\n\t * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n\t * var timer = Rx.Observable.interval(1000).take(4);\n\t * var sequence = Rx.Observable.range(1, 10);\n\t * var result = timer.concat(sequence);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Concatenate 3 Observables</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var result = timer1.concat(timer2, timer3);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatAll}\n\t * @see {@link concatMap}\n\t * @see {@link concatMapTo}\n\t *\n\t * @param {Observable} other An input Observable to concatenate after the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n\t * Observable subscription on.\n\t * @return {Observable} All values of each passed Observable merged into a\n\t * single Observable, in order, in serial fashion.\n\t * @method concat\n\t * @owner Observable\n\t */\n\tfunction concat() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    return concatStatic.apply(void 0, [this].concat(observables));\n\t}\n\texports.concat = concat;\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Creates an output Observable which sequentially emits all values from every\n\t * given input Observable after the current Observable.\n\t *\n\t * <span class=\"informal\">Concatenates multiple Observables together by\n\t * sequentially emitting their values, one Observable after the other.</span>\n\t *\n\t * <img src=\"./img/concat.png\" width=\"100%\">\n\t *\n\t * Joins multiple Observables together by subscribing to them one at a time and\n\t * merging their results into the output Observable. Will wait for each\n\t * Observable to complete before moving on to the next.\n\t *\n\t * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n\t * var timer = Rx.Observable.interval(1000).take(4);\n\t * var sequence = Rx.Observable.range(1, 10);\n\t * var result = Rx.Observable.concat(timer, sequence);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Concatenate 3 Observables</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var result = Rx.Observable.concat(timer1, timer2, timer3);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatAll}\n\t * @see {@link concatMap}\n\t * @see {@link concatMapTo}\n\t *\n\t * @param {Observable} input1 An input Observable to concatenate with others.\n\t * @param {Observable} input2 An input Observable to concatenate with others.\n\t * More than one input Observables may be given as argument.\n\t * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n\t * Observable subscription on.\n\t * @return {Observable} All values of each passed Observable merged into a\n\t * single Observable, in order, in serial fashion.\n\t * @static true\n\t * @name concat\n\t * @owner Observable\n\t */\n\tfunction concatStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var scheduler = null;\n\t    var args = observables;\n\t    if (isScheduler_1.isScheduler(args[observables.length - 1])) {\n\t        scheduler = args.pop();\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));\n\t}\n\texports.concatStatic = concatStatic;\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable which\n\t * concurrently delivers all values that are emitted on the inner Observables.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n\t *\n\t * <img src=\"./img/mergeAll.png\" width=\"100%\">\n\t *\n\t * `mergeAll` subscribes to an Observable that emits Observables, also known as\n\t * a higher-order Observable. Each time it observes one of these emitted inner\n\t * Observables, it subscribes to that and delivers all the values from the\n\t * inner Observable on the output Observable. The output Observable only\n\t * completes once all inner Observables have completed. Any error delivered by\n\t * a inner Observable will be immediately emitted on the output Observable.\n\t *\n\t * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n\t * var firstOrder = higherOrder.mergeAll();\n\t * firstOrder.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n\t * var firstOrder = higherOrder.mergeAll(2);\n\t * firstOrder.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concatAll}\n\t * @see {@link exhaust}\n\t * @see {@link merge}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t * @see {@link switch}\n\t * @see {@link zipAll}\n\t *\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n\t * Observables being subscribed to concurrently.\n\t * @return {Observable} An Observable that emits values coming from all the\n\t * inner Observables emitted by the source Observable.\n\t * @method mergeAll\n\t * @owner Observable\n\t */\n\tfunction mergeAll(concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    return this.lift(new MergeAllOperator(concurrent));\n\t}\n\texports.mergeAll = mergeAll;\n\tvar MergeAllOperator = (function () {\n\t    function MergeAllOperator(concurrent) {\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeAllOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n\t    };\n\t    return MergeAllOperator;\n\t}());\n\texports.MergeAllOperator = MergeAllOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeAllSubscriber = (function (_super) {\n\t    __extends(MergeAllSubscriber, _super);\n\t    function MergeAllSubscriber(destination, concurrent) {\n\t        _super.call(this, destination);\n\t        this.concurrent = concurrent;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t    }\n\t    MergeAllSubscriber.prototype._next = function (observable) {\n\t        if (this.active < this.concurrent) {\n\t            this.active++;\n\t            this.add(subscribeToResult_1.subscribeToResult(this, observable));\n\t        }\n\t        else {\n\t            this.buffer.push(observable);\n\t        }\n\t    };\n\t    MergeAllSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeAllSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeAllSubscriber = MergeAllSubscriber;\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar defer_1 = __webpack_require__(50);\n\tObservable_1.Observable.defer = defer_1.defer;\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar DeferObservable_1 = __webpack_require__(51);\n\texports.defer = DeferObservable_1.DeferObservable.create;\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar DeferObservable = (function (_super) {\n\t    __extends(DeferObservable, _super);\n\t    function DeferObservable(observableFactory) {\n\t        _super.call(this);\n\t        this.observableFactory = observableFactory;\n\t    }\n\t    /**\n\t     * Creates an Observable that, on subscribe, calls an Observable factory to\n\t     * make an Observable for each new Observer.\n\t     *\n\t     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n\t     * is subscribed.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/defer.png\" width=\"100%\">\n\t     *\n\t     * `defer` allows you to create the Observable only when the Observer\n\t     * subscribes, and create a fresh Observable for each Observer. It waits until\n\t     * an Observer subscribes to it, and then it generates an Observable,\n\t     * typically with an Observable factory function. It does this afresh for each\n\t     * subscriber, so although each subscriber may think it is subscribing to the\n\t     * same Observable, in fact each subscriber gets its own individual\n\t     * Observable.\n\t     *\n\t     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n\t     * var clicksOrInterval = Rx.Observable.defer(function () {\n\t     *   if (Math.random() > 0.5) {\n\t     *     return Rx.Observable.fromEvent(document, 'click');\n\t     *   } else {\n\t     *     return Rx.Observable.interval(1000);\n\t     *   }\n\t     * });\n\t     * clicksOrInterval.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     *\n\t     * @param {function(): Observable|Promise} observableFactory The Observable\n\t     * factory function to invoke for each Observer that subscribes to the output\n\t     * Observable. May also return a Promise, which will be converted on the fly\n\t     * to an Observable.\n\t     * @return {Observable} An Observable whose Observers' subscriptions trigger\n\t     * an invocation of the given Observable factory function.\n\t     * @static true\n\t     * @name defer\n\t     * @owner Observable\n\t     */\n\t    DeferObservable.create = function (observableFactory) {\n\t        return new DeferObservable(observableFactory);\n\t    };\n\t    DeferObservable.prototype._subscribe = function (subscriber) {\n\t        return new DeferSubscriber(subscriber, this.observableFactory);\n\t    };\n\t    return DeferObservable;\n\t}(Observable_1.Observable));\n\texports.DeferObservable = DeferObservable;\n\tvar DeferSubscriber = (function (_super) {\n\t    __extends(DeferSubscriber, _super);\n\t    function DeferSubscriber(destination, factory) {\n\t        _super.call(this, destination);\n\t        this.factory = factory;\n\t        this.tryDefer();\n\t    }\n\t    DeferSubscriber.prototype.tryDefer = function () {\n\t        try {\n\t            this._callFactory();\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    DeferSubscriber.prototype._callFactory = function () {\n\t        var result = this.factory();\n\t        if (result) {\n\t            this.add(subscribeToResult_1.subscribeToResult(this, result));\n\t        }\n\t    };\n\t    return DeferSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar empty_1 = __webpack_require__(53);\n\tObservable_1.Observable.empty = empty_1.empty;\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\texports.empty = EmptyObservable_1.EmptyObservable.create;\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar forkJoin_1 = __webpack_require__(55);\n\tObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ForkJoinObservable_1 = __webpack_require__(56);\n\texports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ForkJoinObservable = (function (_super) {\n\t    __extends(ForkJoinObservable, _super);\n\t    function ForkJoinObservable(sources, resultSelector) {\n\t        _super.call(this);\n\t        this.sources = sources;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    /* tslint:enable:max-line-length */\n\t    /**\n\t     * @param sources\n\t     * @return {any}\n\t     * @static true\n\t     * @name forkJoin\n\t     * @owner Observable\n\t     */\n\t    ForkJoinObservable.create = function () {\n\t        var sources = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            sources[_i - 0] = arguments[_i];\n\t        }\n\t        if (sources === null || arguments.length === 0) {\n\t            return new EmptyObservable_1.EmptyObservable();\n\t        }\n\t        var resultSelector = null;\n\t        if (typeof sources[sources.length - 1] === 'function') {\n\t            resultSelector = sources.pop();\n\t        }\n\t        // if the first and only other argument besides the resultSelector is an array\n\t        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n\t        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n\t            sources = sources[0];\n\t        }\n\t        if (sources.length === 0) {\n\t            return new EmptyObservable_1.EmptyObservable();\n\t        }\n\t        return new ForkJoinObservable(sources, resultSelector);\n\t    };\n\t    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n\t        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n\t    };\n\t    return ForkJoinObservable;\n\t}(Observable_1.Observable));\n\texports.ForkJoinObservable = ForkJoinObservable;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ForkJoinSubscriber = (function (_super) {\n\t    __extends(ForkJoinSubscriber, _super);\n\t    function ForkJoinSubscriber(destination, sources, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.sources = sources;\n\t        this.resultSelector = resultSelector;\n\t        this.completed = 0;\n\t        this.haveValues = 0;\n\t        var len = sources.length;\n\t        this.total = len;\n\t        this.values = new Array(len);\n\t        for (var i = 0; i < len; i++) {\n\t            var source = sources[i];\n\t            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n\t            if (innerSubscription) {\n\t                innerSubscription.outerIndex = i;\n\t                this.add(innerSubscription);\n\t            }\n\t        }\n\t    }\n\t    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.values[outerIndex] = innerValue;\n\t        if (!innerSub._hasValue) {\n\t            innerSub._hasValue = true;\n\t            this.haveValues++;\n\t        }\n\t    };\n\t    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var destination = this.destination;\n\t        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n\t        var len = values.length;\n\t        if (!innerSub._hasValue) {\n\t            destination.complete();\n\t            return;\n\t        }\n\t        this.completed++;\n\t        if (this.completed !== len) {\n\t            return;\n\t        }\n\t        if (haveValues === len) {\n\t            var value = resultSelector ? resultSelector.apply(this, values) : values;\n\t            destination.next(value);\n\t        }\n\t        destination.complete();\n\t    };\n\t    return ForkJoinSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar from_1 = __webpack_require__(58);\n\tObservable_1.Observable.from = from_1.from;\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar FromObservable_1 = __webpack_require__(59);\n\texports.from = FromObservable_1.FromObservable.create;\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isArray_1 = __webpack_require__(14);\n\tvar isFunction_1 = __webpack_require__(12);\n\tvar isPromise_1 = __webpack_require__(42);\n\tvar isScheduler_1 = __webpack_require__(35);\n\tvar PromiseObservable_1 = __webpack_require__(60);\n\tvar IteratorObservable_1 = __webpack_require__(61);\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar ArrayLikeObservable_1 = __webpack_require__(62);\n\tvar iterator_1 = __webpack_require__(43);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar observeOn_1 = __webpack_require__(63);\n\tvar symbol_observable_1 = __webpack_require__(21);\n\tvar isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar FromObservable = (function (_super) {\n\t    __extends(FromObservable, _super);\n\t    function FromObservable(ish, scheduler) {\n\t        _super.call(this, null);\n\t        this.ish = ish;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable from an Array, an array-like object, a Promise, an\n\t     * iterable object, or an Observable-like object.\n\t     *\n\t     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n\t     *\n\t     * <img src=\"./img/from.png\" width=\"100%\">\n\t     *\n\t     * Convert various other objects and data types into Observables. `from`\n\t     * converts a Promise or an array-like or an\n\t     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n\t     * object into an Observable that emits the items in that promise or array or\n\t     * iterable. A String, in this context, is treated as an array of characters.\n\t     * Observable-like objects (contains a function named with the ES2015 Symbol\n\t     * for Observable) can also be converted through this operator.\n\t     *\n\t     * @example <caption>Converts an array to an Observable</caption>\n\t     * var array = [10, 20, 30];\n\t     * var result = Rx.Observable.from(array);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n\t     * function* generateDoubles(seed) {\n\t     *   var i = seed;\n\t     *   while (true) {\n\t     *     yield i;\n\t     *     i = 2 * i; // double it\n\t     *   }\n\t     * }\n\t     *\n\t     * var iterator = generateDoubles(3);\n\t     * var result = Rx.Observable.from(iterator).take(10);\n\t     * result.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link fromEvent}\n\t     * @see {@link fromEventPattern}\n\t     * @see {@link fromPromise}\n\t     *\n\t     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n\t     * Observable-like, an Array, an iterable or an array-like object to be\n\t     * converted.\n\t     * @param {function(x: any, i: number): T} [mapFn] A \"map\" function to call\n\t     * when converting array-like objects, where `x` is a value from the\n\t     * array-like and `i` is the index of that value in the sequence.\n\t     * @param {any} [thisArg] The context object to use when calling the `mapFn`,\n\t     * if provided.\n\t     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n\t     * emissions of values.\n\t     * @return {Observable<T>} The Observable whose values are originally from the\n\t     * input object that was converted.\n\t     * @static true\n\t     * @name from\n\t     * @owner Observable\n\t     */\n\t    FromObservable.create = function (ish, mapFnOrScheduler, thisArg, lastScheduler) {\n\t        var scheduler = null;\n\t        var mapFn = null;\n\t        if (isFunction_1.isFunction(mapFnOrScheduler)) {\n\t            scheduler = lastScheduler || null;\n\t            mapFn = mapFnOrScheduler;\n\t        }\n\t        else if (isScheduler_1.isScheduler(scheduler)) {\n\t            scheduler = mapFnOrScheduler;\n\t        }\n\t        if (ish != null) {\n\t            if (typeof ish[symbol_observable_1.default] === 'function') {\n\t                if (ish instanceof Observable_1.Observable && !scheduler) {\n\t                    return ish;\n\t                }\n\t                return new FromObservable(ish, scheduler);\n\t            }\n\t            else if (isArray_1.isArray(ish)) {\n\t                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n\t            }\n\t            else if (isPromise_1.isPromise(ish)) {\n\t                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n\t            }\n\t            else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {\n\t                return new IteratorObservable_1.IteratorObservable(ish, null, null, scheduler);\n\t            }\n\t            else if (isArrayLike(ish)) {\n\t                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, mapFn, thisArg, scheduler);\n\t            }\n\t        }\n\t        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n\t    };\n\t    FromObservable.prototype._subscribe = function (subscriber) {\n\t        var ish = this.ish;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler == null) {\n\t            return ish[symbol_observable_1.default]().subscribe(subscriber);\n\t        }\n\t        else {\n\t            return ish[symbol_observable_1.default]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n\t        }\n\t    };\n\t    return FromObservable;\n\t}(Observable_1.Observable));\n\texports.FromObservable = FromObservable;\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar PromiseObservable = (function (_super) {\n\t    __extends(PromiseObservable, _super);\n\t    function PromiseObservable(promise, scheduler) {\n\t        if (scheduler === void 0) { scheduler = null; }\n\t        _super.call(this);\n\t        this.promise = promise;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Converts a Promise to an Observable.\n\t     *\n\t     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n\t     * resolved value, then completes.</span>\n\t     *\n\t     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n\t     * Observable. If the Promise resolves with a value, the output Observable\n\t     * emits that resolved value as a `next`, and then completes. If the Promise\n\t     * is rejected, then the output Observable emits the corresponding Error.\n\t     *\n\t     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n\t     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link bindCallback}\n\t     * @see {@link from}\n\t     *\n\t     * @param {Promise<T>} promise The promise to be converted.\n\t     * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n\t     * the delivery of the resolved value (or the rejection).\n\t     * @return {Observable<T>} An Observable which wraps the Promise.\n\t     * @static true\n\t     * @name fromPromise\n\t     * @owner Observable\n\t     */\n\t    PromiseObservable.create = function (promise, scheduler) {\n\t        if (scheduler === void 0) { scheduler = null; }\n\t        return new PromiseObservable(promise, scheduler);\n\t    };\n\t    PromiseObservable.prototype._subscribe = function (subscriber) {\n\t        var _this = this;\n\t        var promise = this.promise;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler == null) {\n\t            if (this._isScalar) {\n\t                if (!subscriber.isUnsubscribed) {\n\t                    subscriber.next(this.value);\n\t                    subscriber.complete();\n\t                }\n\t            }\n\t            else {\n\t                promise.then(function (value) {\n\t                    _this.value = value;\n\t                    _this._isScalar = true;\n\t                    if (!subscriber.isUnsubscribed) {\n\t                        subscriber.next(value);\n\t                        subscriber.complete();\n\t                    }\n\t                }, function (err) {\n\t                    if (!subscriber.isUnsubscribed) {\n\t                        subscriber.error(err);\n\t                    }\n\t                })\n\t                    .then(null, function (err) {\n\t                    // escape the promise trap, throw unhandled errors\n\t                    root_1.root.setTimeout(function () { throw err; });\n\t                });\n\t            }\n\t        }\n\t        else {\n\t            if (this._isScalar) {\n\t                if (!subscriber.isUnsubscribed) {\n\t                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n\t                }\n\t            }\n\t            else {\n\t                promise.then(function (value) {\n\t                    _this.value = value;\n\t                    _this._isScalar = true;\n\t                    if (!subscriber.isUnsubscribed) {\n\t                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n\t                    }\n\t                }, function (err) {\n\t                    if (!subscriber.isUnsubscribed) {\n\t                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n\t                    }\n\t                })\n\t                    .then(null, function (err) {\n\t                    // escape the promise trap, throw unhandled errors\n\t                    root_1.root.setTimeout(function () { throw err; });\n\t                });\n\t            }\n\t        }\n\t    };\n\t    return PromiseObservable;\n\t}(Observable_1.Observable));\n\texports.PromiseObservable = PromiseObservable;\n\tfunction dispatchNext(arg) {\n\t    var value = arg.value, subscriber = arg.subscriber;\n\t    if (!subscriber.isUnsubscribed) {\n\t        subscriber.next(value);\n\t        subscriber.complete();\n\t    }\n\t}\n\tfunction dispatchError(arg) {\n\t    var err = arg.err, subscriber = arg.subscriber;\n\t    if (!subscriber.isUnsubscribed) {\n\t        subscriber.error(err);\n\t    }\n\t}\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar isObject_1 = __webpack_require__(15);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar isFunction_1 = __webpack_require__(12);\n\tvar iterator_1 = __webpack_require__(43);\n\tvar errorObject_1 = __webpack_require__(17);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar IteratorObservable = (function (_super) {\n\t    __extends(IteratorObservable, _super);\n\t    function IteratorObservable(iterator, project, thisArg, scheduler) {\n\t        _super.call(this);\n\t        if (iterator == null) {\n\t            throw new Error('iterator cannot be null.');\n\t        }\n\t        if (isObject_1.isObject(project)) {\n\t            this.thisArg = project;\n\t            this.scheduler = thisArg;\n\t        }\n\t        else if (isFunction_1.isFunction(project)) {\n\t            this.project = project;\n\t            this.thisArg = thisArg;\n\t            this.scheduler = scheduler;\n\t        }\n\t        else if (project != null) {\n\t            throw new Error('When provided, `project` must be a function.');\n\t        }\n\t        this.iterator = getIterator(iterator);\n\t    }\n\t    IteratorObservable.create = function (iterator, project, thisArg, scheduler) {\n\t        return new IteratorObservable(iterator, project, thisArg, scheduler);\n\t    };\n\t    IteratorObservable.dispatch = function (state) {\n\t        var index = state.index, hasError = state.hasError, thisArg = state.thisArg, project = state.project, iterator = state.iterator, subscriber = state.subscriber;\n\t        if (hasError) {\n\t            subscriber.error(state.error);\n\t            return;\n\t        }\n\t        var result = iterator.next();\n\t        if (result.done) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        if (project) {\n\t            result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index);\n\t            if (result === errorObject_1.errorObject) {\n\t                state.error = errorObject_1.errorObject.e;\n\t                state.hasError = true;\n\t            }\n\t            else {\n\t                subscriber.next(result);\n\t                state.index = index + 1;\n\t            }\n\t        }\n\t        else {\n\t            subscriber.next(result.value);\n\t            state.index = index + 1;\n\t        }\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        this.schedule(state);\n\t    };\n\t    IteratorObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var _a = this, iterator = _a.iterator, project = _a.project, thisArg = _a.thisArg, scheduler = _a.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n\t                index: index, thisArg: thisArg, project: project, iterator: iterator, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            do {\n\t                var result = iterator.next();\n\t                if (result.done) {\n\t                    subscriber.complete();\n\t                    break;\n\t                }\n\t                else if (project) {\n\t                    result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index++);\n\t                    if (result === errorObject_1.errorObject) {\n\t                        subscriber.error(errorObject_1.errorObject.e);\n\t                        break;\n\t                    }\n\t                    subscriber.next(result);\n\t                }\n\t                else {\n\t                    subscriber.next(result.value);\n\t                }\n\t                if (subscriber.isUnsubscribed) {\n\t                    break;\n\t                }\n\t            } while (true);\n\t        }\n\t    };\n\t    return IteratorObservable;\n\t}(Observable_1.Observable));\n\texports.IteratorObservable = IteratorObservable;\n\tvar StringIterator = (function () {\n\t    function StringIterator(str, idx, len) {\n\t        if (idx === void 0) { idx = 0; }\n\t        if (len === void 0) { len = str.length; }\n\t        this.str = str;\n\t        this.idx = idx;\n\t        this.len = len;\n\t    }\n\t    StringIterator.prototype[iterator_1.$$iterator] = function () { return (this); };\n\t    StringIterator.prototype.next = function () {\n\t        return this.idx < this.len ? {\n\t            done: false,\n\t            value: this.str.charAt(this.idx++)\n\t        } : {\n\t            done: true,\n\t            value: undefined\n\t        };\n\t    };\n\t    return StringIterator;\n\t}());\n\tvar ArrayIterator = (function () {\n\t    function ArrayIterator(arr, idx, len) {\n\t        if (idx === void 0) { idx = 0; }\n\t        if (len === void 0) { len = toLength(arr); }\n\t        this.arr = arr;\n\t        this.idx = idx;\n\t        this.len = len;\n\t    }\n\t    ArrayIterator.prototype[iterator_1.$$iterator] = function () { return this; };\n\t    ArrayIterator.prototype.next = function () {\n\t        return this.idx < this.len ? {\n\t            done: false,\n\t            value: this.arr[this.idx++]\n\t        } : {\n\t            done: true,\n\t            value: undefined\n\t        };\n\t    };\n\t    return ArrayIterator;\n\t}());\n\tfunction getIterator(obj) {\n\t    var i = obj[iterator_1.$$iterator];\n\t    if (!i && typeof obj === 'string') {\n\t        return new StringIterator(obj);\n\t    }\n\t    if (!i && obj.length !== undefined) {\n\t        return new ArrayIterator(obj);\n\t    }\n\t    if (!i) {\n\t        throw new TypeError('Object is not iterable');\n\t    }\n\t    return obj[iterator_1.$$iterator]();\n\t}\n\tvar maxSafeInteger = Math.pow(2, 53) - 1;\n\tfunction toLength(o) {\n\t    var len = +o.length;\n\t    if (isNaN(len)) {\n\t        return 0;\n\t    }\n\t    if (len === 0 || !numberIsFinite(len)) {\n\t        return len;\n\t    }\n\t    len = sign(len) * Math.floor(Math.abs(len));\n\t    if (len <= 0) {\n\t        return 0;\n\t    }\n\t    if (len > maxSafeInteger) {\n\t        return maxSafeInteger;\n\t    }\n\t    return len;\n\t}\n\tfunction numberIsFinite(value) {\n\t    return typeof value === 'number' && root_1.root.isFinite(value);\n\t}\n\tfunction sign(value) {\n\t    var valueAsNumber = +value;\n\t    if (valueAsNumber === 0) {\n\t        return valueAsNumber;\n\t    }\n\t    if (isNaN(valueAsNumber)) {\n\t        return valueAsNumber;\n\t    }\n\t    return valueAsNumber < 0 ? -1 : 1;\n\t}\n\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ScalarObservable_1 = __webpack_require__(37);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ArrayLikeObservable = (function (_super) {\n\t    __extends(ArrayLikeObservable, _super);\n\t    function ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler) {\n\t        _super.call(this);\n\t        this.arrayLike = arrayLike;\n\t        this.scheduler = scheduler;\n\t        if (!mapFn && !scheduler && arrayLike.length === 1) {\n\t            this._isScalar = true;\n\t            this.value = arrayLike[0];\n\t        }\n\t        if (mapFn) {\n\t            this.mapFn = mapFn.bind(thisArg);\n\t        }\n\t    }\n\t    ArrayLikeObservable.create = function (arrayLike, mapFn, thisArg, scheduler) {\n\t        var length = arrayLike.length;\n\t        if (length === 0) {\n\t            return new EmptyObservable_1.EmptyObservable();\n\t        }\n\t        else if (length === 1 && !mapFn) {\n\t            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n\t        }\n\t        else {\n\t            return new ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler);\n\t        }\n\t    };\n\t    ArrayLikeObservable.dispatch = function (state) {\n\t        var arrayLike = state.arrayLike, index = state.index, length = state.length, mapFn = state.mapFn, subscriber = state.subscriber;\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        if (index >= length) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        var result = mapFn ? mapFn(arrayLike[index], index) : arrayLike[index];\n\t        subscriber.next(result);\n\t        state.index = index + 1;\n\t        this.schedule(state);\n\t    };\n\t    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var _a = this, arrayLike = _a.arrayLike, mapFn = _a.mapFn, scheduler = _a.scheduler;\n\t        var length = arrayLike.length;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n\t                arrayLike: arrayLike, index: index, length: length, mapFn: mapFn, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            for (var i = 0; i < length && !subscriber.isUnsubscribed; i++) {\n\t                var result = mapFn ? mapFn(arrayLike[i], i) : arrayLike[i];\n\t                subscriber.next(result);\n\t            }\n\t            subscriber.complete();\n\t        }\n\t    };\n\t    return ArrayLikeObservable;\n\t}(Observable_1.Observable));\n\texports.ArrayLikeObservable = ArrayLikeObservable;\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Notification_1 = __webpack_require__(64);\n\t/**\n\t * @see {@link Notification}\n\t *\n\t * @param scheduler\n\t * @param delay\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method observeOn\n\t * @owner Observable\n\t */\n\tfunction observeOn(scheduler, delay) {\n\t    if (delay === void 0) { delay = 0; }\n\t    return this.lift(new ObserveOnOperator(scheduler, delay));\n\t}\n\texports.observeOn = observeOn;\n\tvar ObserveOnOperator = (function () {\n\t    function ObserveOnOperator(scheduler, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        this.scheduler = scheduler;\n\t        this.delay = delay;\n\t    }\n\t    ObserveOnOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n\t    };\n\t    return ObserveOnOperator;\n\t}());\n\texports.ObserveOnOperator = ObserveOnOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ObserveOnSubscriber = (function (_super) {\n\t    __extends(ObserveOnSubscriber, _super);\n\t    function ObserveOnSubscriber(destination, scheduler, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        _super.call(this, destination);\n\t        this.scheduler = scheduler;\n\t        this.delay = delay;\n\t    }\n\t    ObserveOnSubscriber.dispatch = function (arg) {\n\t        var notification = arg.notification, destination = arg.destination;\n\t        notification.observe(destination);\n\t    };\n\t    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n\t        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n\t    };\n\t    ObserveOnSubscriber.prototype._next = function (value) {\n\t        this.scheduleMessage(Notification_1.Notification.createNext(value));\n\t    };\n\t    ObserveOnSubscriber.prototype._error = function (err) {\n\t        this.scheduleMessage(Notification_1.Notification.createError(err));\n\t    };\n\t    ObserveOnSubscriber.prototype._complete = function () {\n\t        this.scheduleMessage(Notification_1.Notification.createComplete());\n\t    };\n\t    return ObserveOnSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.ObserveOnSubscriber = ObserveOnSubscriber;\n\tvar ObserveOnMessage = (function () {\n\t    function ObserveOnMessage(notification, destination) {\n\t        this.notification = notification;\n\t        this.destination = destination;\n\t    }\n\t    return ObserveOnMessage;\n\t}());\n\texports.ObserveOnMessage = ObserveOnMessage;\n\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * Represents a push-based event or value that an {@link Observable} can emit.\n\t * This class is particularly useful for operators that manage notifications,\n\t * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n\t * others. Besides wrapping the actual delivered value, it also annotates it\n\t * with metadata of, for instance, what type of push message it is (`next`,\n\t * `error`, or `complete`).\n\t *\n\t * @see {@link materialize}\n\t * @see {@link dematerialize}\n\t * @see {@link observeOn}\n\t *\n\t * @class Notification<T>\n\t */\n\tvar Notification = (function () {\n\t    function Notification(kind, value, exception) {\n\t        this.kind = kind;\n\t        this.value = value;\n\t        this.exception = exception;\n\t        this.hasValue = kind === 'N';\n\t    }\n\t    /**\n\t     * Delivers to the given `observer` the value wrapped by this Notification.\n\t     * @param {Observer} observer\n\t     * @return\n\t     */\n\t    Notification.prototype.observe = function (observer) {\n\t        switch (this.kind) {\n\t            case 'N':\n\t                return observer.next && observer.next(this.value);\n\t            case 'E':\n\t                return observer.error && observer.error(this.exception);\n\t            case 'C':\n\t                return observer.complete && observer.complete();\n\t        }\n\t    };\n\t    /**\n\t     * Given some {@link Observer} callbacks, deliver the value represented by the\n\t     * current Notification to the correctly corresponding callback.\n\t     * @param {function(value: T): void} next An Observer `next` callback.\n\t     * @param {function(err: any): void} [error] An Observer `error` callback.\n\t     * @param {function(): void} [complete] An Observer `complete` callback.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.do = function (next, error, complete) {\n\t        var kind = this.kind;\n\t        switch (kind) {\n\t            case 'N':\n\t                return next && next(this.value);\n\t            case 'E':\n\t                return error && error(this.exception);\n\t            case 'C':\n\t                return complete && complete();\n\t        }\n\t    };\n\t    /**\n\t     * Takes an Observer or its individual callback functions, and calls `observe`\n\t     * or `do` methods accordingly.\n\t     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n\t     * the `next` callback.\n\t     * @param {function(err: any): void} [error] An Observer `error` callback.\n\t     * @param {function(): void} [complete] An Observer `complete` callback.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n\t        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n\t            return this.observe(nextOrObserver);\n\t        }\n\t        else {\n\t            return this.do(nextOrObserver, error, complete);\n\t        }\n\t    };\n\t    /**\n\t     * Returns a simple Observable that just delivers the notification represented\n\t     * by this Notification instance.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.toObservable = function () {\n\t        var kind = this.kind;\n\t        switch (kind) {\n\t            case 'N':\n\t                return Observable_1.Observable.of(this.value);\n\t            case 'E':\n\t                return Observable_1.Observable.throw(this.exception);\n\t            case 'C':\n\t                return Observable_1.Observable.empty();\n\t        }\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `next` from a\n\t     * given value.\n\t     * @param {T} value The `next` value.\n\t     * @return {Notification<T>} The \"next\" Notification representing the\n\t     * argument.\n\t     */\n\t    Notification.createNext = function (value) {\n\t        if (typeof value !== 'undefined') {\n\t            return new Notification('N', value);\n\t        }\n\t        return this.undefinedValueNotification;\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `error` from a\n\t     * given error.\n\t     * @param {any} [err] The `error` exception.\n\t     * @return {Notification<T>} The \"error\" Notification representing the\n\t     * argument.\n\t     */\n\t    Notification.createError = function (err) {\n\t        return new Notification('E', undefined, err);\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `complete`.\n\t     * @return {Notification<any>} The valueless \"complete\" Notification.\n\t     */\n\t    Notification.createComplete = function () {\n\t        return this.completeNotification;\n\t    };\n\t    Notification.completeNotification = new Notification('C');\n\t    Notification.undefinedValueNotification = new Notification('N', undefined);\n\t    return Notification;\n\t}());\n\texports.Notification = Notification;\n\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar fromEvent_1 = __webpack_require__(66);\n\tObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar FromEventObservable_1 = __webpack_require__(67);\n\texports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar Subscription_1 = __webpack_require__(13);\n\tfunction isNodeStyleEventEmmitter(sourceObj) {\n\t    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n\t}\n\tfunction isJQueryStyleEventEmitter(sourceObj) {\n\t    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n\t}\n\tfunction isNodeList(sourceObj) {\n\t    return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n\t}\n\tfunction isHTMLCollection(sourceObj) {\n\t    return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n\t}\n\tfunction isEventTarget(sourceObj) {\n\t    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n\t}\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar FromEventObservable = (function (_super) {\n\t    __extends(FromEventObservable, _super);\n\t    function FromEventObservable(sourceObj, eventName, selector) {\n\t        _super.call(this);\n\t        this.sourceObj = sourceObj;\n\t        this.eventName = eventName;\n\t        this.selector = selector;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits events of a specific type coming from the\n\t     * given event target.\n\t     *\n\t     * <span class=\"informal\">Creates an Observable from DOM events, or Node\n\t     * EventEmitter events or others.</span>\n\t     *\n\t     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n\t     *\n\t     * Creates an Observable by attaching an event listener to an \"event target\",\n\t     * which may be an object with `addEventListener` and `removeEventListener`,\n\t     * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n\t     * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n\t     * the output Observable is subscribed, and removed when the Subscription is\n\t     * unsubscribed.\n\t     *\n\t     * @example <caption>Emits clicks happening on the DOM document</caption>\n\t     * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t     * clicks.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link from}\n\t     * @see {@link fromEventPattern}\n\t     *\n\t     * @param {EventTargetLike} target The DOMElement, event target, Node.js\n\t     * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n\t     * @param {string} eventName The event name of interest, being emitted by the\n\t     * `target`.\n\t     * @param {function(...args: any): T} [selector] An optional function to\n\t     * post-process results. It takes the arguments from the event handler and\n\t     * should return a single value.\n\t     * @return {Observable<T>}\n\t     * @static true\n\t     * @name fromEvent\n\t     * @owner Observable\n\t     */\n\t    FromEventObservable.create = function (target, eventName, selector) {\n\t        return new FromEventObservable(target, eventName, selector);\n\t    };\n\t    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber) {\n\t        var unsubscribe;\n\t        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n\t            for (var i = 0, len = sourceObj.length; i < len; i++) {\n\t                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber);\n\t            }\n\t        }\n\t        else if (isEventTarget(sourceObj)) {\n\t            var source_1 = sourceObj;\n\t            sourceObj.addEventListener(eventName, handler);\n\t            unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };\n\t        }\n\t        else if (isJQueryStyleEventEmitter(sourceObj)) {\n\t            var source_2 = sourceObj;\n\t            sourceObj.on(eventName, handler);\n\t            unsubscribe = function () { return source_2.off(eventName, handler); };\n\t        }\n\t        else if (isNodeStyleEventEmmitter(sourceObj)) {\n\t            var source_3 = sourceObj;\n\t            sourceObj.addListener(eventName, handler);\n\t            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n\t        }\n\t        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n\t    };\n\t    FromEventObservable.prototype._subscribe = function (subscriber) {\n\t        var sourceObj = this.sourceObj;\n\t        var eventName = this.eventName;\n\t        var selector = this.selector;\n\t        var handler = selector ? function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n\t            if (result === errorObject_1.errorObject) {\n\t                subscriber.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                subscriber.next(result);\n\t            }\n\t        } : function (e) { return subscriber.next(e); };\n\t        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber);\n\t    };\n\t    return FromEventObservable;\n\t}(Observable_1.Observable));\n\texports.FromEventObservable = FromEventObservable;\n\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar fromEventPattern_1 = __webpack_require__(69);\n\tObservable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;\n\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar FromEventPatternObservable_1 = __webpack_require__(70);\n\texports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;\n\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar FromEventPatternObservable = (function (_super) {\n\t    __extends(FromEventPatternObservable, _super);\n\t    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n\t        _super.call(this);\n\t        this.addHandler = addHandler;\n\t        this.removeHandler = removeHandler;\n\t        this.selector = selector;\n\t    }\n\t    /**\n\t     * Creates an Observable from an API based on addHandler/removeHandler\n\t     * functions.\n\t     *\n\t     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n\t     * Observable.</span>\n\t     *\n\t     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n\t     *\n\t     * Creates an Observable by using the `addHandler` and `removeHandler`\n\t     * functions to add and remove the handlers, with an optional selector\n\t     * function to project the event arguments to a result. The `addHandler` is\n\t     * called when the output Observable is subscribed, and `removeHandler` is\n\t     * called when the Subscription is unsubscribed.\n\t     *\n\t     * @example <caption>Emits clicks happening on the DOM document</caption>\n\t     * function addClickHandler(handler) {\n\t     *   document.addEventListener('click', handler);\n\t     * }\n\t     *\n\t     * function removeClickHandler(handler) {\n\t     *   document.removeEventListener('click', handler);\n\t     * }\n\t     *\n\t     * var clicks = Rx.Observable.fromEventPattern(\n\t     *   addClickHandler,\n\t     *   removeClickHandler\n\t     * );\n\t     * clicks.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link from}\n\t     * @see {@link fromEvent}\n\t     *\n\t     * @param {function(handler: Function): any} addHandler A function that takes\n\t     * a `handler` function as argument and attaches it somehow to the actual\n\t     * source of events.\n\t     * @param {function(handler: Function): void} removeHandler A function that\n\t     * takes a `handler` function as argument and removes it in case it was\n\t     * previously attached using `addHandler`.\n\t     * @param {function(...args: any): T} [selector] An optional function to\n\t     * post-process results. It takes the arguments from the event handler and\n\t     * should return a single value.\n\t     * @return {Observable<T>}\n\t     * @static true\n\t     * @name fromEventPattern\n\t     * @owner Observable\n\t     */\n\t    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n\t        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n\t    };\n\t    FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n\t        var _this = this;\n\t        var removeHandler = this.removeHandler;\n\t        var handler = !!this.selector ? function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            _this._callSelector(subscriber, args);\n\t        } : function (e) { subscriber.next(e); };\n\t        this._callAddHandler(handler, subscriber);\n\t        subscriber.add(new Subscription_1.Subscription(function () {\n\t            //TODO: determine whether or not to forward to error handler\n\t            removeHandler(handler);\n\t        }));\n\t    };\n\t    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n\t        try {\n\t            var result = this.selector.apply(this, args);\n\t            subscriber.next(result);\n\t        }\n\t        catch (e) {\n\t            subscriber.error(e);\n\t        }\n\t    };\n\t    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n\t        try {\n\t            this.addHandler(handler);\n\t        }\n\t        catch (e) {\n\t            errorSubscriber.error(e);\n\t        }\n\t    };\n\t    return FromEventPatternObservable;\n\t}(Observable_1.Observable));\n\texports.FromEventPatternObservable = FromEventPatternObservable;\n\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar fromPromise_1 = __webpack_require__(72);\n\tObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n\n\n/***/ },\n/* 72 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar PromiseObservable_1 = __webpack_require__(60);\n\texports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n\n\n/***/ },\n/* 73 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar GenerateObservable_1 = __webpack_require__(74);\n\tObservable_1.Observable.generate = GenerateObservable_1.GenerateObservable.create;\n\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar isScheduler_1 = __webpack_require__(35);\n\tvar selfSelector = function (value) { return value; };\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar GenerateObservable = (function (_super) {\n\t    __extends(GenerateObservable, _super);\n\t    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n\t        _super.call(this);\n\t        this.initialState = initialState;\n\t        this.condition = condition;\n\t        this.iterate = iterate;\n\t        this.resultSelector = resultSelector;\n\t        this.scheduler = scheduler;\n\t    }\n\t    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n\t        if (arguments.length == 1) {\n\t            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n\t        }\n\t        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {\n\t            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n\t        }\n\t        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n\t    };\n\t    GenerateObservable.prototype._subscribe = function (subscriber) {\n\t        var state = this.initialState;\n\t        if (this.scheduler) {\n\t            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n\t                subscriber: subscriber,\n\t                iterate: this.iterate,\n\t                condition: this.condition,\n\t                resultSelector: this.resultSelector,\n\t                state: state });\n\t        }\n\t        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n\t        do {\n\t            if (condition) {\n\t                var conditionResult = void 0;\n\t                try {\n\t                    conditionResult = condition(state);\n\t                }\n\t                catch (err) {\n\t                    subscriber.error(err);\n\t                    return;\n\t                }\n\t                if (!conditionResult) {\n\t                    subscriber.complete();\n\t                    break;\n\t                }\n\t            }\n\t            var value = void 0;\n\t            try {\n\t                value = resultSelector(state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t            subscriber.next(value);\n\t            if (subscriber.isUnsubscribed) {\n\t                break;\n\t            }\n\t            try {\n\t                state = iterate(state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t        } while (true);\n\t    };\n\t    GenerateObservable.dispatch = function (state) {\n\t        var subscriber = state.subscriber, condition = state.condition;\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        if (state.needIterate) {\n\t            try {\n\t                state.state = state.iterate(state.state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t        }\n\t        else {\n\t            state.needIterate = true;\n\t        }\n\t        if (condition) {\n\t            var conditionResult = void 0;\n\t            try {\n\t                conditionResult = condition(state.state);\n\t            }\n\t            catch (err) {\n\t                subscriber.error(err);\n\t                return;\n\t            }\n\t            if (!conditionResult) {\n\t                subscriber.complete();\n\t                return;\n\t            }\n\t            if (subscriber.isUnsubscribed) {\n\t                return;\n\t            }\n\t        }\n\t        var value;\n\t        try {\n\t            value = state.resultSelector(state.state);\n\t        }\n\t        catch (err) {\n\t            subscriber.error(err);\n\t            return;\n\t        }\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        subscriber.next(value);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        return this.schedule(state);\n\t    };\n\t    return GenerateObservable;\n\t}(Observable_1.Observable));\n\texports.GenerateObservable = GenerateObservable;\n\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar if_1 = __webpack_require__(76);\n\tObservable_1.Observable.if = if_1._if;\n\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar IfObservable_1 = __webpack_require__(77);\n\texports._if = IfObservable_1.IfObservable.create;\n\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar IfObservable = (function (_super) {\n\t    __extends(IfObservable, _super);\n\t    function IfObservable(condition, thenSource, elseSource) {\n\t        _super.call(this);\n\t        this.condition = condition;\n\t        this.thenSource = thenSource;\n\t        this.elseSource = elseSource;\n\t    }\n\t    IfObservable.create = function (condition, thenSource, elseSource) {\n\t        return new IfObservable(condition, thenSource, elseSource);\n\t    };\n\t    IfObservable.prototype._subscribe = function (subscriber) {\n\t        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n\t        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n\t    };\n\t    return IfObservable;\n\t}(Observable_1.Observable));\n\texports.IfObservable = IfObservable;\n\tvar IfSubscriber = (function (_super) {\n\t    __extends(IfSubscriber, _super);\n\t    function IfSubscriber(destination, condition, thenSource, elseSource) {\n\t        _super.call(this, destination);\n\t        this.condition = condition;\n\t        this.thenSource = thenSource;\n\t        this.elseSource = elseSource;\n\t        this.tryIf();\n\t    }\n\t    IfSubscriber.prototype.tryIf = function () {\n\t        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n\t        var result;\n\t        try {\n\t            result = condition();\n\t            var source = result ? thenSource : elseSource;\n\t            if (source) {\n\t                this.add(subscribeToResult_1.subscribeToResult(this, source));\n\t            }\n\t            else {\n\t                this._complete();\n\t            }\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    return IfSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar interval_1 = __webpack_require__(79);\n\tObservable_1.Observable.interval = interval_1.interval;\n\n\n/***/ },\n/* 79 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar IntervalObservable_1 = __webpack_require__(80);\n\texports.interval = IntervalObservable_1.IntervalObservable.create;\n\n\n/***/ },\n/* 80 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isNumeric_1 = __webpack_require__(81);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar IntervalObservable = (function (_super) {\n\t    __extends(IntervalObservable, _super);\n\t    function IntervalObservable(period, scheduler) {\n\t        if (period === void 0) { period = 0; }\n\t        if (scheduler === void 0) { scheduler = async_1.async; }\n\t        _super.call(this);\n\t        this.period = period;\n\t        this.scheduler = scheduler;\n\t        if (!isNumeric_1.isNumeric(period) || period < 0) {\n\t            this.period = 0;\n\t        }\n\t        if (!scheduler || typeof scheduler.schedule !== 'function') {\n\t            this.scheduler = async_1.async;\n\t        }\n\t    }\n\t    /**\n\t     * Creates an Observable that emits sequential numbers every specified\n\t     * interval of time, on a specified Scheduler.\n\t     *\n\t     * <span class=\"informal\">Emits incremental numbers periodically in time.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/interval.png\" width=\"100%\">\n\t     *\n\t     * `interval` returns an Observable that emits an infinite sequence of\n\t     * ascending integers, with a constant interval of time of your choosing\n\t     * between those emissions. The first emission is not sent immediately, but\n\t     * only after the first period has passed. By default, this operator uses the\n\t     * `async` Scheduler to provide a notion of time, but you may pass any\n\t     * Scheduler to it.\n\t     *\n\t     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n\t     * var numbers = Rx.Observable.interval(1000);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link timer}\n\t     * @see {@link delay}\n\t     *\n\t     * @param {number} [period=0] The interval size in milliseconds (by default)\n\t     * or the time unit determined by the scheduler's clock.\n\t     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n\t     * the emission of values, and providing a notion of \"time\".\n\t     * @return {Observable} An Observable that emits a sequential number each time\n\t     * interval.\n\t     * @static true\n\t     * @name interval\n\t     * @owner Observable\n\t     */\n\t    IntervalObservable.create = function (period, scheduler) {\n\t        if (period === void 0) { period = 0; }\n\t        if (scheduler === void 0) { scheduler = async_1.async; }\n\t        return new IntervalObservable(period, scheduler);\n\t    };\n\t    IntervalObservable.dispatch = function (state) {\n\t        var index = state.index, subscriber = state.subscriber, period = state.period;\n\t        subscriber.next(index);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        state.index += 1;\n\t        this.schedule(state, period);\n\t    };\n\t    IntervalObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var period = this.period;\n\t        var scheduler = this.scheduler;\n\t        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n\t            index: index, subscriber: subscriber, period: period\n\t        }));\n\t    };\n\t    return IntervalObservable;\n\t}(Observable_1.Observable));\n\texports.IntervalObservable = IntervalObservable;\n\n\n/***/ },\n/* 81 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isArray_1 = __webpack_require__(14);\n\tfunction isNumeric(val) {\n\t    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t    // subtraction forces infinities to NaN\n\t    // adding 1 corrects loss of precision from parseFloat (#15100)\n\t    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n\t}\n\texports.isNumeric = isNumeric;\n\t;\n\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AsyncScheduler_1 = __webpack_require__(83);\n\texports.async = new AsyncScheduler_1.AsyncScheduler();\n\n\n/***/ },\n/* 83 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar FutureAction_1 = __webpack_require__(84);\n\tvar QueueScheduler_1 = __webpack_require__(85);\n\tvar AsyncScheduler = (function (_super) {\n\t    __extends(AsyncScheduler, _super);\n\t    function AsyncScheduler() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AsyncScheduler.prototype.scheduleNow = function (work, state) {\n\t        return new FutureAction_1.FutureAction(this, work).schedule(state, 0);\n\t    };\n\t    return AsyncScheduler;\n\t}(QueueScheduler_1.QueueScheduler));\n\texports.AsyncScheduler = AsyncScheduler;\n\n\n/***/ },\n/* 84 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FutureAction = (function (_super) {\n\t    __extends(FutureAction, _super);\n\t    function FutureAction(scheduler, work) {\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t        this.pending = false;\n\t    }\n\t    FutureAction.prototype.execute = function () {\n\t        if (this.isUnsubscribed) {\n\t            this.error = new Error('executing a cancelled action');\n\t        }\n\t        else {\n\t            try {\n\t                this.work(this.state);\n\t            }\n\t            catch (e) {\n\t                this.unsubscribe();\n\t                this.error = e;\n\t            }\n\t        }\n\t    };\n\t    FutureAction.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (this.isUnsubscribed) {\n\t            return this;\n\t        }\n\t        return this._schedule(state, delay);\n\t    };\n\t    FutureAction.prototype._schedule = function (state, delay) {\n\t        var _this = this;\n\t        if (delay === void 0) { delay = 0; }\n\t        // Always replace the current state with the new state.\n\t        this.state = state;\n\t        // Set the pending flag indicating that this action has been scheduled, or\n\t        // has recursively rescheduled itself.\n\t        this.pending = true;\n\t        var id = this.id;\n\t        // If this action has an intervalID and the specified delay matches the\n\t        // delay we used to create the intervalID, don't call `setInterval` again.\n\t        if (id != null && this.delay === delay) {\n\t            return this;\n\t        }\n\t        this.delay = delay;\n\t        // If this action has an intervalID, but was rescheduled with a different\n\t        // `delay` time, cancel the current intervalID and call `setInterval` with\n\t        // the new `delay` time.\n\t        if (id != null) {\n\t            this.id = null;\n\t            root_1.root.clearInterval(id);\n\t        }\n\t        //\n\t        // Important implementation note:\n\t        //\n\t        // By default, FutureAction only executes once. However, Actions have the\n\t        // ability to be rescheduled from within the scheduled callback (mimicking\n\t        // recursion for asynchronous methods). This allows us to implement single\n\t        // and repeated actions with the same code path without adding API surface\n\t        // area, and implement tail-call optimization over asynchronous boundaries.\n\t        //\n\t        // However, JS runtimes make a distinction between intervals scheduled by\n\t        // repeatedly calling `setTimeout` vs. a single `setInterval` call, with\n\t        // the latter providing a better guarantee of precision.\n\t        //\n\t        // In order to accommodate both single and repeatedly rescheduled actions,\n\t        // use `setInterval` here for both cases. By default, the interval will be\n\t        // canceled after its first execution, or if the action schedules itself to\n\t        // run again with a different `delay` time.\n\t        //\n\t        // If the action recursively schedules itself to run again with the same\n\t        // `delay` time, the interval is not canceled, but allowed to loop again.\n\t        // The check of whether the interval should be canceled or not is run every\n\t        // time the interval is executed. The first time an action fails to\n\t        // reschedule itself, the interval is canceled.\n\t        //\n\t        this.id = root_1.root.setInterval(function () {\n\t            _this.pending = false;\n\t            var _a = _this, id = _a.id, scheduler = _a.scheduler;\n\t            scheduler.actions.push(_this);\n\t            scheduler.flush();\n\t            //\n\t            // Terminate this interval if the action didn't reschedule itself.\n\t            // Don't call `this.unsubscribe()` here, because the action could be\n\t            // rescheduled later. For example:\n\t            //\n\t            // ```\n\t            // scheduler.schedule(function doWork(counter) {\n\t            //   /* ... I'm a busy worker bee ... */\n\t            //   var originalAction = this;\n\t            //   /* wait 100ms before rescheduling this action again */\n\t            //   setTimeout(function () {\n\t            //     originalAction.schedule(counter + 1);\n\t            //   }, 100);\n\t            // }, 1000);\n\t            // ```\n\t            if (_this.pending === false && id != null) {\n\t                _this.id = null;\n\t                root_1.root.clearInterval(id);\n\t            }\n\t        }, delay);\n\t        return this;\n\t    };\n\t    FutureAction.prototype._unsubscribe = function () {\n\t        this.pending = false;\n\t        var _a = this, id = _a.id, scheduler = _a.scheduler;\n\t        var actions = scheduler.actions;\n\t        var index = actions.indexOf(this);\n\t        if (id != null) {\n\t            this.id = null;\n\t            root_1.root.clearInterval(id);\n\t        }\n\t        if (index !== -1) {\n\t            actions.splice(index, 1);\n\t        }\n\t        this.work = null;\n\t        this.state = null;\n\t        this.scheduler = null;\n\t    };\n\t    return FutureAction;\n\t}(Subscription_1.Subscription));\n\texports.FutureAction = FutureAction;\n\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar QueueAction_1 = __webpack_require__(86);\n\tvar FutureAction_1 = __webpack_require__(84);\n\tvar QueueScheduler = (function () {\n\t    function QueueScheduler() {\n\t        this.active = false;\n\t        this.actions = []; // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n\t        this.scheduledId = null;\n\t    }\n\t    QueueScheduler.prototype.now = function () {\n\t        return Date.now();\n\t    };\n\t    QueueScheduler.prototype.flush = function () {\n\t        if (this.active || this.scheduledId) {\n\t            return;\n\t        }\n\t        this.active = true;\n\t        var actions = this.actions;\n\t        // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n\t        for (var action = null; action = actions.shift();) {\n\t            action.execute();\n\t            if (action.error) {\n\t                this.active = false;\n\t                throw action.error;\n\t            }\n\t        }\n\t        this.active = false;\n\t    };\n\t    QueueScheduler.prototype.schedule = function (work, delay, state) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return (delay <= 0) ?\n\t            this.scheduleNow(work, state) :\n\t            this.scheduleLater(work, delay, state);\n\t    };\n\t    QueueScheduler.prototype.scheduleNow = function (work, state) {\n\t        return new QueueAction_1.QueueAction(this, work).schedule(state);\n\t    };\n\t    QueueScheduler.prototype.scheduleLater = function (work, delay, state) {\n\t        return new FutureAction_1.FutureAction(this, work).schedule(state, delay);\n\t    };\n\t    return QueueScheduler;\n\t}());\n\texports.QueueScheduler = QueueScheduler;\n\n\n/***/ },\n/* 86 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar FutureAction_1 = __webpack_require__(84);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar QueueAction = (function (_super) {\n\t    __extends(QueueAction, _super);\n\t    function QueueAction() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    QueueAction.prototype._schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (delay > 0) {\n\t            return _super.prototype._schedule.call(this, state, delay);\n\t        }\n\t        this.delay = delay;\n\t        this.state = state;\n\t        var scheduler = this.scheduler;\n\t        scheduler.actions.push(this);\n\t        scheduler.flush();\n\t        return this;\n\t    };\n\t    return QueueAction;\n\t}(FutureAction_1.FutureAction));\n\texports.QueueAction = QueueAction;\n\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar merge_1 = __webpack_require__(88);\n\tObservable_1.Observable.merge = merge_1.merge;\n\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar merge_1 = __webpack_require__(89);\n\texports.merge = merge_1.mergeStatic;\n\n\n/***/ },\n/* 89 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar mergeAll_1 = __webpack_require__(48);\n\tvar isScheduler_1 = __webpack_require__(35);\n\t/**\n\t * Creates an output Observable which concurrently emits all values from every\n\t * given input Observable.\n\t *\n\t * <span class=\"informal\">Flattens multiple Observables together by blending\n\t * their values into one Observable.</span>\n\t *\n\t * <img src=\"./img/merge.png\" width=\"100%\">\n\t *\n\t * `merge` subscribes to each given input Observable (either the source or an\n\t * Observable given as argument), and simply forwards (without doing any\n\t * transformation) all the values from all the input Observables to the output\n\t * Observable. The output Observable only completes once all input Observables\n\t * have completed. Any error delivered by an input Observable will be immediately\n\t * emitted on the output Observable.\n\t *\n\t * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var timer = Rx.Observable.interval(1000);\n\t * var clicksOrTimer = clicks.merge(timer);\n\t * clicksOrTimer.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var concurrent = 2; // the argument\n\t * var merged = timer1.merge(timer2, timer3, concurrent);\n\t * merged.subscribe(x => console.log(x));\n\t *\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t *\n\t * @param {Observable} other An input Observable to merge with the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n\t * concurrency of input Observables.\n\t * @return {Observable} an Observable that emits items that are the result of\n\t * every input Observable.\n\t * @method merge\n\t * @owner Observable\n\t */\n\tfunction merge() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    observables.unshift(this);\n\t    return mergeStatic.apply(this, observables);\n\t}\n\texports.merge = merge;\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * Creates an output Observable which concurrently emits all values from every\n\t * given input Observable.\n\t *\n\t * <span class=\"informal\">Flattens multiple Observables together by blending\n\t * their values into one Observable.</span>\n\t *\n\t * <img src=\"./img/merge.png\" width=\"100%\">\n\t *\n\t * `merge` subscribes to each given input Observable (as arguments), and simply\n\t * forwards (without doing any transformation) all the values from all the input\n\t * Observables to the output Observable. The output Observable only completes\n\t * once all input Observables have completed. Any error delivered by an input\n\t * Observable will be immediately emitted on the output Observable.\n\t *\n\t * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var timer = Rx.Observable.interval(1000);\n\t * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n\t * clicksOrTimer.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n\t * var timer1 = Rx.Observable.interval(1000).take(10);\n\t * var timer2 = Rx.Observable.interval(2000).take(6);\n\t * var timer3 = Rx.Observable.interval(500).take(10);\n\t * var concurrent = 2; // the argument\n\t * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n\t * merged.subscribe(x => console.log(x));\n\t *\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t *\n\t * @param {Observable} input1 An input Observable to merge with others.\n\t * @param {Observable} input2 An input Observable to merge with others.\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n\t * concurrency of input Observables.\n\t * @return {Observable} an Observable that emits items that are the result of\n\t * every input Observable.\n\t * @static true\n\t * @name merge\n\t * @owner Observable\n\t */\n\tfunction mergeStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var concurrent = Number.POSITIVE_INFINITY;\n\t    var scheduler = null;\n\t    var last = observables[observables.length - 1];\n\t    if (isScheduler_1.isScheduler(last)) {\n\t        scheduler = observables.pop();\n\t        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n\t            concurrent = observables.pop();\n\t        }\n\t    }\n\t    else if (typeof last === 'number') {\n\t        concurrent = observables.pop();\n\t    }\n\t    if (observables.length === 1) {\n\t        return observables[0];\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));\n\t}\n\texports.mergeStatic = mergeStatic;\n\n\n/***/ },\n/* 90 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar race_1 = __webpack_require__(91);\n\tObservable_1.Observable.race = race_1.raceStatic;\n\n\n/***/ },\n/* 91 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isArray_1 = __webpack_require__(14);\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Returns an Observable that mirrors the first source Observable to emit an item\n\t * from the combination of this Observable and supplied Observables\n\t * @param {...Observables} ...observables sources used to race for which Observable emits first.\n\t * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n\t * @method race\n\t * @owner Observable\n\t */\n\tfunction race() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    // if the only argument is an array, it was most likely called with\n\t    // `pair([obs1, obs2, ...])`\n\t    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n\t        observables = observables[0];\n\t    }\n\t    observables.unshift(this);\n\t    return raceStatic.apply(this, observables);\n\t}\n\texports.race = race;\n\tfunction raceStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    // if the only argument is an array, it was most likely called with\n\t    // `pair([obs1, obs2, ...])`\n\t    if (observables.length === 1) {\n\t        if (isArray_1.isArray(observables[0])) {\n\t            observables = observables[0];\n\t        }\n\t        else {\n\t            return observables[0];\n\t        }\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n\t}\n\texports.raceStatic = raceStatic;\n\tvar RaceOperator = (function () {\n\t    function RaceOperator() {\n\t    }\n\t    RaceOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RaceSubscriber(subscriber));\n\t    };\n\t    return RaceOperator;\n\t}());\n\texports.RaceOperator = RaceOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RaceSubscriber = (function (_super) {\n\t    __extends(RaceSubscriber, _super);\n\t    function RaceSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.hasFirst = false;\n\t        this.observables = [];\n\t        this.subscriptions = [];\n\t    }\n\t    RaceSubscriber.prototype._next = function (observable) {\n\t        this.observables.push(observable);\n\t    };\n\t    RaceSubscriber.prototype._complete = function () {\n\t        var observables = this.observables;\n\t        var len = observables.length;\n\t        if (len === 0) {\n\t            this.destination.complete();\n\t        }\n\t        else {\n\t            for (var i = 0; i < len; i++) {\n\t                var observable = observables[i];\n\t                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n\t                if (this.subscriptions) {\n\t                    this.subscriptions.push(subscription);\n\t                    this.add(subscription);\n\t                }\n\t            }\n\t            this.observables = null;\n\t        }\n\t    };\n\t    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (!this.hasFirst) {\n\t            this.hasFirst = true;\n\t            for (var i = 0; i < this.subscriptions.length; i++) {\n\t                if (i !== outerIndex) {\n\t                    var subscription = this.subscriptions[i];\n\t                    subscription.unsubscribe();\n\t                    this.remove(subscription);\n\t                }\n\t            }\n\t            this.subscriptions = null;\n\t        }\n\t        this.destination.next(innerValue);\n\t    };\n\t    return RaceSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.RaceSubscriber = RaceSubscriber;\n\n\n/***/ },\n/* 92 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar never_1 = __webpack_require__(93);\n\tObservable_1.Observable.never = never_1.never;\n\n\n/***/ },\n/* 93 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar NeverObservable_1 = __webpack_require__(94);\n\texports.never = NeverObservable_1.NeverObservable.create;\n\n\n/***/ },\n/* 94 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar noop_1 = __webpack_require__(95);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar NeverObservable = (function (_super) {\n\t    __extends(NeverObservable, _super);\n\t    function NeverObservable() {\n\t        _super.call(this);\n\t    }\n\t    /**\n\t     * Creates an Observable that emits no items to the Observer.\n\t     *\n\t     * <span class=\"informal\">An Observable that never emits anything.</span>\n\t     *\n\t     * <img src=\"./img/never.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that emits\n\t     * neither values nor errors nor the completion notification. It can be used\n\t     * for testing purposes or for composing with other Observables. Please not\n\t     * that by never emitting a complete notification, this Observable keeps the\n\t     * subscription from being disposed automatically. Subscriptions need to be\n\t     * manually disposed.\n\t     *\n\t     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n\t     * function info() {\n\t     *   console.log('Will not be called');\n\t     * }\n\t     * var result = Rx.Observable.never().startWith(7);\n\t     * result.subscribe(x => console.log(x), info, info);\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link empty}\n\t     * @see {@link of}\n\t     * @see {@link throw}\n\t     *\n\t     * @return {Observable} A \"never\" Observable: never emits anything.\n\t     * @static true\n\t     * @name never\n\t     * @owner Observable\n\t     */\n\t    NeverObservable.create = function () {\n\t        return new NeverObservable();\n\t    };\n\t    NeverObservable.prototype._subscribe = function (subscriber) {\n\t        noop_1.noop();\n\t    };\n\t    return NeverObservable;\n\t}(Observable_1.Observable));\n\texports.NeverObservable = NeverObservable;\n\n\n/***/ },\n/* 95 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/* tslint:disable:no-empty */\n\tfunction noop() { }\n\texports.noop = noop;\n\n\n/***/ },\n/* 96 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar of_1 = __webpack_require__(97);\n\tObservable_1.Observable.of = of_1.of;\n\n\n/***/ },\n/* 97 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\texports.of = ArrayObservable_1.ArrayObservable.of;\n\n\n/***/ },\n/* 98 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar onErrorResumeNext_1 = __webpack_require__(99);\n\tObservable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;\n\n\n/***/ },\n/* 99 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar FromObservable_1 = __webpack_require__(59);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tfunction onErrorResumeNext() {\n\t    var nextSources = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        nextSources[_i - 0] = arguments[_i];\n\t    }\n\t    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n\t        nextSources = nextSources[0];\n\t    }\n\t    return this.lift(new OnErrorResumeNextOperator(nextSources));\n\t}\n\texports.onErrorResumeNext = onErrorResumeNext;\n\t/* tslint:enable:max-line-length */\n\tfunction onErrorResumeNextStatic() {\n\t    var nextSources = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        nextSources[_i - 0] = arguments[_i];\n\t    }\n\t    var source = null;\n\t    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n\t        nextSources = nextSources[0];\n\t    }\n\t    source = nextSources.shift();\n\t    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n\t}\n\texports.onErrorResumeNextStatic = onErrorResumeNextStatic;\n\tvar OnErrorResumeNextOperator = (function () {\n\t    function OnErrorResumeNextOperator(nextSources) {\n\t        this.nextSources = nextSources;\n\t    }\n\t    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n\t    };\n\t    return OnErrorResumeNextOperator;\n\t}());\n\tvar OnErrorResumeNextSubscriber = (function (_super) {\n\t    __extends(OnErrorResumeNextSubscriber, _super);\n\t    function OnErrorResumeNextSubscriber(destination, nextSources) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.nextSources = nextSources;\n\t    }\n\t    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype._complete = function () {\n\t        this.subscribeToNextSource();\n\t    };\n\t    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n\t        var next = this.nextSources.shift();\n\t        if (next) {\n\t            this.add(subscribeToResult_1.subscribeToResult(this, next));\n\t        }\n\t        else {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return OnErrorResumeNextSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 100 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar range_1 = __webpack_require__(101);\n\tObservable_1.Observable.range = range_1.range;\n\n\n/***/ },\n/* 101 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar RangeObservable_1 = __webpack_require__(102);\n\texports.range = RangeObservable_1.RangeObservable.create;\n\n\n/***/ },\n/* 102 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar RangeObservable = (function (_super) {\n\t    __extends(RangeObservable, _super);\n\t    function RangeObservable(start, count, scheduler) {\n\t        _super.call(this);\n\t        this.start = start;\n\t        this._count = count;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits a sequence of numbers within a specified\n\t     * range.\n\t     *\n\t     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n\t     *\n\t     * <img src=\"./img/range.png\" width=\"100%\">\n\t     *\n\t     * `range` operator emits a range of sequential integers, in order, where you\n\t     * select the `start` of the range and its `length`. By default, uses no\n\t     * Scheduler and just delivers the notifications synchronously, but may use\n\t     * an optional Scheduler to regulate those deliveries.\n\t     *\n\t     * @example <caption>Emits the numbers 1 to 10</caption>\n\t     * var numbers = Rx.Observable.range(1, 10);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link timer}\n\t     * @see {@link interval}\n\t     *\n\t     * @param {number} [start=0] The value of the first integer in the sequence.\n\t     * @param {number} [count=0] The number of sequential integers to generate.\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emissions of the notifications.\n\t     * @return {Observable} An Observable of numbers that emits a finite range of\n\t     * sequential integers.\n\t     * @static true\n\t     * @name range\n\t     * @owner Observable\n\t     */\n\t    RangeObservable.create = function (start, count, scheduler) {\n\t        if (start === void 0) { start = 0; }\n\t        if (count === void 0) { count = 0; }\n\t        return new RangeObservable(start, count, scheduler);\n\t    };\n\t    RangeObservable.dispatch = function (state) {\n\t        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n\t        if (index >= count) {\n\t            subscriber.complete();\n\t            return;\n\t        }\n\t        subscriber.next(start);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        state.index = index + 1;\n\t        state.start = start + 1;\n\t        this.schedule(state);\n\t    };\n\t    RangeObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var start = this.start;\n\t        var count = this._count;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(RangeObservable.dispatch, 0, {\n\t                index: index, count: count, start: start, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            do {\n\t                if (index++ >= count) {\n\t                    subscriber.complete();\n\t                    break;\n\t                }\n\t                subscriber.next(start++);\n\t                if (subscriber.isUnsubscribed) {\n\t                    break;\n\t                }\n\t            } while (true);\n\t        }\n\t    };\n\t    return RangeObservable;\n\t}(Observable_1.Observable));\n\texports.RangeObservable = RangeObservable;\n\n\n/***/ },\n/* 103 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar using_1 = __webpack_require__(104);\n\tObservable_1.Observable.using = using_1.using;\n\n\n/***/ },\n/* 104 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar UsingObservable_1 = __webpack_require__(105);\n\texports.using = UsingObservable_1.UsingObservable.create;\n\n\n/***/ },\n/* 105 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar UsingObservable = (function (_super) {\n\t    __extends(UsingObservable, _super);\n\t    function UsingObservable(resourceFactory, observableFactory) {\n\t        _super.call(this);\n\t        this.resourceFactory = resourceFactory;\n\t        this.observableFactory = observableFactory;\n\t    }\n\t    UsingObservable.create = function (resourceFactory, observableFactory) {\n\t        return new UsingObservable(resourceFactory, observableFactory);\n\t    };\n\t    UsingObservable.prototype._subscribe = function (subscriber) {\n\t        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n\t        var resource;\n\t        try {\n\t            resource = resourceFactory();\n\t            return new UsingSubscriber(subscriber, resource, observableFactory);\n\t        }\n\t        catch (err) {\n\t            subscriber.error(err);\n\t        }\n\t    };\n\t    return UsingObservable;\n\t}(Observable_1.Observable));\n\texports.UsingObservable = UsingObservable;\n\tvar UsingSubscriber = (function (_super) {\n\t    __extends(UsingSubscriber, _super);\n\t    function UsingSubscriber(destination, resource, observableFactory) {\n\t        _super.call(this, destination);\n\t        this.resource = resource;\n\t        this.observableFactory = observableFactory;\n\t        destination.add(resource);\n\t        this.tryUse();\n\t    }\n\t    UsingSubscriber.prototype.tryUse = function () {\n\t        try {\n\t            var source = this.observableFactory.call(this, this.resource);\n\t            if (source) {\n\t                this.add(subscribeToResult_1.subscribeToResult(this, source));\n\t            }\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    return UsingSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 106 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar throw_1 = __webpack_require__(107);\n\tObservable_1.Observable.throw = throw_1._throw;\n\n\n/***/ },\n/* 107 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ErrorObservable_1 = __webpack_require__(108);\n\texports._throw = ErrorObservable_1.ErrorObservable.create;\n\n\n/***/ },\n/* 108 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar ErrorObservable = (function (_super) {\n\t    __extends(ErrorObservable, _super);\n\t    function ErrorObservable(error, scheduler) {\n\t        _super.call(this);\n\t        this.error = error;\n\t        this.scheduler = scheduler;\n\t    }\n\t    /**\n\t     * Creates an Observable that emits no items to the Observer and immediately\n\t     * emits an error notification.\n\t     *\n\t     * <span class=\"informal\">Just emits 'error', and nothing else.\n\t     * </span>\n\t     *\n\t     * <img src=\"./img/throw.png\" width=\"100%\">\n\t     *\n\t     * This static operator is useful for creating a simple Observable that only\n\t     * emits the error notification. It can be used for composing with other\n\t     * Observables, such as in a {@link mergeMap}.\n\t     *\n\t     * @example <caption>Emit the number 7, then emit an error.</caption>\n\t     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n\t     * var interval = Rx.Observable.interval(1000);\n\t     * var result = interval.mergeMap(x =>\n\t     *   x === 13 ?\n\t     *     Rx.Observable.throw('Thirteens are bad') :\n\t     *     Rx.Observable.of('a', 'b', 'c')\n\t     * );\n\t     * result.subscribe(x => console.log(x), e => console.error(e));\n\t     *\n\t     * @see {@link create}\n\t     * @see {@link empty}\n\t     * @see {@link never}\n\t     * @see {@link of}\n\t     *\n\t     * @param {any} error The particular Error to pass to the error notification.\n\t     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n\t     * the emission of the error notification.\n\t     * @return {Observable} An error Observable: emits only the error notification\n\t     * using the given error argument.\n\t     * @static true\n\t     * @name throw\n\t     * @owner Observable\n\t     */\n\t    ErrorObservable.create = function (error, scheduler) {\n\t        return new ErrorObservable(error, scheduler);\n\t    };\n\t    ErrorObservable.dispatch = function (arg) {\n\t        var error = arg.error, subscriber = arg.subscriber;\n\t        subscriber.error(error);\n\t    };\n\t    ErrorObservable.prototype._subscribe = function (subscriber) {\n\t        var error = this.error;\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n\t                error: error, subscriber: subscriber\n\t            });\n\t        }\n\t        else {\n\t            subscriber.error(error);\n\t        }\n\t    };\n\t    return ErrorObservable;\n\t}(Observable_1.Observable));\n\texports.ErrorObservable = ErrorObservable;\n\n\n/***/ },\n/* 109 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timer_1 = __webpack_require__(110);\n\tObservable_1.Observable.timer = timer_1.timer;\n\n\n/***/ },\n/* 110 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar TimerObservable_1 = __webpack_require__(111);\n\texports.timer = TimerObservable_1.TimerObservable.create;\n\n\n/***/ },\n/* 111 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isNumeric_1 = __webpack_require__(81);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar async_1 = __webpack_require__(82);\n\tvar isScheduler_1 = __webpack_require__(35);\n\tvar isDate_1 = __webpack_require__(112);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar TimerObservable = (function (_super) {\n\t    __extends(TimerObservable, _super);\n\t    function TimerObservable(dueTime, period, scheduler) {\n\t        if (dueTime === void 0) { dueTime = 0; }\n\t        _super.call(this);\n\t        this.period = -1;\n\t        this.dueTime = 0;\n\t        if (isNumeric_1.isNumeric(period)) {\n\t            this.period = Number(period) < 1 && 1 || Number(period);\n\t        }\n\t        else if (isScheduler_1.isScheduler(period)) {\n\t            scheduler = period;\n\t        }\n\t        if (!isScheduler_1.isScheduler(scheduler)) {\n\t            scheduler = async_1.async;\n\t        }\n\t        this.scheduler = scheduler;\n\t        this.dueTime = isDate_1.isDate(dueTime) ?\n\t            (+dueTime - this.scheduler.now()) :\n\t            dueTime;\n\t    }\n\t    /**\n\t     * Creates an Observable that starts emitting after an `initialDelay` and\n\t     * emits ever increasing numbers after each `period` of time thereafter.\n\t     *\n\t     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n\t     * should the emissions start.</span>\n\t     *\n\t     * <img src=\"./img/timer.png\" width=\"100%\">\n\t     *\n\t     * `timer` returns an Observable that emits an infinite sequence of ascending\n\t     * integers, with a constant interval of time, `period` of your choosing\n\t     * between those emissions. The first emission happens after the specified\n\t     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n\t     * operator uses the `async` Scheduler to provide a notion of time, but you\n\t     * may pass any Scheduler to it. If `period` is not specified, the output\n\t     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n\t     * sequence.\n\t     *\n\t     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n\t     * var numbers = Rx.Observable.timer(3000, 1000);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @example <caption>Emits one number after five seconds</caption>\n\t     * var numbers = Rx.Observable.timer(5000);\n\t     * numbers.subscribe(x => console.log(x));\n\t     *\n\t     * @see {@link interval}\n\t     * @see {@link delay}\n\t     *\n\t     * @param {number|Date} initialDelay The initial delay time to wait before\n\t     * emitting the first value of `0`.\n\t     * @param {number} [period] The period of time between emissions of the\n\t     * subsequent numbers.\n\t     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n\t     * the emission of values, and providing a notion of \"time\".\n\t     * @return {Observable} An Observable that emits a `0` after the\n\t     * `initialDelay` and ever increasing numbers after each `period` of time\n\t     * thereafter.\n\t     * @static true\n\t     * @name timer\n\t     * @owner Observable\n\t     */\n\t    TimerObservable.create = function (initialDelay, period, scheduler) {\n\t        if (initialDelay === void 0) { initialDelay = 0; }\n\t        return new TimerObservable(initialDelay, period, scheduler);\n\t    };\n\t    TimerObservable.dispatch = function (state) {\n\t        var index = state.index, period = state.period, subscriber = state.subscriber;\n\t        var action = this;\n\t        subscriber.next(index);\n\t        if (subscriber.isUnsubscribed) {\n\t            return;\n\t        }\n\t        else if (period === -1) {\n\t            return subscriber.complete();\n\t        }\n\t        state.index = index + 1;\n\t        action.schedule(state, period);\n\t    };\n\t    TimerObservable.prototype._subscribe = function (subscriber) {\n\t        var index = 0;\n\t        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n\t        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n\t            index: index, period: period, subscriber: subscriber\n\t        });\n\t    };\n\t    return TimerObservable;\n\t}(Observable_1.Observable));\n\texports.TimerObservable = TimerObservable;\n\n\n/***/ },\n/* 112 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction isDate(value) {\n\t    return value instanceof Date && !isNaN(+value);\n\t}\n\texports.isDate = isDate;\n\n\n/***/ },\n/* 113 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar zip_1 = __webpack_require__(114);\n\tObservable_1.Observable.zip = zip_1.zip;\n\n\n/***/ },\n/* 114 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar zip_1 = __webpack_require__(115);\n\texports.zip = zip_1.zipStatic;\n\n\n/***/ },\n/* 115 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar isArray_1 = __webpack_require__(14);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar iterator_1 = __webpack_require__(43);\n\t/**\n\t * @param observables\n\t * @return {Observable<R>}\n\t * @method zip\n\t * @owner Observable\n\t */\n\tfunction zipProto() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    observables.unshift(this);\n\t    return zipStatic.apply(this, observables);\n\t}\n\texports.zipProto = zipProto;\n\t/* tslint:enable:max-line-length */\n\t/**\n\t * @param observables\n\t * @return {Observable<R>}\n\t * @static true\n\t * @name zip\n\t * @owner Observable\n\t */\n\tfunction zipStatic() {\n\t    var observables = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        observables[_i - 0] = arguments[_i];\n\t    }\n\t    var project = observables[observables.length - 1];\n\t    if (typeof project === 'function') {\n\t        observables.pop();\n\t    }\n\t    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));\n\t}\n\texports.zipStatic = zipStatic;\n\tvar ZipOperator = (function () {\n\t    function ZipOperator(project) {\n\t        this.project = project;\n\t    }\n\t    ZipOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ZipSubscriber(subscriber, this.project));\n\t    };\n\t    return ZipOperator;\n\t}());\n\texports.ZipOperator = ZipOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ZipSubscriber = (function (_super) {\n\t    __extends(ZipSubscriber, _super);\n\t    function ZipSubscriber(destination, project, values) {\n\t        if (values === void 0) { values = Object.create(null); }\n\t        _super.call(this, destination);\n\t        this.index = 0;\n\t        this.iterators = [];\n\t        this.active = 0;\n\t        this.project = (typeof project === 'function') ? project : null;\n\t        this.values = values;\n\t    }\n\t    ZipSubscriber.prototype._next = function (value) {\n\t        var iterators = this.iterators;\n\t        var index = this.index++;\n\t        if (isArray_1.isArray(value)) {\n\t            iterators.push(new StaticArrayIterator(value));\n\t        }\n\t        else if (typeof value[iterator_1.$$iterator] === 'function') {\n\t            iterators.push(new StaticIterator(value[iterator_1.$$iterator]()));\n\t        }\n\t        else {\n\t            iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n\t        }\n\t    };\n\t    ZipSubscriber.prototype._complete = function () {\n\t        var iterators = this.iterators;\n\t        var len = iterators.length;\n\t        this.active = len;\n\t        for (var i = 0; i < len; i++) {\n\t            var iterator = iterators[i];\n\t            if (iterator.stillUnsubscribed) {\n\t                this.add(iterator.subscribe(iterator, i));\n\t            }\n\t            else {\n\t                this.active--; // not an observable\n\t            }\n\t        }\n\t    };\n\t    ZipSubscriber.prototype.notifyInactive = function () {\n\t        this.active--;\n\t        if (this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ZipSubscriber.prototype.checkIterators = function () {\n\t        var iterators = this.iterators;\n\t        var len = iterators.length;\n\t        var destination = this.destination;\n\t        // abort if not all of them have values\n\t        for (var i = 0; i < len; i++) {\n\t            var iterator = iterators[i];\n\t            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n\t                return;\n\t            }\n\t        }\n\t        var shouldComplete = false;\n\t        var args = [];\n\t        for (var i = 0; i < len; i++) {\n\t            var iterator = iterators[i];\n\t            var result = iterator.next();\n\t            // check to see if it's completed now that you've gotten\n\t            // the next value.\n\t            if (iterator.hasCompleted()) {\n\t                shouldComplete = true;\n\t            }\n\t            if (result.done) {\n\t                destination.complete();\n\t                return;\n\t            }\n\t            args.push(result.value);\n\t        }\n\t        if (this.project) {\n\t            this._tryProject(args);\n\t        }\n\t        else {\n\t            destination.next(args);\n\t        }\n\t        if (shouldComplete) {\n\t            destination.complete();\n\t        }\n\t    };\n\t    ZipSubscriber.prototype._tryProject = function (args) {\n\t        var result;\n\t        try {\n\t            result = this.project.apply(this, args);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return ZipSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.ZipSubscriber = ZipSubscriber;\n\tvar StaticIterator = (function () {\n\t    function StaticIterator(iterator) {\n\t        this.iterator = iterator;\n\t        this.nextResult = iterator.next();\n\t    }\n\t    StaticIterator.prototype.hasValue = function () {\n\t        return true;\n\t    };\n\t    StaticIterator.prototype.next = function () {\n\t        var result = this.nextResult;\n\t        this.nextResult = this.iterator.next();\n\t        return result;\n\t    };\n\t    StaticIterator.prototype.hasCompleted = function () {\n\t        var nextResult = this.nextResult;\n\t        return nextResult && nextResult.done;\n\t    };\n\t    return StaticIterator;\n\t}());\n\tvar StaticArrayIterator = (function () {\n\t    function StaticArrayIterator(array) {\n\t        this.array = array;\n\t        this.index = 0;\n\t        this.length = 0;\n\t        this.length = array.length;\n\t    }\n\t    StaticArrayIterator.prototype[iterator_1.$$iterator] = function () {\n\t        return this;\n\t    };\n\t    StaticArrayIterator.prototype.next = function (value) {\n\t        var i = this.index++;\n\t        var array = this.array;\n\t        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n\t    };\n\t    StaticArrayIterator.prototype.hasValue = function () {\n\t        return this.array.length > this.index;\n\t    };\n\t    StaticArrayIterator.prototype.hasCompleted = function () {\n\t        return this.array.length === this.index;\n\t    };\n\t    return StaticArrayIterator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ZipBufferIterator = (function (_super) {\n\t    __extends(ZipBufferIterator, _super);\n\t    function ZipBufferIterator(destination, parent, observable, index) {\n\t        _super.call(this, destination);\n\t        this.parent = parent;\n\t        this.observable = observable;\n\t        this.index = index;\n\t        this.stillUnsubscribed = true;\n\t        this.buffer = [];\n\t        this.isComplete = false;\n\t    }\n\t    ZipBufferIterator.prototype[iterator_1.$$iterator] = function () {\n\t        return this;\n\t    };\n\t    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n\t    //    this is legit because `next()` will never be called by a subscription in this case.\n\t    ZipBufferIterator.prototype.next = function () {\n\t        var buffer = this.buffer;\n\t        if (buffer.length === 0 && this.isComplete) {\n\t            return { value: null, done: true };\n\t        }\n\t        else {\n\t            return { value: buffer.shift(), done: false };\n\t        }\n\t    };\n\t    ZipBufferIterator.prototype.hasValue = function () {\n\t        return this.buffer.length > 0;\n\t    };\n\t    ZipBufferIterator.prototype.hasCompleted = function () {\n\t        return this.buffer.length === 0 && this.isComplete;\n\t    };\n\t    ZipBufferIterator.prototype.notifyComplete = function () {\n\t        if (this.buffer.length > 0) {\n\t            this.isComplete = true;\n\t            this.parent.notifyInactive();\n\t        }\n\t        else {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.buffer.push(innerValue);\n\t        this.parent.checkIterators();\n\t    };\n\t    ZipBufferIterator.prototype.subscribe = function (value, index) {\n\t        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);\n\t    };\n\t    return ZipBufferIterator;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 116 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ajax_1 = __webpack_require__(117);\n\tObservable_1.Observable.ajax = ajax_1.ajax;\n\n\n/***/ },\n/* 117 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AjaxObservable_1 = __webpack_require__(118);\n\texports.ajax = AjaxObservable_1.AjaxObservable.create;\n\n\n/***/ },\n/* 118 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(8);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tfunction getCORSRequest() {\n\t    if (root_1.root.XMLHttpRequest) {\n\t        var xhr = new root_1.root.XMLHttpRequest();\n\t        if ('withCredentials' in xhr) {\n\t            xhr.withCredentials = !!this.withCredentials;\n\t        }\n\t        return xhr;\n\t    }\n\t    else if (!!root_1.root.XDomainRequest) {\n\t        return new root_1.root.XDomainRequest();\n\t    }\n\t    else {\n\t        throw new Error('CORS is not supported by your browser');\n\t    }\n\t}\n\tfunction getXMLHttpRequest() {\n\t    if (root_1.root.XMLHttpRequest) {\n\t        return new root_1.root.XMLHttpRequest();\n\t    }\n\t    else {\n\t        var progId = void 0;\n\t        try {\n\t            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n\t            for (var i = 0; i < 3; i++) {\n\t                try {\n\t                    progId = progIds[i];\n\t                    if (new root_1.root.ActiveXObject(progId)) {\n\t                        break;\n\t                    }\n\t                }\n\t                catch (e) {\n\t                }\n\t            }\n\t            return new root_1.root.ActiveXObject(progId);\n\t        }\n\t        catch (e) {\n\t            throw new Error('XMLHttpRequest is not supported by your browser');\n\t        }\n\t    }\n\t}\n\tfunction defaultGetResultSelector(response) {\n\t    return response.response;\n\t}\n\tfunction ajaxGet(url, resultSelector, headers) {\n\t    if (resultSelector === void 0) { resultSelector = defaultGetResultSelector; }\n\t    if (headers === void 0) { headers = null; }\n\t    return new AjaxObservable({ method: 'GET', url: url, resultSelector: resultSelector, headers: headers });\n\t}\n\texports.ajaxGet = ajaxGet;\n\t;\n\tfunction ajaxPost(url, body, headers) {\n\t    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n\t}\n\texports.ajaxPost = ajaxPost;\n\t;\n\tfunction ajaxDelete(url, headers) {\n\t    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n\t}\n\texports.ajaxDelete = ajaxDelete;\n\t;\n\tfunction ajaxPut(url, body, headers) {\n\t    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n\t}\n\texports.ajaxPut = ajaxPut;\n\t;\n\tfunction ajaxGetJSON(url, resultSelector, headers) {\n\t    var finalResultSelector = resultSelector ? function (res) { return resultSelector(res.response); } : function (res) { return res.response; };\n\t    return new AjaxObservable({ method: 'GET', url: url, responseType: 'json', resultSelector: finalResultSelector, headers: headers });\n\t}\n\texports.ajaxGetJSON = ajaxGetJSON;\n\t;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar AjaxObservable = (function (_super) {\n\t    __extends(AjaxObservable, _super);\n\t    function AjaxObservable(urlOrRequest) {\n\t        _super.call(this);\n\t        var request = {\n\t            async: true,\n\t            createXHR: function () {\n\t                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n\t            },\n\t            crossDomain: false,\n\t            withCredentials: false,\n\t            headers: {},\n\t            method: 'GET',\n\t            responseType: 'json',\n\t            timeout: 0\n\t        };\n\t        if (typeof urlOrRequest === 'string') {\n\t            request.url = urlOrRequest;\n\t        }\n\t        else {\n\t            for (var prop in urlOrRequest) {\n\t                if (urlOrRequest.hasOwnProperty(prop)) {\n\t                    request[prop] = urlOrRequest[prop];\n\t                }\n\t            }\n\t        }\n\t        this.request = request;\n\t    }\n\t    AjaxObservable.prototype._subscribe = function (subscriber) {\n\t        return new AjaxSubscriber(subscriber, this.request);\n\t    };\n\t    /**\n\t     * Creates an observable for an Ajax request with either a request object with\n\t     * url, headers, etc or a string for a URL.\n\t     *\n\t     * @example\n\t     * source = Rx.Observable.ajax('/products');\n\t     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n\t     *\n\t     * @param {string|Object} request Can be one of the following:\n\t     *   A string of the URL to make the Ajax call.\n\t     *   An object with the following properties\n\t     *   - url: URL of the request\n\t     *   - body: The body of the request\n\t     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n\t     *   - async: Whether the request is async\n\t     *   - headers: Optional headers\n\t     *   - crossDomain: true if a cross domain request, else false\n\t     *   - createXHR: a function to override if you need to use an alternate\n\t     *   XMLHttpRequest implementation.\n\t     *   - resultSelector: a function to use to alter the output value type of\n\t     *   the Observable. Gets {@link AjaxResponse} as an argument.\n\t     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n\t     * @static true\n\t     * @name ajax\n\t     * @owner Observable\n\t    */\n\t    AjaxObservable.create = (function () {\n\t        var create = function (urlOrRequest) {\n\t            return new AjaxObservable(urlOrRequest);\n\t        };\n\t        create.get = ajaxGet;\n\t        create.post = ajaxPost;\n\t        create.delete = ajaxDelete;\n\t        create.put = ajaxPut;\n\t        create.getJSON = ajaxGetJSON;\n\t        return create;\n\t    })();\n\t    return AjaxObservable;\n\t}(Observable_1.Observable));\n\texports.AjaxObservable = AjaxObservable;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AjaxSubscriber = (function (_super) {\n\t    __extends(AjaxSubscriber, _super);\n\t    function AjaxSubscriber(destination, request) {\n\t        _super.call(this, destination);\n\t        this.request = request;\n\t        this.done = false;\n\t        var headers = request.headers = request.headers || {};\n\t        // force CORS if requested\n\t        if (!request.crossDomain && !headers['X-Requested-With']) {\n\t            headers['X-Requested-With'] = 'XMLHttpRequest';\n\t        }\n\t        // ensure content type is set\n\t        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData)) {\n\t            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n\t        }\n\t        // properly serialize body\n\t        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\t        this.resultSelector = request.resultSelector;\n\t        this.send();\n\t    }\n\t    AjaxSubscriber.prototype.next = function (e) {\n\t        this.done = true;\n\t        var _a = this, resultSelector = _a.resultSelector, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n\t        var response = new AjaxResponse(e, xhr, request);\n\t        if (resultSelector) {\n\t            var result = tryCatch_1.tryCatch(resultSelector)(response);\n\t            if (result === errorObject_1.errorObject) {\n\t                this.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                destination.next(result);\n\t            }\n\t        }\n\t        else {\n\t            destination.next(response);\n\t        }\n\t    };\n\t    AjaxSubscriber.prototype.send = function () {\n\t        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n\t        var createXHR = request.createXHR;\n\t        var xhr = tryCatch_1.tryCatch(createXHR).call(request);\n\t        if (xhr === errorObject_1.errorObject) {\n\t            this.error(errorObject_1.errorObject.e);\n\t        }\n\t        else {\n\t            this.xhr = xhr;\n\t            // open XHR first\n\t            var result = void 0;\n\t            if (user) {\n\t                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n\t            }\n\t            else {\n\t                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);\n\t            }\n\t            if (result === errorObject_1.errorObject) {\n\t                this.error(errorObject_1.errorObject.e);\n\t                return;\n\t            }\n\t            // timeout and responseType can be set once the XHR is open\n\t            xhr.timeout = request.timeout;\n\t            xhr.responseType = request.responseType;\n\t            // set headers\n\t            this.setHeaders(xhr, headers);\n\t            // now set up the events\n\t            this.setupEvents(xhr, request);\n\t            // finally send the request\n\t            if (body) {\n\t                xhr.send(body);\n\t            }\n\t            else {\n\t                xhr.send();\n\t            }\n\t        }\n\t    };\n\t    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n\t        if (!body || typeof body === 'string') {\n\t            return body;\n\t        }\n\t        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {\n\t            return body;\n\t        }\n\t        if (contentType) {\n\t            var splitIndex = contentType.indexOf(';');\n\t            if (splitIndex !== -1) {\n\t                contentType = contentType.substring(0, splitIndex);\n\t            }\n\t        }\n\t        switch (contentType) {\n\t            case 'application/x-www-form-urlencoded':\n\t                return Object.keys(body).map(function (key) { return (encodeURI(key) + \"=\" + encodeURI(body[key])); }).join('&');\n\t            case 'application/json':\n\t                return JSON.stringify(body);\n\t            default:\n\t                return body;\n\t        }\n\t    };\n\t    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n\t        for (var key in headers) {\n\t            if (headers.hasOwnProperty(key)) {\n\t                xhr.setRequestHeader(key, headers[key]);\n\t            }\n\t        }\n\t    };\n\t    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n\t        var progressSubscriber = request.progressSubscriber;\n\t        xhr.ontimeout = function xhrTimeout(e) {\n\t            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n\t            if (progressSubscriber) {\n\t                progressSubscriber.error(e);\n\t            }\n\t            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n\t        };\n\t        xhr.ontimeout.request = request;\n\t        xhr.ontimeout.subscriber = this;\n\t        xhr.ontimeout.progressSubscriber = progressSubscriber;\n\t        if (xhr.upload && 'withCredentials' in xhr && root_1.root.XDomainRequest) {\n\t            if (progressSubscriber) {\n\t                xhr.onprogress = function xhrProgress(e) {\n\t                    var progressSubscriber = xhrProgress.progressSubscriber;\n\t                    progressSubscriber.next(e);\n\t                };\n\t                xhr.onprogress.progressSubscriber = progressSubscriber;\n\t            }\n\t            xhr.onerror = function xhrError(e) {\n\t                var _a = xhrError, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n\t                if (progressSubscriber) {\n\t                    progressSubscriber.error(e);\n\t                }\n\t                subscriber.error(new AjaxError('ajax error', this, request));\n\t            };\n\t            xhr.onerror.request = request;\n\t            xhr.onerror.subscriber = this;\n\t            xhr.onerror.progressSubscriber = progressSubscriber;\n\t        }\n\t        xhr.onreadystatechange = function xhrReadyStateChange(e) {\n\t            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n\t            if (this.readyState === 4) {\n\t                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n\t                var status_1 = this.status === 1223 ? 204 : this.status;\n\t                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n\t                // fix status code when it is 0 (0 status is undocumented).\n\t                // Occurs when accessing file resources or on Android 4.1 stock browser\n\t                // while retrieving files from application cache.\n\t                if (status_1 === 0) {\n\t                    status_1 = response ? 200 : 0;\n\t                }\n\t                if (200 <= status_1 && status_1 < 300) {\n\t                    if (progressSubscriber) {\n\t                        progressSubscriber.complete();\n\t                    }\n\t                    subscriber.next(e);\n\t                    subscriber.complete();\n\t                }\n\t                else {\n\t                    if (progressSubscriber) {\n\t                        progressSubscriber.error(e);\n\t                    }\n\t                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n\t                }\n\t            }\n\t        };\n\t        xhr.onreadystatechange.subscriber = this;\n\t        xhr.onreadystatechange.progressSubscriber = progressSubscriber;\n\t        xhr.onreadystatechange.request = request;\n\t    };\n\t    AjaxSubscriber.prototype.unsubscribe = function () {\n\t        var _a = this, done = _a.done, xhr = _a.xhr;\n\t        if (!done && xhr && xhr.readyState !== 4) {\n\t            xhr.abort();\n\t        }\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    return AjaxSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.AjaxSubscriber = AjaxSubscriber;\n\t/**\n\t * A normalized AJAX response.\n\t *\n\t * @see {@link ajax}\n\t *\n\t * @class AjaxResponse\n\t */\n\tvar AjaxResponse = (function () {\n\t    function AjaxResponse(originalEvent, xhr, request) {\n\t        this.originalEvent = originalEvent;\n\t        this.xhr = xhr;\n\t        this.request = request;\n\t        this.status = xhr.status;\n\t        this.responseType = xhr.responseType || request.responseType;\n\t        switch (this.responseType) {\n\t            case 'json':\n\t                if ('response' in xhr) {\n\t                    //IE does not support json as responseType, parse it internally\n\t                    this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || '');\n\t                }\n\t                else {\n\t                    this.response = JSON.parse(xhr.responseText || '');\n\t                }\n\t                break;\n\t            case 'xml':\n\t                this.response = xhr.responseXML;\n\t                break;\n\t            case 'text':\n\t            default:\n\t                this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n\t                break;\n\t        }\n\t    }\n\t    return AjaxResponse;\n\t}());\n\texports.AjaxResponse = AjaxResponse;\n\t/**\n\t * A normalized AJAX error.\n\t *\n\t * @see {@link ajax}\n\t *\n\t * @class AjaxError\n\t */\n\tvar AjaxError = (function (_super) {\n\t    __extends(AjaxError, _super);\n\t    function AjaxError(message, xhr, request) {\n\t        _super.call(this, message);\n\t        this.message = message;\n\t        this.xhr = xhr;\n\t        this.request = request;\n\t        this.status = xhr.status;\n\t    }\n\t    return AjaxError;\n\t}(Error));\n\texports.AjaxError = AjaxError;\n\t/**\n\t * @see {@link ajax}\n\t *\n\t * @class AjaxTimeoutError\n\t */\n\tvar AjaxTimeoutError = (function (_super) {\n\t    __extends(AjaxTimeoutError, _super);\n\t    function AjaxTimeoutError(xhr, request) {\n\t        _super.call(this, 'ajax timeout', xhr, request);\n\t    }\n\t    return AjaxTimeoutError;\n\t}(AjaxError));\n\texports.AjaxTimeoutError = AjaxTimeoutError;\n\n\n/***/ },\n/* 119 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar webSocket_1 = __webpack_require__(120);\n\tObservable_1.Observable.webSocket = webSocket_1.webSocket;\n\n\n/***/ },\n/* 120 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar WebSocketSubject_1 = __webpack_require__(121);\n\texports.webSocket = WebSocketSubject_1.WebSocketSubject.create;\n\n\n/***/ },\n/* 121 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar root_1 = __webpack_require__(8);\n\tvar ReplaySubject_1 = __webpack_require__(122);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar assign_1 = __webpack_require__(124);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar WebSocketSubject = (function (_super) {\n\t    __extends(WebSocketSubject, _super);\n\t    function WebSocketSubject(urlConfigOrSource, destination) {\n\t        if (urlConfigOrSource instanceof Observable_1.Observable) {\n\t            _super.call(this, destination, urlConfigOrSource);\n\t        }\n\t        else {\n\t            _super.call(this);\n\t            this.WebSocketCtor = root_1.root.WebSocket;\n\t            this._output = new Subject_1.Subject();\n\t            if (typeof urlConfigOrSource === 'string') {\n\t                this.url = urlConfigOrSource;\n\t            }\n\t            else {\n\t                // WARNING: config object could override important members here.\n\t                assign_1.assign(this, urlConfigOrSource);\n\t            }\n\t            if (!this.WebSocketCtor) {\n\t                throw new Error('no WebSocket constructor can be found');\n\t            }\n\t            this.destination = new ReplaySubject_1.ReplaySubject();\n\t        }\n\t    }\n\t    WebSocketSubject.prototype.resultSelector = function (e) {\n\t        return JSON.parse(e.data);\n\t    };\n\t    /**\n\t     * @param urlConfigOrSource\n\t     * @return {WebSocketSubject}\n\t     * @static true\n\t     * @name webSocket\n\t     * @owner Observable\n\t     */\n\t    WebSocketSubject.create = function (urlConfigOrSource) {\n\t        return new WebSocketSubject(urlConfigOrSource);\n\t    };\n\t    WebSocketSubject.prototype.lift = function (operator) {\n\t        var sock = new WebSocketSubject(this, this.destination);\n\t        sock.operator = operator;\n\t        return sock;\n\t    };\n\t    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n\t    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n\t        var self = this;\n\t        return new Observable_1.Observable(function (observer) {\n\t            var result = tryCatch_1.tryCatch(subMsg)();\n\t            if (result === errorObject_1.errorObject) {\n\t                observer.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                self.next(result);\n\t            }\n\t            var subscription = self.subscribe(function (x) {\n\t                var result = tryCatch_1.tryCatch(messageFilter)(x);\n\t                if (result === errorObject_1.errorObject) {\n\t                    observer.error(errorObject_1.errorObject.e);\n\t                }\n\t                else if (result) {\n\t                    observer.next(x);\n\t                }\n\t            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n\t            return function () {\n\t                var result = tryCatch_1.tryCatch(unsubMsg)();\n\t                if (result === errorObject_1.errorObject) {\n\t                    observer.error(errorObject_1.errorObject.e);\n\t                }\n\t                else {\n\t                    self.next(result);\n\t                }\n\t                subscription.unsubscribe();\n\t            };\n\t        });\n\t    };\n\t    WebSocketSubject.prototype._connectSocket = function () {\n\t        var _this = this;\n\t        var WebSocketCtor = this.WebSocketCtor;\n\t        var socket = this.protocol ?\n\t            new WebSocketCtor(this.url, this.protocol) :\n\t            new WebSocketCtor(this.url);\n\t        this.socket = socket;\n\t        var subscription = new Subscription_1.Subscription(function () {\n\t            _this.socket = null;\n\t            if (socket && socket.readyState === 1) {\n\t                socket.close();\n\t            }\n\t        });\n\t        var observer = this._output;\n\t        socket.onopen = function (e) {\n\t            var openObserver = _this.openObserver;\n\t            if (openObserver) {\n\t                openObserver.next(e);\n\t            }\n\t            var queue = _this.destination;\n\t            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n\t                var closingObserver = _this.closingObserver;\n\t                if (closingObserver) {\n\t                    closingObserver.next(undefined);\n\t                }\n\t                if (e && e.code) {\n\t                    socket.close(e.code, e.reason);\n\t                }\n\t                else {\n\t                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n\t                        'and an optional reason: { code: number, reason: string }'));\n\t                }\n\t                _this.destination = new ReplaySubject_1.ReplaySubject();\n\t                _this.socket = null;\n\t            }, function () {\n\t                var closingObserver = _this.closingObserver;\n\t                if (closingObserver) {\n\t                    closingObserver.next(undefined);\n\t                }\n\t                socket.close();\n\t                _this.destination = new ReplaySubject_1.ReplaySubject();\n\t                _this.socket = null;\n\t            });\n\t            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n\t                subscription.add(queue.subscribe(_this.destination));\n\t            }\n\t        };\n\t        socket.onerror = function (e) { return observer.error(e); };\n\t        socket.onclose = function (e) {\n\t            var closeObserver = _this.closeObserver;\n\t            if (closeObserver) {\n\t                closeObserver.next(e);\n\t            }\n\t            if (e.wasClean) {\n\t                observer.complete();\n\t            }\n\t            else {\n\t                observer.error(e);\n\t            }\n\t        };\n\t        socket.onmessage = function (e) {\n\t            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n\t            if (result === errorObject_1.errorObject) {\n\t                observer.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                observer.next(result);\n\t            }\n\t        };\n\t    };\n\t    WebSocketSubject.prototype._subscribe = function (subscriber) {\n\t        var _this = this;\n\t        var source = this.source;\n\t        if (source) {\n\t            return source.subscribe(subscriber);\n\t        }\n\t        if (!this.socket) {\n\t            this._connectSocket();\n\t        }\n\t        var subscription = new Subscription_1.Subscription();\n\t        subscription.add(this._output.subscribe(subscriber));\n\t        subscription.add(function () {\n\t            var socket = _this.socket;\n\t            if (socket && socket.readyState === 1) {\n\t                socket.close();\n\t                _this.socket = null;\n\t            }\n\t        });\n\t        return subscription;\n\t    };\n\t    WebSocketSubject.prototype.unsubscribe = function () {\n\t        var _a = this, source = _a.source, socket = _a.socket;\n\t        if (socket && socket.readyState === 1) {\n\t            socket.close();\n\t            this.socket = null;\n\t        }\n\t        _super.prototype.unsubscribe.call(this);\n\t        if (!source) {\n\t            this.destination = new ReplaySubject_1.ReplaySubject();\n\t        }\n\t    };\n\t    return WebSocketSubject;\n\t}(Subject_1.AnonymousSubject));\n\texports.WebSocketSubject = WebSocketSubject;\n\n\n/***/ },\n/* 122 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar queue_1 = __webpack_require__(123);\n\tvar observeOn_1 = __webpack_require__(63);\n\t/**\n\t * @class ReplaySubject<T>\n\t */\n\tvar ReplaySubject = (function (_super) {\n\t    __extends(ReplaySubject, _super);\n\t    function ReplaySubject(bufferSize, windowTime, scheduler) {\n\t        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n\t        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t        this._events = [];\n\t        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n\t        this._windowTime = windowTime < 1 ? 1 : windowTime;\n\t    }\n\t    ReplaySubject.prototype.next = function (value) {\n\t        var now = this._getNow();\n\t        this._events.push(new ReplayEvent(now, value));\n\t        this._trimBufferThenGetEvents();\n\t        _super.prototype.next.call(this, value);\n\t    };\n\t    ReplaySubject.prototype._subscribe = function (subscriber) {\n\t        var _events = this._trimBufferThenGetEvents();\n\t        var scheduler = this.scheduler;\n\t        if (scheduler) {\n\t            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n\t        }\n\t        var len = _events.length;\n\t        for (var i = 0; i < len && !subscriber.isUnsubscribed; i++) {\n\t            subscriber.next(_events[i].value);\n\t        }\n\t        return _super.prototype._subscribe.call(this, subscriber);\n\t    };\n\t    ReplaySubject.prototype._getNow = function () {\n\t        return (this.scheduler || queue_1.queue).now();\n\t    };\n\t    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n\t        var now = this._getNow();\n\t        var _bufferSize = this._bufferSize;\n\t        var _windowTime = this._windowTime;\n\t        var _events = this._events;\n\t        var eventsCount = _events.length;\n\t        var spliceCount = 0;\n\t        // Trim events that fall out of the time window.\n\t        // Start at the front of the list. Break early once\n\t        // we encounter an event that falls within the window.\n\t        while (spliceCount < eventsCount) {\n\t            if ((now - _events[spliceCount].time) < _windowTime) {\n\t                break;\n\t            }\n\t            spliceCount++;\n\t        }\n\t        if (eventsCount > _bufferSize) {\n\t            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n\t        }\n\t        if (spliceCount > 0) {\n\t            _events.splice(0, spliceCount);\n\t        }\n\t        return _events;\n\t    };\n\t    return ReplaySubject;\n\t}(Subject_1.Subject));\n\texports.ReplaySubject = ReplaySubject;\n\tvar ReplayEvent = (function () {\n\t    function ReplayEvent(time, value) {\n\t        this.time = time;\n\t        this.value = value;\n\t    }\n\t    return ReplayEvent;\n\t}());\n\n\n/***/ },\n/* 123 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar QueueScheduler_1 = __webpack_require__(85);\n\texports.queue = new QueueScheduler_1.QueueScheduler();\n\n\n/***/ },\n/* 124 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar Object = root_1.root.Object;\n\tif (typeof Object.assign != 'function') {\n\t    (function () {\n\t        Object.assign = function assignPolyfill(target) {\n\t            var sources = [];\n\t            for (var _i = 1; _i < arguments.length; _i++) {\n\t                sources[_i - 1] = arguments[_i];\n\t            }\n\t            if (target === undefined || target === null) {\n\t                throw new TypeError('Cannot convert undefined or null to object');\n\t            }\n\t            var output = Object(target);\n\t            var len = sources.length;\n\t            for (var index = 0; index < len; index++) {\n\t                var source = sources[index];\n\t                if (source !== undefined && source !== null) {\n\t                    for (var key in source) {\n\t                        if (source.hasOwnProperty(key)) {\n\t                            output[key] = source[key];\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return output;\n\t        };\n\t    })();\n\t}\n\texports.assign = Object.assign;\n\n\n/***/ },\n/* 125 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar buffer_1 = __webpack_require__(126);\n\tObservable_1.Observable.prototype.buffer = buffer_1.buffer;\n\n\n/***/ },\n/* 126 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Buffers the source Observable values until `closingNotifier` emits.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array, and emits\n\t * that array only when another Observable emits.</span>\n\t *\n\t * <img src=\"./img/buffer.png\" width=\"100%\">\n\t *\n\t * Buffers the incoming Observable values until the given `closingNotifier`\n\t * Observable emits a value, at which point it emits the buffer on the output\n\t * Observable and starts a new buffer internally, awaiting the next time\n\t * `closingNotifier` emits.\n\t *\n\t * @example <caption>On every click, emit array of most recent interval events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var interval = Rx.Observable.interval(1000);\n\t * var buffered = interval.buffer(clicks);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link bufferCount}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferToggle}\n\t * @see {@link bufferWhen}\n\t * @see {@link window}\n\t *\n\t * @param {Observable<any>} closingNotifier An Observable that signals the\n\t * buffer to be emitted on the output Observable.\n\t * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n\t * values.\n\t * @method buffer\n\t * @owner Observable\n\t */\n\tfunction buffer(closingNotifier) {\n\t    return this.lift(new BufferOperator(closingNotifier));\n\t}\n\texports.buffer = buffer;\n\tvar BufferOperator = (function () {\n\t    function BufferOperator(closingNotifier) {\n\t        this.closingNotifier = closingNotifier;\n\t    }\n\t    BufferOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n\t    };\n\t    return BufferOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferSubscriber = (function (_super) {\n\t    __extends(BufferSubscriber, _super);\n\t    function BufferSubscriber(destination, closingNotifier) {\n\t        _super.call(this, destination);\n\t        this.buffer = [];\n\t        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n\t    }\n\t    BufferSubscriber.prototype._next = function (value) {\n\t        this.buffer.push(value);\n\t    };\n\t    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var buffer = this.buffer;\n\t        this.buffer = [];\n\t        this.destination.next(buffer);\n\t    };\n\t    return BufferSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 127 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferCount_1 = __webpack_require__(128);\n\tObservable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;\n\n\n/***/ },\n/* 128 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Buffers the source Observable values until the size hits the maximum\n\t * `bufferSize` given.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array, and emits\n\t * that array only when its size reaches `bufferSize`.</span>\n\t *\n\t * <img src=\"./img/bufferCount.png\" width=\"100%\">\n\t *\n\t * Buffers a number of values from the source Observable by `bufferSize` then\n\t * emits the buffer and clears it, and starts a new buffer each\n\t * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n\t * `null`, then new buffers are started immediately at the start of the source\n\t * and when each buffer closes and is emitted.\n\t *\n\t * @example <caption>Emit the last two click events as an array</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferCount(2);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>On every click, emit the last two click events as an array</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferCount(2, 1);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferToggle}\n\t * @see {@link bufferWhen}\n\t * @see {@link pairwise}\n\t * @see {@link windowCount}\n\t *\n\t * @param {number} bufferSize The maximum size of the buffer emitted.\n\t * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n\t * For example if `startBufferEvery` is `2`, then a new buffer will be started\n\t * on every other value from the source. A new buffer is started at the\n\t * beginning of the source by default.\n\t * @return {Observable<T[]>} An Observable of arrays of buffered values.\n\t * @method bufferCount\n\t * @owner Observable\n\t */\n\tfunction bufferCount(bufferSize, startBufferEvery) {\n\t    if (startBufferEvery === void 0) { startBufferEvery = null; }\n\t    return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n\t}\n\texports.bufferCount = bufferCount;\n\tvar BufferCountOperator = (function () {\n\t    function BufferCountOperator(bufferSize, startBufferEvery) {\n\t        this.bufferSize = bufferSize;\n\t        this.startBufferEvery = startBufferEvery;\n\t    }\n\t    BufferCountOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n\t    };\n\t    return BufferCountOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferCountSubscriber = (function (_super) {\n\t    __extends(BufferCountSubscriber, _super);\n\t    function BufferCountSubscriber(destination, bufferSize, startBufferEvery) {\n\t        _super.call(this, destination);\n\t        this.bufferSize = bufferSize;\n\t        this.startBufferEvery = startBufferEvery;\n\t        this.buffers = [[]];\n\t        this.count = 0;\n\t    }\n\t    BufferCountSubscriber.prototype._next = function (value) {\n\t        var count = (this.count += 1);\n\t        var destination = this.destination;\n\t        var bufferSize = this.bufferSize;\n\t        var startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n\t        var buffers = this.buffers;\n\t        var len = buffers.length;\n\t        var remove = -1;\n\t        if (count % startBufferEvery === 0) {\n\t            buffers.push([]);\n\t        }\n\t        for (var i = 0; i < len; i++) {\n\t            var buffer = buffers[i];\n\t            buffer.push(value);\n\t            if (buffer.length === bufferSize) {\n\t                remove = i;\n\t                destination.next(buffer);\n\t            }\n\t        }\n\t        if (remove !== -1) {\n\t            buffers.splice(remove, 1);\n\t        }\n\t    };\n\t    BufferCountSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        var buffers = this.buffers;\n\t        while (buffers.length > 0) {\n\t            var buffer = buffers.shift();\n\t            if (buffer.length > 0) {\n\t                destination.next(buffer);\n\t            }\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    return BufferCountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 129 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferTime_1 = __webpack_require__(130);\n\tObservable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;\n\n\n/***/ },\n/* 130 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\tvar isScheduler_1 = __webpack_require__(35);\n\t/**\n\t * Buffers the source Observable values for a specific time period.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array, and emits\n\t * those arrays periodically in time.</span>\n\t *\n\t * <img src=\"./img/bufferTime.png\" width=\"100%\">\n\t *\n\t * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n\t * Unless the optional argument `bufferCreationInterval` is given, it emits and\n\t * resets the buffer every `bufferTimeSpan` milliseconds. If\n\t * `bufferCreationInterval` is given, this operator opens the buffer every\n\t * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n\t * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n\t * `maxBufferSize` is specified, the buffer will be closed either after\n\t * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n\t *\n\t * @example <caption>Every second, emit an array of the recent click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferTime(1000);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferTime(2000, 5000);\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t * @see {@link bufferToggle}\n\t * @see {@link bufferWhen}\n\t * @see {@link windowTime}\n\t *\n\t * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n\t * @param {number} [bufferCreationInterval] The interval at which to start new\n\t * buffers.\n\t * @param {number} [maxBufferSize] The maximum buffer size.\n\t * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n\t * intervals that determine buffer boundaries.\n\t * @return {Observable<T[]>} An observable of arrays of buffered values.\n\t * @method bufferTime\n\t * @owner Observable\n\t */\n\tfunction bufferTime(bufferTimeSpan) {\n\t    var length = arguments.length;\n\t    var scheduler = async_1.async;\n\t    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n\t        scheduler = arguments[arguments.length - 1];\n\t        length--;\n\t    }\n\t    var bufferCreationInterval = null;\n\t    if (length >= 2) {\n\t        bufferCreationInterval = arguments[1];\n\t    }\n\t    var maxBufferSize = Number.POSITIVE_INFINITY;\n\t    if (length >= 3) {\n\t        maxBufferSize = arguments[2];\n\t    }\n\t    return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n\t}\n\texports.bufferTime = bufferTime;\n\tvar BufferTimeOperator = (function () {\n\t    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n\t        this.bufferTimeSpan = bufferTimeSpan;\n\t        this.bufferCreationInterval = bufferCreationInterval;\n\t        this.maxBufferSize = maxBufferSize;\n\t        this.scheduler = scheduler;\n\t    }\n\t    BufferTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n\t    };\n\t    return BufferTimeOperator;\n\t}());\n\tvar Context = (function () {\n\t    function Context() {\n\t        this.buffer = [];\n\t    }\n\t    return Context;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferTimeSubscriber = (function (_super) {\n\t    __extends(BufferTimeSubscriber, _super);\n\t    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n\t        _super.call(this, destination);\n\t        this.bufferTimeSpan = bufferTimeSpan;\n\t        this.bufferCreationInterval = bufferCreationInterval;\n\t        this.maxBufferSize = maxBufferSize;\n\t        this.scheduler = scheduler;\n\t        this.contexts = [];\n\t        var context = this.openContext();\n\t        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n\t        if (this.timespanOnly) {\n\t            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n\t            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n\t        }\n\t        else {\n\t            var closeState = { subscriber: this, context: context };\n\t            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };\n\t            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n\t            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n\t        }\n\t    }\n\t    BufferTimeSubscriber.prototype._next = function (value) {\n\t        var contexts = this.contexts;\n\t        var len = contexts.length;\n\t        var filledBufferContext;\n\t        for (var i = 0; i < len; i++) {\n\t            var context = contexts[i];\n\t            var buffer = context.buffer;\n\t            buffer.push(value);\n\t            if (buffer.length == this.maxBufferSize) {\n\t                filledBufferContext = context;\n\t            }\n\t        }\n\t        if (filledBufferContext) {\n\t            this.onBufferFull(filledBufferContext);\n\t        }\n\t    };\n\t    BufferTimeSubscriber.prototype._error = function (err) {\n\t        this.contexts.length = 0;\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    BufferTimeSubscriber.prototype._complete = function () {\n\t        var _a = this, contexts = _a.contexts, destination = _a.destination;\n\t        while (contexts.length > 0) {\n\t            var context = contexts.shift();\n\t            destination.next(context.buffer);\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    BufferTimeSubscriber.prototype._unsubscribe = function () {\n\t        this.contexts = null;\n\t    };\n\t    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n\t        this.closeContext(context);\n\t        var closeAction = context.closeAction;\n\t        closeAction.unsubscribe();\n\t        this.remove(closeAction);\n\t        if (this.timespanOnly) {\n\t            context = this.openContext();\n\t            var bufferTimeSpan = this.bufferTimeSpan;\n\t            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n\t            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n\t        }\n\t    };\n\t    BufferTimeSubscriber.prototype.openContext = function () {\n\t        var context = new Context();\n\t        this.contexts.push(context);\n\t        return context;\n\t    };\n\t    BufferTimeSubscriber.prototype.closeContext = function (context) {\n\t        this.destination.next(context.buffer);\n\t        var contexts = this.contexts;\n\t        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n\t        if (spliceIndex >= 0) {\n\t            contexts.splice(contexts.indexOf(context), 1);\n\t        }\n\t    };\n\t    return BufferTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchBufferTimeSpanOnly(state) {\n\t    var subscriber = state.subscriber;\n\t    var prevContext = state.context;\n\t    if (prevContext) {\n\t        subscriber.closeContext(prevContext);\n\t    }\n\t    if (!subscriber.isUnsubscribed) {\n\t        state.context = subscriber.openContext();\n\t        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n\t    }\n\t}\n\tfunction dispatchBufferCreation(state) {\n\t    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n\t    var context = subscriber.openContext();\n\t    var action = this;\n\t    if (!subscriber.isUnsubscribed) {\n\t        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n\t        action.schedule(state, bufferCreationInterval);\n\t    }\n\t}\n\tfunction dispatchBufferClose(arg) {\n\t    var subscriber = arg.subscriber, context = arg.context;\n\t    subscriber.closeContext(context);\n\t}\n\n\n/***/ },\n/* 131 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferToggle_1 = __webpack_require__(132);\n\tObservable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;\n\n\n/***/ },\n/* 132 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * Buffers the source Observable values starting from an emission from\n\t * `openings` and ending when the output of `closingSelector` emits.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array. Starts\n\t * collecting only when `opening` emits, and calls the `closingSelector`\n\t * function to get an Observable that tells when to close the buffer.</span>\n\t *\n\t * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n\t *\n\t * Buffers values from the source by opening the buffer via signals from an\n\t * Observable provided to `openings`, and closing and sending the buffers when\n\t * a Subscribable or Promise returned by the `closingSelector` function emits.\n\t *\n\t * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var openings = Rx.Observable.interval(1000);\n\t * var buffered = clicks.bufferToggle(openings, i =>\n\t *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n\t * );\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferWhen}\n\t * @see {@link windowToggle}\n\t *\n\t * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n\t * buffers.\n\t * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n\t * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n\t * which, when it emits, signals that the associated buffer should be emitted\n\t * and cleared.\n\t * @return {Observable<T[]>} An observable of arrays of buffered values.\n\t * @method bufferToggle\n\t * @owner Observable\n\t */\n\tfunction bufferToggle(openings, closingSelector) {\n\t    return this.lift(new BufferToggleOperator(openings, closingSelector));\n\t}\n\texports.bufferToggle = bufferToggle;\n\tvar BufferToggleOperator = (function () {\n\t    function BufferToggleOperator(openings, closingSelector) {\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    BufferToggleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n\t    };\n\t    return BufferToggleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferToggleSubscriber = (function (_super) {\n\t    __extends(BufferToggleSubscriber, _super);\n\t    function BufferToggleSubscriber(destination, openings, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t        this.contexts = [];\n\t        this.add(subscribeToResult_1.subscribeToResult(this, openings));\n\t    }\n\t    BufferToggleSubscriber.prototype._next = function (value) {\n\t        var contexts = this.contexts;\n\t        var len = contexts.length;\n\t        for (var i = 0; i < len; i++) {\n\t            contexts[i].buffer.push(value);\n\t        }\n\t    };\n\t    BufferToggleSubscriber.prototype._error = function (err) {\n\t        var contexts = this.contexts;\n\t        while (contexts.length > 0) {\n\t            var context = contexts.shift();\n\t            context.subscription.unsubscribe();\n\t            context.buffer = null;\n\t            context.subscription = null;\n\t        }\n\t        this.contexts = null;\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    BufferToggleSubscriber.prototype._complete = function () {\n\t        var contexts = this.contexts;\n\t        while (contexts.length > 0) {\n\t            var context = contexts.shift();\n\t            this.destination.next(context.buffer);\n\t            context.subscription.unsubscribe();\n\t            context.buffer = null;\n\t            context.subscription = null;\n\t        }\n\t        this.contexts = null;\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n\t    };\n\t    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.closeBuffer(innerSub.context);\n\t    };\n\t    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n\t        try {\n\t            var closingSelector = this.closingSelector;\n\t            var closingNotifier = closingSelector.call(this, value);\n\t            if (closingNotifier) {\n\t                this.trySubscribe(closingNotifier);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this._error(err);\n\t        }\n\t    };\n\t    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n\t        var contexts = this.contexts;\n\t        if (contexts && context) {\n\t            var buffer = context.buffer, subscription = context.subscription;\n\t            this.destination.next(buffer);\n\t            contexts.splice(contexts.indexOf(context), 1);\n\t            this.remove(subscription);\n\t            subscription.unsubscribe();\n\t        }\n\t    };\n\t    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n\t        var contexts = this.contexts;\n\t        var buffer = [];\n\t        var subscription = new Subscription_1.Subscription();\n\t        var context = { buffer: buffer, subscription: subscription };\n\t        contexts.push(context);\n\t        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n\t        if (!innerSubscription || innerSubscription.isUnsubscribed) {\n\t            this.closeBuffer(context);\n\t        }\n\t        else {\n\t            innerSubscription.context = context;\n\t            this.add(innerSubscription);\n\t            subscription.add(innerSubscription);\n\t        }\n\t    };\n\t    return BufferToggleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 133 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar bufferWhen_1 = __webpack_require__(134);\n\tObservable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;\n\n\n/***/ },\n/* 134 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Buffers the source Observable values, using a factory function of closing\n\t * Observables to determine when to close, emit, and reset the buffer.\n\t *\n\t * <span class=\"informal\">Collects values from the past as an array. When it\n\t * starts collecting values, it calls a function that returns an Observable that\n\t * tells when to close the buffer and restart collecting.</span>\n\t *\n\t * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n\t *\n\t * Opens a buffer immediately, then closes the buffer when the observable\n\t * returned by calling `closingSelector` function emits a value. When it closes\n\t * the buffer, it immediately opens a new buffer and repeats the process.\n\t *\n\t * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var buffered = clicks.bufferWhen(() =>\n\t *   Rx.Observable.interval(1000 + Math.random() * 4000)\n\t * );\n\t * buffered.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t * @see {@link bufferTime}\n\t * @see {@link bufferToggle}\n\t * @see {@link windowWhen}\n\t *\n\t * @param {function(): Observable} closingSelector A function that takes no\n\t * arguments and returns an Observable that signals buffer closure.\n\t * @return {Observable<T[]>} An observable of arrays of buffered values.\n\t * @method bufferWhen\n\t * @owner Observable\n\t */\n\tfunction bufferWhen(closingSelector) {\n\t    return this.lift(new BufferWhenOperator(closingSelector));\n\t}\n\texports.bufferWhen = bufferWhen;\n\tvar BufferWhenOperator = (function () {\n\t    function BufferWhenOperator(closingSelector) {\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    BufferWhenOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n\t    };\n\t    return BufferWhenOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar BufferWhenSubscriber = (function (_super) {\n\t    __extends(BufferWhenSubscriber, _super);\n\t    function BufferWhenSubscriber(destination, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.closingSelector = closingSelector;\n\t        this.subscribing = false;\n\t        this.openBuffer();\n\t    }\n\t    BufferWhenSubscriber.prototype._next = function (value) {\n\t        this.buffer.push(value);\n\t    };\n\t    BufferWhenSubscriber.prototype._complete = function () {\n\t        var buffer = this.buffer;\n\t        if (buffer) {\n\t            this.destination.next(buffer);\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    BufferWhenSubscriber.prototype._unsubscribe = function () {\n\t        this.buffer = null;\n\t        this.subscribing = false;\n\t    };\n\t    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.openBuffer();\n\t    };\n\t    BufferWhenSubscriber.prototype.notifyComplete = function () {\n\t        if (this.subscribing) {\n\t            this.complete();\n\t        }\n\t        else {\n\t            this.openBuffer();\n\t        }\n\t    };\n\t    BufferWhenSubscriber.prototype.openBuffer = function () {\n\t        var closingSubscription = this.closingSubscription;\n\t        if (closingSubscription) {\n\t            this.remove(closingSubscription);\n\t            closingSubscription.unsubscribe();\n\t        }\n\t        var buffer = this.buffer;\n\t        if (this.buffer) {\n\t            this.destination.next(buffer);\n\t        }\n\t        this.buffer = [];\n\t        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n\t        if (closingNotifier === errorObject_1.errorObject) {\n\t            this.error(errorObject_1.errorObject.e);\n\t        }\n\t        else {\n\t            closingSubscription = new Subscription_1.Subscription();\n\t            this.closingSubscription = closingSubscription;\n\t            this.add(closingSubscription);\n\t            this.subscribing = true;\n\t            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n\t            this.subscribing = false;\n\t        }\n\t    };\n\t    return BufferWhenSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 135 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar cache_1 = __webpack_require__(136);\n\tObservable_1.Observable.prototype.cache = cache_1.cache;\n\n\n/***/ },\n/* 136 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ReplaySubject_1 = __webpack_require__(122);\n\t/**\n\t * @param bufferSize\n\t * @param windowTime\n\t * @param scheduler\n\t * @return {Observable<any>}\n\t * @method cache\n\t * @owner Observable\n\t */\n\tfunction cache(bufferSize, windowTime, scheduler) {\n\t    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n\t    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n\t    var subject;\n\t    var source = this;\n\t    var refs = 0;\n\t    var outerSub;\n\t    var getSubject = function () {\n\t        subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n\t        return subject;\n\t    };\n\t    return new Observable_1.Observable(function (observer) {\n\t        if (!subject) {\n\t            subject = getSubject();\n\t            outerSub = source.subscribe(function (value) { return subject.next(value); }, function (err) {\n\t                var s = subject;\n\t                subject = null;\n\t                s.error(err);\n\t            }, function () { return subject.complete(); });\n\t        }\n\t        refs++;\n\t        if (!subject) {\n\t            subject = getSubject();\n\t        }\n\t        var innerSub = subject.subscribe(observer);\n\t        return function () {\n\t            refs--;\n\t            if (innerSub) {\n\t                innerSub.unsubscribe();\n\t            }\n\t            if (refs === 0) {\n\t                outerSub.unsubscribe();\n\t            }\n\t        };\n\t    });\n\t}\n\texports.cache = cache;\n\n\n/***/ },\n/* 137 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar catch_1 = __webpack_require__(138);\n\tObservable_1.Observable.prototype.catch = catch_1._catch;\n\n\n/***/ },\n/* 138 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n\t * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n\t *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n\t *  is returned by the `selector` will be used to continue the observable chain.\n\t * @return {Observable} an observable that originates from either the source or the observable returned by the\n\t *  catch `selector` function.\n\t * @method catch\n\t * @owner Observable\n\t */\n\tfunction _catch(selector) {\n\t    var operator = new CatchOperator(selector);\n\t    var caught = this.lift(operator);\n\t    return (operator.caught = caught);\n\t}\n\texports._catch = _catch;\n\tvar CatchOperator = (function () {\n\t    function CatchOperator(selector) {\n\t        this.selector = selector;\n\t    }\n\t    CatchOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n\t    };\n\t    return CatchOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar CatchSubscriber = (function (_super) {\n\t    __extends(CatchSubscriber, _super);\n\t    function CatchSubscriber(destination, selector, caught) {\n\t        _super.call(this, destination);\n\t        this.selector = selector;\n\t        this.caught = caught;\n\t    }\n\t    // NOTE: overriding `error` instead of `_error` because we don't want\n\t    // to have this flag this subscriber as `isStopped`.\n\t    CatchSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var result = void 0;\n\t            try {\n\t                result = this.selector(err, this.caught);\n\t            }\n\t            catch (err) {\n\t                this.destination.error(err);\n\t                return;\n\t            }\n\t            this._innerSub(result);\n\t        }\n\t    };\n\t    CatchSubscriber.prototype._innerSub = function (result) {\n\t        this.unsubscribe();\n\t        this.destination.remove(this);\n\t        result.subscribe(this.destination);\n\t    };\n\t    return CatchSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 139 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar combineAll_1 = __webpack_require__(140);\n\tObservable_1.Observable.prototype.combineAll = combineAll_1.combineAll;\n\n\n/***/ },\n/* 140 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar combineLatest_1 = __webpack_require__(39);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by waiting\n\t * for the outer Observable to complete, then applying {@link combineLatest}.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n\t * {@link combineLatest} when the Observable-of-Observables completes.</span>\n\t *\n\t * <img src=\"./img/combineAll.png\" width=\"100%\">\n\t *\n\t * Takes an Observable of Observables, and collects all Observables from it.\n\t * Once the outer Observable completes, it subscribes to all collected\n\t * Observables and combines their values using the {@link combineLatest}\n\t * strategy, such that:\n\t * - Every time an inner Observable emits, the output Observable emits.\n\t * - When the returned observable emits, it emits all of the latest values by:\n\t *   - If a `project` function is provided, it is called with each recent value\n\t *     from each inner Observable in whatever order they arrived, and the result\n\t *     of the `project` function is what is emitted by the output Observable.\n\t *   - If there is no `project` function, an array of all of the most recent\n\t *     values is emitted by the output Observable.\n\t *\n\t * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map(ev =>\n\t *   Rx.Observable.interval(Math.random()*2000).take(3)\n\t * ).take(2);\n\t * var result = higherOrder.combineAll();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineLatest}\n\t * @see {@link mergeAll}\n\t *\n\t * @param {function} [project] An optional function to map the most recent\n\t * values from each inner Observable into a new result. Takes each of the most\n\t * recent values from each collected inner Observable as arguments, in order.\n\t * @return {Observable} An Observable of projected results or arrays of recent\n\t * values.\n\t * @method combineAll\n\t * @owner Observable\n\t */\n\tfunction combineAll(project) {\n\t    return this.lift(new combineLatest_1.CombineLatestOperator(project));\n\t}\n\texports.combineAll = combineAll;\n\n\n/***/ },\n/* 141 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar combineLatest_1 = __webpack_require__(39);\n\tObservable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;\n\n\n/***/ },\n/* 142 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concat_1 = __webpack_require__(47);\n\tObservable_1.Observable.prototype.concat = concat_1.concat;\n\n\n/***/ },\n/* 143 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concatAll_1 = __webpack_require__(144);\n\tObservable_1.Observable.prototype.concatAll = concatAll_1.concatAll;\n\n\n/***/ },\n/* 144 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar mergeAll_1 = __webpack_require__(48);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by\n\t * concatenating the inner Observables in order.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n\t * inner Observable after the other.</span>\n\t *\n\t * <img src=\"./img/concatAll.png\" width=\"100%\">\n\t *\n\t * Joins every Observable emitted by the source (a higher-order Observable), in\n\t * a serial fashion. It subscribes to each inner Observable only after the\n\t * previous inner Observable has completed, and merges all of their values into\n\t * the returned observable.\n\t *\n\t * __Warning:__ If the source Observable emits Observables quickly and\n\t * endlessly, and the inner Observables it emits generally complete slower than\n\t * the source emits, you can run into memory issues as the incoming Observables\n\t * collect in an unbounded buffer.\n\t *\n\t * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n\t * to `1`.\n\t *\n\t * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n\t * var firstOrder = higherOrder.concatAll();\n\t * firstOrder.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concat}\n\t * @see {@link concatMap}\n\t * @see {@link concatMapTo}\n\t * @see {@link exhaust}\n\t * @see {@link mergeAll}\n\t * @see {@link switch}\n\t * @see {@link zipAll}\n\t *\n\t * @return {Observable} An Observable emitting values from all the inner\n\t * Observables concatenated.\n\t * @method concatAll\n\t * @owner Observable\n\t */\n\tfunction concatAll() {\n\t    return this.lift(new mergeAll_1.MergeAllOperator(1));\n\t}\n\texports.concatAll = concatAll;\n\n\n/***/ },\n/* 145 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concatMap_1 = __webpack_require__(146);\n\tObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n\n\n/***/ },\n/* 146 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar mergeMap_1 = __webpack_require__(147);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable, in a serialized fashion waiting for each one to complete before\n\t * merging the next.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link concatAll}.</span>\n\t *\n\t * <img src=\"./img/concatMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an (so-called \"inner\") Observable. Each new inner Observable is\n\t * concatenated with the previous inner Observable.\n\t *\n\t * __Warning:__ if source values arrive endlessly and faster than their\n\t * corresponding inner Observables can complete, it will result in memory issues\n\t * as inner Observables amass in an unbounded buffer waiting for their turn to\n\t * be subscribed to.\n\t *\n\t * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n\t * to `1`.\n\t *\n\t * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concat}\n\t * @see {@link concatAll}\n\t * @see {@link concatMapTo}\n\t * @see {@link exhaustMap}\n\t * @see {@link mergeMap}\n\t * @see {@link switchMap}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} an observable of values merged from the projected\n\t * Observables as they were subscribed to, one at a time. Optionally, these\n\t * values may have been projected from a passed `projectResult` argument.\n\t * @return {Observable} An Observable that emits the result of applying the\n\t * projection function (and the optional `resultSelector`) to each item emitted\n\t * by the source Observable and taking values from each projected inner\n\t * Observable sequentially.\n\t * @method concatMap\n\t * @owner Observable\n\t */\n\tfunction concatMap(project, resultSelector) {\n\t    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));\n\t}\n\texports.concatMap = concatMap;\n\n\n/***/ },\n/* 147 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link mergeAll}.</span>\n\t *\n\t * <img src=\"./img/mergeMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an Observable, and then merging those resulting Observables and\n\t * emitting the results of this merger.\n\t *\n\t * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n\t * var letters = Rx.Observable.of('a', 'b', 'c');\n\t * var result = letters.mergeMap(x =>\n\t *   Rx.Observable.interval(1000).map(i => x+i)\n\t * );\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMap}\n\t * @see {@link exhaustMap}\n\t * @see {@link merge}\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMapTo}\n\t * @see {@link mergeScan}\n\t * @see {@link switchMap}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @return {Observable} An Observable that emits the result of applying the\n\t * projection function (and the optional `resultSelector`) to each item emitted\n\t * by the source Observable and merging the results of the Observables obtained\n\t * from this transformation.\n\t * @method mergeMap\n\t * @owner Observable\n\t */\n\tfunction mergeMap(project, resultSelector, concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    if (typeof resultSelector === 'number') {\n\t        concurrent = resultSelector;\n\t        resultSelector = null;\n\t    }\n\t    return this.lift(new MergeMapOperator(project, resultSelector, concurrent));\n\t}\n\texports.mergeMap = mergeMap;\n\tvar MergeMapOperator = (function () {\n\t    function MergeMapOperator(project, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeMapOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n\t    };\n\t    return MergeMapOperator;\n\t}());\n\texports.MergeMapOperator = MergeMapOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeMapSubscriber = (function (_super) {\n\t    __extends(MergeMapSubscriber, _super);\n\t    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t        this.index = 0;\n\t    }\n\t    MergeMapSubscriber.prototype._next = function (value) {\n\t        if (this.active < this.concurrent) {\n\t            this._tryNext(value);\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype._tryNext = function (value) {\n\t        var result;\n\t        var index = this.index++;\n\t        try {\n\t            result = this.project(value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.active++;\n\t        this._innerSub(result, value, index);\n\t    };\n\t    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n\t        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n\t    };\n\t    MergeMapSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (this.resultSelector) {\n\t            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            this.destination.next(innerValue);\n\t        }\n\t    };\n\t    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeMapSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeMapSubscriber = MergeMapSubscriber;\n\n\n/***/ },\n/* 148 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar concatMapTo_1 = __webpack_require__(149);\n\tObservable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;\n\n\n/***/ },\n/* 149 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar mergeMapTo_1 = __webpack_require__(150);\n\t/**\n\t * Projects each source value to the same Observable which is merged multiple\n\t * times in a serialized fashion on the output Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n\t * always to the same inner Observable.</span>\n\t *\n\t * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n\t *\n\t * Maps each source value to the given Observable `innerObservable` regardless\n\t * of the source value, and then flattens those resulting Observables into one\n\t * single Observable, which is the output Observable. Each new `innerObservable`\n\t * instance emitted on the output Observable is concatenated with the previous\n\t * `innerObservable` instance.\n\t *\n\t * __Warning:__ if source values arrive endlessly and faster than their\n\t * corresponding inner Observables can complete, it will result in memory issues\n\t * as inner Observables amass in an unbounded buffer waiting for their turn to\n\t * be subscribed to.\n\t *\n\t * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n\t * set to `1`.\n\t *\n\t * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concat}\n\t * @see {@link concatAll}\n\t * @see {@link concatMap}\n\t * @see {@link mergeMapTo}\n\t * @see {@link switchMapTo}\n\t *\n\t * @param {Observable} innerObservable An Observable to replace each value from\n\t * the source Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An observable of values merged together by joining the\n\t * passed observable with itself, one after the other, for each value emitted\n\t * from the source.\n\t * @method concatMapTo\n\t * @owner Observable\n\t */\n\tfunction concatMapTo(innerObservable, resultSelector) {\n\t    return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable, resultSelector, 1));\n\t}\n\texports.concatMapTo = concatMapTo;\n\n\n/***/ },\n/* 150 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Projects each source value to the same Observable which is merged multiple\n\t * times in the output Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n\t * to the same inner Observable.</span>\n\t *\n\t * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n\t *\n\t * Maps each source value to the given Observable `innerObservable` regardless\n\t * of the source value, and then merges those resulting Observables into one\n\t * single Observable, which is the output Observable.\n\t *\n\t * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMapTo}\n\t * @see {@link merge}\n\t * @see {@link mergeAll}\n\t * @see {@link mergeMap}\n\t * @see {@link mergeScan}\n\t * @see {@link switchMapTo}\n\t *\n\t * @param {Observable} innerObservable An Observable to replace each value from\n\t * the source Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n\t * Observables being subscribed to concurrently.\n\t * @return {Observable} An Observable that emits items from the given\n\t * `innerObservable` (and optionally transformed through `resultSelector`) every\n\t * time a value is emitted on the source Observable.\n\t * @method mergeMapTo\n\t * @owner Observable\n\t */\n\tfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    if (typeof resultSelector === 'number') {\n\t        concurrent = resultSelector;\n\t        resultSelector = null;\n\t    }\n\t    return this.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));\n\t}\n\texports.mergeMapTo = mergeMapTo;\n\t// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n\t//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\n\tvar MergeMapToOperator = (function () {\n\t    function MergeMapToOperator(ish, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        this.ish = ish;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeMapToOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n\t    };\n\t    return MergeMapToOperator;\n\t}());\n\texports.MergeMapToOperator = MergeMapToOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeMapToSubscriber = (function (_super) {\n\t    __extends(MergeMapToSubscriber, _super);\n\t    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n\t        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t        _super.call(this, destination);\n\t        this.ish = ish;\n\t        this.resultSelector = resultSelector;\n\t        this.concurrent = concurrent;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t        this.index = 0;\n\t    }\n\t    MergeMapToSubscriber.prototype._next = function (value) {\n\t        if (this.active < this.concurrent) {\n\t            var resultSelector = this.resultSelector;\n\t            var index = this.index++;\n\t            var ish = this.ish;\n\t            var destination = this.destination;\n\t            this.active++;\n\t            this._innerSub(ish, destination, resultSelector, value, index);\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n\t        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n\t    };\n\t    MergeMapToSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        if (resultSelector) {\n\t            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            destination.next(innerValue);\n\t        }\n\t    };\n\t    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        var result;\n\t        try {\n\t            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t            return;\n\t        }\n\t        destination.next(result);\n\t    };\n\t    MergeMapToSubscriber.prototype.notifyError = function (err) {\n\t        this.destination.error(err);\n\t    };\n\t    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeMapToSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeMapToSubscriber = MergeMapToSubscriber;\n\n\n/***/ },\n/* 151 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar count_1 = __webpack_require__(152);\n\tObservable_1.Observable.prototype.count = count_1.count;\n\n\n/***/ },\n/* 152 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Counts the number of emissions on the source and emits that number when the\n\t * source completes.\n\t *\n\t * <span class=\"informal\">Tells how many values were emitted, when the source\n\t * completes.</span>\n\t *\n\t * <img src=\"./img/count.png\" width=\"100%\">\n\t *\n\t * `count` transforms an Observable that emits values into an Observable that\n\t * emits a single value that represents the number of values emitted by the\n\t * source Observable. If the source Observable terminates with an error, `count`\n\t * will pass this error notification along without emitting an value first. If\n\t * the source Observable does not terminate at all, `count` will neither emit\n\t * a value nor terminate. This operator takes an optional `predicate` function\n\t * as argument, in which case the output emission will represent the number of\n\t * source values that matched `true` with the `predicate`.\n\t *\n\t * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n\t * var seconds = Rx.Observable.interval(1000);\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var secondsBeforeClick = seconds.takeUntil(clicks);\n\t * var result = secondsBeforeClick.count();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n\t * var numbers = Rx.Observable.range(1, 7);\n\t * var result = numbers.count(i => i % 2 === 1);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link max}\n\t * @see {@link min}\n\t * @see {@link reduce}\n\t *\n\t * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n\t * boolean function to select what values are to be counted. It is provided with\n\t * arguments of:\n\t * - `value`: the value from the source Observable.\n\t * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n\t * - `source`: the source Observable instance itself.\n\t * @return {Observable} An Observable of one number that represents the count as\n\t * described above.\n\t * @method count\n\t * @owner Observable\n\t */\n\tfunction count(predicate) {\n\t    return this.lift(new CountOperator(predicate, this));\n\t}\n\texports.count = count;\n\tvar CountOperator = (function () {\n\t    function CountOperator(predicate, source) {\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t    }\n\t    CountOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n\t    };\n\t    return CountOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar CountSubscriber = (function (_super) {\n\t    __extends(CountSubscriber, _super);\n\t    function CountSubscriber(destination, predicate, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.count = 0;\n\t        this.index = 0;\n\t    }\n\t    CountSubscriber.prototype._next = function (value) {\n\t        if (this.predicate) {\n\t            this._tryPredicate(value);\n\t        }\n\t        else {\n\t            this.count++;\n\t        }\n\t    };\n\t    CountSubscriber.prototype._tryPredicate = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, this.index++, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            this.count++;\n\t        }\n\t    };\n\t    CountSubscriber.prototype._complete = function () {\n\t        this.destination.next(this.count);\n\t        this.destination.complete();\n\t    };\n\t    return CountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 153 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar dematerialize_1 = __webpack_require__(154);\n\tObservable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;\n\n\n/***/ },\n/* 154 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Converts an Observable of {@link Notification} objects into the emissions\n\t * that they represent.\n\t *\n\t * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n\t * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n\t *\n\t * <img src=\"./img/dematerialize.png\" width=\"100%\">\n\t *\n\t * `dematerialize` is assumed to operate an Observable that only emits\n\t * {@link Notification} objects as `next` emissions, and does not emit any\n\t * `error`. Such Observable is the output of a `materialize` operation. Those\n\t * notifications are then unwrapped using the metadata they contain, and emitted\n\t * as `next`, `error`, and `complete` on the output Observable.\n\t *\n\t * Use this operator in conjunction with {@link materialize}.\n\t *\n\t * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n\t * var notifA = new Rx.Notification('N', 'A');\n\t * var notifB = new Rx.Notification('N', 'B');\n\t * var notifE = new Rx.Notification('E', void 0,\n\t *   new TypeError('x.toUpperCase is not a function')\n\t * );\n\t * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n\t * var upperCase = materialized.dematerialize();\n\t * upperCase.subscribe(x => console.log(x), e => console.error(e));\n\t *\n\t * @see {@link Notification}\n\t * @see {@link materialize}\n\t *\n\t * @return {Observable} An Observable that emits items and notifications\n\t * embedded in Notification objects emitted by the source Observable.\n\t * @method dematerialize\n\t * @owner Observable\n\t */\n\tfunction dematerialize() {\n\t    return this.lift(new DeMaterializeOperator());\n\t}\n\texports.dematerialize = dematerialize;\n\tvar DeMaterializeOperator = (function () {\n\t    function DeMaterializeOperator() {\n\t    }\n\t    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DeMaterializeSubscriber(subscriber));\n\t    };\n\t    return DeMaterializeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DeMaterializeSubscriber = (function (_super) {\n\t    __extends(DeMaterializeSubscriber, _super);\n\t    function DeMaterializeSubscriber(destination) {\n\t        _super.call(this, destination);\n\t    }\n\t    DeMaterializeSubscriber.prototype._next = function (value) {\n\t        value.observe(this.destination);\n\t    };\n\t    return DeMaterializeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 155 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar debounce_1 = __webpack_require__(156);\n\tObservable_1.Observable.prototype.debounce = debounce_1.debounce;\n\n\n/***/ },\n/* 156 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Emits a value from the source Observable only after a particular time span\n\t * determined by another Observable has passed without another source emission.\n\t *\n\t * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n\t * emission silence is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/debounce.png\" width=\"100%\">\n\t *\n\t * `debounce` delays values emitted by the source Observable, but drops previous\n\t * pending delayed emissions if a new value arrives on the source Observable.\n\t * This operator keeps track of the most recent value from the source\n\t * Observable, and spawns a duration Observable by calling the\n\t * `durationSelector` function. The value is emitted only when the duration\n\t * Observable emits a value or completes, and if no other value was emitted on\n\t * the source Observable since the duration Observable was spawned. If a new\n\t * value appears before the duration Observable emits, the previous value will\n\t * be dropped and will not be emitted on the output Observable.\n\t *\n\t * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n\t * delay-like operator since output emissions do not necessarily occur at the\n\t * same time as they did on the source Observable.\n\t *\n\t * @example <caption>Emit the most recent click after a burst of clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounceTime}\n\t * @see {@link delayWhen}\n\t * @see {@link throttle}\n\t *\n\t * @param {function(value: T): Observable|Promise} durationSelector A function\n\t * that receives a value from the source Observable, for computing the timeout\n\t * duration for each source value, returned as an Observable or a Promise.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by the specified duration Observable returned by\n\t * `durationSelector`, and may drop some values if they occur too frequently.\n\t * @method debounce\n\t * @owner Observable\n\t */\n\tfunction debounce(durationSelector) {\n\t    return this.lift(new DebounceOperator(durationSelector));\n\t}\n\texports.debounce = debounce;\n\tvar DebounceOperator = (function () {\n\t    function DebounceOperator(durationSelector) {\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    DebounceOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n\t    };\n\t    return DebounceOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DebounceSubscriber = (function (_super) {\n\t    __extends(DebounceSubscriber, _super);\n\t    function DebounceSubscriber(destination, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.durationSelector = durationSelector;\n\t        this.hasValue = false;\n\t        this.durationSubscription = null;\n\t    }\n\t    DebounceSubscriber.prototype._next = function (value) {\n\t        try {\n\t            var result = this.durationSelector.call(this, value);\n\t            if (result) {\n\t                this._tryNext(value, result);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    DebounceSubscriber.prototype._complete = function () {\n\t        this.emitValue();\n\t        this.destination.complete();\n\t    };\n\t    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n\t        var subscription = this.durationSubscription;\n\t        this.value = value;\n\t        this.hasValue = true;\n\t        if (subscription) {\n\t            subscription.unsubscribe();\n\t            this.remove(subscription);\n\t        }\n\t        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n\t        if (!subscription.isUnsubscribed) {\n\t            this.add(this.durationSubscription = subscription);\n\t        }\n\t    };\n\t    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.emitValue();\n\t    };\n\t    DebounceSubscriber.prototype.notifyComplete = function () {\n\t        this.emitValue();\n\t    };\n\t    DebounceSubscriber.prototype.emitValue = function () {\n\t        if (this.hasValue) {\n\t            var value = this.value;\n\t            var subscription = this.durationSubscription;\n\t            if (subscription) {\n\t                this.durationSubscription = null;\n\t                subscription.unsubscribe();\n\t                this.remove(subscription);\n\t            }\n\t            this.value = null;\n\t            this.hasValue = false;\n\t            _super.prototype._next.call(this, value);\n\t        }\n\t    };\n\t    return DebounceSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 157 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar debounceTime_1 = __webpack_require__(158);\n\tObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n\n\n/***/ },\n/* 158 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * Emits a value from the source Observable only after a particular time span\n\t * has passed without another source emission.\n\t *\n\t * <span class=\"informal\">It's like {@link delay}, but passes only the most\n\t * recent value from each burst of emissions.</span>\n\t *\n\t * <img src=\"./img/debounceTime.png\" width=\"100%\">\n\t *\n\t * `debounceTime` delays values emitted by the source Observable, but drops\n\t * previous pending delayed emissions if a new value arrives on the source\n\t * Observable. This operator keeps track of the most recent value from the\n\t * source Observable, and emits that only when `dueTime` enough time has passed\n\t * without any other value appearing on the source Observable. If a new value\n\t * appears before `dueTime` silence occurs, the previous value will be dropped\n\t * and will not be emitted on the output Observable.\n\t *\n\t * This is a rate-limiting operator, because it is impossible for more than one\n\t * value to be emitted in any time window of duration `dueTime`, but it is also\n\t * a delay-like operator since output emissions do not occur at the same time as\n\t * they did on the source Observable. Optionally takes a {@link Scheduler} for\n\t * managing timers.\n\t *\n\t * @example <caption>Emit the most recent click after a burst of clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.debounceTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounce}\n\t * @see {@link delay}\n\t * @see {@link sampleTime}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {number} dueTime The timeout duration in milliseconds (or the time\n\t * unit determined internally by the optional `scheduler`) for the window of\n\t * time required to wait for emission silence before emitting the most recent\n\t * source value.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the timeout for each value.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by the specified `dueTime`, and may drop some values if they occur\n\t * too frequently.\n\t * @method debounceTime\n\t * @owner Observable\n\t */\n\tfunction debounceTime(dueTime, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n\t}\n\texports.debounceTime = debounceTime;\n\tvar DebounceTimeOperator = (function () {\n\t    function DebounceTimeOperator(dueTime, scheduler) {\n\t        this.dueTime = dueTime;\n\t        this.scheduler = scheduler;\n\t    }\n\t    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n\t    };\n\t    return DebounceTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DebounceTimeSubscriber = (function (_super) {\n\t    __extends(DebounceTimeSubscriber, _super);\n\t    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n\t        _super.call(this, destination);\n\t        this.dueTime = dueTime;\n\t        this.scheduler = scheduler;\n\t        this.debouncedSubscription = null;\n\t        this.lastValue = null;\n\t        this.hasValue = false;\n\t    }\n\t    DebounceTimeSubscriber.prototype._next = function (value) {\n\t        this.clearDebounce();\n\t        this.lastValue = value;\n\t        this.hasValue = true;\n\t        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n\t    };\n\t    DebounceTimeSubscriber.prototype._complete = function () {\n\t        this.debouncedNext();\n\t        this.destination.complete();\n\t    };\n\t    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n\t        this.clearDebounce();\n\t        if (this.hasValue) {\n\t            this.destination.next(this.lastValue);\n\t            this.lastValue = null;\n\t            this.hasValue = false;\n\t        }\n\t    };\n\t    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n\t        var debouncedSubscription = this.debouncedSubscription;\n\t        if (debouncedSubscription !== null) {\n\t            this.remove(debouncedSubscription);\n\t            debouncedSubscription.unsubscribe();\n\t            this.debouncedSubscription = null;\n\t        }\n\t    };\n\t    return DebounceTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNext(subscriber) {\n\t    subscriber.debouncedNext();\n\t}\n\n\n/***/ },\n/* 159 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar defaultIfEmpty_1 = __webpack_require__(160);\n\tObservable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\n\n\n/***/ },\n/* 160 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits a given value if the source Observable completes without emitting any\n\t * `next` value, otherwise mirrors the source Observable.\n\t *\n\t * <span class=\"informal\">If the source Observable turns out to be empty, then\n\t * this operator will emit a default value.</span>\n\t *\n\t * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n\t *\n\t * `defaultIfEmpty` emits the values emitted by the source Observable or a\n\t * specified default value if the source Observable is empty (completes without\n\t * having emitted any `next` value).\n\t *\n\t * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n\t * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link empty}\n\t * @see {@link last}\n\t *\n\t * @param {any} [defaultValue=null] The default value used if the source\n\t * Observable is empty.\n\t * @return {Observable} An Observable that emits either the specified\n\t * `defaultValue` if the source Observable emits no items, or the values emitted\n\t * by the source Observable.\n\t * @method defaultIfEmpty\n\t * @owner Observable\n\t */\n\tfunction defaultIfEmpty(defaultValue) {\n\t    if (defaultValue === void 0) { defaultValue = null; }\n\t    return this.lift(new DefaultIfEmptyOperator(defaultValue));\n\t}\n\texports.defaultIfEmpty = defaultIfEmpty;\n\tvar DefaultIfEmptyOperator = (function () {\n\t    function DefaultIfEmptyOperator(defaultValue) {\n\t        this.defaultValue = defaultValue;\n\t    }\n\t    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n\t    };\n\t    return DefaultIfEmptyOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DefaultIfEmptySubscriber = (function (_super) {\n\t    __extends(DefaultIfEmptySubscriber, _super);\n\t    function DefaultIfEmptySubscriber(destination, defaultValue) {\n\t        _super.call(this, destination);\n\t        this.defaultValue = defaultValue;\n\t        this.isEmpty = true;\n\t    }\n\t    DefaultIfEmptySubscriber.prototype._next = function (value) {\n\t        this.isEmpty = false;\n\t        this.destination.next(value);\n\t    };\n\t    DefaultIfEmptySubscriber.prototype._complete = function () {\n\t        if (this.isEmpty) {\n\t            this.destination.next(this.defaultValue);\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    return DefaultIfEmptySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 161 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar delay_1 = __webpack_require__(162);\n\tObservable_1.Observable.prototype.delay = delay_1.delay;\n\n\n/***/ },\n/* 162 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(82);\n\tvar isDate_1 = __webpack_require__(112);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Notification_1 = __webpack_require__(64);\n\t/**\n\t * Delays the emission of items from the source Observable by a given timeout or\n\t * until a given Date.\n\t *\n\t * <span class=\"informal\">Time shifts each item by some specified amount of\n\t * milliseconds.</span>\n\t *\n\t * <img src=\"./img/delay.png\" width=\"100%\">\n\t *\n\t * If the delay argument is a Number, this operator time shifts the source\n\t * Observable by that amount of time expressed in milliseconds. The relative\n\t * time intervals between the values are preserved.\n\t *\n\t * If the delay argument is a Date, this operator time shifts the start of the\n\t * Observable execution until the given date occurs.\n\t *\n\t * @example <caption>Delay each click by one second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n\t * delayedClicks.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Delay all clicks until a future date happens</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var date = new Date('March 15, 2050 12:00:00'); // in the future\n\t * var delayedClicks = clicks.delay(date); // click emitted only after that date\n\t * delayedClicks.subscribe(x => console.log(x));\n\t *\n\t * @see {@link debounceTime}\n\t * @see {@link delayWhen}\n\t *\n\t * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n\t * a `Date` until which the emission of the source items is delayed.\n\t * @param {Scheduler} [scheduler=async] The Scheduler to use for\n\t * managing the timers that handle the time-shift for each item.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by the specified timeout or Date.\n\t * @method delay\n\t * @owner Observable\n\t */\n\tfunction delay(delay, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    var absoluteDelay = isDate_1.isDate(delay);\n\t    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n\t    return this.lift(new DelayOperator(delayFor, scheduler));\n\t}\n\texports.delay = delay;\n\tvar DelayOperator = (function () {\n\t    function DelayOperator(delay, scheduler) {\n\t        this.delay = delay;\n\t        this.scheduler = scheduler;\n\t    }\n\t    DelayOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n\t    };\n\t    return DelayOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DelaySubscriber = (function (_super) {\n\t    __extends(DelaySubscriber, _super);\n\t    function DelaySubscriber(destination, delay, scheduler) {\n\t        _super.call(this, destination);\n\t        this.delay = delay;\n\t        this.scheduler = scheduler;\n\t        this.queue = [];\n\t        this.active = false;\n\t        this.errored = false;\n\t    }\n\t    DelaySubscriber.dispatch = function (state) {\n\t        var source = state.source;\n\t        var queue = source.queue;\n\t        var scheduler = state.scheduler;\n\t        var destination = state.destination;\n\t        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n\t            queue.shift().notification.observe(destination);\n\t        }\n\t        if (queue.length > 0) {\n\t            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n\t            this.schedule(state, delay_1);\n\t        }\n\t        else {\n\t            source.active = false;\n\t        }\n\t    };\n\t    DelaySubscriber.prototype._schedule = function (scheduler) {\n\t        this.active = true;\n\t        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n\t            source: this, destination: this.destination, scheduler: scheduler\n\t        }));\n\t    };\n\t    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n\t        if (this.errored === true) {\n\t            return;\n\t        }\n\t        var scheduler = this.scheduler;\n\t        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n\t        this.queue.push(message);\n\t        if (this.active === false) {\n\t            this._schedule(scheduler);\n\t        }\n\t    };\n\t    DelaySubscriber.prototype._next = function (value) {\n\t        this.scheduleNotification(Notification_1.Notification.createNext(value));\n\t    };\n\t    DelaySubscriber.prototype._error = function (err) {\n\t        this.errored = true;\n\t        this.queue = [];\n\t        this.destination.error(err);\n\t    };\n\t    DelaySubscriber.prototype._complete = function () {\n\t        this.scheduleNotification(Notification_1.Notification.createComplete());\n\t    };\n\t    return DelaySubscriber;\n\t}(Subscriber_1.Subscriber));\n\tvar DelayMessage = (function () {\n\t    function DelayMessage(time, notification) {\n\t        this.time = time;\n\t        this.notification = notification;\n\t    }\n\t    return DelayMessage;\n\t}());\n\n\n/***/ },\n/* 163 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar delayWhen_1 = __webpack_require__(164);\n\tObservable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;\n\n\n/***/ },\n/* 164 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Delays the emission of items from the source Observable by a given time span\n\t * determined by the emissions of another Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link delay}, but the time span of the\n\t * delay duration is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/delayWhen.png\" width=\"100%\">\n\t *\n\t * `delayWhen` time shifts each emitted value from the source Observable by a\n\t * time span determined by another Observable. When the source emits a value,\n\t * the `delayDurationSelector` function is called with the source value as\n\t * argument, and should return an Observable, called the \"duration\" Observable.\n\t * The source value is emitted on the output Observable only when the duration\n\t * Observable emits a value or completes.\n\t *\n\t * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n\t * is an Observable. When `subscriptionDelay` emits its first value or\n\t * completes, the source Observable is subscribed to and starts behaving like\n\t * described in the previous paragraph. If `subscriptionDelay` is not provided,\n\t * `delayWhen` will subscribe to the source Observable as soon as the output\n\t * Observable is subscribed.\n\t *\n\t * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var delayedClicks = clicks.delayWhen(event =>\n\t *   Rx.Observable.interval(Math.random() * 5000)\n\t * );\n\t * delayedClicks.subscribe(x => console.log(x));\n\t *\n\t * @see {@link debounce}\n\t * @see {@link delay}\n\t *\n\t * @param {function(value: T): Observable} delayDurationSelector A function that\n\t * returns an Observable for each value emitted by the source Observable, which\n\t * is then used to delay the emission of that item on the output Observable\n\t * until the Observable returned from this function emits a value.\n\t * @param {Observable} subscriptionDelay An Observable that triggers the\n\t * subscription to the source Observable once it emits any value.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by an amount of time specified by the Observable returned by\n\t * `delayDurationSelector`.\n\t * @method delayWhen\n\t * @owner Observable\n\t */\n\tfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n\t    if (subscriptionDelay) {\n\t        return new SubscriptionDelayObservable(this, subscriptionDelay)\n\t            .lift(new DelayWhenOperator(delayDurationSelector));\n\t    }\n\t    return this.lift(new DelayWhenOperator(delayDurationSelector));\n\t}\n\texports.delayWhen = delayWhen;\n\tvar DelayWhenOperator = (function () {\n\t    function DelayWhenOperator(delayDurationSelector) {\n\t        this.delayDurationSelector = delayDurationSelector;\n\t    }\n\t    DelayWhenOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n\t    };\n\t    return DelayWhenOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DelayWhenSubscriber = (function (_super) {\n\t    __extends(DelayWhenSubscriber, _super);\n\t    function DelayWhenSubscriber(destination, delayDurationSelector) {\n\t        _super.call(this, destination);\n\t        this.delayDurationSelector = delayDurationSelector;\n\t        this.completed = false;\n\t        this.delayNotifierSubscriptions = [];\n\t        this.values = [];\n\t    }\n\t    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.destination.next(outerValue);\n\t        this.removeSubscription(innerSub);\n\t        this.tryComplete();\n\t    };\n\t    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var value = this.removeSubscription(innerSub);\n\t        if (value) {\n\t            this.destination.next(value);\n\t        }\n\t        this.tryComplete();\n\t    };\n\t    DelayWhenSubscriber.prototype._next = function (value) {\n\t        try {\n\t            var delayNotifier = this.delayDurationSelector(value);\n\t            if (delayNotifier) {\n\t                this.tryDelay(delayNotifier, value);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    DelayWhenSubscriber.prototype._complete = function () {\n\t        this.completed = true;\n\t        this.tryComplete();\n\t    };\n\t    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n\t        subscription.unsubscribe();\n\t        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n\t        var value = null;\n\t        if (subscriptionIdx !== -1) {\n\t            value = this.values[subscriptionIdx];\n\t            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n\t            this.values.splice(subscriptionIdx, 1);\n\t        }\n\t        return value;\n\t    };\n\t    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n\t        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n\t        this.add(notifierSubscription);\n\t        this.delayNotifierSubscriptions.push(notifierSubscription);\n\t        this.values.push(value);\n\t    };\n\t    DelayWhenSubscriber.prototype.tryComplete = function () {\n\t        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return DelayWhenSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubscriptionDelayObservable = (function (_super) {\n\t    __extends(SubscriptionDelayObservable, _super);\n\t    function SubscriptionDelayObservable(source, subscriptionDelay) {\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.subscriptionDelay = subscriptionDelay;\n\t    }\n\t    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n\t        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n\t    };\n\t    return SubscriptionDelayObservable;\n\t}(Observable_1.Observable));\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubscriptionDelaySubscriber = (function (_super) {\n\t    __extends(SubscriptionDelaySubscriber, _super);\n\t    function SubscriptionDelaySubscriber(parent, source) {\n\t        _super.call(this);\n\t        this.parent = parent;\n\t        this.source = source;\n\t        this.sourceSubscribed = false;\n\t    }\n\t    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n\t        this.subscribeToSource();\n\t    };\n\t    SubscriptionDelaySubscriber.prototype._error = function (err) {\n\t        this.unsubscribe();\n\t        this.parent.error(err);\n\t    };\n\t    SubscriptionDelaySubscriber.prototype._complete = function () {\n\t        this.subscribeToSource();\n\t    };\n\t    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n\t        if (!this.sourceSubscribed) {\n\t            this.sourceSubscribed = true;\n\t            this.unsubscribe();\n\t            this.source.subscribe(this.parent);\n\t        }\n\t    };\n\t    return SubscriptionDelaySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 165 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinct_1 = __webpack_require__(166);\n\tObservable_1.Observable.prototype.distinct = distinct_1.distinct;\n\n\n/***/ },\n/* 166 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n\t * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n\t * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n\t * @method distinct\n\t * @owner Observable\n\t */\n\tfunction distinct(compare, flushes) {\n\t    return this.lift(new DistinctOperator(compare, flushes));\n\t}\n\texports.distinct = distinct;\n\tvar DistinctOperator = (function () {\n\t    function DistinctOperator(compare, flushes) {\n\t        this.compare = compare;\n\t        this.flushes = flushes;\n\t    }\n\t    DistinctOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n\t    };\n\t    return DistinctOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DistinctSubscriber = (function (_super) {\n\t    __extends(DistinctSubscriber, _super);\n\t    function DistinctSubscriber(destination, compare, flushes) {\n\t        _super.call(this, destination);\n\t        this.values = [];\n\t        if (typeof compare === 'function') {\n\t            this.compare = compare;\n\t        }\n\t        if (flushes) {\n\t            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n\t        }\n\t    }\n\t    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.values.length = 0;\n\t    };\n\t    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    DistinctSubscriber.prototype._next = function (value) {\n\t        var found = false;\n\t        var values = this.values;\n\t        var len = values.length;\n\t        try {\n\t            for (var i = 0; i < len; i++) {\n\t                if (this.compare(values[i], value)) {\n\t                    found = true;\n\t                    return;\n\t                }\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.values.push(value);\n\t        this.destination.next(value);\n\t    };\n\t    DistinctSubscriber.prototype.compare = function (x, y) {\n\t        return x === y;\n\t    };\n\t    return DistinctSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.DistinctSubscriber = DistinctSubscriber;\n\n\n/***/ },\n/* 167 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinctKey_1 = __webpack_require__(168);\n\tObservable_1.Observable.prototype.distinctKey = distinctKey_1.distinctKey;\n\n\n/***/ },\n/* 168 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar distinct_1 = __webpack_require__(166);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n\t * using a property accessed by using the key provided to check if the two items are distinct.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n\t * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n\t * @param {string} key string key for object property lookup on each item.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n\t * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n\t * @method distinctKey\n\t * @owner Observable\n\t */\n\tfunction distinctKey(key, compare, flushes) {\n\t    return distinct_1.distinct.call(this, function (x, y) {\n\t        if (compare) {\n\t            return compare(x[key], y[key]);\n\t        }\n\t        return x[key] === y[key];\n\t    }, flushes);\n\t}\n\texports.distinctKey = distinctKey;\n\n\n/***/ },\n/* 169 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinctUntilChanged_1 = __webpack_require__(170);\n\tObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n\n\n/***/ },\n/* 170 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n\t * @method distinctUntilChanged\n\t * @owner Observable\n\t */\n\tfunction distinctUntilChanged(compare, keySelector) {\n\t    return this.lift(new DistinctUntilChangedOperator(compare, keySelector));\n\t}\n\texports.distinctUntilChanged = distinctUntilChanged;\n\tvar DistinctUntilChangedOperator = (function () {\n\t    function DistinctUntilChangedOperator(compare, keySelector) {\n\t        this.compare = compare;\n\t        this.keySelector = keySelector;\n\t    }\n\t    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n\t    };\n\t    return DistinctUntilChangedOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DistinctUntilChangedSubscriber = (function (_super) {\n\t    __extends(DistinctUntilChangedSubscriber, _super);\n\t    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n\t        _super.call(this, destination);\n\t        this.keySelector = keySelector;\n\t        this.hasKey = false;\n\t        if (typeof compare === 'function') {\n\t            this.compare = compare;\n\t        }\n\t    }\n\t    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n\t        return x === y;\n\t    };\n\t    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n\t        var keySelector = this.keySelector;\n\t        var key = value;\n\t        if (keySelector) {\n\t            key = tryCatch_1.tryCatch(this.keySelector)(value);\n\t            if (key === errorObject_1.errorObject) {\n\t                return this.destination.error(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        var result = false;\n\t        if (this.hasKey) {\n\t            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n\t            if (result === errorObject_1.errorObject) {\n\t                return this.destination.error(errorObject_1.errorObject.e);\n\t            }\n\t        }\n\t        else {\n\t            this.hasKey = true;\n\t        }\n\t        if (Boolean(result) === false) {\n\t            this.key = key;\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    return DistinctUntilChangedSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 171 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar distinctUntilKeyChanged_1 = __webpack_require__(172);\n\tObservable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\n\n\n/***/ },\n/* 172 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar distinctUntilChanged_1 = __webpack_require__(170);\n\t/**\n\t * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n\t * using a property accessed by using the key provided to check if the two items are distinct.\n\t * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\t * If a comparator function is not provided, an equality check is used by default.\n\t * @param {string} key string key for object property lookup on each item.\n\t * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n\t * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n\t * @method distinctUntilKeyChanged\n\t * @owner Observable\n\t */\n\tfunction distinctUntilKeyChanged(key, compare) {\n\t    return distinctUntilChanged_1.distinctUntilChanged.call(this, function (x, y) {\n\t        if (compare) {\n\t            return compare(x[key], y[key]);\n\t        }\n\t        return x[key] === y[key];\n\t    });\n\t}\n\texports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\n\n/***/ },\n/* 173 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar do_1 = __webpack_require__(174);\n\tObservable_1.Observable.prototype.do = do_1._do;\n\n\n/***/ },\n/* 174 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Perform a side effect for every emission on the source Observable, but return\n\t * an Observable that is identical to the source.\n\t *\n\t * <span class=\"informal\">Intercepts each emission on the source and runs a\n\t * function, but returns an output which is identical to the source.</span>\n\t *\n\t * <img src=\"./img/do.png\" width=\"100%\">\n\t *\n\t * Returns a mirrored Observable of the source Observable, but modified so that\n\t * the provided Observer is called to perform a side effect for every value,\n\t * error, and completion emitted by the source. Any errors that are thrown in\n\t * the aforementioned Observer or handlers are safely sent down the error path\n\t * of the output Observable.\n\t *\n\t * This operator is useful for debugging your Observables for the correct values\n\t * or performing other side effects.\n\t *\n\t * Note: this is different to a `subscribe` on the Observable. If the Observable\n\t * returned by `do` is not subscribed, the side effects specified by the\n\t * Observer will never happen. `do` therefore simply spies on existing\n\t * execution, it does not trigger an execution to happen like `subscribe` does.\n\t *\n\t * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var positions = clicks\n\t *   .do(ev => console.log(ev))\n\t *   .map(ev => ev.clientX);\n\t * positions.subscribe(x => console.log(x));\n\t *\n\t * @see {@link map}\n\t * @see {@link subscribe}\n\t *\n\t * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n\t * callback for `next`.\n\t * @param {function} [error] Callback for errors in the source.\n\t * @param {function} [complete] Callback for the completion of the source.\n\t * @return {Observable} An Observable identical to the source, but runs the\n\t * specified Observer or callback(s) for each item.\n\t * @method do\n\t * @name do\n\t * @owner Observable\n\t */\n\tfunction _do(nextOrObserver, error, complete) {\n\t    return this.lift(new DoOperator(nextOrObserver, error, complete));\n\t}\n\texports._do = _do;\n\tvar DoOperator = (function () {\n\t    function DoOperator(nextOrObserver, error, complete) {\n\t        this.nextOrObserver = nextOrObserver;\n\t        this.error = error;\n\t        this.complete = complete;\n\t    }\n\t    DoOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n\t    };\n\t    return DoOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DoSubscriber = (function (_super) {\n\t    __extends(DoSubscriber, _super);\n\t    function DoSubscriber(destination, nextOrObserver, error, complete) {\n\t        _super.call(this, destination);\n\t        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n\t        safeSubscriber.syncErrorThrowable = true;\n\t        this.add(safeSubscriber);\n\t        this.safeSubscriber = safeSubscriber;\n\t    }\n\t    DoSubscriber.prototype._next = function (value) {\n\t        var safeSubscriber = this.safeSubscriber;\n\t        safeSubscriber.next(value);\n\t        if (safeSubscriber.syncErrorThrown) {\n\t            this.destination.error(safeSubscriber.syncErrorValue);\n\t        }\n\t        else {\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    DoSubscriber.prototype._error = function (err) {\n\t        var safeSubscriber = this.safeSubscriber;\n\t        safeSubscriber.error(err);\n\t        if (safeSubscriber.syncErrorThrown) {\n\t            this.destination.error(safeSubscriber.syncErrorValue);\n\t        }\n\t        else {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    DoSubscriber.prototype._complete = function () {\n\t        var safeSubscriber = this.safeSubscriber;\n\t        safeSubscriber.complete();\n\t        if (safeSubscriber.syncErrorThrown) {\n\t            this.destination.error(safeSubscriber.syncErrorValue);\n\t        }\n\t        else {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return DoSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 175 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar exhaust_1 = __webpack_require__(176);\n\tObservable_1.Observable.prototype.exhaust = exhaust_1.exhaust;\n\n\n/***/ },\n/* 176 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by dropping\n\t * inner Observables while the previous inner Observable has not yet completed.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n\t * next inner Observables while the current inner is still executing.</span>\n\t *\n\t * <img src=\"./img/exhaust.png\" width=\"100%\">\n\t *\n\t * `exhaust` subscribes to an Observable that emits Observables, also known as a\n\t * higher-order Observable. Each time it observes one of these emitted inner\n\t * Observables, the output Observable begins emitting the items emitted by that\n\t * inner Observable. So far, it behaves like {@link mergeAll}. However,\n\t * `exhaust` ignores every new inner Observable if the previous Observable has\n\t * not yet completed. Once that one completes, it will accept and flatten the\n\t * next inner Observable and repeat this process.\n\t *\n\t * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n\t * var result = higherOrder.exhaust();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concatAll}\n\t * @see {@link switch}\n\t * @see {@link mergeAll}\n\t * @see {@link exhaustMap}\n\t * @see {@link zipAll}\n\t *\n\t * @return {Observable} Returns an Observable that takes a source of Observables\n\t * and propagates the first observable exclusively until it completes before\n\t * subscribing to the next.\n\t * @method exhaust\n\t * @owner Observable\n\t */\n\tfunction exhaust() {\n\t    return this.lift(new SwitchFirstOperator());\n\t}\n\texports.exhaust = exhaust;\n\tvar SwitchFirstOperator = (function () {\n\t    function SwitchFirstOperator() {\n\t    }\n\t    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchFirstSubscriber(subscriber));\n\t    };\n\t    return SwitchFirstOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchFirstSubscriber = (function (_super) {\n\t    __extends(SwitchFirstSubscriber, _super);\n\t    function SwitchFirstSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.hasCompleted = false;\n\t        this.hasSubscription = false;\n\t    }\n\t    SwitchFirstSubscriber.prototype._next = function (value) {\n\t        if (!this.hasSubscription) {\n\t            this.hasSubscription = true;\n\t            this.add(subscribeToResult_1.subscribeToResult(this, value));\n\t        }\n\t    };\n\t    SwitchFirstSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (!this.hasSubscription) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.hasSubscription = false;\n\t        if (this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return SwitchFirstSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 177 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar exhaustMap_1 = __webpack_require__(178);\n\tObservable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;\n\n\n/***/ },\n/* 178 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable only if the previous projected Observable has completed.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link exhaust}.</span>\n\t *\n\t * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an (so-called \"inner\") Observable. When it projects a source value to\n\t * an Observable, the output Observable begins emitting the items emitted by\n\t * that projected Observable. However, `exhaustMap` ignores every new projected\n\t * Observable if the previous projected Observable has not yet completed. Once\n\t * that one completes, it will accept and flatten the next projected Observable\n\t * and repeat this process.\n\t *\n\t * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMap}\n\t * @see {@link exhaust}\n\t * @see {@link mergeMap}\n\t * @see {@link switchMap}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An Observable containing projected Observables\n\t * of each item of the source, ignoring projected Observables that start before\n\t * their preceding Observable has completed.\n\t * @method exhaustMap\n\t * @owner Observable\n\t */\n\tfunction exhaustMap(project, resultSelector) {\n\t    return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n\t}\n\texports.exhaustMap = exhaustMap;\n\tvar SwitchFirstMapOperator = (function () {\n\t    function SwitchFirstMapOperator(project, resultSelector) {\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n\t    };\n\t    return SwitchFirstMapOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchFirstMapSubscriber = (function (_super) {\n\t    __extends(SwitchFirstMapSubscriber, _super);\n\t    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.hasSubscription = false;\n\t        this.hasCompleted = false;\n\t        this.index = 0;\n\t    }\n\t    SwitchFirstMapSubscriber.prototype._next = function (value) {\n\t        if (!this.hasSubscription) {\n\t            this.tryNext(value);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n\t        var index = this.index++;\n\t        var destination = this.destination;\n\t        try {\n\t            var result = this.project(value, index);\n\t            this.hasSubscription = true;\n\t            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (!this.hasSubscription) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        if (resultSelector) {\n\t            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            destination.next(innerValue);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        try {\n\t            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t            destination.next(result);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t        }\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n\t        this.destination.error(err);\n\t    };\n\t    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.hasSubscription = false;\n\t        if (this.hasCompleted) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return SwitchFirstMapSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 179 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar expand_1 = __webpack_require__(180);\n\tObservable_1.Observable.prototype.expand = expand_1.expand;\n\n\n/***/ },\n/* 180 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Returns an Observable where for each item in the source Observable, the supplied function is applied to each item,\n\t * resulting in a new value to then be applied again with the function.\n\t * @param {function} project the function for projecting the next emitted item of the Observable.\n\t * @param {number} [concurrent] the max number of observables that can be created concurrently. defaults to infinity.\n\t * @param {Scheduler} [scheduler] The Scheduler to use for managing the expansions.\n\t * @return {Observable} an Observable containing the expansions of the source Observable.\n\t * @method expand\n\t * @owner Observable\n\t */\n\tfunction expand(project, concurrent, scheduler) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    if (scheduler === void 0) { scheduler = undefined; }\n\t    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\t    return this.lift(new ExpandOperator(project, concurrent, scheduler));\n\t}\n\texports.expand = expand;\n\tvar ExpandOperator = (function () {\n\t    function ExpandOperator(project, concurrent, scheduler) {\n\t        this.project = project;\n\t        this.concurrent = concurrent;\n\t        this.scheduler = scheduler;\n\t    }\n\t    ExpandOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n\t    };\n\t    return ExpandOperator;\n\t}());\n\texports.ExpandOperator = ExpandOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ExpandSubscriber = (function (_super) {\n\t    __extends(ExpandSubscriber, _super);\n\t    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.concurrent = concurrent;\n\t        this.scheduler = scheduler;\n\t        this.index = 0;\n\t        this.active = 0;\n\t        this.hasCompleted = false;\n\t        if (concurrent < Number.POSITIVE_INFINITY) {\n\t            this.buffer = [];\n\t        }\n\t    }\n\t    ExpandSubscriber.dispatch = function (arg) {\n\t        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n\t        subscriber.subscribeToProjection(result, value, index);\n\t    };\n\t    ExpandSubscriber.prototype._next = function (value) {\n\t        var destination = this.destination;\n\t        if (destination.isUnsubscribed) {\n\t            this._complete();\n\t            return;\n\t        }\n\t        var index = this.index++;\n\t        if (this.active < this.concurrent) {\n\t            destination.next(value);\n\t            var result = tryCatch_1.tryCatch(this.project)(value, index);\n\t            if (result === errorObject_1.errorObject) {\n\t                destination.error(errorObject_1.errorObject.e);\n\t            }\n\t            else if (!this.scheduler) {\n\t                this.subscribeToProjection(result, value, index);\n\t            }\n\t            else {\n\t                var state = { subscriber: this, result: result, value: value, index: index };\n\t                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n\t            }\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n\t        this.active++;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n\t    };\n\t    ExpandSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.hasCompleted && this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this._next(innerValue);\n\t    };\n\t    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer && buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        if (this.hasCompleted && this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return ExpandSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.ExpandSubscriber = ExpandSubscriber;\n\n\n/***/ },\n/* 181 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar elementAt_1 = __webpack_require__(182);\n\tObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n\n\n/***/ },\n/* 182 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(183);\n\t/**\n\t * Emits the single value at the specified `index` in a sequence of emissions\n\t * from the source Observable.\n\t *\n\t * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n\t *\n\t * <img src=\"./img/elementAt.png\" width=\"100%\">\n\t *\n\t * `elementAt` returns an Observable that emits the item at the specified\n\t * `index` in the source Observable, or a default value if that `index` is out\n\t * of range and the `default` argument is provided. If the `default` argument is\n\t * not given and the `index` is out of range, the output Observable will emit an\n\t * `ArgumentOutOfRangeError` error.\n\t *\n\t * @example <caption>Emit only the third click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.elementAt(2);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link first}\n\t * @see {@link last}\n\t * @see {@link skip}\n\t * @see {@link single}\n\t * @see {@link take}\n\t *\n\t * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n\t * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n\t * Observable has completed before emitting the i-th `next` notification.\n\t *\n\t * @param {number} index Is the number `i` for the i-th source emission that has\n\t * happened since the subscription, starting from the number `0`.\n\t * @param {T} [defaultValue] The default value returned for missing indices.\n\t * @return {Observable} An Observable that emits a single item, if it is found.\n\t * Otherwise, will emit the default value if given. If not, then emits an error.\n\t * @method elementAt\n\t * @owner Observable\n\t */\n\tfunction elementAt(index, defaultValue) {\n\t    return this.lift(new ElementAtOperator(index, defaultValue));\n\t}\n\texports.elementAt = elementAt;\n\tvar ElementAtOperator = (function () {\n\t    function ElementAtOperator(index, defaultValue) {\n\t        this.index = index;\n\t        this.defaultValue = defaultValue;\n\t        if (index < 0) {\n\t            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\t        }\n\t    }\n\t    ElementAtOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n\t    };\n\t    return ElementAtOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ElementAtSubscriber = (function (_super) {\n\t    __extends(ElementAtSubscriber, _super);\n\t    function ElementAtSubscriber(destination, index, defaultValue) {\n\t        _super.call(this, destination);\n\t        this.index = index;\n\t        this.defaultValue = defaultValue;\n\t    }\n\t    ElementAtSubscriber.prototype._next = function (x) {\n\t        if (this.index-- === 0) {\n\t            this.destination.next(x);\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    ElementAtSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (this.index >= 0) {\n\t            if (typeof this.defaultValue !== 'undefined') {\n\t                destination.next(this.defaultValue);\n\t            }\n\t            else {\n\t                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n\t            }\n\t        }\n\t        destination.complete();\n\t    };\n\t    return ElementAtSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 183 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an element was queried at a certain index of an\n\t * Observable, but no such index or position exists in that sequence.\n\t *\n\t * @see {@link elementAt}\n\t * @see {@link take}\n\t * @see {@link takeLast}\n\t *\n\t * @class ArgumentOutOfRangeError\n\t */\n\tvar ArgumentOutOfRangeError = (function (_super) {\n\t    __extends(ArgumentOutOfRangeError, _super);\n\t    function ArgumentOutOfRangeError() {\n\t        var err = _super.call(this, 'argument out of range');\n\t        this.name = err.name = 'ArgumentOutOfRangeError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return ArgumentOutOfRangeError;\n\t}(Error));\n\texports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n\n\n/***/ },\n/* 184 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar filter_1 = __webpack_require__(185);\n\tObservable_1.Observable.prototype.filter = filter_1.filter;\n\n\n/***/ },\n/* 185 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Filter items emitted by the source Observable by only emitting those that\n\t * satisfy a specified predicate.\n\t *\n\t * <span class=\"informal\">Like\n\t * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n\t * it only emits a value from the source if it passes a criterion function.</span>\n\t *\n\t * <img src=\"./img/filter.png\" width=\"100%\">\n\t *\n\t * Similar to the well-known `Array.prototype.filter` method, this operator\n\t * takes values from the source Observable, passes them through a `predicate`\n\t * function and only emits those values that yielded `true`.\n\t *\n\t * @example <caption>Emit only click events whose target was a DIV element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n\t * clicksOnDivs.subscribe(x => console.log(x));\n\t *\n\t * @see {@link distinct}\n\t * @see {@link distinctKey}\n\t * @see {@link distinctUntilChanged}\n\t * @see {@link distinctUntilKeyChanged}\n\t * @see {@link ignoreElements}\n\t * @see {@link partition}\n\t * @see {@link skip}\n\t *\n\t * @param {function(value: T, index: number): boolean} predicate A function that\n\t * evaluates each value emitted by the source Observable. If it returns `true`,\n\t * the value is emitted, if `false` the value is not passed to the output\n\t * Observable. The `index` parameter is the number `i` for the i-th source\n\t * emission that has happened since the subscription, starting from the number\n\t * `0`.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {Observable} An Observable of values from the source that were\n\t * allowed by the `predicate` function.\n\t * @method filter\n\t * @owner Observable\n\t */\n\tfunction filter(predicate, thisArg) {\n\t    return this.lift(new FilterOperator(predicate, thisArg));\n\t}\n\texports.filter = filter;\n\tvar FilterOperator = (function () {\n\t    function FilterOperator(predicate, thisArg) {\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t    }\n\t    FilterOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n\t    };\n\t    return FilterOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FilterSubscriber = (function (_super) {\n\t    __extends(FilterSubscriber, _super);\n\t    function FilterSubscriber(destination, predicate, thisArg) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t        this.count = 0;\n\t        this.predicate = predicate;\n\t    }\n\t    // the try catch block below is left specifically for\n\t    // optimization and perf reasons. a tryCatcher is not necessary here.\n\t    FilterSubscriber.prototype._next = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.predicate.call(this.thisArg, value, this.count++);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    return FilterSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 186 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar finally_1 = __webpack_require__(187);\n\tObservable_1.Observable.prototype.finally = finally_1._finally;\n\n\n/***/ },\n/* 187 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * Returns an Observable that mirrors the source Observable, but will call a specified function when\n\t * the source terminates on complete or error.\n\t * @param {function} callback function to be called when source terminates.\n\t * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n\t * @method finally\n\t * @owner Observable\n\t */\n\tfunction _finally(callback) {\n\t    return this.lift(new FinallyOperator(callback));\n\t}\n\texports._finally = _finally;\n\tvar FinallyOperator = (function () {\n\t    function FinallyOperator(callback) {\n\t        this.callback = callback;\n\t    }\n\t    FinallyOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n\t    };\n\t    return FinallyOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FinallySubscriber = (function (_super) {\n\t    __extends(FinallySubscriber, _super);\n\t    function FinallySubscriber(destination, callback) {\n\t        _super.call(this, destination);\n\t        this.add(new Subscription_1.Subscription(callback));\n\t    }\n\t    return FinallySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 188 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar find_1 = __webpack_require__(189);\n\tObservable_1.Observable.prototype.find = find_1.find;\n\n\n/***/ },\n/* 189 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits only the first value emitted by the source Observable that meets some\n\t * condition.\n\t *\n\t * <span class=\"informal\">Finds the first value that passes some test and emits\n\t * that.</span>\n\t *\n\t * <img src=\"./img/find.png\" width=\"100%\">\n\t *\n\t * `find` searches for the first item in the source Observable that matches the\n\t * specified condition embodied by the `predicate`, and returns the first\n\t * occurrence in the source. Unlike {@link first}, the `predicate` is required\n\t * in `find`, and does not emit an error if a valid value is not found.\n\t *\n\t * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link filter}\n\t * @see {@link first}\n\t * @see {@link findIndex}\n\t * @see {@link take}\n\t *\n\t * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n\t * A function called with each item to test for condition matching.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {Observable<T>} An Observable of the first item that matches the\n\t * condition.\n\t * @method find\n\t * @owner Observable\n\t */\n\tfunction find(predicate, thisArg) {\n\t    if (typeof predicate !== 'function') {\n\t        throw new TypeError('predicate is not a function');\n\t    }\n\t    return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n\t}\n\texports.find = find;\n\tvar FindValueOperator = (function () {\n\t    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.yieldIndex = yieldIndex;\n\t        this.thisArg = thisArg;\n\t    }\n\t    FindValueOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n\t    };\n\t    return FindValueOperator;\n\t}());\n\texports.FindValueOperator = FindValueOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FindValueSubscriber = (function (_super) {\n\t    __extends(FindValueSubscriber, _super);\n\t    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.yieldIndex = yieldIndex;\n\t        this.thisArg = thisArg;\n\t        this.index = 0;\n\t    }\n\t    FindValueSubscriber.prototype.notifyComplete = function (value) {\n\t        var destination = this.destination;\n\t        destination.next(value);\n\t        destination.complete();\n\t    };\n\t    FindValueSubscriber.prototype._next = function (value) {\n\t        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n\t        var index = this.index++;\n\t        try {\n\t            var result = predicate.call(thisArg || this, value, index, this.source);\n\t            if (result) {\n\t                this.notifyComplete(this.yieldIndex ? index : value);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    FindValueSubscriber.prototype._complete = function () {\n\t        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n\t    };\n\t    return FindValueSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.FindValueSubscriber = FindValueSubscriber;\n\n\n/***/ },\n/* 190 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar findIndex_1 = __webpack_require__(191);\n\tObservable_1.Observable.prototype.findIndex = findIndex_1.findIndex;\n\n\n/***/ },\n/* 191 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar find_1 = __webpack_require__(189);\n\t/**\n\t * Emits only the index of the first value emitted by the source Observable that\n\t * meets some condition.\n\t *\n\t * <span class=\"informal\">It's like {@link find}, but emits the index of the\n\t * found value, not the value itself.</span>\n\t *\n\t * <img src=\"./img/findIndex.png\" width=\"100%\">\n\t *\n\t * `findIndex` searches for the first item in the source Observable that matches\n\t * the specified condition embodied by the `predicate`, and returns the\n\t * (zero-based) index of the first occurrence in the source. Unlike\n\t * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n\t * an error if a valid value is not found.\n\t *\n\t * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link filter}\n\t * @see {@link find}\n\t * @see {@link first}\n\t * @see {@link take}\n\t *\n\t * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n\t * A function called with each item to test for condition matching.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {Observable} An Observable of the index of the first item that\n\t * matches the condition.\n\t * @method find\n\t * @owner Observable\n\t */\n\tfunction findIndex(predicate, thisArg) {\n\t    return this.lift(new find_1.FindValueOperator(predicate, this, true, thisArg));\n\t}\n\texports.findIndex = findIndex;\n\n\n/***/ },\n/* 192 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar first_1 = __webpack_require__(193);\n\tObservable_1.Observable.prototype.first = first_1.first;\n\n\n/***/ },\n/* 193 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyError_1 = __webpack_require__(194);\n\t/**\n\t * Emits only the first value (or the first value that meets some condition)\n\t * emitted by the source Observable.\n\t *\n\t * <span class=\"informal\">Emits only the first value. Or emits only the first\n\t * value that passes some test.</span>\n\t *\n\t * <img src=\"./img/first.png\" width=\"100%\">\n\t *\n\t * If called with no arguments, `first` emits the first value of the source\n\t * Observable, then completes. If called with a `predicate` function, `first`\n\t * emits the first value of the source that matches the specified condition. It\n\t * may also take a `resultSelector` function to produce the output value from\n\t * the input value, and a `defaultValue` to emit in case the source completes\n\t * before it is able to emit a valid value. Throws an error if `defaultValue`\n\t * was not provided and a matching element is not found.\n\t *\n\t * @example <caption>Emit only the first click that happens on the DOM</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.first();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Emits the first click that happens on a DIV</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link filter}\n\t * @see {@link find}\n\t * @see {@link take}\n\t *\n\t * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n\t * callback if the Observable completes before any `next` notification was sent.\n\t *\n\t * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n\t * An optional function called with each item to test for condition matching.\n\t * @param {function(value: T, index: number): R} [resultSelector] A function to\n\t * produce the value on the output Observable based on the values\n\t * and the indices of the source Observable. The arguments passed to this\n\t * function are:\n\t * - `value`: the value that was emitted on the source.\n\t * - `index`: the \"index\" of the value from the source.\n\t * @param {R} [defaultValue] The default value emitted in case no valid value\n\t * was found on the source.\n\t * @return {Observable<T|R>} an Observable of the first item that matches the\n\t * condition.\n\t * @method first\n\t * @owner Observable\n\t */\n\tfunction first(predicate, resultSelector, defaultValue) {\n\t    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n\t}\n\texports.first = first;\n\tvar FirstOperator = (function () {\n\t    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t    }\n\t    FirstOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n\t    };\n\t    return FirstOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar FirstSubscriber = (function (_super) {\n\t    __extends(FirstSubscriber, _super);\n\t    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t        this.index = 0;\n\t        this.hasCompleted = false;\n\t    }\n\t    FirstSubscriber.prototype._next = function (value) {\n\t        var index = this.index++;\n\t        if (this.predicate) {\n\t            this._tryPredicate(value, index);\n\t        }\n\t        else {\n\t            this._emit(value, index);\n\t        }\n\t    };\n\t    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, index, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            this._emit(value, index);\n\t        }\n\t    };\n\t    FirstSubscriber.prototype._emit = function (value, index) {\n\t        if (this.resultSelector) {\n\t            this._tryResultSelector(value, index);\n\t            return;\n\t        }\n\t        this._emitFinal(value);\n\t    };\n\t    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this._emitFinal(result);\n\t    };\n\t    FirstSubscriber.prototype._emitFinal = function (value) {\n\t        var destination = this.destination;\n\t        destination.next(value);\n\t        destination.complete();\n\t        this.hasCompleted = true;\n\t    };\n\t    FirstSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n\t            destination.next(this.defaultValue);\n\t            destination.complete();\n\t        }\n\t        else if (!this.hasCompleted) {\n\t            destination.error(new EmptyError_1.EmptyError);\n\t        }\n\t    };\n\t    return FirstSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 194 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an Observable or a sequence was queried but has no\n\t * elements.\n\t *\n\t * @see {@link first}\n\t * @see {@link last}\n\t * @see {@link single}\n\t *\n\t * @class EmptyError\n\t */\n\tvar EmptyError = (function (_super) {\n\t    __extends(EmptyError, _super);\n\t    function EmptyError() {\n\t        var err = _super.call(this, 'no elements in sequence');\n\t        this.name = err.name = 'EmptyError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return EmptyError;\n\t}(Error));\n\texports.EmptyError = EmptyError;\n\n\n/***/ },\n/* 195 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar groupBy_1 = __webpack_require__(196);\n\tObservable_1.Observable.prototype.groupBy = groupBy_1.groupBy;\n\n\n/***/ },\n/* 196 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Map_1 = __webpack_require__(197);\n\tvar FastMap_1 = __webpack_require__(199);\n\t/**\n\t * Groups the items emitted by an Observable according to a specified criterion,\n\t * and emits these grouped items as `GroupedObservables`, one\n\t * {@link GroupedObservable} per group.\n\t *\n\t * <img src=\"./img/groupBy.png\" width=\"100%\">\n\t *\n\t * @param {function(value: T): K} keySelector a function that extracts the key\n\t * for each item.\n\t * @param {function(value: T): R} [elementSelector] a function that extracts the\n\t * return element for each item.\n\t * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n\t * a function that returns an Observable to determine how long each group should\n\t * exist.\n\t * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n\t * GroupedObservables, each of which corresponds to a unique key value and each\n\t * of which emits those items from the source Observable that share that key\n\t * value.\n\t * @method groupBy\n\t * @owner Observable\n\t */\n\tfunction groupBy(keySelector, elementSelector, durationSelector) {\n\t    return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n\t}\n\texports.groupBy = groupBy;\n\tvar GroupByOperator = (function () {\n\t    function GroupByOperator(source, keySelector, elementSelector, durationSelector) {\n\t        this.source = source;\n\t        this.keySelector = keySelector;\n\t        this.elementSelector = elementSelector;\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    GroupByOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector));\n\t    };\n\t    return GroupByOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar GroupBySubscriber = (function (_super) {\n\t    __extends(GroupBySubscriber, _super);\n\t    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.keySelector = keySelector;\n\t        this.elementSelector = elementSelector;\n\t        this.durationSelector = durationSelector;\n\t        this.groups = null;\n\t        this.attemptedToUnsubscribe = false;\n\t        this.count = 0;\n\t    }\n\t    GroupBySubscriber.prototype._next = function (value) {\n\t        var key;\n\t        try {\n\t            key = this.keySelector(value);\n\t        }\n\t        catch (err) {\n\t            this.error(err);\n\t            return;\n\t        }\n\t        this._group(value, key);\n\t    };\n\t    GroupBySubscriber.prototype._group = function (value, key) {\n\t        var groups = this.groups;\n\t        if (!groups) {\n\t            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();\n\t        }\n\t        var group = groups.get(key);\n\t        var element;\n\t        if (this.elementSelector) {\n\t            try {\n\t                element = this.elementSelector(value);\n\t            }\n\t            catch (err) {\n\t                this.error(err);\n\t            }\n\t        }\n\t        else {\n\t            element = value;\n\t        }\n\t        if (!group) {\n\t            groups.set(key, group = new Subject_1.Subject());\n\t            var groupedObservable = new GroupedObservable(key, group, this);\n\t            this.destination.next(groupedObservable);\n\t            if (this.durationSelector) {\n\t                var duration = void 0;\n\t                try {\n\t                    duration = this.durationSelector(new GroupedObservable(key, group));\n\t                }\n\t                catch (err) {\n\t                    this.error(err);\n\t                    return;\n\t                }\n\t                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n\t            }\n\t        }\n\t        if (!group.isUnsubscribed) {\n\t            group.next(element);\n\t        }\n\t    };\n\t    GroupBySubscriber.prototype._error = function (err) {\n\t        var groups = this.groups;\n\t        if (groups) {\n\t            groups.forEach(function (group, key) {\n\t                group.error(err);\n\t            });\n\t            groups.clear();\n\t        }\n\t        this.destination.error(err);\n\t    };\n\t    GroupBySubscriber.prototype._complete = function () {\n\t        var groups = this.groups;\n\t        if (groups) {\n\t            groups.forEach(function (group, key) {\n\t                group.complete();\n\t            });\n\t            groups.clear();\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    GroupBySubscriber.prototype.removeGroup = function (key) {\n\t        this.groups.delete(key);\n\t    };\n\t    GroupBySubscriber.prototype.unsubscribe = function () {\n\t        if (!this.isUnsubscribed && !this.attemptedToUnsubscribe) {\n\t            this.attemptedToUnsubscribe = true;\n\t            if (this.count === 0) {\n\t                _super.prototype.unsubscribe.call(this);\n\t            }\n\t        }\n\t    };\n\t    return GroupBySubscriber;\n\t}(Subscriber_1.Subscriber));\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar GroupDurationSubscriber = (function (_super) {\n\t    __extends(GroupDurationSubscriber, _super);\n\t    function GroupDurationSubscriber(key, group, parent) {\n\t        _super.call(this);\n\t        this.key = key;\n\t        this.group = group;\n\t        this.parent = parent;\n\t    }\n\t    GroupDurationSubscriber.prototype._next = function (value) {\n\t        this._complete();\n\t    };\n\t    GroupDurationSubscriber.prototype._error = function (err) {\n\t        var group = this.group;\n\t        if (!group.isUnsubscribed) {\n\t            group.error(err);\n\t        }\n\t        this.parent.removeGroup(this.key);\n\t    };\n\t    GroupDurationSubscriber.prototype._complete = function () {\n\t        var group = this.group;\n\t        if (!group.isUnsubscribed) {\n\t            group.complete();\n\t        }\n\t        this.parent.removeGroup(this.key);\n\t    };\n\t    return GroupDurationSubscriber;\n\t}(Subscriber_1.Subscriber));\n\t/**\n\t * An Observable representing values belonging to the same group represented by\n\t * a common key. The values emitted by a GroupedObservable come from the source\n\t * Observable. The common key is available as the field `key` on a\n\t * GroupedObservable instance.\n\t *\n\t * @class GroupedObservable<K, T>\n\t */\n\tvar GroupedObservable = (function (_super) {\n\t    __extends(GroupedObservable, _super);\n\t    function GroupedObservable(key, groupSubject, refCountSubscription) {\n\t        _super.call(this);\n\t        this.key = key;\n\t        this.groupSubject = groupSubject;\n\t        this.refCountSubscription = refCountSubscription;\n\t    }\n\t    GroupedObservable.prototype._subscribe = function (subscriber) {\n\t        var subscription = new Subscription_1.Subscription();\n\t        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n\t        if (refCountSubscription && !refCountSubscription.isUnsubscribed) {\n\t            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n\t        }\n\t        subscription.add(groupSubject.subscribe(subscriber));\n\t        return subscription;\n\t    };\n\t    return GroupedObservable;\n\t}(Observable_1.Observable));\n\texports.GroupedObservable = GroupedObservable;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar InnerRefCountSubscription = (function (_super) {\n\t    __extends(InnerRefCountSubscription, _super);\n\t    function InnerRefCountSubscription(parent) {\n\t        _super.call(this);\n\t        this.parent = parent;\n\t        parent.count++;\n\t    }\n\t    InnerRefCountSubscription.prototype.unsubscribe = function () {\n\t        var parent = this.parent;\n\t        if (!parent.isUnsubscribed && !this.isUnsubscribed) {\n\t            _super.prototype.unsubscribe.call(this);\n\t            parent.count -= 1;\n\t            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n\t                parent.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    return InnerRefCountSubscription;\n\t}(Subscription_1.Subscription));\n\n\n/***/ },\n/* 197 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar MapPolyfill_1 = __webpack_require__(198);\n\texports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();\n\n\n/***/ },\n/* 198 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar MapPolyfill = (function () {\n\t    function MapPolyfill() {\n\t        this.size = 0;\n\t        this._values = [];\n\t        this._keys = [];\n\t    }\n\t    MapPolyfill.prototype.get = function (key) {\n\t        var i = this._keys.indexOf(key);\n\t        return i === -1 ? undefined : this._values[i];\n\t    };\n\t    MapPolyfill.prototype.set = function (key, value) {\n\t        var i = this._keys.indexOf(key);\n\t        if (i === -1) {\n\t            this._keys.push(key);\n\t            this._values.push(value);\n\t            this.size++;\n\t        }\n\t        else {\n\t            this._values[i] = value;\n\t        }\n\t        return this;\n\t    };\n\t    MapPolyfill.prototype.delete = function (key) {\n\t        var i = this._keys.indexOf(key);\n\t        if (i === -1) {\n\t            return false;\n\t        }\n\t        this._values.splice(i, 1);\n\t        this._keys.splice(i, 1);\n\t        this.size--;\n\t        return true;\n\t    };\n\t    MapPolyfill.prototype.clear = function () {\n\t        this._keys.length = 0;\n\t        this._values.length = 0;\n\t        this.size = 0;\n\t    };\n\t    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n\t        for (var i = 0; i < this.size; i++) {\n\t            cb.call(thisArg, this._values[i], this._keys[i]);\n\t        }\n\t    };\n\t    return MapPolyfill;\n\t}());\n\texports.MapPolyfill = MapPolyfill;\n\n\n/***/ },\n/* 199 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar FastMap = (function () {\n\t    function FastMap() {\n\t        this.values = {};\n\t    }\n\t    FastMap.prototype.delete = function (key) {\n\t        this.values[key] = null;\n\t        return true;\n\t    };\n\t    FastMap.prototype.set = function (key, value) {\n\t        this.values[key] = value;\n\t        return this;\n\t    };\n\t    FastMap.prototype.get = function (key) {\n\t        return this.values[key];\n\t    };\n\t    FastMap.prototype.forEach = function (cb, thisArg) {\n\t        var values = this.values;\n\t        for (var key in values) {\n\t            if (values.hasOwnProperty(key) && values[key] !== null) {\n\t                cb.call(thisArg, values[key], key);\n\t            }\n\t        }\n\t    };\n\t    FastMap.prototype.clear = function () {\n\t        this.values = {};\n\t    };\n\t    return FastMap;\n\t}());\n\texports.FastMap = FastMap;\n\n\n/***/ },\n/* 200 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ignoreElements_1 = __webpack_require__(201);\n\tObservable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;\n\n\n/***/ },\n/* 201 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar noop_1 = __webpack_require__(95);\n\t/**\n\t * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n\t *\n\t * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n\t *\n\t * @return {Observable} an empty Observable that only calls `complete`\n\t * or `error`, based on which one is called by the source Observable.\n\t * @method ignoreElements\n\t * @owner Observable\n\t */\n\tfunction ignoreElements() {\n\t    return this.lift(new IgnoreElementsOperator());\n\t}\n\texports.ignoreElements = ignoreElements;\n\t;\n\tvar IgnoreElementsOperator = (function () {\n\t    function IgnoreElementsOperator() {\n\t    }\n\t    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n\t    };\n\t    return IgnoreElementsOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar IgnoreElementsSubscriber = (function (_super) {\n\t    __extends(IgnoreElementsSubscriber, _super);\n\t    function IgnoreElementsSubscriber() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    IgnoreElementsSubscriber.prototype._next = function (unused) {\n\t        noop_1.noop();\n\t    };\n\t    return IgnoreElementsSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 202 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar isEmpty_1 = __webpack_require__(203);\n\tObservable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;\n\n\n/***/ },\n/* 203 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n\t *\n\t * <img src=\"./img/isEmpty.png\" width=\"100%\">\n\t *\n\t * @return {Observable} an Observable that emits a Boolean.\n\t * @method isEmpty\n\t * @owner Observable\n\t */\n\tfunction isEmpty() {\n\t    return this.lift(new IsEmptyOperator());\n\t}\n\texports.isEmpty = isEmpty;\n\tvar IsEmptyOperator = (function () {\n\t    function IsEmptyOperator() {\n\t    }\n\t    IsEmptyOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new IsEmptySubscriber(observer));\n\t    };\n\t    return IsEmptyOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar IsEmptySubscriber = (function (_super) {\n\t    __extends(IsEmptySubscriber, _super);\n\t    function IsEmptySubscriber(destination) {\n\t        _super.call(this, destination);\n\t    }\n\t    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n\t        var destination = this.destination;\n\t        destination.next(isEmpty);\n\t        destination.complete();\n\t    };\n\t    IsEmptySubscriber.prototype._next = function (value) {\n\t        this.notifyComplete(false);\n\t    };\n\t    IsEmptySubscriber.prototype._complete = function () {\n\t        this.notifyComplete(true);\n\t    };\n\t    return IsEmptySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 204 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar audit_1 = __webpack_require__(205);\n\tObservable_1.Observable.prototype.audit = audit_1.audit;\n\n\n/***/ },\n/* 205 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Ignores source values for a duration determined by another Observable, then\n\t * emits the most recent value from the source Observable, then repeats this\n\t * process.\n\t *\n\t * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n\t * duration is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/audit.png\" width=\"100%\">\n\t *\n\t * `audit` is similar to `throttle`, but emits the last value from the silenced\n\t * time window, instead of the first value. `audit` emits the most recent value\n\t * from the source Observable on the output Observable as soon as its internal\n\t * timer becomes disabled, and ignores source values while the timer is enabled.\n\t * Initially, the timer is disabled. As soon as the first source value arrives,\n\t * the timer is enabled by calling the `durationSelector` function with the\n\t * source value, which returns the \"duration\" Observable. When the duration\n\t * Observable emits a value or completes, the timer is disabled, then the most\n\t * recent source value is emitted on the output Observable, and this process\n\t * repeats for the next source value.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounce}\n\t * @see {@link delayWhen}\n\t * @see {@link sample}\n\t * @see {@link throttle}\n\t *\n\t * @param {function(value: T): Observable|Promise} durationSelector A function\n\t * that receives a value from the source Observable, for computing the silencing\n\t * duration, returned as an Observable or a Promise.\n\t * @return {Observable<T>} An Observable that performs rate-limiting of\n\t * emissions from the source Observable.\n\t * @method audit\n\t * @owner Observable\n\t */\n\tfunction audit(durationSelector) {\n\t    return this.lift(new AuditOperator(durationSelector));\n\t}\n\texports.audit = audit;\n\tvar AuditOperator = (function () {\n\t    function AuditOperator(durationSelector) {\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    AuditOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n\t    };\n\t    return AuditOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AuditSubscriber = (function (_super) {\n\t    __extends(AuditSubscriber, _super);\n\t    function AuditSubscriber(destination, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.durationSelector = durationSelector;\n\t        this.hasValue = false;\n\t    }\n\t    AuditSubscriber.prototype._next = function (value) {\n\t        this.value = value;\n\t        this.hasValue = true;\n\t        if (!this.throttled) {\n\t            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n\t            if (duration === errorObject_1.errorObject) {\n\t                this.destination.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n\t            }\n\t        }\n\t    };\n\t    AuditSubscriber.prototype.clearThrottle = function () {\n\t        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n\t        if (throttled) {\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t            throttled.unsubscribe();\n\t        }\n\t        if (hasValue) {\n\t            this.value = null;\n\t            this.hasValue = false;\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        this.clearThrottle();\n\t    };\n\t    AuditSubscriber.prototype.notifyComplete = function () {\n\t        this.clearThrottle();\n\t    };\n\t    return AuditSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 206 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar auditTime_1 = __webpack_require__(207);\n\tObservable_1.Observable.prototype.auditTime = auditTime_1.auditTime;\n\n\n/***/ },\n/* 207 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(82);\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Ignores source values for `duration` milliseconds, then emits the most recent\n\t * value from the source Observable, then repeats this process.\n\t *\n\t * <span class=\"informal\">When it sees a source values, it ignores that plus\n\t * the next ones for `duration` milliseconds, and then it emits the most recent\n\t * value from the source.</span>\n\t *\n\t * <img src=\"./img/auditTime.png\" width=\"100%\">\n\t *\n\t * `auditTime` is similar to `throttleTime`, but emits the last value from the\n\t * silenced time window, instead of the first value. `auditTime` emits the most\n\t * recent value from the source Observable on the output Observable as soon as\n\t * its internal timer becomes disabled, and ignores source values while the\n\t * timer is enabled. Initially, the timer is disabled. As soon as the first\n\t * source value arrives, the timer is enabled. After `duration` milliseconds (or\n\t * the time unit determined internally by the optional `scheduler`) has passed,\n\t * the timer is disabled, then the most recent source value is emitted on the\n\t * output Observable, and this process repeats for the next source value.\n\t * Optionally takes a {@link Scheduler} for managing timers.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.auditTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounceTime}\n\t * @see {@link delay}\n\t * @see {@link sampleTime}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {number} duration Time to wait before emitting the most recent source\n\t * value, measured in milliseconds or the time unit determined internally\n\t * by the optional `scheduler`.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the rate-limiting behavior.\n\t * @return {Observable<T>} An Observable that performs rate-limiting of\n\t * emissions from the source Observable.\n\t * @method auditTime\n\t * @owner Observable\n\t */\n\tfunction auditTime(duration, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new AuditTimeOperator(duration, scheduler));\n\t}\n\texports.auditTime = auditTime;\n\tvar AuditTimeOperator = (function () {\n\t    function AuditTimeOperator(duration, scheduler) {\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t    }\n\t    AuditTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n\t    };\n\t    return AuditTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AuditTimeSubscriber = (function (_super) {\n\t    __extends(AuditTimeSubscriber, _super);\n\t    function AuditTimeSubscriber(destination, duration, scheduler) {\n\t        _super.call(this, destination);\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t        this.hasValue = false;\n\t    }\n\t    AuditTimeSubscriber.prototype._next = function (value) {\n\t        this.value = value;\n\t        this.hasValue = true;\n\t        if (!this.throttled) {\n\t            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n\t        }\n\t    };\n\t    AuditTimeSubscriber.prototype.clearThrottle = function () {\n\t        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n\t        if (throttled) {\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t            throttled.unsubscribe();\n\t        }\n\t        if (hasValue) {\n\t            this.value = null;\n\t            this.hasValue = false;\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    return AuditTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNext(subscriber) {\n\t    subscriber.clearThrottle();\n\t}\n\n\n/***/ },\n/* 208 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar last_1 = __webpack_require__(209);\n\tObservable_1.Observable.prototype.last = last_1.last;\n\n\n/***/ },\n/* 209 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyError_1 = __webpack_require__(194);\n\t/**\n\t * Returns an Observable that emits only the last item emitted by the source Observable.\n\t * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n\t * the last item from the source Observable, the resulting Observable will emit the last item\n\t * from the source Observable that satisfies the predicate.\n\t *\n\t * <img src=\"./img/last.png\" width=\"100%\">\n\t *\n\t * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n\t * callback if the Observable completes before any `next` notification was sent.\n\t * @param {function} predicate - the condition any source emitted item has to satisfy.\n\t * @return {Observable} an Observable that emits only the last item satisfying the given condition\n\t * from the source, or an NoSuchElementException if no such items are emitted.\n\t * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n\t * @method last\n\t * @owner Observable\n\t */\n\tfunction last(predicate, resultSelector, defaultValue) {\n\t    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n\t}\n\texports.last = last;\n\tvar LastOperator = (function () {\n\t    function LastOperator(predicate, resultSelector, defaultValue, source) {\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t    }\n\t    LastOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n\t    };\n\t    return LastOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar LastSubscriber = (function (_super) {\n\t    __extends(LastSubscriber, _super);\n\t    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.resultSelector = resultSelector;\n\t        this.defaultValue = defaultValue;\n\t        this.source = source;\n\t        this.hasValue = false;\n\t        this.index = 0;\n\t        if (typeof defaultValue !== 'undefined') {\n\t            this.lastValue = defaultValue;\n\t            this.hasValue = true;\n\t        }\n\t    }\n\t    LastSubscriber.prototype._next = function (value) {\n\t        var index = this.index++;\n\t        if (this.predicate) {\n\t            this._tryPredicate(value, index);\n\t        }\n\t        else {\n\t            if (this.resultSelector) {\n\t                this._tryResultSelector(value, index);\n\t                return;\n\t            }\n\t            this.lastValue = value;\n\t            this.hasValue = true;\n\t        }\n\t    };\n\t    LastSubscriber.prototype._tryPredicate = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, index, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (result) {\n\t            if (this.resultSelector) {\n\t                this._tryResultSelector(value, index);\n\t                return;\n\t            }\n\t            this.lastValue = value;\n\t            this.hasValue = true;\n\t        }\n\t    };\n\t    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.lastValue = result;\n\t        this.hasValue = true;\n\t    };\n\t    LastSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (this.hasValue) {\n\t            destination.next(this.lastValue);\n\t            destination.complete();\n\t        }\n\t        else {\n\t            destination.error(new EmptyError_1.EmptyError);\n\t        }\n\t    };\n\t    return LastSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 210 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar let_1 = __webpack_require__(211);\n\tObservable_1.Observable.prototype.let = let_1.letProto;\n\tObservable_1.Observable.prototype.letBind = let_1.letProto;\n\n\n/***/ },\n/* 211 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * @param func\n\t * @return {Observable<R>}\n\t * @method let\n\t * @owner Observable\n\t */\n\tfunction letProto(func) {\n\t    return func(this);\n\t}\n\texports.letProto = letProto;\n\n\n/***/ },\n/* 212 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar every_1 = __webpack_require__(213);\n\tObservable_1.Observable.prototype.every = every_1.every;\n\n\n/***/ },\n/* 213 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n\t * @param {function} predicate a function for determining if an item meets a specified condition.\n\t * @param {any} [thisArg] optional object to use for `this` in the callback\n\t * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n\t * @method every\n\t * @owner Observable\n\t */\n\tfunction every(predicate, thisArg) {\n\t    return this.lift(new EveryOperator(predicate, thisArg, this));\n\t}\n\texports.every = every;\n\tvar EveryOperator = (function () {\n\t    function EveryOperator(predicate, thisArg, source) {\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t        this.source = source;\n\t    }\n\t    EveryOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n\t    };\n\t    return EveryOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar EverySubscriber = (function (_super) {\n\t    __extends(EverySubscriber, _super);\n\t    function EverySubscriber(destination, predicate, thisArg, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.thisArg = thisArg;\n\t        this.source = source;\n\t        this.index = 0;\n\t        this.thisArg = thisArg || this;\n\t    }\n\t    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n\t        this.destination.next(everyValueMatch);\n\t        this.destination.complete();\n\t    };\n\t    EverySubscriber.prototype._next = function (value) {\n\t        var result = false;\n\t        try {\n\t            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        if (!result) {\n\t            this.notifyComplete(false);\n\t        }\n\t    };\n\t    EverySubscriber.prototype._complete = function () {\n\t        this.notifyComplete(true);\n\t    };\n\t    return EverySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 214 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar map_1 = __webpack_require__(215);\n\tObservable_1.Observable.prototype.map = map_1.map;\n\n\n/***/ },\n/* 215 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Applies a given `project` function to each value emitted by the source\n\t * Observable, and emits the resulting values as an Observable.\n\t *\n\t * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n\t * it passes each source value through a transformation function to get\n\t * corresponding output values.</span>\n\t *\n\t * <img src=\"./img/map.png\" width=\"100%\">\n\t *\n\t * Similar to the well known `Array.prototype.map` function, this operator\n\t * applies a projection to each value and emits that projection in the output\n\t * Observable.\n\t *\n\t * @example <caption>Map every every click to the clientX position of that click</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var positions = clicks.map(ev => ev.clientX);\n\t * positions.subscribe(x => console.log(x));\n\t *\n\t * @see {@link mapTo}\n\t * @see {@link pluck}\n\t *\n\t * @param {function(value: T, index: number): R} project The function to apply\n\t * to each `value` emitted by the source Observable. The `index` parameter is\n\t * the number `i` for the i-th emission that has happened since the\n\t * subscription, starting from the number `0`.\n\t * @param {any} [thisArg] An optional argument to define what `this` is in the\n\t * `project` function.\n\t * @return {Observable<R>} An Observable that emits the values from the source\n\t * Observable transformed by the given `project` function.\n\t * @method map\n\t * @owner Observable\n\t */\n\tfunction map(project, thisArg) {\n\t    if (typeof project !== 'function') {\n\t        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n\t    }\n\t    return this.lift(new MapOperator(project, thisArg));\n\t}\n\texports.map = map;\n\tvar MapOperator = (function () {\n\t    function MapOperator(project, thisArg) {\n\t        this.project = project;\n\t        this.thisArg = thisArg;\n\t    }\n\t    MapOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n\t    };\n\t    return MapOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MapSubscriber = (function (_super) {\n\t    __extends(MapSubscriber, _super);\n\t    function MapSubscriber(destination, project, thisArg) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.count = 0;\n\t        this.thisArg = thisArg || this;\n\t    }\n\t    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n\t    // using try/catch optimizations.\n\t    MapSubscriber.prototype._next = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.project.call(this.thisArg, value, this.count++);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return MapSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 216 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mapTo_1 = __webpack_require__(217);\n\tObservable_1.Observable.prototype.mapTo = mapTo_1.mapTo;\n\n\n/***/ },\n/* 217 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits the given constant value on the output Observable every time the source\n\t * Observable emits a value.\n\t *\n\t * <span class=\"informal\">Like {@link map}, but it maps every source value to\n\t * the same output value every time.</span>\n\t *\n\t * <img src=\"./img/mapTo.png\" width=\"100%\">\n\t *\n\t * Takes a constant `value` as argument, and emits that whenever the source\n\t * Observable emits a value. In other words, ignores the actual source value,\n\t * and simply uses the emission moment to know when to emit the given `value`.\n\t *\n\t * @example <caption>Map every every click to the string 'Hi'</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var greetings = clicks.mapTo('Hi');\n\t * greetings.subscribe(x => console.log(x));\n\t *\n\t * @see {@link map}\n\t *\n\t * @param {any} value The value to map each source value to.\n\t * @return {Observable} An Observable that emits the given `value` every time\n\t * the source Observable emits something.\n\t * @method mapTo\n\t * @owner Observable\n\t */\n\tfunction mapTo(value) {\n\t    return this.lift(new MapToOperator(value));\n\t}\n\texports.mapTo = mapTo;\n\tvar MapToOperator = (function () {\n\t    function MapToOperator(value) {\n\t        this.value = value;\n\t    }\n\t    MapToOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MapToSubscriber(subscriber, this.value));\n\t    };\n\t    return MapToOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MapToSubscriber = (function (_super) {\n\t    __extends(MapToSubscriber, _super);\n\t    function MapToSubscriber(destination, value) {\n\t        _super.call(this, destination);\n\t        this.value = value;\n\t    }\n\t    MapToSubscriber.prototype._next = function (x) {\n\t        this.destination.next(this.value);\n\t    };\n\t    return MapToSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 218 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar materialize_1 = __webpack_require__(219);\n\tObservable_1.Observable.prototype.materialize = materialize_1.materialize;\n\n\n/***/ },\n/* 219 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Notification_1 = __webpack_require__(64);\n\t/**\n\t * Represents all of the notifications from the source Observable as `next`\n\t * emissions marked with their original types within {@link Notification}\n\t * objects.\n\t *\n\t * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n\t * {@link Notification} objects, emitted as `next` on the output Observable.\n\t * </span>\n\t *\n\t * <img src=\"./img/materialize.png\" width=\"100%\">\n\t *\n\t * `materialize` returns an Observable that emits a `next` notification for each\n\t * `next`, `error`, or `complete` emission of the source Observable. When the\n\t * source Observable emits `complete`, the output Observable will emit `next` as\n\t * a Notification of type \"complete\", and then it will emit `complete` as well.\n\t * When the source Observable emits `error`, the output will emit `next` as a\n\t * Notification of type \"error\", and then `complete`.\n\t *\n\t * This operator is useful for producing metadata of the source Observable, to\n\t * be consumed as `next` emissions. Use it in conjunction with\n\t * {@link dematerialize}.\n\t *\n\t * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n\t * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n\t * var upperCase = letters.map(x => x.toUpperCase());\n\t * var materialized = upperCase.materialize();\n\t * materialized.subscribe(x => console.log(x));\n\t *\n\t * @see {@link Notification}\n\t * @see {@link dematerialize}\n\t *\n\t * @return {Observable<Notification<T>>} An Observable that emits\n\t * {@link Notification} objects that wrap the original emissions from the source\n\t * Observable with metadata.\n\t * @method materialize\n\t * @owner Observable\n\t */\n\tfunction materialize() {\n\t    return this.lift(new MaterializeOperator());\n\t}\n\texports.materialize = materialize;\n\tvar MaterializeOperator = (function () {\n\t    function MaterializeOperator() {\n\t    }\n\t    MaterializeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MaterializeSubscriber(subscriber));\n\t    };\n\t    return MaterializeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MaterializeSubscriber = (function (_super) {\n\t    __extends(MaterializeSubscriber, _super);\n\t    function MaterializeSubscriber(destination) {\n\t        _super.call(this, destination);\n\t    }\n\t    MaterializeSubscriber.prototype._next = function (value) {\n\t        this.destination.next(Notification_1.Notification.createNext(value));\n\t    };\n\t    MaterializeSubscriber.prototype._error = function (err) {\n\t        var destination = this.destination;\n\t        destination.next(Notification_1.Notification.createError(err));\n\t        destination.complete();\n\t    };\n\t    MaterializeSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        destination.next(Notification_1.Notification.createComplete());\n\t        destination.complete();\n\t    };\n\t    return MaterializeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 220 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar max_1 = __webpack_require__(221);\n\tObservable_1.Observable.prototype.max = max_1.max;\n\n\n/***/ },\n/* 221 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar reduce_1 = __webpack_require__(222);\n\t/**\n\t * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n\t * and when source Observable completes it emits a single item: the item with the largest number.\n\t *\n\t * <img src=\"./img/max.png\" width=\"100%\">\n\t *\n\t * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n\t * items.\n\t * @return {Observable} an Observable that emits item with the largest number.\n\t * @method max\n\t * @owner Observable\n\t */\n\tfunction max(comparer) {\n\t    var max = (typeof comparer === 'function')\n\t        ? comparer\n\t        : function (x, y) { return x > y ? x : y; };\n\t    return this.lift(new reduce_1.ReduceOperator(max));\n\t}\n\texports.max = max;\n\n\n/***/ },\n/* 222 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Applies an accumulator function over the source Observable, and returns the\n\t * accumulated result when the source completes, given an optional seed value.\n\t *\n\t * <span class=\"informal\">Combines together all values emitted on the source,\n\t * using an accumulator function that knows how to join a new source value into\n\t * the accumulation from the past.</span>\n\t *\n\t * <img src=\"./img/reduce.png\" width=\"100%\">\n\t *\n\t * Like\n\t * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n\t * `reduce` applies an `accumulator` function against an accumulation and each\n\t * value of the source Observable (from the past) to reduce it to a single\n\t * value, emitted on the output Observable. Note that `reduce` will only emit\n\t * one value, only when the source Observable completes. It is equivalent to\n\t * applying operator {@link scan} followed by operator {@link last}.\n\t *\n\t * Returns an Observable that applies a specified `accumulator` function to each\n\t * item emitted by the source Observable. If a `seed` value is specified, then\n\t * that value will be used as the initial value for the accumulator. If no seed\n\t * value is specified, the first item of the source is used as the seed.\n\t *\n\t * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n\t * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n\t *   .takeUntil(Rx.Observable.interval(5000));\n\t * var ones = clicksInFiveSeconds.mapTo(1);\n\t * var seed = 0;\n\t * var count = ones.reduce((acc, one) => acc + one, seed);\n\t * count.subscribe(x => console.log(x));\n\t *\n\t * @see {@link count}\n\t * @see {@link expand}\n\t * @see {@link mergeScan}\n\t * @see {@link scan}\n\t *\n\t * @param {function(acc: R, value: T): R} accumulator The accumulator function\n\t * called on each source value.\n\t * @param {R} [seed] The initial accumulation value.\n\t * @return {Observable<R>} An observable of the accumulated values.\n\t * @return {Observable<R>} An Observable that emits a single value that is the\n\t * result of accumulating the values emitted by the source Observable.\n\t * @method reduce\n\t * @owner Observable\n\t */\n\tfunction reduce(accumulator, seed) {\n\t    return this.lift(new ReduceOperator(accumulator, seed));\n\t}\n\texports.reduce = reduce;\n\tvar ReduceOperator = (function () {\n\t    function ReduceOperator(accumulator, seed) {\n\t        this.accumulator = accumulator;\n\t        this.seed = seed;\n\t    }\n\t    ReduceOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n\t    };\n\t    return ReduceOperator;\n\t}());\n\texports.ReduceOperator = ReduceOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ReduceSubscriber = (function (_super) {\n\t    __extends(ReduceSubscriber, _super);\n\t    function ReduceSubscriber(destination, accumulator, seed) {\n\t        _super.call(this, destination);\n\t        this.accumulator = accumulator;\n\t        this.hasValue = false;\n\t        this.acc = seed;\n\t        this.accumulator = accumulator;\n\t        this.hasSeed = typeof seed !== 'undefined';\n\t    }\n\t    ReduceSubscriber.prototype._next = function (value) {\n\t        if (this.hasValue || (this.hasValue = this.hasSeed)) {\n\t            this._tryReduce(value);\n\t        }\n\t        else {\n\t            this.acc = value;\n\t            this.hasValue = true;\n\t        }\n\t    };\n\t    ReduceSubscriber.prototype._tryReduce = function (value) {\n\t        var result;\n\t        try {\n\t            result = this.accumulator(this.acc, value);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.acc = result;\n\t    };\n\t    ReduceSubscriber.prototype._complete = function () {\n\t        if (this.hasValue || this.hasSeed) {\n\t            this.destination.next(this.acc);\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    return ReduceSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.ReduceSubscriber = ReduceSubscriber;\n\n\n/***/ },\n/* 223 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar merge_1 = __webpack_require__(89);\n\tObservable_1.Observable.prototype.merge = merge_1.merge;\n\n\n/***/ },\n/* 224 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeAll_1 = __webpack_require__(48);\n\tObservable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;\n\n\n/***/ },\n/* 225 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeMap_1 = __webpack_require__(147);\n\tObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\n\tObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n\n\n/***/ },\n/* 226 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeMapTo_1 = __webpack_require__(150);\n\tObservable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;\n\tObservable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;\n\n\n/***/ },\n/* 227 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar mergeScan_1 = __webpack_require__(228);\n\tObservable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;\n\n\n/***/ },\n/* 228 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\t/**\n\t * @param project\n\t * @param seed\n\t * @param concurrent\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method mergeScan\n\t * @owner Observable\n\t */\n\tfunction mergeScan(project, seed, concurrent) {\n\t    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n\t    return this.lift(new MergeScanOperator(project, seed, concurrent));\n\t}\n\texports.mergeScan = mergeScan;\n\tvar MergeScanOperator = (function () {\n\t    function MergeScanOperator(project, seed, concurrent) {\n\t        this.project = project;\n\t        this.seed = seed;\n\t        this.concurrent = concurrent;\n\t    }\n\t    MergeScanOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new MergeScanSubscriber(subscriber, this.project, this.seed, this.concurrent));\n\t    };\n\t    return MergeScanOperator;\n\t}());\n\texports.MergeScanOperator = MergeScanOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar MergeScanSubscriber = (function (_super) {\n\t    __extends(MergeScanSubscriber, _super);\n\t    function MergeScanSubscriber(destination, project, acc, concurrent) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.acc = acc;\n\t        this.concurrent = concurrent;\n\t        this.hasValue = false;\n\t        this.hasCompleted = false;\n\t        this.buffer = [];\n\t        this.active = 0;\n\t        this.index = 0;\n\t    }\n\t    MergeScanSubscriber.prototype._next = function (value) {\n\t        if (this.active < this.concurrent) {\n\t            var index = this.index++;\n\t            var ish = tryCatch_1.tryCatch(this.project)(this.acc, value);\n\t            var destination = this.destination;\n\t            if (ish === errorObject_1.errorObject) {\n\t                destination.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                this.active++;\n\t                this._innerSub(ish, value, index);\n\t            }\n\t        }\n\t        else {\n\t            this.buffer.push(value);\n\t        }\n\t    };\n\t    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n\t        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n\t    };\n\t    MergeScanSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0 && this.buffer.length === 0) {\n\t            if (this.hasValue === false) {\n\t                this.destination.next(this.acc);\n\t            }\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var destination = this.destination;\n\t        this.acc = innerValue;\n\t        this.hasValue = true;\n\t        destination.next(innerValue);\n\t    };\n\t    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        var buffer = this.buffer;\n\t        this.remove(innerSub);\n\t        this.active--;\n\t        if (buffer.length > 0) {\n\t            this._next(buffer.shift());\n\t        }\n\t        else if (this.active === 0 && this.hasCompleted) {\n\t            if (this.hasValue === false) {\n\t                this.destination.next(this.acc);\n\t            }\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return MergeScanSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\texports.MergeScanSubscriber = MergeScanSubscriber;\n\n\n/***/ },\n/* 229 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar min_1 = __webpack_require__(230);\n\tObservable_1.Observable.prototype.min = min_1.min;\n\n\n/***/ },\n/* 230 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar reduce_1 = __webpack_require__(222);\n\t/**\n\t * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n\t * and when source Observable completes it emits a single item: the item with the smallest number.\n\t *\n\t * <img src=\"./img/min.png\" width=\"100%\">\n\t *\n\t * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n\t * @return {Observable<R>} an Observable that emits item with the smallest number.\n\t * @method min\n\t * @owner Observable\n\t */\n\tfunction min(comparer) {\n\t    var min = (typeof comparer === 'function')\n\t        ? comparer\n\t        : function (x, y) { return x < y ? x : y; };\n\t    return this.lift(new reduce_1.ReduceOperator(min));\n\t}\n\texports.min = min;\n\n\n/***/ },\n/* 231 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar multicast_1 = __webpack_require__(232);\n\tObservable_1.Observable.prototype.multicast = multicast_1.multicast;\n\n\n/***/ },\n/* 232 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar MulticastObservable_1 = __webpack_require__(233);\n\tvar ConnectableObservable_1 = __webpack_require__(234);\n\t/**\n\t * Returns an Observable that emits the results of invoking a specified selector on items\n\t * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n\t *\n\t * <img src=\"./img/multicast.png\" width=\"100%\">\n\t *\n\t * @param {Function|Subject} Factory function to create an intermediate subject through\n\t * which the source sequence's elements will be multicast to the selector function\n\t * or Subject to push source elements into.\n\t * @param {Function} Optional selector function that can use the multicasted source stream\n\t * as many times as needed, without causing multiple subscriptions to the source stream.\n\t * Subscribers to the given source will receive all notifications of the source from the\n\t * time of the subscription forward.\n\t * @return {Observable} an Observable that emits the results of invoking the selector\n\t * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n\t * the underlying stream.\n\t * @method multicast\n\t * @owner Observable\n\t */\n\tfunction multicast(subjectOrSubjectFactory, selector) {\n\t    var subjectFactory;\n\t    if (typeof subjectOrSubjectFactory === 'function') {\n\t        subjectFactory = subjectOrSubjectFactory;\n\t    }\n\t    else {\n\t        subjectFactory = function subjectFactory() {\n\t            return subjectOrSubjectFactory;\n\t        };\n\t    }\n\t    return !selector ?\n\t        new ConnectableObservable_1.ConnectableObservable(this, subjectFactory) :\n\t        new MulticastObservable_1.MulticastObservable(this, subjectFactory, selector);\n\t}\n\texports.multicast = multicast;\n\n\n/***/ },\n/* 233 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar ConnectableObservable_1 = __webpack_require__(234);\n\tvar MulticastObservable = (function (_super) {\n\t    __extends(MulticastObservable, _super);\n\t    function MulticastObservable(source, subjectFactory, selector) {\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.subjectFactory = subjectFactory;\n\t        this.selector = selector;\n\t    }\n\t    MulticastObservable.prototype._subscribe = function (subscriber) {\n\t        var _a = this, selector = _a.selector, source = _a.source;\n\t        var connectable = new ConnectableObservable_1.ConnectableObservable(source, this.subjectFactory);\n\t        var subscription = selector(connectable).subscribe(subscriber);\n\t        subscription.add(connectable.connect());\n\t        return subscription;\n\t    };\n\t    return MulticastObservable;\n\t}(Observable_1.Observable));\n\texports.MulticastObservable = MulticastObservable;\n\n\n/***/ },\n/* 234 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subscription_1 = __webpack_require__(13);\n\t/**\n\t * @class ConnectableObservable<T>\n\t */\n\tvar ConnectableObservable = (function (_super) {\n\t    __extends(ConnectableObservable, _super);\n\t    function ConnectableObservable(source, subjectFactory) {\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.subjectFactory = subjectFactory;\n\t        this._refCount = 0;\n\t    }\n\t    ConnectableObservable.prototype._subscribe = function (subscriber) {\n\t        return this.getSubject().subscribe(subscriber);\n\t    };\n\t    ConnectableObservable.prototype.getSubject = function () {\n\t        var subject = this._subject;\n\t        if (!subject || subject.isStopped) {\n\t            this._subject = this.subjectFactory();\n\t        }\n\t        return this._subject;\n\t    };\n\t    ConnectableObservable.prototype.connect = function () {\n\t        var connection = this._connection;\n\t        if (!connection) {\n\t            connection = this._connection = new Subscription_1.Subscription();\n\t            connection.add(this.source\n\t                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\t            if (connection.isUnsubscribed) {\n\t                this._connection = null;\n\t                connection = Subscription_1.Subscription.EMPTY;\n\t            }\n\t            else {\n\t                this._connection = connection;\n\t            }\n\t        }\n\t        return connection;\n\t    };\n\t    ConnectableObservable.prototype.refCount = function () {\n\t        return this.lift(new RefCountOperator(this));\n\t    };\n\t    return ConnectableObservable;\n\t}(Observable_1.Observable));\n\texports.ConnectableObservable = ConnectableObservable;\n\tvar ConnectableSubscriber = (function (_super) {\n\t    __extends(ConnectableSubscriber, _super);\n\t    function ConnectableSubscriber(destination, connectable) {\n\t        _super.call(this, destination);\n\t        this.connectable = connectable;\n\t    }\n\t    ConnectableSubscriber.prototype._error = function (err) {\n\t        this._unsubscribe();\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    ConnectableSubscriber.prototype._complete = function () {\n\t        this._unsubscribe();\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    ConnectableSubscriber.prototype._unsubscribe = function () {\n\t        var connectable = this.connectable;\n\t        if (connectable) {\n\t            this.connectable = null;\n\t            var connection = connectable._connection;\n\t            connectable._refCount = 0;\n\t            connectable._subject = null;\n\t            connectable._connection = null;\n\t            if (connection) {\n\t                connection.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    return ConnectableSubscriber;\n\t}(Subject_1.SubjectSubscriber));\n\tvar RefCountOperator = (function () {\n\t    function RefCountOperator(connectable) {\n\t        this.connectable = connectable;\n\t    }\n\t    RefCountOperator.prototype.call = function (subscriber, source) {\n\t        var connectable = this.connectable;\n\t        connectable._refCount++;\n\t        var refCounter = new RefCountSubscriber(subscriber, connectable);\n\t        var subscription = source._subscribe(refCounter);\n\t        if (!refCounter.isUnsubscribed) {\n\t            refCounter.connection = connectable.connect();\n\t        }\n\t        return subscription;\n\t    };\n\t    return RefCountOperator;\n\t}());\n\tvar RefCountSubscriber = (function (_super) {\n\t    __extends(RefCountSubscriber, _super);\n\t    function RefCountSubscriber(destination, connectable) {\n\t        _super.call(this, destination);\n\t        this.connectable = connectable;\n\t    }\n\t    RefCountSubscriber.prototype._unsubscribe = function () {\n\t        var connectable = this.connectable;\n\t        if (!connectable) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        this.connectable = null;\n\t        var refCount = connectable._refCount;\n\t        if (refCount <= 0) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        connectable._refCount = refCount - 1;\n\t        if (refCount > 1) {\n\t            this.connection = null;\n\t            return;\n\t        }\n\t        ///\n\t        // Compare the local RefCountSubscriber's connection Subscription to the\n\t        // connection Subscription on the shared ConnectableObservable. In cases\n\t        // where the ConnectableObservable source synchronously emits values, and\n\t        // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n\t        // execution continues to here before the RefCountOperator has a chance to\n\t        // supply the RefCountSubscriber with the shared connection Subscription.\n\t        // For example:\n\t        // ```\n\t        // Observable.range(0, 10)\n\t        //   .publish()\n\t        //   .refCount()\n\t        //   .take(5)\n\t        //   .subscribe();\n\t        // ```\n\t        // In order to account for this case, RefCountSubscriber should only dispose\n\t        // the ConnectableObservable's shared connection Subscription if the\n\t        // connection Subscription exists, *and* either:\n\t        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n\t        //      Subscription yet, or,\n\t        //   b. RefCountSubscriber's connection Subscription reference is identical\n\t        //      to the shared connection Subscription\n\t        ///\n\t        var connection = this.connection;\n\t        var sharedConnection = connectable._connection;\n\t        this.connection = null;\n\t        if (sharedConnection && (!connection || sharedConnection === connection)) {\n\t            sharedConnection.unsubscribe();\n\t        }\n\t    };\n\t    return RefCountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 235 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar observeOn_1 = __webpack_require__(63);\n\tObservable_1.Observable.prototype.observeOn = observeOn_1.observeOn;\n\n\n/***/ },\n/* 236 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar onErrorResumeNext_1 = __webpack_require__(99);\n\tObservable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n\n\n/***/ },\n/* 237 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar pairwise_1 = __webpack_require__(238);\n\tObservable_1.Observable.prototype.pairwise = pairwise_1.pairwise;\n\n\n/***/ },\n/* 238 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Groups pairs of consecutive emissions together and emits them as an array of\n\t * two values.\n\t *\n\t * <span class=\"informal\">Puts the current value and previous value together as\n\t * an array, and emits that.</span>\n\t *\n\t * <img src=\"./img/pairwise.png\" width=\"100%\">\n\t *\n\t * The Nth emission from the source Observable will cause the output Observable\n\t * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n\t * pair. For this reason, `pairwise` emits on the second and subsequent\n\t * emissions from the source Observable, but not on the first emission, because\n\t * there is no previous value in that case.\n\t *\n\t * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var pairs = clicks.pairwise();\n\t * var distance = pairs.map(pair => {\n\t *   var x0 = pair[0].clientX;\n\t *   var y0 = pair[0].clientY;\n\t *   var x1 = pair[1].clientX;\n\t *   var y1 = pair[1].clientY;\n\t *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n\t * });\n\t * distance.subscribe(x => console.log(x));\n\t *\n\t * @see {@link buffer}\n\t * @see {@link bufferCount}\n\t *\n\t * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n\t * consecutive values from the source Observable.\n\t * @method pairwise\n\t * @owner Observable\n\t */\n\tfunction pairwise() {\n\t    return this.lift(new PairwiseOperator());\n\t}\n\texports.pairwise = pairwise;\n\tvar PairwiseOperator = (function () {\n\t    function PairwiseOperator() {\n\t    }\n\t    PairwiseOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new PairwiseSubscriber(subscriber));\n\t    };\n\t    return PairwiseOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar PairwiseSubscriber = (function (_super) {\n\t    __extends(PairwiseSubscriber, _super);\n\t    function PairwiseSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.hasPrev = false;\n\t    }\n\t    PairwiseSubscriber.prototype._next = function (value) {\n\t        if (this.hasPrev) {\n\t            this.destination.next([this.prev, value]);\n\t        }\n\t        else {\n\t            this.hasPrev = true;\n\t        }\n\t        this.prev = value;\n\t    };\n\t    return PairwiseSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 239 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar partition_1 = __webpack_require__(240);\n\tObservable_1.Observable.prototype.partition = partition_1.partition;\n\n\n/***/ },\n/* 240 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar not_1 = __webpack_require__(241);\n\tvar filter_1 = __webpack_require__(185);\n\t/**\n\t * Splits the source Observable into two, one with values that satisfy a\n\t * predicate, and another with values that don't satisfy the predicate.\n\t *\n\t * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n\t * one like the output of {@link filter}, and the other with values that did not\n\t * pass the condition.</span>\n\t *\n\t * <img src=\"./img/partition.png\" width=\"100%\">\n\t *\n\t * `partition` outputs an array with two Observables that partition the values\n\t * from the source Observable through the given `predicate` function. The first\n\t * Observable in that array emits source values for which the predicate argument\n\t * returns true. The second Observable emits source values for which the\n\t * predicate returns false. The first behaves like {@link filter} and the second\n\t * behaves like {@link filter} with the predicate negated.\n\t *\n\t * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n\t * var clicksOnDivs = parts[0];\n\t * var clicksElsewhere = parts[1];\n\t * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n\t * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n\t *\n\t * @see {@link filter}\n\t *\n\t * @param {function(value: T, index: number): boolean} predicate A function that\n\t * evaluates each value emitted by the source Observable. If it returns `true`,\n\t * the value is emitted on the first Observable in the returned array, if\n\t * `false` the value is emitted on the second Observable in the array. The\n\t * `index` parameter is the number `i` for the i-th source emission that has\n\t * happened since the subscription, starting from the number `0`.\n\t * @param {any} [thisArg] An optional argument to determine the value of `this`\n\t * in the `predicate` function.\n\t * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n\t * with values that passed the predicate, and another with values that did not\n\t * pass the predicate.\n\t * @method partition\n\t * @owner Observable\n\t */\n\tfunction partition(predicate, thisArg) {\n\t    return [\n\t        filter_1.filter.call(this, predicate),\n\t        filter_1.filter.call(this, not_1.not(predicate, thisArg))\n\t    ];\n\t}\n\texports.partition = partition;\n\n\n/***/ },\n/* 241 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction not(pred, thisArg) {\n\t    function notPred() {\n\t        return !(notPred.pred.apply(notPred.thisArg, arguments));\n\t    }\n\t    notPred.pred = pred;\n\t    notPred.thisArg = thisArg;\n\t    return notPred;\n\t}\n\texports.not = not;\n\n\n/***/ },\n/* 242 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar pluck_1 = __webpack_require__(243);\n\tObservable_1.Observable.prototype.pluck = pluck_1.pluck;\n\n\n/***/ },\n/* 243 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar map_1 = __webpack_require__(215);\n\t/**\n\t * Maps each source value (an object) to its specified nested property.\n\t *\n\t * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n\t * the nested properties of every emitted object.</span>\n\t *\n\t * <img src=\"./img/pluck.png\" width=\"100%\">\n\t *\n\t * Given a list of strings describing a path to an object property, retrieves\n\t * the value of a specified nested property from all values in the source\n\t * Observable. If a property can't be resolved, it will return `undefined` for\n\t * that value.\n\t *\n\t * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var tagNames = clicks.pluck('target', 'tagName');\n\t * tagNames.subscribe(x => console.log(x));\n\t *\n\t * @see {@link map}\n\t *\n\t * @param {...string} properties The nested properties to pluck from each source\n\t * value (an object).\n\t * @return {Observable} Returns a new Observable of property values from the\n\t * source values.\n\t * @method pluck\n\t * @owner Observable\n\t */\n\tfunction pluck() {\n\t    var properties = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        properties[_i - 0] = arguments[_i];\n\t    }\n\t    var length = properties.length;\n\t    if (length === 0) {\n\t        throw new Error('List of properties cannot be empty.');\n\t    }\n\t    return map_1.map.call(this, plucker(properties, length));\n\t}\n\texports.pluck = pluck;\n\tfunction plucker(props, length) {\n\t    var mapper = function (x) {\n\t        var currentProp = x;\n\t        for (var i = 0; i < length; i++) {\n\t            var p = currentProp[props[i]];\n\t            if (typeof p !== 'undefined') {\n\t                currentProp = p;\n\t            }\n\t            else {\n\t                return undefined;\n\t            }\n\t        }\n\t        return currentProp;\n\t    };\n\t    return mapper;\n\t}\n\n\n/***/ },\n/* 244 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publish_1 = __webpack_require__(245);\n\tObservable_1.Observable.prototype.publish = publish_1.publish;\n\n\n/***/ },\n/* 245 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subject_1 = __webpack_require__(6);\n\tvar multicast_1 = __webpack_require__(232);\n\t/**\n\t * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n\t * before it begins emitting items to those Observers that have subscribed to it.\n\t *\n\t * <img src=\"./img/publish.png\" width=\"100%\">\n\t *\n\t * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n\t * without causing multiple subscriptions to the source sequence.\n\t * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n\t * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n\t * @method publish\n\t * @owner Observable\n\t */\n\tfunction publish(selector) {\n\t    return selector ? multicast_1.multicast.call(this, function () { return new Subject_1.Subject(); }, selector) :\n\t        multicast_1.multicast.call(this, new Subject_1.Subject());\n\t}\n\texports.publish = publish;\n\n\n/***/ },\n/* 246 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publishBehavior_1 = __webpack_require__(247);\n\tObservable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;\n\n\n/***/ },\n/* 247 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar BehaviorSubject_1 = __webpack_require__(248);\n\tvar multicast_1 = __webpack_require__(232);\n\t/**\n\t * @param value\n\t * @return {ConnectableObservable<T>}\n\t * @method publishBehavior\n\t * @owner Observable\n\t */\n\tfunction publishBehavior(value) {\n\t    return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));\n\t}\n\texports.publishBehavior = publishBehavior;\n\n\n/***/ },\n/* 248 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar throwError_1 = __webpack_require__(249);\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(24);\n\t/**\n\t * @class BehaviorSubject<T>\n\t */\n\tvar BehaviorSubject = (function (_super) {\n\t    __extends(BehaviorSubject, _super);\n\t    function BehaviorSubject(_value) {\n\t        _super.call(this);\n\t        this._value = _value;\n\t    }\n\t    BehaviorSubject.prototype.getValue = function () {\n\t        if (this.hasError) {\n\t            throwError_1.throwError(this.thrownError);\n\t        }\n\t        else if (this.isUnsubscribed) {\n\t            throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());\n\t        }\n\t        else {\n\t            return this._value;\n\t        }\n\t    };\n\t    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n\t        get: function () {\n\t            return this.getValue();\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    BehaviorSubject.prototype._subscribe = function (subscriber) {\n\t        var subscription = _super.prototype._subscribe.call(this, subscriber);\n\t        if (subscription && !subscription.isUnsubscribed) {\n\t            subscriber.next(this._value);\n\t        }\n\t        return subscription;\n\t    };\n\t    BehaviorSubject.prototype.next = function (value) {\n\t        _super.prototype.next.call(this, this._value = value);\n\t    };\n\t    return BehaviorSubject;\n\t}(Subject_1.Subject));\n\texports.BehaviorSubject = BehaviorSubject;\n\n\n/***/ },\n/* 249 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction throwError(e) { throw e; }\n\texports.throwError = throwError;\n\n\n/***/ },\n/* 250 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publishReplay_1 = __webpack_require__(251);\n\tObservable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;\n\n\n/***/ },\n/* 251 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ReplaySubject_1 = __webpack_require__(122);\n\tvar multicast_1 = __webpack_require__(232);\n\t/**\n\t * @param bufferSize\n\t * @param windowTime\n\t * @param scheduler\n\t * @return {ConnectableObservable<T>}\n\t * @method publishReplay\n\t * @owner Observable\n\t */\n\tfunction publishReplay(bufferSize, windowTime, scheduler) {\n\t    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n\t    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n\t    return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));\n\t}\n\texports.publishReplay = publishReplay;\n\n\n/***/ },\n/* 252 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar publishLast_1 = __webpack_require__(253);\n\tObservable_1.Observable.prototype.publishLast = publishLast_1.publishLast;\n\n\n/***/ },\n/* 253 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AsyncSubject_1 = __webpack_require__(29);\n\tvar multicast_1 = __webpack_require__(232);\n\t/**\n\t * @return {ConnectableObservable<T>}\n\t * @method publishLast\n\t * @owner Observable\n\t */\n\tfunction publishLast() {\n\t    return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());\n\t}\n\texports.publishLast = publishLast;\n\n\n/***/ },\n/* 254 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar race_1 = __webpack_require__(91);\n\tObservable_1.Observable.prototype.race = race_1.race;\n\n\n/***/ },\n/* 255 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar reduce_1 = __webpack_require__(222);\n\tObservable_1.Observable.prototype.reduce = reduce_1.reduce;\n\n\n/***/ },\n/* 256 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar repeat_1 = __webpack_require__(257);\n\tObservable_1.Observable.prototype.repeat = repeat_1.repeat;\n\n\n/***/ },\n/* 257 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\t/**\n\t * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n\t * on a particular Scheduler.\n\t *\n\t * <img src=\"./img/repeat.png\" width=\"100%\">\n\t *\n\t * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n\t * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n\t * an empty Observable.\n\t * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n\t * count times.\n\t * @method repeat\n\t * @owner Observable\n\t */\n\tfunction repeat(count) {\n\t    if (count === void 0) { count = -1; }\n\t    if (count === 0) {\n\t        return new EmptyObservable_1.EmptyObservable();\n\t    }\n\t    else if (count < 0) {\n\t        return this.lift(new RepeatOperator(-1, this));\n\t    }\n\t    else {\n\t        return this.lift(new RepeatOperator(count - 1, this));\n\t    }\n\t}\n\texports.repeat = repeat;\n\tvar RepeatOperator = (function () {\n\t    function RepeatOperator(count, source) {\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RepeatOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n\t    };\n\t    return RepeatOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RepeatSubscriber = (function (_super) {\n\t    __extends(RepeatSubscriber, _super);\n\t    function RepeatSubscriber(destination, count, source) {\n\t        _super.call(this, destination);\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RepeatSubscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            var _a = this, source = _a.source, count = _a.count;\n\t            if (count === 0) {\n\t                return _super.prototype.complete.call(this);\n\t            }\n\t            else if (count > -1) {\n\t                this.count = count - 1;\n\t            }\n\t            this.unsubscribe();\n\t            this.isStopped = false;\n\t            this.isUnsubscribed = false;\n\t            source.subscribe(this);\n\t        }\n\t    };\n\t    return RepeatSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 258 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar retry_1 = __webpack_require__(259);\n\tObservable_1.Observable.prototype.retry = retry_1.retry;\n\n\n/***/ },\n/* 259 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n\t * predicate returns true for that specific exception and retry count.\n\t * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n\t * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n\t *\n\t * <img src=\"./img/retry.png\" width=\"100%\">\n\t *\n\t * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n\t * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n\t * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n\t * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n\t * @param {number} number of retry attempts before failing.\n\t * @return {Observable} the source Observable modified with the retry logic.\n\t * @method retry\n\t * @owner Observable\n\t */\n\tfunction retry(count) {\n\t    if (count === void 0) { count = -1; }\n\t    return this.lift(new RetryOperator(count, this));\n\t}\n\texports.retry = retry;\n\tvar RetryOperator = (function () {\n\t    function RetryOperator(count, source) {\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RetryOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n\t    };\n\t    return RetryOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RetrySubscriber = (function (_super) {\n\t    __extends(RetrySubscriber, _super);\n\t    function RetrySubscriber(destination, count, source) {\n\t        _super.call(this, destination);\n\t        this.count = count;\n\t        this.source = source;\n\t    }\n\t    RetrySubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var _a = this, source = _a.source, count = _a.count;\n\t            if (count === 0) {\n\t                return _super.prototype.error.call(this, err);\n\t            }\n\t            else if (count > -1) {\n\t                this.count = count - 1;\n\t            }\n\t            this.unsubscribe();\n\t            this.isStopped = false;\n\t            this.isUnsubscribed = false;\n\t            source.subscribe(this);\n\t        }\n\t    };\n\t    return RetrySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 260 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar retryWhen_1 = __webpack_require__(261);\n\tObservable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;\n\n\n/***/ },\n/* 261 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n\t * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n\t * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n\t * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n\t * Scheduler.\n\t *\n\t * <img src=\"./img/retryWhen.png\" width=\"100%\">\n\t *\n\t * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n\t * aborting the retry.\n\t * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n\t * @return {Observable} the source Observable modified with retry logic.\n\t * @method retryWhen\n\t * @owner Observable\n\t */\n\tfunction retryWhen(notifier) {\n\t    return this.lift(new RetryWhenOperator(notifier, this));\n\t}\n\texports.retryWhen = retryWhen;\n\tvar RetryWhenOperator = (function () {\n\t    function RetryWhenOperator(notifier, source) {\n\t        this.notifier = notifier;\n\t        this.source = source;\n\t    }\n\t    RetryWhenOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n\t    };\n\t    return RetryWhenOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar RetryWhenSubscriber = (function (_super) {\n\t    __extends(RetryWhenSubscriber, _super);\n\t    function RetryWhenSubscriber(destination, notifier, source) {\n\t        _super.call(this, destination);\n\t        this.notifier = notifier;\n\t        this.source = source;\n\t    }\n\t    RetryWhenSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var errors = this.errors;\n\t            var retries = this.retries;\n\t            var retriesSubscription = this.retriesSubscription;\n\t            if (!retries) {\n\t                errors = new Subject_1.Subject();\n\t                retries = tryCatch_1.tryCatch(this.notifier)(errors);\n\t                if (retries === errorObject_1.errorObject) {\n\t                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n\t                }\n\t                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n\t            }\n\t            else {\n\t                this.errors = null;\n\t                this.retriesSubscription = null;\n\t            }\n\t            this.unsubscribe();\n\t            this.isUnsubscribed = false;\n\t            this.errors = errors;\n\t            this.retries = retries;\n\t            this.retriesSubscription = retriesSubscription;\n\t            errors.next(err);\n\t        }\n\t    };\n\t    RetryWhenSubscriber.prototype._unsubscribe = function () {\n\t        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n\t        if (errors) {\n\t            errors.unsubscribe();\n\t            this.errors = null;\n\t        }\n\t        if (retriesSubscription) {\n\t            retriesSubscription.unsubscribe();\n\t            this.retriesSubscription = null;\n\t        }\n\t        this.retries = null;\n\t    };\n\t    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n\t        this.errors = null;\n\t        this.retries = null;\n\t        this.retriesSubscription = null;\n\t        this.unsubscribe();\n\t        this.isStopped = false;\n\t        this.isUnsubscribed = false;\n\t        this.errors = errors;\n\t        this.retries = retries;\n\t        this.retriesSubscription = retriesSubscription;\n\t        this.source.subscribe(this);\n\t    };\n\t    return RetryWhenSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 262 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar sample_1 = __webpack_require__(263);\n\tObservable_1.Observable.prototype.sample = sample_1.sample;\n\n\n/***/ },\n/* 263 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Emits the most recently emitted value from the source Observable whenever\n\t * another Observable, the `notifier`, emits.\n\t *\n\t * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n\t * the `notifier` Observable emits something.</span>\n\t *\n\t * <img src=\"./img/sample.png\" width=\"100%\">\n\t *\n\t * Whenever the `notifier` Observable emits a value or completes, `sample`\n\t * looks at the source Observable and emits whichever value it has most recently\n\t * emitted since the previous sampling, unless the source has not emitted\n\t * anything since the previous sampling. The `notifier` is subscribed to as soon\n\t * as the output Observable is subscribed.\n\t *\n\t * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n\t * var seconds = Rx.Observable.interval(1000);\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = seconds.sample(clicks);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounce}\n\t * @see {@link sampleTime}\n\t * @see {@link throttle}\n\t *\n\t * @param {Observable<any>} notifier The Observable to use for sampling the\n\t * source Observable.\n\t * @return {Observable<T>} An Observable that emits the results of sampling the\n\t * values emitted by the source Observable whenever the notifier Observable\n\t * emits value or completes.\n\t * @method sample\n\t * @owner Observable\n\t */\n\tfunction sample(notifier) {\n\t    return this.lift(new SampleOperator(notifier));\n\t}\n\texports.sample = sample;\n\tvar SampleOperator = (function () {\n\t    function SampleOperator(notifier) {\n\t        this.notifier = notifier;\n\t    }\n\t    SampleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n\t    };\n\t    return SampleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SampleSubscriber = (function (_super) {\n\t    __extends(SampleSubscriber, _super);\n\t    function SampleSubscriber(destination, notifier) {\n\t        _super.call(this, destination);\n\t        this.hasValue = false;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n\t    }\n\t    SampleSubscriber.prototype._next = function (value) {\n\t        this.value = value;\n\t        this.hasValue = true;\n\t    };\n\t    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.emitValue();\n\t    };\n\t    SampleSubscriber.prototype.notifyComplete = function () {\n\t        this.emitValue();\n\t    };\n\t    SampleSubscriber.prototype.emitValue = function () {\n\t        if (this.hasValue) {\n\t            this.hasValue = false;\n\t            this.destination.next(this.value);\n\t        }\n\t    };\n\t    return SampleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 264 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar sampleTime_1 = __webpack_require__(265);\n\tObservable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;\n\n\n/***/ },\n/* 265 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * Emits the most recently emitted value from the source Observable within\n\t * periodic time intervals.\n\t *\n\t * <span class=\"informal\">Samples the source Observable at periodic time\n\t * intervals, emitting what it samples.</span>\n\t *\n\t * <img src=\"./img/sampleTime.png\" width=\"100%\">\n\t *\n\t * `sampleTime` periodically looks at the source Observable and emits whichever\n\t * value it has most recently emitted since the previous sampling, unless the\n\t * source has not emitted anything since the previous sampling. The sampling\n\t * happens periodically in time every `period` milliseconds (or the time unit\n\t * defined by the optional `scheduler` argument). The sampling starts as soon as\n\t * the output Observable is subscribed.\n\t *\n\t * @example <caption>Every second, emit the most recent click at most once</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.sampleTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounceTime}\n\t * @see {@link delay}\n\t * @see {@link sample}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {number} period The sampling period expressed in milliseconds or the\n\t * time unit determined internally by the optional `scheduler`.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the sampling.\n\t * @return {Observable<T>} An Observable that emits the results of sampling the\n\t * values emitted by the source Observable at the specified time interval.\n\t * @method sampleTime\n\t * @owner Observable\n\t */\n\tfunction sampleTime(period, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new SampleTimeOperator(period, scheduler));\n\t}\n\texports.sampleTime = sampleTime;\n\tvar SampleTimeOperator = (function () {\n\t    function SampleTimeOperator(period, scheduler) {\n\t        this.period = period;\n\t        this.scheduler = scheduler;\n\t    }\n\t    SampleTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n\t    };\n\t    return SampleTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SampleTimeSubscriber = (function (_super) {\n\t    __extends(SampleTimeSubscriber, _super);\n\t    function SampleTimeSubscriber(destination, period, scheduler) {\n\t        _super.call(this, destination);\n\t        this.period = period;\n\t        this.scheduler = scheduler;\n\t        this.hasValue = false;\n\t        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\n\t    }\n\t    SampleTimeSubscriber.prototype._next = function (value) {\n\t        this.lastValue = value;\n\t        this.hasValue = true;\n\t    };\n\t    SampleTimeSubscriber.prototype.notifyNext = function () {\n\t        if (this.hasValue) {\n\t            this.hasValue = false;\n\t            this.destination.next(this.lastValue);\n\t        }\n\t    };\n\t    return SampleTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNotification(state) {\n\t    var subscriber = state.subscriber, period = state.period;\n\t    subscriber.notifyNext();\n\t    this.schedule(state, period);\n\t}\n\n\n/***/ },\n/* 266 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar scan_1 = __webpack_require__(267);\n\tObservable_1.Observable.prototype.scan = scan_1.scan;\n\n\n/***/ },\n/* 267 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Applies an accumulator function over the source Observable, and returns each\n\t * intermediate result, with an optional seed value.\n\t *\n\t * <span class=\"informal\">It's like {@link reduce}, but emits the current\n\t * accumulation whenever the source emits a value.</span>\n\t *\n\t * <img src=\"./img/scan.png\" width=\"100%\">\n\t *\n\t * Combines together all values emitted on the source, using an accumulator\n\t * function that knows how to join a new source value into the accumulation from\n\t * the past. Is similar to {@link reduce}, but emits the intermediate\n\t * accumulations.\n\t *\n\t * Returns an Observable that applies a specified `accumulator` function to each\n\t * item emitted by the source Observable. If a `seed` value is specified, then\n\t * that value will be used as the initial value for the accumulator. If no seed\n\t * value is specified, the first item of the source is used as the seed.\n\t *\n\t * @example <caption>Count the number of click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var ones = clicks.mapTo(1);\n\t * var seed = 0;\n\t * var count = ones.scan((acc, one) => acc + one, seed);\n\t * count.subscribe(x => console.log(x));\n\t *\n\t * @see {@link expand}\n\t * @see {@link mergeScan}\n\t * @see {@link reduce}\n\t *\n\t * @param {function(acc: R, value: T, index: number): R} accumulator\n\t * The accumulator function called on each source value.\n\t * @param {T|R} [seed] The initial accumulation value.\n\t * @return {Observable<R>} An observable of the accumulated values.\n\t * @method scan\n\t * @owner Observable\n\t */\n\tfunction scan(accumulator, seed) {\n\t    return this.lift(new ScanOperator(accumulator, seed));\n\t}\n\texports.scan = scan;\n\tvar ScanOperator = (function () {\n\t    function ScanOperator(accumulator, seed) {\n\t        this.accumulator = accumulator;\n\t        this.seed = seed;\n\t    }\n\t    ScanOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n\t    };\n\t    return ScanOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ScanSubscriber = (function (_super) {\n\t    __extends(ScanSubscriber, _super);\n\t    function ScanSubscriber(destination, accumulator, seed) {\n\t        _super.call(this, destination);\n\t        this.accumulator = accumulator;\n\t        this.index = 0;\n\t        this.accumulatorSet = false;\n\t        this.seed = seed;\n\t        this.accumulatorSet = typeof seed !== 'undefined';\n\t    }\n\t    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n\t        get: function () {\n\t            return this._seed;\n\t        },\n\t        set: function (value) {\n\t            this.accumulatorSet = true;\n\t            this._seed = value;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    ScanSubscriber.prototype._next = function (value) {\n\t        if (!this.accumulatorSet) {\n\t            this.seed = value;\n\t            this.destination.next(value);\n\t        }\n\t        else {\n\t            return this._tryNext(value);\n\t        }\n\t    };\n\t    ScanSubscriber.prototype._tryNext = function (value) {\n\t        var index = this.index++;\n\t        var result;\n\t        try {\n\t            result = this.accumulator(this.seed, value, index);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t        this.seed = result;\n\t        this.destination.next(result);\n\t    };\n\t    return ScanSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 268 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar share_1 = __webpack_require__(269);\n\tObservable_1.Observable.prototype.share = share_1.share;\n\n\n/***/ },\n/* 269 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar multicast_1 = __webpack_require__(232);\n\tvar Subject_1 = __webpack_require__(6);\n\tfunction shareSubjectFactory() {\n\t    return new Subject_1.Subject();\n\t}\n\t/**\n\t * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n\t * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n\t * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n\t * This is an alias for .publish().refCount().\n\t *\n\t * <img src=\"./img/share.png\" width=\"100%\">\n\t *\n\t * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n\t * @method share\n\t * @owner Observable\n\t */\n\tfunction share() {\n\t    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();\n\t}\n\texports.share = share;\n\t;\n\n\n/***/ },\n/* 270 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar single_1 = __webpack_require__(271);\n\tObservable_1.Observable.prototype.single = single_1.single;\n\n\n/***/ },\n/* 271 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar EmptyError_1 = __webpack_require__(194);\n\t/**\n\t * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n\t * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n\t * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n\t *\n\t * <img src=\"./img/single.png\" width=\"100%\">\n\t *\n\t * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n\t * callback if the Observable completes before any `next` notification was sent.\n\t * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n\t * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n\t * the predicate.\n\t .\n\t * @method single\n\t * @owner Observable\n\t */\n\tfunction single(predicate) {\n\t    return this.lift(new SingleOperator(predicate, this));\n\t}\n\texports.single = single;\n\tvar SingleOperator = (function () {\n\t    function SingleOperator(predicate, source) {\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t    }\n\t    SingleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n\t    };\n\t    return SingleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SingleSubscriber = (function (_super) {\n\t    __extends(SingleSubscriber, _super);\n\t    function SingleSubscriber(destination, predicate, source) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.source = source;\n\t        this.seenValue = false;\n\t        this.index = 0;\n\t    }\n\t    SingleSubscriber.prototype.applySingleValue = function (value) {\n\t        if (this.seenValue) {\n\t            this.destination.error('Sequence contains more than one element');\n\t        }\n\t        else {\n\t            this.seenValue = true;\n\t            this.singleValue = value;\n\t        }\n\t    };\n\t    SingleSubscriber.prototype._next = function (value) {\n\t        var predicate = this.predicate;\n\t        this.index++;\n\t        if (predicate) {\n\t            this.tryNext(value);\n\t        }\n\t        else {\n\t            this.applySingleValue(value);\n\t        }\n\t    };\n\t    SingleSubscriber.prototype.tryNext = function (value) {\n\t        try {\n\t            var result = this.predicate(value, this.index, this.source);\n\t            if (result) {\n\t                this.applySingleValue(value);\n\t            }\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    SingleSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        if (this.index > 0) {\n\t            destination.next(this.seenValue ? this.singleValue : undefined);\n\t            destination.complete();\n\t        }\n\t        else {\n\t            destination.error(new EmptyError_1.EmptyError);\n\t        }\n\t    };\n\t    return SingleSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 272 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar skip_1 = __webpack_require__(273);\n\tObservable_1.Observable.prototype.skip = skip_1.skip;\n\n\n/***/ },\n/* 273 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that skips `n` items emitted by an Observable.\n\t *\n\t * <img src=\"./img/skip.png\" width=\"100%\">\n\t *\n\t * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n\t * @return {Observable} an Observable that skips values emitted by the source Observable.\n\t *\n\t * @method skip\n\t * @owner Observable\n\t */\n\tfunction skip(total) {\n\t    return this.lift(new SkipOperator(total));\n\t}\n\texports.skip = skip;\n\tvar SkipOperator = (function () {\n\t    function SkipOperator(total) {\n\t        this.total = total;\n\t    }\n\t    SkipOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SkipSubscriber(subscriber, this.total));\n\t    };\n\t    return SkipOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SkipSubscriber = (function (_super) {\n\t    __extends(SkipSubscriber, _super);\n\t    function SkipSubscriber(destination, total) {\n\t        _super.call(this, destination);\n\t        this.total = total;\n\t        this.count = 0;\n\t    }\n\t    SkipSubscriber.prototype._next = function (x) {\n\t        if (++this.count > this.total) {\n\t            this.destination.next(x);\n\t        }\n\t    };\n\t    return SkipSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 274 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar skipUntil_1 = __webpack_require__(275);\n\tObservable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;\n\n\n/***/ },\n/* 275 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n\t *\n\t * <img src=\"./img/skipUntil.png\" width=\"100%\">\n\t *\n\t * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n\t * be mirrored by the resulting Observable.\n\t * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n\t * an item, then emits the remaining items.\n\t * @method skipUntil\n\t * @owner Observable\n\t */\n\tfunction skipUntil(notifier) {\n\t    return this.lift(new SkipUntilOperator(notifier));\n\t}\n\texports.skipUntil = skipUntil;\n\tvar SkipUntilOperator = (function () {\n\t    function SkipUntilOperator(notifier) {\n\t        this.notifier = notifier;\n\t    }\n\t    SkipUntilOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n\t    };\n\t    return SkipUntilOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SkipUntilSubscriber = (function (_super) {\n\t    __extends(SkipUntilSubscriber, _super);\n\t    function SkipUntilSubscriber(destination, notifier) {\n\t        _super.call(this, destination);\n\t        this.hasValue = false;\n\t        this.isInnerStopped = false;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n\t    }\n\t    SkipUntilSubscriber.prototype._next = function (value) {\n\t        if (this.hasValue) {\n\t            _super.prototype._next.call(this, value);\n\t        }\n\t    };\n\t    SkipUntilSubscriber.prototype._complete = function () {\n\t        if (this.isInnerStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t        else {\n\t            this.unsubscribe();\n\t        }\n\t    };\n\t    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.hasValue = true;\n\t    };\n\t    SkipUntilSubscriber.prototype.notifyComplete = function () {\n\t        this.isInnerStopped = true;\n\t        if (this.isStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    return SkipUntilSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 276 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar skipWhile_1 = __webpack_require__(277);\n\tObservable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;\n\n\n/***/ },\n/* 277 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n\t * true, but emits all further source items as soon as the condition becomes false.\n\t *\n\t * <img src=\"./img/skipWhile.png\" width=\"100%\">\n\t *\n\t * @param {Function} predicate - a function to test each item emitted from the source Observable.\n\t * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n\t * specified predicate becomes false.\n\t * @method skipWhile\n\t * @owner Observable\n\t */\n\tfunction skipWhile(predicate) {\n\t    return this.lift(new SkipWhileOperator(predicate));\n\t}\n\texports.skipWhile = skipWhile;\n\tvar SkipWhileOperator = (function () {\n\t    function SkipWhileOperator(predicate) {\n\t        this.predicate = predicate;\n\t    }\n\t    SkipWhileOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n\t    };\n\t    return SkipWhileOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SkipWhileSubscriber = (function (_super) {\n\t    __extends(SkipWhileSubscriber, _super);\n\t    function SkipWhileSubscriber(destination, predicate) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.skipping = true;\n\t        this.index = 0;\n\t    }\n\t    SkipWhileSubscriber.prototype._next = function (value) {\n\t        var destination = this.destination;\n\t        if (this.skipping) {\n\t            this.tryCallPredicate(value);\n\t        }\n\t        if (!this.skipping) {\n\t            destination.next(value);\n\t        }\n\t    };\n\t    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n\t        try {\n\t            var result = this.predicate(value, this.index++);\n\t            this.skipping = Boolean(result);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    return SkipWhileSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 278 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar startWith_1 = __webpack_require__(279);\n\tObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n\n\n/***/ },\n/* 279 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ArrayObservable_1 = __webpack_require__(36);\n\tvar ScalarObservable_1 = __webpack_require__(37);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\tvar concat_1 = __webpack_require__(47);\n\tvar isScheduler_1 = __webpack_require__(35);\n\t/**\n\t * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n\t * source Observable.\n\t *\n\t * <img src=\"./img/startWith.png\" width=\"100%\">\n\t *\n\t * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n\t * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n\t * emitted by the source Observable.\n\t * @method startWith\n\t * @owner Observable\n\t */\n\tfunction startWith() {\n\t    var array = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        array[_i - 0] = arguments[_i];\n\t    }\n\t    var scheduler = array[array.length - 1];\n\t    if (isScheduler_1.isScheduler(scheduler)) {\n\t        array.pop();\n\t    }\n\t    else {\n\t        scheduler = null;\n\t    }\n\t    var len = array.length;\n\t    if (len === 1) {\n\t        return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);\n\t    }\n\t    else if (len > 1) {\n\t        return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);\n\t    }\n\t    else {\n\t        return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);\n\t    }\n\t}\n\texports.startWith = startWith;\n\n\n/***/ },\n/* 280 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar subscribeOn_1 = __webpack_require__(281);\n\tObservable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;\n\n\n/***/ },\n/* 281 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar SubscribeOnObservable_1 = __webpack_require__(282);\n\t/**\n\t * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n\t *\n\t * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n\t *\n\t * @param {Scheduler} the Scheduler to perform subscription actions on.\n\t * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n\t .\n\t * @method subscribeOn\n\t * @owner Observable\n\t */\n\tfunction subscribeOn(scheduler, delay) {\n\t    if (delay === void 0) { delay = 0; }\n\t    return new SubscribeOnObservable_1.SubscribeOnObservable(this, delay, scheduler);\n\t}\n\texports.subscribeOn = subscribeOn;\n\n\n/***/ },\n/* 282 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar asap_1 = __webpack_require__(283);\n\tvar isNumeric_1 = __webpack_require__(81);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @extends {Ignored}\n\t * @hide true\n\t */\n\tvar SubscribeOnObservable = (function (_super) {\n\t    __extends(SubscribeOnObservable, _super);\n\t    function SubscribeOnObservable(source, delayTime, scheduler) {\n\t        if (delayTime === void 0) { delayTime = 0; }\n\t        if (scheduler === void 0) { scheduler = asap_1.asap; }\n\t        _super.call(this);\n\t        this.source = source;\n\t        this.delayTime = delayTime;\n\t        this.scheduler = scheduler;\n\t        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {\n\t            this.delayTime = 0;\n\t        }\n\t        if (!scheduler || typeof scheduler.schedule !== 'function') {\n\t            this.scheduler = asap_1.asap;\n\t        }\n\t    }\n\t    SubscribeOnObservable.create = function (source, delay, scheduler) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (scheduler === void 0) { scheduler = asap_1.asap; }\n\t        return new SubscribeOnObservable(source, delay, scheduler);\n\t    };\n\t    SubscribeOnObservable.dispatch = function (arg) {\n\t        var source = arg.source, subscriber = arg.subscriber;\n\t        return source.subscribe(subscriber);\n\t    };\n\t    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n\t        var delay = this.delayTime;\n\t        var source = this.source;\n\t        var scheduler = this.scheduler;\n\t        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n\t            source: source, subscriber: subscriber\n\t        });\n\t    };\n\t    return SubscribeOnObservable;\n\t}(Observable_1.Observable));\n\texports.SubscribeOnObservable = SubscribeOnObservable;\n\n\n/***/ },\n/* 283 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AsapScheduler_1 = __webpack_require__(284);\n\texports.asap = new AsapScheduler_1.AsapScheduler();\n\n\n/***/ },\n/* 284 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar AsapAction_1 = __webpack_require__(285);\n\tvar QueueScheduler_1 = __webpack_require__(85);\n\tvar AsapScheduler = (function (_super) {\n\t    __extends(AsapScheduler, _super);\n\t    function AsapScheduler() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AsapScheduler.prototype.scheduleNow = function (work, state) {\n\t        return new AsapAction_1.AsapAction(this, work).schedule(state);\n\t    };\n\t    return AsapScheduler;\n\t}(QueueScheduler_1.QueueScheduler));\n\texports.AsapScheduler = AsapScheduler;\n\n\n/***/ },\n/* 285 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Immediate_1 = __webpack_require__(286);\n\tvar FutureAction_1 = __webpack_require__(84);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AsapAction = (function (_super) {\n\t    __extends(AsapAction, _super);\n\t    function AsapAction() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AsapAction.prototype._schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (delay > 0) {\n\t            return _super.prototype._schedule.call(this, state, delay);\n\t        }\n\t        this.delay = delay;\n\t        this.state = state;\n\t        var scheduler = this.scheduler;\n\t        scheduler.actions.push(this);\n\t        if (!scheduler.scheduledId) {\n\t            scheduler.scheduledId = Immediate_1.Immediate.setImmediate(function () {\n\t                scheduler.scheduledId = null;\n\t                scheduler.flush();\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    AsapAction.prototype._unsubscribe = function () {\n\t        var scheduler = this.scheduler;\n\t        var scheduledId = scheduler.scheduledId, actions = scheduler.actions;\n\t        _super.prototype._unsubscribe.call(this);\n\t        if (actions.length === 0) {\n\t            scheduler.active = false;\n\t            if (scheduledId != null) {\n\t                scheduler.scheduledId = null;\n\t                Immediate_1.Immediate.clearImmediate(scheduledId);\n\t            }\n\t        }\n\t    };\n\t    return AsapAction;\n\t}(FutureAction_1.FutureAction));\n\texports.AsapAction = AsapAction;\n\n\n/***/ },\n/* 286 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(clearImmediate, setImmediate) {/**\n\tSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n\t*/\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar ImmediateDefinition = (function () {\n\t    function ImmediateDefinition(root) {\n\t        this.root = root;\n\t        if (root.setImmediate && typeof root.setImmediate === 'function') {\n\t            this.setImmediate = root.setImmediate.bind(root);\n\t            this.clearImmediate = root.clearImmediate.bind(root);\n\t        }\n\t        else {\n\t            this.nextHandle = 1;\n\t            this.tasksByHandle = {};\n\t            this.currentlyRunningATask = false;\n\t            // Don't get fooled by e.g. browserify environments.\n\t            if (this.canUseProcessNextTick()) {\n\t                // For Node.js before 0.9\n\t                this.setImmediate = this.createProcessNextTickSetImmediate();\n\t            }\n\t            else if (this.canUsePostMessage()) {\n\t                // For non-IE10 modern browsers\n\t                this.setImmediate = this.createPostMessageSetImmediate();\n\t            }\n\t            else if (this.canUseMessageChannel()) {\n\t                // For web workers, where supported\n\t                this.setImmediate = this.createMessageChannelSetImmediate();\n\t            }\n\t            else if (this.canUseReadyStateChange()) {\n\t                // For IE 6–8\n\t                this.setImmediate = this.createReadyStateChangeSetImmediate();\n\t            }\n\t            else {\n\t                // For older browsers\n\t                this.setImmediate = this.createSetTimeoutSetImmediate();\n\t            }\n\t            var ci = function clearImmediate(handle) {\n\t                delete clearImmediate.instance.tasksByHandle[handle];\n\t            };\n\t            ci.instance = this;\n\t            this.clearImmediate = ci;\n\t        }\n\t    }\n\t    ImmediateDefinition.prototype.identify = function (o) {\n\t        return this.root.Object.prototype.toString.call(o);\n\t    };\n\t    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n\t        return this.identify(this.root.process) === '[object process]';\n\t    };\n\t    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n\t        return Boolean(this.root.MessageChannel);\n\t    };\n\t    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n\t        var document = this.root.document;\n\t        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n\t    };\n\t    ImmediateDefinition.prototype.canUsePostMessage = function () {\n\t        var root = this.root;\n\t        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n\t        // where `root.postMessage` means something completely different and can't be used for this purpose.\n\t        if (root.postMessage && !root.importScripts) {\n\t            var postMessageIsAsynchronous_1 = true;\n\t            var oldOnMessage = root.onmessage;\n\t            root.onmessage = function () {\n\t                postMessageIsAsynchronous_1 = false;\n\t            };\n\t            root.postMessage('', '*');\n\t            root.onmessage = oldOnMessage;\n\t            return postMessageIsAsynchronous_1;\n\t        }\n\t        return false;\n\t    };\n\t    // This function accepts the same arguments as setImmediate, but\n\t    // returns a function that requires no arguments.\n\t    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n\t        var args = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            args[_i - 1] = arguments[_i];\n\t        }\n\t        var fn = function result() {\n\t            var _a = result, handler = _a.handler, args = _a.args;\n\t            if (typeof handler === 'function') {\n\t                handler.apply(undefined, args);\n\t            }\n\t            else {\n\t                (new Function('' + handler))();\n\t            }\n\t        };\n\t        fn.handler = handler;\n\t        fn.args = args;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n\t        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n\t        return this.nextHandle++;\n\t    };\n\t    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n\t        var fn = function setImmediate() {\n\t            var instance = setImmediate.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n\t        // Installs an event handler on `global` for the `message` event: see\n\t        // * https://developer.mozilla.org/en/DOM/window.postMessage\n\t        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\t        var root = this.root;\n\t        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n\t        var onGlobalMessage = function globalMessageHandler(event) {\n\t            var instance = globalMessageHandler.instance;\n\t            if (event.source === root &&\n\t                typeof event.data === 'string' &&\n\t                event.data.indexOf(messagePrefix) === 0) {\n\t                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n\t            }\n\t        };\n\t        onGlobalMessage.instance = this;\n\t        root.addEventListener('message', onGlobalMessage, false);\n\t        var fn = function setImmediate() {\n\t            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            instance.root.postMessage(messagePrefix + handle, '*');\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        fn.messagePrefix = messagePrefix;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n\t        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n\t        // So if we're currently running a task, we'll need to delay this invocation.\n\t        if (this.currentlyRunningATask) {\n\t            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n\t            // 'too much recursion' error.\n\t            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n\t        }\n\t        else {\n\t            var task = this.tasksByHandle[handle];\n\t            if (task) {\n\t                this.currentlyRunningATask = true;\n\t                try {\n\t                    task();\n\t                }\n\t                finally {\n\t                    this.clearImmediate(handle);\n\t                    this.currentlyRunningATask = false;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n\t        var _this = this;\n\t        var channel = new this.root.MessageChannel();\n\t        channel.port1.onmessage = function (event) {\n\t            var handle = event.data;\n\t            _this.runIfPresent(handle);\n\t        };\n\t        var fn = function setImmediate() {\n\t            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            channel.port2.postMessage(handle);\n\t            return handle;\n\t        };\n\t        fn.channel = channel;\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n\t        var fn = function setImmediate() {\n\t            var instance = setImmediate.instance;\n\t            var root = instance.root;\n\t            var doc = root.document;\n\t            var html = doc.documentElement;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n\t            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\t            var script = doc.createElement('script');\n\t            script.onreadystatechange = function () {\n\t                instance.runIfPresent(handle);\n\t                script.onreadystatechange = null;\n\t                html.removeChild(script);\n\t                script = null;\n\t            };\n\t            html.appendChild(script);\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n\t        var fn = function setImmediate() {\n\t            var instance = setImmediate.instance;\n\t            var handle = instance.addFromSetImmediateArguments(arguments);\n\t            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n\t            return handle;\n\t        };\n\t        fn.instance = this;\n\t        return fn;\n\t    };\n\t    return ImmediateDefinition;\n\t}());\n\texports.ImmediateDefinition = ImmediateDefinition;\n\texports.Immediate = new ImmediateDefinition(root_1.root);\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(287).clearImmediate, __webpack_require__(287).setImmediate))\n\n/***/ },\n/* 287 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(288).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(287).setImmediate, __webpack_require__(287).clearImmediate))\n\n/***/ },\n/* 288 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\t(function () {\n\t  try {\n\t    cachedSetTimeout = setTimeout;\n\t  } catch (e) {\n\t    cachedSetTimeout = function () {\n\t      throw new Error('setTimeout is not defined');\n\t    }\n\t  }\n\t  try {\n\t    cachedClearTimeout = clearTimeout;\n\t  } catch (e) {\n\t    cachedClearTimeout = function () {\n\t      throw new Error('clearTimeout is not defined');\n\t    }\n\t  }\n\t} ())\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = cachedSetTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    cachedClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        cachedSetTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 289 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar switch_1 = __webpack_require__(290);\n\tObservable_1.Observable.prototype.switch = switch_1._switch;\n\n\n/***/ },\n/* 290 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Converts a higher-order Observable into a first-order Observable by\n\t * subscribing to only the most recently emitted of those inner Observables.\n\t *\n\t * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n\t * previous inner Observable once a new one appears.</span>\n\t *\n\t * <img src=\"./img/switch.png\" width=\"100%\">\n\t *\n\t * `switch` subscribes to an Observable that emits Observables, also known as a\n\t * higher-order Observable. Each time it observes one of these emitted inner\n\t * Observables, the output Observable subscribes to the inner Observable and\n\t * begins emitting the items emitted by that. So far, it behaves\n\t * like {@link mergeAll}. However, when a new inner Observable is emitted,\n\t * `switch` unsubscribes from the earlier-emitted inner Observable and\n\t * subscribes to the new inner Observable and begins emitting items from it. It\n\t * continues to behave like this for subsequent inner Observables.\n\t *\n\t * @example <caption>Rerun an interval Observable on every click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * // Each click event is mapped to an Observable that ticks every second\n\t * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n\t * var switched = higherOrder.switch();\n\t * // The outcome is that `switched` is essentially a timer that restarts\n\t * // on every click. The interval Observables from older clicks do not merge\n\t * // with the current interval Observable.\n\t * switched.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineAll}\n\t * @see {@link concatAll}\n\t * @see {@link exhaust}\n\t * @see {@link mergeAll}\n\t * @see {@link switchMap}\n\t * @see {@link switchMapTo}\n\t * @see {@link zipAll}\n\t *\n\t * @return {Observable<T>} An Observable that emits the items emitted by the\n\t * Observable most recently emitted by the source Observable.\n\t * @method switch\n\t * @name switch\n\t * @owner Observable\n\t */\n\tfunction _switch() {\n\t    return this.lift(new SwitchOperator());\n\t}\n\texports._switch = _switch;\n\tvar SwitchOperator = (function () {\n\t    function SwitchOperator() {\n\t    }\n\t    SwitchOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchSubscriber(subscriber));\n\t    };\n\t    return SwitchOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchSubscriber = (function (_super) {\n\t    __extends(SwitchSubscriber, _super);\n\t    function SwitchSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.active = 0;\n\t        this.hasCompleted = false;\n\t    }\n\t    SwitchSubscriber.prototype._next = function (value) {\n\t        this.unsubscribeInner();\n\t        this.active++;\n\t        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));\n\t    };\n\t    SwitchSubscriber.prototype._complete = function () {\n\t        this.hasCompleted = true;\n\t        if (this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    SwitchSubscriber.prototype.unsubscribeInner = function () {\n\t        this.active = this.active > 0 ? this.active - 1 : 0;\n\t        var innerSubscription = this.innerSubscription;\n\t        if (innerSubscription) {\n\t            innerSubscription.unsubscribe();\n\t            this.remove(innerSubscription);\n\t        }\n\t    };\n\t    SwitchSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.destination.next(innerValue);\n\t    };\n\t    SwitchSubscriber.prototype.notifyError = function (err) {\n\t        this.destination.error(err);\n\t    };\n\t    SwitchSubscriber.prototype.notifyComplete = function () {\n\t        this.unsubscribeInner();\n\t        if (this.hasCompleted && this.active === 0) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    return SwitchSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 291 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar switchMap_1 = __webpack_require__(292);\n\tObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n\n\n/***/ },\n/* 292 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable, emitting values only from the most recently projected Observable.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link switch}.</span>\n\t *\n\t * <img src=\"./img/switchMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an (so-called \"inner\") Observable. Each time it observes one of these\n\t * inner Observables, the output Observable begins emitting the items emitted by\n\t * that inner Observable. When a new inner Observable is emitted, `switchMap`\n\t * stops emitting items from the earlier-emitted inner Observable and begins\n\t * emitting items from the new one. It continues to behave like this for\n\t * subsequent inner Observables.\n\t *\n\t * @example <caption>Rerun an interval Observable on every click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMap}\n\t * @see {@link exhaustMap}\n\t * @see {@link mergeMap}\n\t * @see {@link switch}\n\t * @see {@link switchMapTo}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An Observable that emits the result of applying the\n\t * projection function (and the optional `resultSelector`) to each item emitted\n\t * by the source Observable and taking only the values from the most recently\n\t * projected inner Observable.\n\t * @method switchMap\n\t * @owner Observable\n\t */\n\tfunction switchMap(project, resultSelector) {\n\t    return this.lift(new SwitchMapOperator(project, resultSelector));\n\t}\n\texports.switchMap = switchMap;\n\tvar SwitchMapOperator = (function () {\n\t    function SwitchMapOperator(project, resultSelector) {\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    SwitchMapOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n\t    };\n\t    return SwitchMapOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchMapSubscriber = (function (_super) {\n\t    __extends(SwitchMapSubscriber, _super);\n\t    function SwitchMapSubscriber(destination, project, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.index = 0;\n\t    }\n\t    SwitchMapSubscriber.prototype._next = function (value) {\n\t        var result;\n\t        var index = this.index++;\n\t        try {\n\t            result = this.project(value, index);\n\t        }\n\t        catch (error) {\n\t            this.destination.error(error);\n\t            return;\n\t        }\n\t        this._innerSub(result, value, index);\n\t    };\n\t    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (innerSubscription) {\n\t            innerSubscription.unsubscribe();\n\t        }\n\t        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n\t    };\n\t    SwitchMapSubscriber.prototype._complete = function () {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (!innerSubscription || innerSubscription.isUnsubscribed) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype._unsubscribe = function () {\n\t        this.innerSubscription = null;\n\t    };\n\t    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.innerSubscription = null;\n\t        if (this.isStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (this.resultSelector) {\n\t            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            this.destination.next(innerValue);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return SwitchMapSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 293 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar switchMapTo_1 = __webpack_require__(294);\n\tObservable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;\n\n\n/***/ },\n/* 294 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Projects each source value to the same Observable which is flattened multiple\n\t * times with {@link switch} in the output Observable.\n\t *\n\t * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n\t * always to the same inner Observable.</span>\n\t *\n\t * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n\t *\n\t * Maps each source value to the given Observable `innerObservable` regardless\n\t * of the source value, and then flattens those resulting Observables into one\n\t * single Observable, which is the output Observable. The output Observables\n\t * emits values only from the most recently emitted instance of\n\t * `innerObservable`.\n\t *\n\t * @example <caption>Rerun an interval Observable on every click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMapTo}\n\t * @see {@link switch}\n\t * @see {@link switchMap}\n\t * @see {@link mergeMapTo}\n\t *\n\t * @param {Observable} innerObservable An Observable to replace each value from\n\t * the source Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An Observable that emits items from the given\n\t * `innerObservable` every time a value is emitted on the source Observable.\n\t * @return {Observable} An Observable that emits items from the given\n\t * `innerObservable` (and optionally transformed through `resultSelector`) every\n\t * time a value is emitted on the source Observable, and taking only the values\n\t * from the most recently projected inner Observable.\n\t * @method switchMapTo\n\t * @owner Observable\n\t */\n\tfunction switchMapTo(innerObservable, resultSelector) {\n\t    return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n\t}\n\texports.switchMapTo = switchMapTo;\n\tvar SwitchMapToOperator = (function () {\n\t    function SwitchMapToOperator(observable, resultSelector) {\n\t        this.observable = observable;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n\t    };\n\t    return SwitchMapToOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchMapToSubscriber = (function (_super) {\n\t    __extends(SwitchMapToSubscriber, _super);\n\t    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.inner = inner;\n\t        this.resultSelector = resultSelector;\n\t        this.index = 0;\n\t    }\n\t    SwitchMapToSubscriber.prototype._next = function (value) {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (innerSubscription) {\n\t            innerSubscription.unsubscribe();\n\t        }\n\t        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n\t    };\n\t    SwitchMapToSubscriber.prototype._complete = function () {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (!innerSubscription || innerSubscription.isUnsubscribed) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapToSubscriber.prototype._unsubscribe = function () {\n\t        this.innerSubscription = null;\n\t    };\n\t    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.innerSubscription = null;\n\t        if (this.isStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        if (resultSelector) {\n\t            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            destination.next(innerValue);\n\t        }\n\t    };\n\t    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n\t        var result;\n\t        try {\n\t            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t            return;\n\t        }\n\t        destination.next(result);\n\t    };\n\t    return SwitchMapToSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 295 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar take_1 = __webpack_require__(296);\n\tObservable_1.Observable.prototype.take = take_1.take;\n\n\n/***/ },\n/* 296 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(183);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\t/**\n\t * Emits only the first `count` values emitted by the source Observable.\n\t *\n\t * <span class=\"informal\">Takes the first `count` values from the source, then\n\t * completes.</span>\n\t *\n\t * <img src=\"./img/take.png\" width=\"100%\">\n\t *\n\t * `take` returns an Observable that emits only the first `count` values emitted\n\t * by the source Observable. If the source emits fewer than `count` values then\n\t * all of its values are emitted. After that, it completes, regardless if the\n\t * source completes.\n\t *\n\t * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n\t * var interval = Rx.Observable.interval(1000);\n\t * var five = interval.take(5);\n\t * five.subscribe(x => console.log(x));\n\t *\n\t * @see {@link takeLast}\n\t * @see {@link takeUntil}\n\t * @see {@link takeWhile}\n\t * @see {@link skip}\n\t *\n\t * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n\t * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n\t *\n\t * @param {number} count The maximum number of `next` values to emit.\n\t * @return {Observable<T>} An Observable that emits only the first `count`\n\t * values emitted by the source Observable, or all of the values from the source\n\t * if the source emits fewer than `count` values.\n\t * @method take\n\t * @owner Observable\n\t */\n\tfunction take(count) {\n\t    if (count === 0) {\n\t        return new EmptyObservable_1.EmptyObservable();\n\t    }\n\t    else {\n\t        return this.lift(new TakeOperator(count));\n\t    }\n\t}\n\texports.take = take;\n\tvar TakeOperator = (function () {\n\t    function TakeOperator(total) {\n\t        this.total = total;\n\t        if (this.total < 0) {\n\t            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\t        }\n\t    }\n\t    TakeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeSubscriber(subscriber, this.total));\n\t    };\n\t    return TakeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeSubscriber = (function (_super) {\n\t    __extends(TakeSubscriber, _super);\n\t    function TakeSubscriber(destination, total) {\n\t        _super.call(this, destination);\n\t        this.total = total;\n\t        this.count = 0;\n\t    }\n\t    TakeSubscriber.prototype._next = function (value) {\n\t        var total = this.total;\n\t        if (++this.count <= total) {\n\t            this.destination.next(value);\n\t            if (this.count === total) {\n\t                this.destination.complete();\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    return TakeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 297 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar takeLast_1 = __webpack_require__(298);\n\tObservable_1.Observable.prototype.takeLast = takeLast_1.takeLast;\n\n\n/***/ },\n/* 298 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar ArgumentOutOfRangeError_1 = __webpack_require__(183);\n\tvar EmptyObservable_1 = __webpack_require__(38);\n\t/**\n\t * Emits only the last `count` values emitted by the source Observable.\n\t *\n\t * <span class=\"informal\">Remembers the latest `count` values, then emits those\n\t * only when the source completes.</span>\n\t *\n\t * <img src=\"./img/takeLast.png\" width=\"100%\">\n\t *\n\t * `takeLast` returns an Observable that emits at most the last `count` values\n\t * emitted by the source Observable. If the source emits fewer than `count`\n\t * values then all of its values are emitted. This operator must wait until the\n\t * `complete` notification emission from the source in order to emit the `next`\n\t * values on the output Observable, because otherwise it is impossible to know\n\t * whether or not more values will be emitted on the source. For this reason,\n\t * all values are emitted synchronously, followed by the complete notification.\n\t *\n\t * @example <caption>Take the last 3 values of an Observable with many values</caption>\n\t * var many = Rx.Observable.range(1, 100);\n\t * var lastThree = many.takeLast(3);\n\t * lastThree.subscribe(x => console.log(x));\n\t *\n\t * @see {@link take}\n\t * @see {@link takeUntil}\n\t * @see {@link takeWhile}\n\t * @see {@link skip}\n\t *\n\t * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n\t * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n\t *\n\t * @param {number} count The maximum number of values to emit from the end of\n\t * the sequence of values emitted by the source Observable.\n\t * @return {Observable<T>} An Observable that emits at most the last count\n\t * values emitted by the source Observable.\n\t * @method takeLast\n\t * @owner Observable\n\t */\n\tfunction takeLast(count) {\n\t    if (count === 0) {\n\t        return new EmptyObservable_1.EmptyObservable();\n\t    }\n\t    else {\n\t        return this.lift(new TakeLastOperator(count));\n\t    }\n\t}\n\texports.takeLast = takeLast;\n\tvar TakeLastOperator = (function () {\n\t    function TakeLastOperator(total) {\n\t        this.total = total;\n\t        if (this.total < 0) {\n\t            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n\t        }\n\t    }\n\t    TakeLastOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n\t    };\n\t    return TakeLastOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeLastSubscriber = (function (_super) {\n\t    __extends(TakeLastSubscriber, _super);\n\t    function TakeLastSubscriber(destination, total) {\n\t        _super.call(this, destination);\n\t        this.total = total;\n\t        this.ring = new Array();\n\t        this.count = 0;\n\t    }\n\t    TakeLastSubscriber.prototype._next = function (value) {\n\t        var ring = this.ring;\n\t        var total = this.total;\n\t        var count = this.count++;\n\t        if (ring.length < total) {\n\t            ring.push(value);\n\t        }\n\t        else {\n\t            var index = count % total;\n\t            ring[index] = value;\n\t        }\n\t    };\n\t    TakeLastSubscriber.prototype._complete = function () {\n\t        var destination = this.destination;\n\t        var count = this.count;\n\t        if (count > 0) {\n\t            var total = this.count >= this.total ? this.total : this.count;\n\t            var ring = this.ring;\n\t            for (var i = 0; i < total; i++) {\n\t                var idx = (count++) % total;\n\t                destination.next(ring[idx]);\n\t            }\n\t        }\n\t        destination.complete();\n\t    };\n\t    return TakeLastSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 299 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar takeUntil_1 = __webpack_require__(300);\n\tObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n\n\n/***/ },\n/* 300 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Emits the values emitted by the source Observable until a `notifier`\n\t * Observable emits a value.\n\t *\n\t * <span class=\"informal\">Lets values pass until a second Observable,\n\t * `notifier`, emits something. Then, it completes.</span>\n\t *\n\t * <img src=\"./img/takeUntil.png\" width=\"100%\">\n\t *\n\t * `takeUntil` subscribes and begins mirroring the source Observable. It also\n\t * monitors a second Observable, `notifier` that you provide. If the `notifier`\n\t * emits a value or a complete notification, the output Observable stops\n\t * mirroring the source Observable and completes.\n\t *\n\t * @example <caption>Tick every second until the first click happens</caption>\n\t * var interval = Rx.Observable.interval(1000);\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = interval.takeUntil(clicks);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link take}\n\t * @see {@link takeLast}\n\t * @see {@link takeWhile}\n\t * @see {@link skip}\n\t *\n\t * @param {Observable} notifier The Observable whose first emitted value will\n\t * cause the output Observable of `takeUntil` to stop emitting values from the\n\t * source Observable.\n\t * @return {Observable<T>} An Observable that emits the values from the source\n\t * Observable until such time as `notifier` emits its first value.\n\t * @method takeUntil\n\t * @owner Observable\n\t */\n\tfunction takeUntil(notifier) {\n\t    return this.lift(new TakeUntilOperator(notifier));\n\t}\n\texports.takeUntil = takeUntil;\n\tvar TakeUntilOperator = (function () {\n\t    function TakeUntilOperator(notifier) {\n\t        this.notifier = notifier;\n\t    }\n\t    TakeUntilOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n\t    };\n\t    return TakeUntilOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeUntilSubscriber = (function (_super) {\n\t    __extends(TakeUntilSubscriber, _super);\n\t    function TakeUntilSubscriber(destination, notifier) {\n\t        _super.call(this, destination);\n\t        this.notifier = notifier;\n\t        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n\t    }\n\t    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.complete();\n\t    };\n\t    TakeUntilSubscriber.prototype.notifyComplete = function () {\n\t        // noop\n\t    };\n\t    return TakeUntilSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 301 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar takeWhile_1 = __webpack_require__(302);\n\tObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n\n\n/***/ },\n/* 302 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * Emits values emitted by the source Observable so long as each value satisfies\n\t * the given `predicate`, and then completes as soon as this `predicate` is not\n\t * satisfied.\n\t *\n\t * <span class=\"informal\">Takes values from the source only while they pass the\n\t * condition given. When the first value does not satisfy, it completes.</span>\n\t *\n\t * <img src=\"./img/takeWhile.png\" width=\"100%\">\n\t *\n\t * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n\t * emitted on the source is given to the `predicate` function which returns a\n\t * boolean, representing a condition to be satisfied by the source values. The\n\t * output Observable emits the source values until such time as the `predicate`\n\t * returns false, at which point `takeWhile` stops mirroring the source\n\t * Observable and completes the output Observable.\n\t *\n\t * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.takeWhile(ev => ev.clientX > 200);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link take}\n\t * @see {@link takeLast}\n\t * @see {@link takeUntil}\n\t * @see {@link skip}\n\t *\n\t * @param {function(value: T, index: number): boolean} predicate A function that\n\t * evaluates a value emitted by the source Observable and returns a boolean.\n\t * Also takes the (zero-based) index as the second argument.\n\t * @return {Observable<T>} An Observable that emits the values from the source\n\t * Observable so long as each value satisfies the condition defined by the\n\t * `predicate`, then completes.\n\t * @method takeWhile\n\t * @owner Observable\n\t */\n\tfunction takeWhile(predicate) {\n\t    return this.lift(new TakeWhileOperator(predicate));\n\t}\n\texports.takeWhile = takeWhile;\n\tvar TakeWhileOperator = (function () {\n\t    function TakeWhileOperator(predicate) {\n\t        this.predicate = predicate;\n\t    }\n\t    TakeWhileOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n\t    };\n\t    return TakeWhileOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TakeWhileSubscriber = (function (_super) {\n\t    __extends(TakeWhileSubscriber, _super);\n\t    function TakeWhileSubscriber(destination, predicate) {\n\t        _super.call(this, destination);\n\t        this.predicate = predicate;\n\t        this.index = 0;\n\t    }\n\t    TakeWhileSubscriber.prototype._next = function (value) {\n\t        var destination = this.destination;\n\t        var result;\n\t        try {\n\t            result = this.predicate(value, this.index++);\n\t        }\n\t        catch (err) {\n\t            destination.error(err);\n\t            return;\n\t        }\n\t        this.nextOrComplete(value, result);\n\t    };\n\t    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n\t        var destination = this.destination;\n\t        if (Boolean(predicateResult)) {\n\t            destination.next(value);\n\t        }\n\t        else {\n\t            destination.complete();\n\t        }\n\t    };\n\t    return TakeWhileSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 303 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar throttle_1 = __webpack_require__(304);\n\tObservable_1.Observable.prototype.throttle = throttle_1.throttle;\n\n\n/***/ },\n/* 304 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Emits a value from the source Observable, then ignores subsequent source\n\t * values for a duration determined by another Observable, then repeats this\n\t * process.\n\t *\n\t * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n\t * duration is determined by a second Observable.</span>\n\t *\n\t * <img src=\"./img/throttle.png\" width=\"100%\">\n\t *\n\t * `throttle` emits the source Observable values on the output Observable\n\t * when its internal timer is disabled, and ignores source values when the timer\n\t * is enabled. Initially, the timer is disabled. As soon as the first source\n\t * value arrives, it is forwarded to the output Observable, and then the timer\n\t * is enabled by calling the `durationSelector` function with the source value,\n\t * which returns the \"duration\" Observable. When the duration Observable emits a\n\t * value or completes, the timer is disabled, and this process repeats for the\n\t * next source value.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link audit}\n\t * @see {@link debounce}\n\t * @see {@link delayWhen}\n\t * @see {@link sample}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {function(value: T): Observable|Promise} durationSelector A function\n\t * that receives a value from the source Observable, for computing the silencing\n\t * duration for each source value, returned as an Observable or a Promise.\n\t * @return {Observable<T>} An Observable that performs the throttle operation to\n\t * limit the rate of emissions from the source.\n\t * @method throttle\n\t * @owner Observable\n\t */\n\tfunction throttle(durationSelector) {\n\t    return this.lift(new ThrottleOperator(durationSelector));\n\t}\n\texports.throttle = throttle;\n\tvar ThrottleOperator = (function () {\n\t    function ThrottleOperator(durationSelector) {\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    ThrottleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n\t    };\n\t    return ThrottleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ThrottleSubscriber = (function (_super) {\n\t    __extends(ThrottleSubscriber, _super);\n\t    function ThrottleSubscriber(destination, durationSelector) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.durationSelector = durationSelector;\n\t    }\n\t    ThrottleSubscriber.prototype._next = function (value) {\n\t        if (!this.throttled) {\n\t            this.tryDurationSelector(value);\n\t        }\n\t    };\n\t    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n\t        var duration = null;\n\t        try {\n\t            duration = this.durationSelector(value);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.emitAndThrottle(value, duration);\n\t    };\n\t    ThrottleSubscriber.prototype.emitAndThrottle = function (value, duration) {\n\t        this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n\t        this.destination.next(value);\n\t    };\n\t    ThrottleSubscriber.prototype._unsubscribe = function () {\n\t        var throttled = this.throttled;\n\t        if (throttled) {\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t            throttled.unsubscribe();\n\t        }\n\t    };\n\t    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this._unsubscribe();\n\t    };\n\t    ThrottleSubscriber.prototype.notifyComplete = function () {\n\t        this._unsubscribe();\n\t    };\n\t    return ThrottleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 305 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar throttleTime_1 = __webpack_require__(306);\n\tObservable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;\n\n\n/***/ },\n/* 306 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * Emits a value from the source Observable, then ignores subsequent source\n\t * values for `duration` milliseconds, then repeats this process.\n\t *\n\t * <span class=\"informal\">Lets a value pass, then ignores source values for the\n\t * next `duration` milliseconds.</span>\n\t *\n\t * <img src=\"./img/throttleTime.png\" width=\"100%\">\n\t *\n\t * `throttleTime` emits the source Observable values on the output Observable\n\t * when its internal timer is disabled, and ignores source values when the timer\n\t * is enabled. Initially, the timer is disabled. As soon as the first source\n\t * value arrives, it is forwarded to the output Observable, and then the timer\n\t * is enabled. After `duration` milliseconds (or the time unit determined\n\t * internally by the optional `scheduler`) has passed, the timer is disabled,\n\t * and this process repeats for the next source value. Optionally takes a\n\t * {@link Scheduler} for managing timers.\n\t *\n\t * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.throttleTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounceTime}\n\t * @see {@link delay}\n\t * @see {@link sampleTime}\n\t * @see {@link throttle}\n\t *\n\t * @param {number} duration Time to wait before emitting another value after\n\t * emitting the last value, measured in milliseconds or the time unit determined\n\t * internally by the optional `scheduler`.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the sampling.\n\t * @return {Observable<T>} An Observable that performs the throttle operation to\n\t * limit the rate of emissions from the source.\n\t * @method throttleTime\n\t * @owner Observable\n\t */\n\tfunction throttleTime(duration, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new ThrottleTimeOperator(duration, scheduler));\n\t}\n\texports.throttleTime = throttleTime;\n\tvar ThrottleTimeOperator = (function () {\n\t    function ThrottleTimeOperator(duration, scheduler) {\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t    }\n\t    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n\t    };\n\t    return ThrottleTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ThrottleTimeSubscriber = (function (_super) {\n\t    __extends(ThrottleTimeSubscriber, _super);\n\t    function ThrottleTimeSubscriber(destination, duration, scheduler) {\n\t        _super.call(this, destination);\n\t        this.duration = duration;\n\t        this.scheduler = scheduler;\n\t    }\n\t    ThrottleTimeSubscriber.prototype._next = function (value) {\n\t        if (!this.throttled) {\n\t            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n\t            this.destination.next(value);\n\t        }\n\t    };\n\t    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n\t        var throttled = this.throttled;\n\t        if (throttled) {\n\t            throttled.unsubscribe();\n\t            this.remove(throttled);\n\t            this.throttled = null;\n\t        }\n\t    };\n\t    return ThrottleTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNext(arg) {\n\t    var subscriber = arg.subscriber;\n\t    subscriber.clearThrottle();\n\t}\n\n\n/***/ },\n/* 307 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timeInterval_1 = __webpack_require__(308);\n\tObservable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;\n\n\n/***/ },\n/* 308 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * @param scheduler\n\t * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n\t * @method timeInterval\n\t * @owner Observable\n\t */\n\tfunction timeInterval(scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new TimeIntervalOperator(scheduler));\n\t}\n\texports.timeInterval = timeInterval;\n\tvar TimeInterval = (function () {\n\t    function TimeInterval(value, interval) {\n\t        this.value = value;\n\t        this.interval = interval;\n\t    }\n\t    return TimeInterval;\n\t}());\n\texports.TimeInterval = TimeInterval;\n\t;\n\tvar TimeIntervalOperator = (function () {\n\t    function TimeIntervalOperator(scheduler) {\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimeIntervalOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n\t    };\n\t    return TimeIntervalOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TimeIntervalSubscriber = (function (_super) {\n\t    __extends(TimeIntervalSubscriber, _super);\n\t    function TimeIntervalSubscriber(destination, scheduler) {\n\t        _super.call(this, destination);\n\t        this.scheduler = scheduler;\n\t        this.lastTime = 0;\n\t        this.lastTime = scheduler.now();\n\t    }\n\t    TimeIntervalSubscriber.prototype._next = function (value) {\n\t        var now = this.scheduler.now();\n\t        var span = now - this.lastTime;\n\t        this.lastTime = now;\n\t        this.destination.next(new TimeInterval(value, span));\n\t    };\n\t    return TimeIntervalSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 309 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timeout_1 = __webpack_require__(310);\n\tObservable_1.Observable.prototype.timeout = timeout_1.timeout;\n\n\n/***/ },\n/* 310 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(82);\n\tvar isDate_1 = __webpack_require__(112);\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * @param due\n\t * @param errorToSend\n\t * @param scheduler\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method timeout\n\t * @owner Observable\n\t */\n\tfunction timeout(due, errorToSend, scheduler) {\n\t    if (errorToSend === void 0) { errorToSend = null; }\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    var absoluteTimeout = isDate_1.isDate(due);\n\t    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n\t    return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n\t}\n\texports.timeout = timeout;\n\tvar TimeoutOperator = (function () {\n\t    function TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler) {\n\t        this.waitFor = waitFor;\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.errorToSend = errorToSend;\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimeoutOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler));\n\t    };\n\t    return TimeoutOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TimeoutSubscriber = (function (_super) {\n\t    __extends(TimeoutSubscriber, _super);\n\t    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, errorToSend, scheduler) {\n\t        _super.call(this, destination);\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.waitFor = waitFor;\n\t        this.errorToSend = errorToSend;\n\t        this.scheduler = scheduler;\n\t        this.index = 0;\n\t        this._previousIndex = 0;\n\t        this._hasCompleted = false;\n\t        this.scheduleTimeout();\n\t    }\n\t    Object.defineProperty(TimeoutSubscriber.prototype, \"previousIndex\", {\n\t        get: function () {\n\t            return this._previousIndex;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(TimeoutSubscriber.prototype, \"hasCompleted\", {\n\t        get: function () {\n\t            return this._hasCompleted;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    TimeoutSubscriber.dispatchTimeout = function (state) {\n\t        var source = state.subscriber;\n\t        var currentIndex = state.index;\n\t        if (!source.hasCompleted && source.previousIndex === currentIndex) {\n\t            source.notifyTimeout();\n\t        }\n\t    };\n\t    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n\t        var currentIndex = this.index;\n\t        this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n\t        this.index++;\n\t        this._previousIndex = currentIndex;\n\t    };\n\t    TimeoutSubscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t        if (!this.absoluteTimeout) {\n\t            this.scheduleTimeout();\n\t        }\n\t    };\n\t    TimeoutSubscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutSubscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutSubscriber.prototype.notifyTimeout = function () {\n\t        this.error(this.errorToSend || new Error('timeout'));\n\t    };\n\t    return TimeoutSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 311 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timeoutWith_1 = __webpack_require__(312);\n\tObservable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;\n\n\n/***/ },\n/* 312 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar async_1 = __webpack_require__(82);\n\tvar isDate_1 = __webpack_require__(112);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * @param due\n\t * @param withObservable\n\t * @param scheduler\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method timeoutWith\n\t * @owner Observable\n\t */\n\tfunction timeoutWith(due, withObservable, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    var absoluteTimeout = isDate_1.isDate(due);\n\t    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n\t    return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n\t}\n\texports.timeoutWith = timeoutWith;\n\tvar TimeoutWithOperator = (function () {\n\t    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n\t        this.waitFor = waitFor;\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.withObservable = withObservable;\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n\t    };\n\t    return TimeoutWithOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar TimeoutWithSubscriber = (function (_super) {\n\t    __extends(TimeoutWithSubscriber, _super);\n\t    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n\t        _super.call(this);\n\t        this.destination = destination;\n\t        this.absoluteTimeout = absoluteTimeout;\n\t        this.waitFor = waitFor;\n\t        this.withObservable = withObservable;\n\t        this.scheduler = scheduler;\n\t        this.timeoutSubscription = undefined;\n\t        this.index = 0;\n\t        this._previousIndex = 0;\n\t        this._hasCompleted = false;\n\t        destination.add(this);\n\t        this.scheduleTimeout();\n\t    }\n\t    Object.defineProperty(TimeoutWithSubscriber.prototype, \"previousIndex\", {\n\t        get: function () {\n\t            return this._previousIndex;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(TimeoutWithSubscriber.prototype, \"hasCompleted\", {\n\t        get: function () {\n\t            return this._hasCompleted;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    TimeoutWithSubscriber.dispatchTimeout = function (state) {\n\t        var source = state.subscriber;\n\t        var currentIndex = state.index;\n\t        if (!source.hasCompleted && source.previousIndex === currentIndex) {\n\t            source.handleTimeout();\n\t        }\n\t    };\n\t    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n\t        var currentIndex = this.index;\n\t        var timeoutState = { subscriber: this, index: currentIndex };\n\t        this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n\t        this.index++;\n\t        this._previousIndex = currentIndex;\n\t    };\n\t    TimeoutWithSubscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t        if (!this.absoluteTimeout) {\n\t            this.scheduleTimeout();\n\t        }\n\t    };\n\t    TimeoutWithSubscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutWithSubscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this._hasCompleted = true;\n\t    };\n\t    TimeoutWithSubscriber.prototype.handleTimeout = function () {\n\t        if (!this.isUnsubscribed) {\n\t            var withObservable = this.withObservable;\n\t            this.unsubscribe();\n\t            this.destination.add(this.timeoutSubscription = subscribeToResult_1.subscribeToResult(this, withObservable));\n\t        }\n\t    };\n\t    return TimeoutWithSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 313 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar timestamp_1 = __webpack_require__(314);\n\tObservable_1.Observable.prototype.timestamp = timestamp_1.timestamp;\n\n\n/***/ },\n/* 314 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * @param scheduler\n\t * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n\t * @method timestamp\n\t * @owner Observable\n\t */\n\tfunction timestamp(scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new TimestampOperator(scheduler));\n\t}\n\texports.timestamp = timestamp;\n\tvar Timestamp = (function () {\n\t    function Timestamp(value, timestamp) {\n\t        this.value = value;\n\t        this.timestamp = timestamp;\n\t    }\n\t    return Timestamp;\n\t}());\n\texports.Timestamp = Timestamp;\n\t;\n\tvar TimestampOperator = (function () {\n\t    function TimestampOperator(scheduler) {\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimestampOperator.prototype.call = function (observer, source) {\n\t        return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\n\t    };\n\t    return TimestampOperator;\n\t}());\n\tvar TimestampSubscriber = (function (_super) {\n\t    __extends(TimestampSubscriber, _super);\n\t    function TimestampSubscriber(destination, scheduler) {\n\t        _super.call(this, destination);\n\t        this.scheduler = scheduler;\n\t    }\n\t    TimestampSubscriber.prototype._next = function (value) {\n\t        var now = this.scheduler.now();\n\t        this.destination.next(new Timestamp(value, now));\n\t    };\n\t    return TimestampSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 315 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar toArray_1 = __webpack_require__(316);\n\tObservable_1.Observable.prototype.toArray = toArray_1.toArray;\n\n\n/***/ },\n/* 316 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\t/**\n\t * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n\t * @method toArray\n\t * @owner Observable\n\t */\n\tfunction toArray() {\n\t    return this.lift(new ToArrayOperator());\n\t}\n\texports.toArray = toArray;\n\tvar ToArrayOperator = (function () {\n\t    function ToArrayOperator() {\n\t    }\n\t    ToArrayOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new ToArraySubscriber(subscriber));\n\t    };\n\t    return ToArrayOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ToArraySubscriber = (function (_super) {\n\t    __extends(ToArraySubscriber, _super);\n\t    function ToArraySubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.array = [];\n\t    }\n\t    ToArraySubscriber.prototype._next = function (x) {\n\t        this.array.push(x);\n\t    };\n\t    ToArraySubscriber.prototype._complete = function () {\n\t        this.destination.next(this.array);\n\t        this.destination.complete();\n\t    };\n\t    return ToArraySubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 317 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar toPromise_1 = __webpack_require__(318);\n\tObservable_1.Observable.prototype.toPromise = toPromise_1.toPromise;\n\n\n/***/ },\n/* 318 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\t/**\n\t * @param PromiseCtor\n\t * @return {Promise<T>}\n\t * @method toPromise\n\t * @owner Observable\n\t */\n\tfunction toPromise(PromiseCtor) {\n\t    var _this = this;\n\t    if (!PromiseCtor) {\n\t        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t            PromiseCtor = root_1.root.Rx.config.Promise;\n\t        }\n\t        else if (root_1.root.Promise) {\n\t            PromiseCtor = root_1.root.Promise;\n\t        }\n\t    }\n\t    if (!PromiseCtor) {\n\t        throw new Error('no Promise impl found');\n\t    }\n\t    return new PromiseCtor(function (resolve, reject) {\n\t        var value;\n\t        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n\t    });\n\t}\n\texports.toPromise = toPromise;\n\n\n/***/ },\n/* 319 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar window_1 = __webpack_require__(320);\n\tObservable_1.Observable.prototype.window = window_1.window;\n\n\n/***/ },\n/* 320 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Branch out the source Observable values as a nested Observable whenever\n\t * `windowBoundaries` emits.\n\t *\n\t * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n\t * instead of an array.</span>\n\t *\n\t * <img src=\"./img/window.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits connected, non-overlapping\n\t * windows. It emits the current window and opens a new one whenever the\n\t * Observable `windowBoundaries` emits an item. Because each window is an\n\t * Observable, the output is a higher-order Observable.\n\t *\n\t * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var interval = Rx.Observable.interval(1000);\n\t * var result = clicks.window(interval)\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link windowCount}\n\t * @see {@link windowTime}\n\t * @see {@link windowToggle}\n\t * @see {@link windowWhen}\n\t * @see {@link buffer}\n\t *\n\t * @param {Observable<any>} windowBoundaries An Observable that completes the\n\t * previous window and starts a new window.\n\t * @return {Observable<Observable<T>>} An Observable of windows, which are\n\t * Observables emitting values of the source Observable.\n\t * @method window\n\t * @owner Observable\n\t */\n\tfunction window(windowBoundaries) {\n\t    return this.lift(new WindowOperator(windowBoundaries));\n\t}\n\texports.window = window;\n\tvar WindowOperator = (function () {\n\t    function WindowOperator(windowBoundaries) {\n\t        this.windowBoundaries = windowBoundaries;\n\t    }\n\t    WindowOperator.prototype.call = function (subscriber, source) {\n\t        var windowSubscriber = new WindowSubscriber(subscriber);\n\t        var sourceSubscription = source._subscribe(windowSubscriber);\n\t        if (!sourceSubscription.isUnsubscribed) {\n\t            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n\t        }\n\t        return sourceSubscription;\n\t    };\n\t    return WindowOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowSubscriber = (function (_super) {\n\t    __extends(WindowSubscriber, _super);\n\t    function WindowSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.window = new Subject_1.Subject();\n\t        destination.next(this.window);\n\t    }\n\t    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.openWindow();\n\t    };\n\t    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this._complete();\n\t    };\n\t    WindowSubscriber.prototype._next = function (value) {\n\t        this.window.next(value);\n\t    };\n\t    WindowSubscriber.prototype._error = function (err) {\n\t        this.window.error(err);\n\t        this.destination.error(err);\n\t    };\n\t    WindowSubscriber.prototype._complete = function () {\n\t        this.window.complete();\n\t        this.destination.complete();\n\t    };\n\t    WindowSubscriber.prototype._unsubscribe = function () {\n\t        this.window = null;\n\t    };\n\t    WindowSubscriber.prototype.openWindow = function () {\n\t        var prevWindow = this.window;\n\t        if (prevWindow) {\n\t            prevWindow.complete();\n\t        }\n\t        var destination = this.destination;\n\t        var newWindow = this.window = new Subject_1.Subject();\n\t        destination.next(newWindow);\n\t    };\n\t    return WindowSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 321 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowCount_1 = __webpack_require__(322);\n\tObservable_1.Observable.prototype.windowCount = windowCount_1.windowCount;\n\n\n/***/ },\n/* 322 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subject_1 = __webpack_require__(6);\n\t/**\n\t * Branch out the source Observable values as a nested Observable with each\n\t * nested Observable emitting at most `windowSize` values.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowCount.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits windows every `startWindowEvery`\n\t * items, each containing no more than `windowSize` items. When the source\n\t * Observable completes or encounters an error, the output Observable emits\n\t * the current window and propagates the notification from the source\n\t * Observable. If `startWindowEvery` is not provided, then new windows are\n\t * started immediately at the start of the source and when each window completes\n\t * with size `windowSize`.\n\t *\n\t * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowCount(3)\n\t *   .map(win => win.skip(1)) // skip first of every 3 clicks\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowCount(2, 3)\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowTime}\n\t * @see {@link windowToggle}\n\t * @see {@link windowWhen}\n\t * @see {@link bufferCount}\n\t *\n\t * @param {number} windowSize The maximum number of values emitted by each\n\t * window.\n\t * @param {number} [startWindowEvery] Interval at which to start a new window.\n\t * For example if `startWindowEvery` is `2`, then a new window will be started\n\t * on every other value from the source. A new window is started at the\n\t * beginning of the source by default.\n\t * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n\t * are Observable of values.\n\t * @method windowCount\n\t * @owner Observable\n\t */\n\tfunction windowCount(windowSize, startWindowEvery) {\n\t    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n\t    return this.lift(new WindowCountOperator(windowSize, startWindowEvery));\n\t}\n\texports.windowCount = windowCount;\n\tvar WindowCountOperator = (function () {\n\t    function WindowCountOperator(windowSize, startWindowEvery) {\n\t        this.windowSize = windowSize;\n\t        this.startWindowEvery = startWindowEvery;\n\t    }\n\t    WindowCountOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n\t    };\n\t    return WindowCountOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowCountSubscriber = (function (_super) {\n\t    __extends(WindowCountSubscriber, _super);\n\t    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.windowSize = windowSize;\n\t        this.startWindowEvery = startWindowEvery;\n\t        this.windows = [new Subject_1.Subject()];\n\t        this.count = 0;\n\t        destination.next(this.windows[0]);\n\t    }\n\t    WindowCountSubscriber.prototype._next = function (value) {\n\t        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n\t        var destination = this.destination;\n\t        var windowSize = this.windowSize;\n\t        var windows = this.windows;\n\t        var len = windows.length;\n\t        for (var i = 0; i < len && !this.isUnsubscribed; i++) {\n\t            windows[i].next(value);\n\t        }\n\t        var c = this.count - windowSize + 1;\n\t        if (c >= 0 && c % startWindowEvery === 0 && !this.isUnsubscribed) {\n\t            windows.shift().complete();\n\t        }\n\t        if (++this.count % startWindowEvery === 0 && !this.isUnsubscribed) {\n\t            var window_1 = new Subject_1.Subject();\n\t            windows.push(window_1);\n\t            destination.next(window_1);\n\t        }\n\t    };\n\t    WindowCountSubscriber.prototype._error = function (err) {\n\t        var windows = this.windows;\n\t        if (windows) {\n\t            while (windows.length > 0 && !this.isUnsubscribed) {\n\t                windows.shift().error(err);\n\t            }\n\t        }\n\t        this.destination.error(err);\n\t    };\n\t    WindowCountSubscriber.prototype._complete = function () {\n\t        var windows = this.windows;\n\t        if (windows) {\n\t            while (windows.length > 0 && !this.isUnsubscribed) {\n\t                windows.shift().complete();\n\t            }\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    WindowCountSubscriber.prototype._unsubscribe = function () {\n\t        this.count = 0;\n\t        this.windows = null;\n\t    };\n\t    return WindowCountSubscriber;\n\t}(Subscriber_1.Subscriber));\n\n\n/***/ },\n/* 323 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowTime_1 = __webpack_require__(324);\n\tObservable_1.Observable.prototype.windowTime = windowTime_1.windowTime;\n\n\n/***/ },\n/* 324 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Subject_1 = __webpack_require__(6);\n\tvar async_1 = __webpack_require__(82);\n\t/**\n\t * Branch out the source Observable values as a nested Observable periodically\n\t * in time.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowTime.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable starts a new window periodically, as\n\t * determined by the `windowCreationInterval` argument. It emits each window\n\t * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n\t * source Observable completes or encounters an error, the output Observable\n\t * emits the current window and propagates the notification from the source\n\t * Observable. If `windowCreationInterval` is not provided, the output\n\t * Observable starts a new window when the previous window of duration\n\t * `windowTimeSpan` completes.\n\t *\n\t * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowTime(1000)\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.windowTime(1000, 5000)\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowCount}\n\t * @see {@link windowToggle}\n\t * @see {@link windowWhen}\n\t * @see {@link bufferTime}\n\t *\n\t * @param {number} windowTimeSpan The amount of time to fill each window.\n\t * @param {number} [windowCreationInterval] The interval at which to start new\n\t * windows.\n\t * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n\t * intervals that determine window boundaries.\n\t * @return {Observable<Observable<T>>} An observable of windows, which in turn\n\t * are Observables.\n\t * @method windowTime\n\t * @owner Observable\n\t */\n\tfunction windowTime(windowTimeSpan, windowCreationInterval, scheduler) {\n\t    if (windowCreationInterval === void 0) { windowCreationInterval = null; }\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler));\n\t}\n\texports.windowTime = windowTime;\n\tvar WindowTimeOperator = (function () {\n\t    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler) {\n\t        this.windowTimeSpan = windowTimeSpan;\n\t        this.windowCreationInterval = windowCreationInterval;\n\t        this.scheduler = scheduler;\n\t    }\n\t    WindowTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler));\n\t    };\n\t    return WindowTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowTimeSubscriber = (function (_super) {\n\t    __extends(WindowTimeSubscriber, _super);\n\t    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, scheduler) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.windowTimeSpan = windowTimeSpan;\n\t        this.windowCreationInterval = windowCreationInterval;\n\t        this.scheduler = scheduler;\n\t        this.windows = [];\n\t        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n\t            var window_1 = this.openWindow();\n\t            var closeState = { subscriber: this, window: window_1, context: null };\n\t            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };\n\t            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n\t            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n\t        }\n\t        else {\n\t            var window_2 = this.openWindow();\n\t            var timeSpanOnlyState = { subscriber: this, window: window_2, windowTimeSpan: windowTimeSpan };\n\t            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n\t        }\n\t    }\n\t    WindowTimeSubscriber.prototype._next = function (value) {\n\t        var windows = this.windows;\n\t        var len = windows.length;\n\t        for (var i = 0; i < len; i++) {\n\t            var window_3 = windows[i];\n\t            if (!window_3.isUnsubscribed) {\n\t                window_3.next(value);\n\t            }\n\t        }\n\t    };\n\t    WindowTimeSubscriber.prototype._error = function (err) {\n\t        var windows = this.windows;\n\t        while (windows.length > 0) {\n\t            windows.shift().error(err);\n\t        }\n\t        this.destination.error(err);\n\t    };\n\t    WindowTimeSubscriber.prototype._complete = function () {\n\t        var windows = this.windows;\n\t        while (windows.length > 0) {\n\t            var window_4 = windows.shift();\n\t            if (!window_4.isUnsubscribed) {\n\t                window_4.complete();\n\t            }\n\t        }\n\t        this.destination.complete();\n\t    };\n\t    WindowTimeSubscriber.prototype.openWindow = function () {\n\t        var window = new Subject_1.Subject();\n\t        this.windows.push(window);\n\t        var destination = this.destination;\n\t        destination.next(window);\n\t        return window;\n\t    };\n\t    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n\t        window.complete();\n\t        var windows = this.windows;\n\t        windows.splice(windows.indexOf(window), 1);\n\t    };\n\t    return WindowTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchWindowTimeSpanOnly(state) {\n\t    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n\t    if (window) {\n\t        window.complete();\n\t    }\n\t    state.window = subscriber.openWindow();\n\t    this.schedule(state, windowTimeSpan);\n\t}\n\tfunction dispatchWindowCreation(state) {\n\t    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n\t    var window = subscriber.openWindow();\n\t    var action = this;\n\t    var context = { action: action, subscription: null };\n\t    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n\t    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n\t    action.add(context.subscription);\n\t    action.schedule(state, windowCreationInterval);\n\t}\n\tfunction dispatchWindowClose(arg) {\n\t    var subscriber = arg.subscriber, window = arg.window, context = arg.context;\n\t    if (context && context.action && context.subscription) {\n\t        context.action.remove(context.subscription);\n\t    }\n\t    subscriber.closeWindow(window);\n\t}\n\n\n/***/ },\n/* 325 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowToggle_1 = __webpack_require__(326);\n\tObservable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;\n\n\n/***/ },\n/* 326 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Branch out the source Observable values as a nested Observable starting from\n\t * an emission from `openings` and ending when the output of `closingSelector`\n\t * emits.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowToggle.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits windows that contain those items\n\t * emitted by the source Observable between the time when the `openings`\n\t * Observable emits an item and when the Observable returned by\n\t * `closingSelector` emits an item.\n\t *\n\t * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var openings = Rx.Observable.interval(1000);\n\t * var result = clicks.windowToggle(openings, i =>\n\t *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n\t * ).mergeAll();\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowCount}\n\t * @see {@link windowTime}\n\t * @see {@link windowWhen}\n\t * @see {@link bufferToggle}\n\t *\n\t * @param {Observable<O>} openings An observable of notifications to start new\n\t * windows.\n\t * @param {function(value: O): Observable} closingSelector A function that takes\n\t * the value emitted by the `openings` observable and returns an Observable,\n\t * which, when it emits (either `next` or `complete`), signals that the\n\t * associated window should complete.\n\t * @return {Observable<Observable<T>>} An observable of windows, which in turn\n\t * are Observables.\n\t * @method windowToggle\n\t * @owner Observable\n\t */\n\tfunction windowToggle(openings, closingSelector) {\n\t    return this.lift(new WindowToggleOperator(openings, closingSelector));\n\t}\n\texports.windowToggle = windowToggle;\n\tvar WindowToggleOperator = (function () {\n\t    function WindowToggleOperator(openings, closingSelector) {\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    WindowToggleOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n\t    };\n\t    return WindowToggleOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowToggleSubscriber = (function (_super) {\n\t    __extends(WindowToggleSubscriber, _super);\n\t    function WindowToggleSubscriber(destination, openings, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.openings = openings;\n\t        this.closingSelector = closingSelector;\n\t        this.contexts = [];\n\t        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\n\t    }\n\t    WindowToggleSubscriber.prototype._next = function (value) {\n\t        var contexts = this.contexts;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            for (var i = 0; i < len; i++) {\n\t                contexts[i].window.next(value);\n\t            }\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype._error = function (err) {\n\t        var contexts = this.contexts;\n\t        this.contexts = null;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            var index = -1;\n\t            while (++index < len) {\n\t                var context = contexts[index];\n\t                context.window.error(err);\n\t                context.subscription.unsubscribe();\n\t            }\n\t        }\n\t        _super.prototype._error.call(this, err);\n\t    };\n\t    WindowToggleSubscriber.prototype._complete = function () {\n\t        var contexts = this.contexts;\n\t        this.contexts = null;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            var index = -1;\n\t            while (++index < len) {\n\t                var context = contexts[index];\n\t                context.window.complete();\n\t                context.subscription.unsubscribe();\n\t            }\n\t        }\n\t        _super.prototype._complete.call(this);\n\t    };\n\t    WindowToggleSubscriber.prototype._unsubscribe = function () {\n\t        var contexts = this.contexts;\n\t        this.contexts = null;\n\t        if (contexts) {\n\t            var len = contexts.length;\n\t            var index = -1;\n\t            while (++index < len) {\n\t                var context = contexts[index];\n\t                context.window.unsubscribe();\n\t                context.subscription.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (outerValue === this.openings) {\n\t            var closingSelector = this.closingSelector;\n\t            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n\t            if (closingNotifier === errorObject_1.errorObject) {\n\t                return this.error(errorObject_1.errorObject.e);\n\t            }\n\t            else {\n\t                var window_1 = new Subject_1.Subject();\n\t                var subscription = new Subscription_1.Subscription();\n\t                var context = { window: window_1, subscription: subscription };\n\t                this.contexts.push(context);\n\t                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n\t                if (innerSubscription.isUnsubscribed) {\n\t                    this.closeWindow(this.contexts.length - 1);\n\t                }\n\t                else {\n\t                    innerSubscription.context = context;\n\t                    subscription.add(innerSubscription);\n\t                }\n\t                this.destination.next(window_1);\n\t            }\n\t        }\n\t        else {\n\t            this.closeWindow(this.contexts.indexOf(outerValue));\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype.notifyError = function (err) {\n\t        this.error(err);\n\t    };\n\t    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n\t        if (inner !== this.openSubscription) {\n\t            this.closeWindow(this.contexts.indexOf(inner.context));\n\t        }\n\t    };\n\t    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n\t        if (index === -1) {\n\t            return;\n\t        }\n\t        var contexts = this.contexts;\n\t        var context = contexts[index];\n\t        var window = context.window, subscription = context.subscription;\n\t        contexts.splice(index, 1);\n\t        window.complete();\n\t        subscription.unsubscribe();\n\t    };\n\t    return WindowToggleSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 327 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar windowWhen_1 = __webpack_require__(328);\n\tObservable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;\n\n\n/***/ },\n/* 328 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar tryCatch_1 = __webpack_require__(16);\n\tvar errorObject_1 = __webpack_require__(17);\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Branch out the source Observable values as a nested Observable using a\n\t * factory function of closing Observables to determine when to start a new\n\t * window.\n\t *\n\t * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n\t * Observable instead of an array.</span>\n\t *\n\t * <img src=\"./img/windowWhen.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits windows of items it collects from the source\n\t * Observable. The output Observable emits connected, non-overlapping windows.\n\t * It emits the current window and opens a new one whenever the Observable\n\t * produced by the specified `closingSelector` function emits an item. The first\n\t * window is opened immediately when subscribing to the output Observable.\n\t *\n\t * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks\n\t *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n\t *   .map(win => win.take(2)) // each window has at most 2 emissions\n\t *   .mergeAll(); // flatten the Observable-of-Observables\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link window}\n\t * @see {@link windowCount}\n\t * @see {@link windowTime}\n\t * @see {@link windowToggle}\n\t * @see {@link bufferWhen}\n\t *\n\t * @param {function(): Observable} closingSelector A function that takes no\n\t * arguments and returns an Observable that signals (on either `next` or\n\t * `complete`) when to close the previous window and start a new one.\n\t * @return {Observable<Observable<T>>} An observable of windows, which in turn\n\t * are Observables.\n\t * @method windowWhen\n\t * @owner Observable\n\t */\n\tfunction windowWhen(closingSelector) {\n\t    return this.lift(new WindowOperator(closingSelector));\n\t}\n\texports.windowWhen = windowWhen;\n\tvar WindowOperator = (function () {\n\t    function WindowOperator(closingSelector) {\n\t        this.closingSelector = closingSelector;\n\t    }\n\t    WindowOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n\t    };\n\t    return WindowOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WindowSubscriber = (function (_super) {\n\t    __extends(WindowSubscriber, _super);\n\t    function WindowSubscriber(destination, closingSelector) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t        this.closingSelector = closingSelector;\n\t        this.openWindow();\n\t    }\n\t    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.openWindow(innerSub);\n\t    };\n\t    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n\t        this._error(error);\n\t    };\n\t    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.openWindow(innerSub);\n\t    };\n\t    WindowSubscriber.prototype._next = function (value) {\n\t        this.window.next(value);\n\t    };\n\t    WindowSubscriber.prototype._error = function (err) {\n\t        this.window.error(err);\n\t        this.destination.error(err);\n\t        this.unsubscribeClosingNotification();\n\t    };\n\t    WindowSubscriber.prototype._complete = function () {\n\t        this.window.complete();\n\t        this.destination.complete();\n\t        this.unsubscribeClosingNotification();\n\t    };\n\t    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n\t        if (this.closingNotification) {\n\t            this.closingNotification.unsubscribe();\n\t        }\n\t    };\n\t    WindowSubscriber.prototype.openWindow = function (innerSub) {\n\t        if (innerSub === void 0) { innerSub = null; }\n\t        if (innerSub) {\n\t            this.remove(innerSub);\n\t            innerSub.unsubscribe();\n\t        }\n\t        var prevWindow = this.window;\n\t        if (prevWindow) {\n\t            prevWindow.complete();\n\t        }\n\t        var window = this.window = new Subject_1.Subject();\n\t        this.destination.next(window);\n\t        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n\t        if (closingNotifier === errorObject_1.errorObject) {\n\t            var err = errorObject_1.errorObject.e;\n\t            this.destination.error(err);\n\t            this.window.error(err);\n\t        }\n\t        else {\n\t            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n\t        }\n\t    };\n\t    return WindowSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 329 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar withLatestFrom_1 = __webpack_require__(330);\n\tObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n\n\n/***/ },\n/* 330 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(40);\n\tvar subscribeToResult_1 = __webpack_require__(41);\n\t/**\n\t * Combines the source Observable with other Observables to create an Observable\n\t * whose values are calculated from the latest values of each, only when the\n\t * source emits.\n\t *\n\t * <span class=\"informal\">Whenever the source Observable emits a value, it\n\t * computes a formula using that value plus the latest values from other input\n\t * Observables, then emits the output of that formula.</span>\n\t *\n\t * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n\t *\n\t * `withLatestFrom` combines each value from the source Observable (the\n\t * instance) with the latest values from the other input Observables only when\n\t * the source emits a value, optionally using a `project` function to determine\n\t * the value to be emitted on the output Observable. All input Observables must\n\t * emit at least one value before the output Observable will emit a value.\n\t *\n\t * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var timer = Rx.Observable.interval(1000);\n\t * var result = clicks.withLatestFrom(timer);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link combineLatest}\n\t *\n\t * @param {Observable} other An input Observable to combine with the source\n\t * Observable. More than one input Observables may be given as argument.\n\t * @param {Function} [project] Projection function for combining values\n\t * together. Receives all values in order of the Observables passed, where the\n\t * first parameter is a value from the source Observable. (e.g.\n\t * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n\t * passed, arrays will be emitted on the output Observable.\n\t * @return {Observable} An Observable of projected values from the most recent\n\t * values from each input Observable, or an array of the most recent values from\n\t * each input Observable.\n\t * @method withLatestFrom\n\t * @owner Observable\n\t */\n\tfunction withLatestFrom() {\n\t    var args = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        args[_i - 0] = arguments[_i];\n\t    }\n\t    var project;\n\t    if (typeof args[args.length - 1] === 'function') {\n\t        project = args.pop();\n\t    }\n\t    var observables = args;\n\t    return this.lift(new WithLatestFromOperator(observables, project));\n\t}\n\texports.withLatestFrom = withLatestFrom;\n\t/* tslint:enable:max-line-length */\n\tvar WithLatestFromOperator = (function () {\n\t    function WithLatestFromOperator(observables, project) {\n\t        this.observables = observables;\n\t        this.project = project;\n\t    }\n\t    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n\t    };\n\t    return WithLatestFromOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar WithLatestFromSubscriber = (function (_super) {\n\t    __extends(WithLatestFromSubscriber, _super);\n\t    function WithLatestFromSubscriber(destination, observables, project) {\n\t        _super.call(this, destination);\n\t        this.observables = observables;\n\t        this.project = project;\n\t        this.toRespond = [];\n\t        var len = observables.length;\n\t        this.values = new Array(len);\n\t        for (var i = 0; i < len; i++) {\n\t            this.toRespond.push(i);\n\t        }\n\t        for (var i = 0; i < len; i++) {\n\t            var observable = observables[i];\n\t            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n\t        }\n\t    }\n\t    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        this.values[outerIndex] = innerValue;\n\t        var toRespond = this.toRespond;\n\t        if (toRespond.length > 0) {\n\t            var found = toRespond.indexOf(outerIndex);\n\t            if (found !== -1) {\n\t                toRespond.splice(found, 1);\n\t            }\n\t        }\n\t    };\n\t    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n\t        // noop\n\t    };\n\t    WithLatestFromSubscriber.prototype._next = function (value) {\n\t        if (this.toRespond.length === 0) {\n\t            var args = [value].concat(this.values);\n\t            if (this.project) {\n\t                this._tryProject(args);\n\t            }\n\t            else {\n\t                this.destination.next(args);\n\t            }\n\t        }\n\t    };\n\t    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n\t        var result;\n\t        try {\n\t            result = this.project.apply(this, args);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return WithLatestFromSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\n\n/***/ },\n/* 331 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar zip_1 = __webpack_require__(115);\n\tObservable_1.Observable.prototype.zip = zip_1.zipProto;\n\n\n/***/ },\n/* 332 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(7);\n\tvar zipAll_1 = __webpack_require__(333);\n\tObservable_1.Observable.prototype.zipAll = zipAll_1.zipAll;\n\n\n/***/ },\n/* 333 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar zip_1 = __webpack_require__(115);\n\t/**\n\t * @param project\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method zipAll\n\t * @owner Observable\n\t */\n\tfunction zipAll(project) {\n\t    return this.lift(new zip_1.ZipOperator(project));\n\t}\n\texports.zipAll = zipAll;\n\n\n/***/ },\n/* 334 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subscriber_1 = __webpack_require__(11);\n\tvar Operator = (function () {\n\t    function Operator() {\n\t    }\n\t    Operator.prototype.call = function (subscriber, source) {\n\t        return source._subscribe(new Subscriber_1.Subscriber(subscriber));\n\t    };\n\t    return Operator;\n\t}());\n\texports.Operator = Operator;\n\n\n/***/ },\n/* 335 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar VirtualTimeScheduler_1 = __webpack_require__(336);\n\tvar Notification_1 = __webpack_require__(64);\n\tvar ColdObservable_1 = __webpack_require__(337);\n\tvar HotObservable_1 = __webpack_require__(341);\n\tvar SubscriptionLog_1 = __webpack_require__(339);\n\tvar TestScheduler = (function (_super) {\n\t    __extends(TestScheduler, _super);\n\t    function TestScheduler(assertDeepEqual) {\n\t        _super.call(this);\n\t        this.assertDeepEqual = assertDeepEqual;\n\t        this.hotObservables = [];\n\t        this.coldObservables = [];\n\t        this.flushTests = [];\n\t    }\n\t    TestScheduler.prototype.createTime = function (marbles) {\n\t        var indexOf = marbles.indexOf('|');\n\t        if (indexOf === -1) {\n\t            throw new Error('Marble diagram for time should have a completion marker \"|\"');\n\t        }\n\t        return indexOf * TestScheduler.frameTimeFactor;\n\t    };\n\t    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n\t        if (marbles.indexOf('^') !== -1) {\n\t            throw new Error('Cold observable cannot have subscription offset \"^\"');\n\t        }\n\t        if (marbles.indexOf('!') !== -1) {\n\t            throw new Error('Cold observable cannot have unsubscription marker \"!\"');\n\t        }\n\t        var messages = TestScheduler.parseMarbles(marbles, values, error);\n\t        var cold = new ColdObservable_1.ColdObservable(messages, this);\n\t        this.coldObservables.push(cold);\n\t        return cold;\n\t    };\n\t    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n\t        if (marbles.indexOf('!') !== -1) {\n\t            throw new Error('Hot observable cannot have unsubscription marker \"!\"');\n\t        }\n\t        var messages = TestScheduler.parseMarbles(marbles, values, error);\n\t        var subject = new HotObservable_1.HotObservable(messages, this);\n\t        this.hotObservables.push(subject);\n\t        return subject;\n\t    };\n\t    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n\t        var _this = this;\n\t        var messages = [];\n\t        observable.subscribe(function (value) {\n\t            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n\t        }, function (err) {\n\t            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n\t        }, function () {\n\t            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n\t        });\n\t        return messages;\n\t    };\n\t    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n\t        var _this = this;\n\t        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n\t        var actual = [];\n\t        var flushTest = { actual: actual, ready: false };\n\t        var unsubscriptionFrame = TestScheduler\n\t            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n\t        var subscription;\n\t        this.schedule(function () {\n\t            subscription = observable.subscribe(function (x) {\n\t                var value = x;\n\t                // Support Observable-of-Observables\n\t                if (x instanceof Observable_1.Observable) {\n\t                    value = _this.materializeInnerObservable(value, _this.frame);\n\t                }\n\t                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n\t            }, function (err) {\n\t                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n\t            }, function () {\n\t                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n\t            });\n\t        }, 0);\n\t        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n\t            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n\t        }\n\t        this.flushTests.push(flushTest);\n\t        return {\n\t            toBe: function (marbles, values, errorValue) {\n\t                flushTest.ready = true;\n\t                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n\t            }\n\t        };\n\t    };\n\t    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n\t        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n\t        this.flushTests.push(flushTest);\n\t        return {\n\t            toBe: function (marbles) {\n\t                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n\t                flushTest.ready = true;\n\t                flushTest.expected = marblesArray.map(function (marbles) {\n\t                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n\t                });\n\t            }\n\t        };\n\t    };\n\t    TestScheduler.prototype.flush = function () {\n\t        var hotObservables = this.hotObservables;\n\t        while (hotObservables.length > 0) {\n\t            hotObservables.shift().setup();\n\t        }\n\t        _super.prototype.flush.call(this);\n\t        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n\t        while (readyFlushTests.length > 0) {\n\t            var test = readyFlushTests.shift();\n\t            this.assertDeepEqual(test.actual, test.expected);\n\t        }\n\t    };\n\t    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n\t        if (typeof marbles !== 'string') {\n\t            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n\t        }\n\t        var len = marbles.length;\n\t        var groupStart = -1;\n\t        var subscriptionFrame = Number.POSITIVE_INFINITY;\n\t        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\t        for (var i = 0; i < len; i++) {\n\t            var frame = i * this.frameTimeFactor;\n\t            var c = marbles[i];\n\t            switch (c) {\n\t                case '-':\n\t                case ' ':\n\t                    break;\n\t                case '(':\n\t                    groupStart = frame;\n\t                    break;\n\t                case ')':\n\t                    groupStart = -1;\n\t                    break;\n\t                case '^':\n\t                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n\t                        throw new Error('Found a second subscription point \\'^\\' in a ' +\n\t                            'subscription marble diagram. There can only be one.');\n\t                    }\n\t                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n\t                    break;\n\t                case '!':\n\t                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n\t                        throw new Error('Found a second subscription point \\'^\\' in a ' +\n\t                            'subscription marble diagram. There can only be one.');\n\t                    }\n\t                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n\t                    break;\n\t                default:\n\t                    throw new Error('There can only be \\'^\\' and \\'!\\' markers in a ' +\n\t                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n\t            }\n\t        }\n\t        if (unsubscriptionFrame < 0) {\n\t            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n\t        }\n\t        else {\n\t            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n\t        }\n\t    };\n\t    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n\t        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n\t        if (marbles.indexOf('!') !== -1) {\n\t            throw new Error('Conventional marble diagrams cannot have the ' +\n\t                'unsubscription marker \"!\"');\n\t        }\n\t        var len = marbles.length;\n\t        var testMessages = [];\n\t        var subIndex = marbles.indexOf('^');\n\t        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n\t        var getValue = typeof values !== 'object' ?\n\t            function (x) { return x; } :\n\t            function (x) {\n\t                // Support Observable-of-Observables\n\t                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n\t                    return values[x].messages;\n\t                }\n\t                return values[x];\n\t            };\n\t        var groupStart = -1;\n\t        for (var i = 0; i < len; i++) {\n\t            var frame = i * this.frameTimeFactor + frameOffset;\n\t            var notification = void 0;\n\t            var c = marbles[i];\n\t            switch (c) {\n\t                case '-':\n\t                case ' ':\n\t                    break;\n\t                case '(':\n\t                    groupStart = frame;\n\t                    break;\n\t                case ')':\n\t                    groupStart = -1;\n\t                    break;\n\t                case '|':\n\t                    notification = Notification_1.Notification.createComplete();\n\t                    break;\n\t                case '^':\n\t                    break;\n\t                case '#':\n\t                    notification = Notification_1.Notification.createError(errorValue || 'error');\n\t                    break;\n\t                default:\n\t                    notification = Notification_1.Notification.createNext(getValue(c));\n\t                    break;\n\t            }\n\t            if (notification) {\n\t                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n\t            }\n\t        }\n\t        return testMessages;\n\t    };\n\t    return TestScheduler;\n\t}(VirtualTimeScheduler_1.VirtualTimeScheduler));\n\texports.TestScheduler = TestScheduler;\n\n\n/***/ },\n/* 336 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar VirtualTimeScheduler = (function () {\n\t    function VirtualTimeScheduler() {\n\t        this.actions = []; // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n\t        this.active = false;\n\t        this.scheduledId = null;\n\t        this.index = 0;\n\t        this.sorted = false;\n\t        this.frame = 0;\n\t        this.maxFrames = 750;\n\t    }\n\t    VirtualTimeScheduler.prototype.now = function () {\n\t        return this.frame;\n\t    };\n\t    VirtualTimeScheduler.prototype.flush = function () {\n\t        var actions = this.actions;\n\t        var maxFrames = this.maxFrames;\n\t        while (actions.length > 0) {\n\t            var action = actions.shift();\n\t            this.frame = action.delay;\n\t            if (this.frame <= maxFrames) {\n\t                action.execute();\n\t                if (action.error) {\n\t                    actions.length = 0;\n\t                    this.frame = 0;\n\t                    throw action.error;\n\t                }\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        actions.length = 0;\n\t        this.frame = 0;\n\t    };\n\t    VirtualTimeScheduler.prototype.addAction = function (action) {\n\t        var actions = this.actions;\n\t        actions.push(action);\n\t        actions.sort(function (a, b) {\n\t            if (a.delay === b.delay) {\n\t                if (a.index === b.index) {\n\t                    return 0;\n\t                }\n\t                else if (a.index > b.index) {\n\t                    return 1;\n\t                }\n\t                else {\n\t                    return -1;\n\t                }\n\t            }\n\t            else if (a.delay > b.delay) {\n\t                return 1;\n\t            }\n\t            else {\n\t                return -1;\n\t            }\n\t        });\n\t    };\n\t    VirtualTimeScheduler.prototype.schedule = function (work, delay, state) {\n\t        if (delay === void 0) { delay = 0; }\n\t        this.sorted = false;\n\t        return new VirtualAction(this, work, this.index++).schedule(state, delay);\n\t    };\n\t    VirtualTimeScheduler.frameTimeFactor = 10;\n\t    return VirtualTimeScheduler;\n\t}());\n\texports.VirtualTimeScheduler = VirtualTimeScheduler;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar VirtualAction = (function (_super) {\n\t    __extends(VirtualAction, _super);\n\t    function VirtualAction(scheduler, work, index) {\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t        this.index = index;\n\t        this.calls = 0;\n\t    }\n\t    VirtualAction.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (this.isUnsubscribed) {\n\t            return this;\n\t        }\n\t        var scheduler = this.scheduler;\n\t        var action = null;\n\t        if (this.calls++ === 0) {\n\t            // the action is not being rescheduled.\n\t            action = this;\n\t        }\n\t        else {\n\t            // the action is being rescheduled, and we can't mutate the one in the actions list\n\t            // in the scheduler, so we'll create a new one.\n\t            action = new VirtualAction(scheduler, this.work, scheduler.index += 1);\n\t            this.add(action);\n\t        }\n\t        action.state = state;\n\t        action.delay = scheduler.frame + delay;\n\t        scheduler.addAction(action);\n\t        return this;\n\t    };\n\t    VirtualAction.prototype.execute = function () {\n\t        if (this.isUnsubscribed) {\n\t            throw new Error('How did did we execute a canceled Action?');\n\t        }\n\t        this.work(this.state);\n\t    };\n\t    VirtualAction.prototype.unsubscribe = function () {\n\t        var actions = this.scheduler.actions;\n\t        var index = actions.indexOf(this);\n\t        this.work = void 0;\n\t        this.state = void 0;\n\t        this.scheduler = void 0;\n\t        if (index !== -1) {\n\t            actions.splice(index, 1);\n\t        }\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    return VirtualAction;\n\t}(Subscription_1.Subscription));\n\n\n/***/ },\n/* 337 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(7);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar SubscriptionLoggable_1 = __webpack_require__(338);\n\tvar applyMixins_1 = __webpack_require__(340);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ColdObservable = (function (_super) {\n\t    __extends(ColdObservable, _super);\n\t    function ColdObservable(messages, scheduler) {\n\t        _super.call(this, function (subscriber) {\n\t            var observable = this;\n\t            var index = observable.logSubscribedFrame();\n\t            subscriber.add(new Subscription_1.Subscription(function () {\n\t                observable.logUnsubscribedFrame(index);\n\t            }));\n\t            observable.scheduleMessages(subscriber);\n\t            return subscriber;\n\t        });\n\t        this.messages = messages;\n\t        this.subscriptions = [];\n\t        this.scheduler = scheduler;\n\t    }\n\t    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n\t        var messagesLength = this.messages.length;\n\t        for (var i = 0; i < messagesLength; i++) {\n\t            var message = this.messages[i];\n\t            subscriber.add(this.scheduler.schedule(function (_a) {\n\t                var message = _a.message, subscriber = _a.subscriber;\n\t                message.notification.observe(subscriber);\n\t            }, message.frame, { message: message, subscriber: subscriber }));\n\t        }\n\t    };\n\t    return ColdObservable;\n\t}(Observable_1.Observable));\n\texports.ColdObservable = ColdObservable;\n\tapplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n\n\n/***/ },\n/* 338 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar SubscriptionLog_1 = __webpack_require__(339);\n\tvar SubscriptionLoggable = (function () {\n\t    function SubscriptionLoggable() {\n\t        this.subscriptions = [];\n\t    }\n\t    SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n\t        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n\t        return this.subscriptions.length - 1;\n\t    };\n\t    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n\t        var subscriptionLogs = this.subscriptions;\n\t        var oldSubscriptionLog = subscriptionLogs[index];\n\t        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n\t    };\n\t    return SubscriptionLoggable;\n\t}());\n\texports.SubscriptionLoggable = SubscriptionLoggable;\n\n\n/***/ },\n/* 339 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar SubscriptionLog = (function () {\n\t    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {\n\t        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }\n\t        this.subscribedFrame = subscribedFrame;\n\t        this.unsubscribedFrame = unsubscribedFrame;\n\t    }\n\t    return SubscriptionLog;\n\t}());\n\texports.SubscriptionLog = SubscriptionLog;\n\n\n/***/ },\n/* 340 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction applyMixins(derivedCtor, baseCtors) {\n\t    for (var i = 0, len = baseCtors.length; i < len; i++) {\n\t        var baseCtor = baseCtors[i];\n\t        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n\t        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {\n\t            var name_1 = propertyKeys[j];\n\t            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];\n\t        }\n\t    }\n\t}\n\texports.applyMixins = applyMixins;\n\n\n/***/ },\n/* 341 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(6);\n\tvar Subscription_1 = __webpack_require__(13);\n\tvar SubscriptionLoggable_1 = __webpack_require__(338);\n\tvar applyMixins_1 = __webpack_require__(340);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar HotObservable = (function (_super) {\n\t    __extends(HotObservable, _super);\n\t    function HotObservable(messages, scheduler) {\n\t        _super.call(this);\n\t        this.messages = messages;\n\t        this.subscriptions = [];\n\t        this.scheduler = scheduler;\n\t    }\n\t    HotObservable.prototype._subscribe = function (subscriber) {\n\t        var subject = this;\n\t        var index = subject.logSubscribedFrame();\n\t        subscriber.add(new Subscription_1.Subscription(function () {\n\t            subject.logUnsubscribedFrame(index);\n\t        }));\n\t        return _super.prototype._subscribe.call(this, subscriber);\n\t    };\n\t    HotObservable.prototype.setup = function () {\n\t        var subject = this;\n\t        var messagesLength = subject.messages.length;\n\t        /* tslint:disable:no-var-keyword */\n\t        for (var i = 0; i < messagesLength; i++) {\n\t            (function () {\n\t                var message = subject.messages[i];\n\t                /* tslint:enable */\n\t                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);\n\t            })();\n\t        }\n\t    };\n\t    return HotObservable;\n\t}(Subject_1.Subject));\n\texports.HotObservable = HotObservable;\n\tapplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n\n\n/***/ },\n/* 342 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AnimationFrameScheduler_1 = __webpack_require__(343);\n\texports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler();\n\n\n/***/ },\n/* 343 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar QueueScheduler_1 = __webpack_require__(85);\n\tvar AnimationFrameAction_1 = __webpack_require__(344);\n\tvar AnimationFrameScheduler = (function (_super) {\n\t    __extends(AnimationFrameScheduler, _super);\n\t    function AnimationFrameScheduler() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AnimationFrameScheduler.prototype.scheduleNow = function (work, state) {\n\t        return new AnimationFrameAction_1.AnimationFrameAction(this, work).schedule(state);\n\t    };\n\t    return AnimationFrameScheduler;\n\t}(QueueScheduler_1.QueueScheduler));\n\texports.AnimationFrameScheduler = AnimationFrameScheduler;\n\n\n/***/ },\n/* 344 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar FutureAction_1 = __webpack_require__(84);\n\tvar AnimationFrame_1 = __webpack_require__(345);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AnimationFrameAction = (function (_super) {\n\t    __extends(AnimationFrameAction, _super);\n\t    function AnimationFrameAction() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    AnimationFrameAction.prototype._schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (delay > 0) {\n\t            return _super.prototype._schedule.call(this, state, delay);\n\t        }\n\t        this.delay = delay;\n\t        this.state = state;\n\t        var scheduler = this.scheduler;\n\t        scheduler.actions.push(this);\n\t        if (!scheduler.scheduledId) {\n\t            scheduler.scheduledId = AnimationFrame_1.AnimationFrame.requestAnimationFrame(function () {\n\t                scheduler.scheduledId = null;\n\t                scheduler.flush();\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    AnimationFrameAction.prototype._unsubscribe = function () {\n\t        var scheduler = this.scheduler;\n\t        var scheduledId = scheduler.scheduledId, actions = scheduler.actions;\n\t        _super.prototype._unsubscribe.call(this);\n\t        if (actions.length === 0) {\n\t            scheduler.active = false;\n\t            if (scheduledId != null) {\n\t                scheduler.scheduledId = null;\n\t                AnimationFrame_1.AnimationFrame.cancelAnimationFrame(scheduledId);\n\t            }\n\t        }\n\t    };\n\t    return AnimationFrameAction;\n\t}(FutureAction_1.FutureAction));\n\texports.AnimationFrameAction = AnimationFrameAction;\n\n\n/***/ },\n/* 345 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(8);\n\tvar RequestAnimationFrameDefinition = (function () {\n\t    function RequestAnimationFrameDefinition(root) {\n\t        if (root.requestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.mozRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.webkitRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.msRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n\t        }\n\t        else if (root.oRequestAnimationFrame) {\n\t            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n\t            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n\t        }\n\t        else {\n\t            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n\t            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n\t        }\n\t    }\n\t    return RequestAnimationFrameDefinition;\n\t}());\n\texports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\n\texports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n\n\n/***/ },\n/* 346 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar rxjs_1 = __webpack_require__(4);\n\texports.domain = \"https://ic-webchat-scratch.azurewebsites.net\";\n\tvar baseUrl = exports.domain + \"/api/conversations\";\n\texports.startConversation = function (appSecret) {\n\t    return rxjs_1.Observable\n\t        .ajax({\n\t        method: \"POST\",\n\t        url: \"\" + baseUrl,\n\t        headers: {\n\t            \"Accept\": \"application/json\",\n\t            \"Authorization\": \"BotConnector \" + appSecret\n\t        }\n\t    })\n\t        .map(function (ajaxResponse) { return ajaxResponse.response; });\n\t};\n\texports.postMessage = function (text, conversation) {\n\t    return rxjs_1.Observable\n\t        .ajax({\n\t        method: \"POST\",\n\t        url: baseUrl + \"/\" + conversation.conversationId + \"/messages\",\n\t        body: {\n\t            text: text,\n\t            from: null,\n\t            conversationId: conversation.conversationId\n\t        },\n\t        headers: {\n\t            \"Content-Type\": \"application/json\",\n\t            \"Authorization\": \"BotConnector \" + conversation.token\n\t        }\n\t    })\n\t        .map(function (ajaxResponse) { return true; });\n\t};\n\texports.postFile = function (file, conversation) {\n\t    var formData = new FormData();\n\t    formData.append('file', file);\n\t    return rxjs_1.Observable\n\t        .ajax({\n\t        method: \"POST\",\n\t        url: baseUrl + \"/\" + conversation.conversationId + \"/upload\",\n\t        body: formData,\n\t        headers: {\n\t            \"Authorization\": \"BotConnector \" + conversation.token\n\t        }\n\t    })\n\t        .map(function (ajaxResponse) { return true; });\n\t};\n\texports.getMessages = function (conversation) {\n\t    return new rxjs_1.Observable(function (subscriber) {\n\t        return messageGroupGenerator(conversation, subscriber);\n\t    })\n\t        .concatAll();\n\t};\n\tvar messageGroupGenerator = function (conversation, subscriber, watermark) {\n\t    if (watermark === void 0) { watermark = \"\"; }\n\t    getMessageGroup(conversation, watermark).subscribe(function (messageGroup) {\n\t        var someMessages = messageGroup && messageGroup.messages && messageGroup.messages.length > 0;\n\t        if (someMessages)\n\t            subscriber.next(rxjs_1.Observable.from(messageGroup.messages));\n\t        setTimeout(function () { return messageGroupGenerator(conversation, subscriber, messageGroup && messageGroup.watermark); }, someMessages && messageGroup.watermark ? 0 : 3000);\n\t    }, function (result) { return subscriber.error(result); });\n\t};\n\tvar getMessageGroup = function (conversation, watermark) {\n\t    return rxjs_1.Observable\n\t        .ajax({\n\t        method: \"GET\",\n\t        url: baseUrl + \"/\" + conversation.conversationId + \"/messages?watermark=\" + watermark,\n\t        headers: {\n\t            \"Accept\": \"application/json\",\n\t            \"Authorization\": \"BotConnector \" + conversation.token\n\t        }\n\t    })\n\t        .map(function (ajaxResponse) { return ajaxResponse.response; });\n\t};\n\n\n/***/ },\n/* 347 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\tvar HistoryMessage_tsx_1 = __webpack_require__(348);\n\texports.History = function (props) {\n\t    return React.createElement(\"div\", {id: \"historyFrame\"}, props.messages.map(function (message, index) { return React.createElement(HistoryMessage_tsx_1.HistoryMessage, {key: index.toString(), message: message}); }));\n\t};\n\n\n/***/ },\n/* 348 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\texports.HistoryMessage = function (props) {\n\t    var inside;\n\t    if (props.message.images && props.message.images.length > 0)\n\t        inside = props.message.images.map(function (path) { return React.createElement(\"img\", {src: path}); });\n\t    else\n\t        inside = props.message.text;\n\t    return React.createElement(\"p\", null, props.message.from + \": \", inside);\n\t};\n\n\n/***/ },\n/* 349 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(2);\n\texports.Console = function (props) {\n\t    return React.createElement(\"div\", {id: \"outgoingFrame\"}, React.createElement(\"input\", {type: \"file\", id: \"imageUpload\", accept: \"image/*\", multiple: true, onChange: function (e) { return props.actions.sendFile(e.target.files); }}), React.createElement(\"textarea\", {id: \"outgoing\", value: props.text, onChange: function (e) { return props.actions.updateMessage(e.target.value); }, disabled: !props.enableSend}), React.createElement(\"button\", {id: \"send\", onClick: props.actions.sendMessage, disabled: !props.text || props.text.length == 0 || !props.enableSend}, \"send\"));\n\t};\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** public/app.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 6a4c924cf6d4e39892fe\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Observable, Subscriber, Subject } from '@reactivex/rxjs';\nimport { BotMessage, BotConversation } from './directLineTypes';\nimport { domain, startConversation, getMessages, postMessage, postFile } from './directLine';\nimport { History } from './History.tsx'\nimport { Console } from './Console.tsx'\n\nexport interface Message {\n    from: \"me\" | \"bot\",\n    text?: string,\n    images?: string[]\n} \n\nexport interface ConsoleState {\n    text?: string,\n    enableSend?: boolean\n}\n\ninterface State {\n    // conversation metadata\n    conversation?: BotConversation,\n    // message history\n    messages?: Message[],\n    // compose window\n    console?: ConsoleState\n}\n\nconst outgoing$ = new Subject<Message>();\n\nconst console$ = new Subject<ConsoleState>();\nconst consoleStart = {text: \"\", enableSend: true};\n\nconst incoming$ = (conversation) =>\n    getMessages(conversation)\n    .filter(botmessage => botmessage.from === \"TestBotV3\");\n\nconst message$ = (conversation) =>\n    incoming$(conversation)\n    .map<Message>(botmessage => ({ text: botmessage.text, images: botmessage.images.map(path => domain + path), from: \"bot\" }))\n    .merge(outgoing$)\n    .scan<Message[]>((messages, message) => [...messages, message], []);\n\nconst state$ = (conversation) => \n    message$(conversation).startWith([])\n    .combineLatest(\n        console$.startWith(consoleStart),\n        (messages, compose) => ({\n            conversation: conversation,\n            messages: messages,\n            console: compose\n        } as State)\n    )\n    .do(state => console.log(\"state\", state));\n\nconst conversation$ = startConversation;\n\nconst getQueryParams = () => {\n    const params = {};\n    location.search.\n        substring(1).\n        split(\"&\").\n        forEach(pair => {\n            const p = pair.split(\"=\");\n            params[p[0]] = p[1];\n        });\n    return params;\n}\n\nclass App extends React.Component<{}, State> {\n    constructor() {\n        super();\n        this.state = {\n            conversation: null,\n            messages: [],\n            console: consoleStart\n        }\n\n        const queryParams = getQueryParams();\n        const appSecret = queryParams['s'];\n\n        conversation$(appSecret)\n        .flatMap(conversation => state$(conversation))\n        .subscribe(\n            state => this.setState(state),\n            error => console.log(\"errors\", error)\n        );\n    }\n\n    private consoleActions = {\n        updateMessage: (text: string) => {\n            console$.next({text: text, enableSend: this.state.console.enableSend});\n        },\n\n        sendMessage: () => {\n            console$.next({text: this.state.console.text, enableSend: false});\n            postMessage(this.state.console.text, this.state.conversation)\n            .retry(2)\n            .subscribe(\n                () => {\n                    outgoing$.next({\n                        text: this.state.console.text,\n                        from: \"me\"\n                    });\n                    console$.next({\n                        text: \"\",\n                        enableSend: true\n                    });\n                },\n                error => {\n                    console.log(\"failed to post message\");\n                    console$.next({text: this.state.console.text, enableSend: true});\n                }\n            );\n        },\n\n        sendFile: (files:FileList) => {\n            for (let i = 0, numFiles = files.length; i < numFiles; i++) {\n                const file = files[i];\n                postFile(file, this.state.conversation)\n                .retry(2)\n                .subscribe(\n                    () => {\n                        outgoing$.next({\n                            images: [window.URL.createObjectURL(file)],\n                            from: \"me\"\n                        });\n                    },\n                    error => {\n                        console.log(\"failed to post file\");\n                    }\n                )\n            }\n        }\n    }\n\n    render() {\n        return <div id=\"appFrame\">\n            <Console actions={ this.consoleActions } { ...this.state.console } />\n            <History messages={ this.state.messages }/> \n        </div>;\n    }\n}\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/App.tsx\n **/","module.exports = React;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = ReactDOM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ReactDOM\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = require('./dist/cjs/Rx');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@reactivex/rxjs/index.js\n ** module id = 4\n ** module chunks = 0\n **/","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/cache';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctKey';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {MulticastObservable} from './observable/MulticastObservable';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport {asap} from './scheduler/asap';\nimport {async} from './scheduler/async';\nimport {queue} from './scheduler/queue';\nimport {animationFrame} from './scheduler/animationFrame';\nimport {AsapScheduler} from './scheduler/AsapScheduler';\nimport {AsyncScheduler} from './scheduler/AsyncScheduler';\nimport {QueueScheduler} from './scheduler/QueueScheduler';\nimport {AnimationFrameScheduler} from './scheduler/AnimationFrameScheduler';\nimport {$$rxSubscriber as rxSubscriber} from './symbol/rxSubscriber';\nimport {$$iterator as iterator} from './symbol/iterator';\nimport observable from 'symbol-observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Rx.ts\n **/","import {Operator} from './Operator';\nimport {Observer} from './Observer';\nimport {Observable} from './Observable';\nimport {Subscriber} from './Subscriber';\nimport {ISubscription, Subscription} from './Subscription';\nimport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nimport {SubjectSubscription} from './SubjectSubscription';\nimport {$$rxSubscriber} from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  isUnsubscribed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  lift<T, R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.isUnsubscribed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.isUnsubscribed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.isUnsubscribed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.isUnsubscribed = true;\n    this.observers = null;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.isUnsubscribed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, protected source?: Observable<T>) {\n    super();\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Subject.ts\n **/","import {PartialObserver} from './Observer';\nimport {Operator} from './Operator';\nimport {Subscriber} from './Subscriber';\nimport {Subscription, AnonymousSubscription, TeardownLogic} from './Subscription';\nimport {root} from './util/root';\nimport {toSubscriber} from './util/toSubscriber';\nimport {IfObservable} from './observable/IfObservable';\nimport {ErrorObservable} from './observable/ErrorObservable';\nimport $$observable from 'symbol-observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | Promise<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this);\n    } else {\n      sink.add(this._subscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` imple will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Observable.ts\n **/","let objectTypes = {\n  'boolean': false,\n  'function': true,\n  'object': true,\n  'number': false,\n  'string': false,\n  'undefined': false\n};\n\ndeclare let global: NodeJS.Global;\ndeclare let module: any;\ndeclare let exports: any;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\nexport let root: any = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n\n/* tslint:disable:no-unused-variable */\nlet freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\nlet freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\nlet freeGlobal = objectTypes[typeof global] && global;\n\nif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n  root = freeGlobal;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/root.ts\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 9\n ** module chunks = 0\n **/","import {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {$$rxSubscriber} from '../symbol/rxSubscriber';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber();\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/toSubscriber.ts\n **/","import {isFunction} from './util/isFunction';\nimport {Observer, PartialObserver} from './Observer';\nimport {Subscription} from './Subscription';\nimport {empty as emptyObserver} from './Observer';\nimport {$$rxSubscriber} from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.isUnsubscribed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Subscriber.ts\n **/","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isFunction.ts\n **/","import {isArray} from './util/isArray';\nimport {isObject} from './util/isObject';\nimport {isFunction} from './util/isFunction';\nimport {tryCatch} from './util/tryCatch';\nimport {errorObject} from './util/errorObject';\nimport {UnsubscriptionError} from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  isUnsubscribed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.isUnsubscribed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public isUnsubscribed: boolean = false;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.isUnsubscribed) {\n      return;\n    }\n\n    this.isUnsubscribed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        (errors = errors || []).push(errorObject.e);\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(err.errors);\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `isUnsubscribed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (\n        teardown === this) || (\n        teardown === Subscription.EMPTY)) {\n      return;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.isUnsubscribed || typeof sub.unsubscribe !== 'function') {\n          break;\n        } else if (this.isUnsubscribed) {\n          sub.unsubscribe();\n        } else {\n          ((<any> this)._subscriptions || ((<any> this)._subscriptions = [])).push(sub);\n        }\n        break;\n      default:\n        throw new Error('Unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    return sub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Subscription.ts\n **/","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isArray.ts\n **/","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isObject.ts\n **/","import {errorObject} from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/tryCatch.ts\n **/","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject: any = { e: {} };\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/errorObject.ts\n **/","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/UnsubscriptionError.ts\n **/","export interface NextObserver<T> {\n  isUnsubscribed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  isUnsubscribed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  isUnsubscribed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  isUnsubscribed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  isUnsubscribed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Observer.ts\n **/","import {root} from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/symbol/rxSubscriber.ts\n **/","module.exports = require('./lib/index');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@reactivex/rxjs/~/symbol-observable/index.js\n ** module id = 21\n ** module chunks = 0\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _ponyfill = require('./ponyfill');\n\nvar _ponyfill2 = _interopRequireDefault(_ponyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar root = undefined; /* global window */\n\nif (typeof global !== 'undefined') {\n\troot = global;\n} else if (typeof window !== 'undefined') {\n\troot = window;\n}\n\nvar result = (0, _ponyfill2.default)(root);\nexports.default = result;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@reactivex/rxjs/~/symbol-observable/lib/index.js\n ** module id = 22\n ** module chunks = 0\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = symbolObservablePonyfill;\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar _Symbol = root.Symbol;\n\n\tif (typeof _Symbol === 'function') {\n\t\tif (_Symbol.observable) {\n\t\t\tresult = _Symbol.observable;\n\t\t} else {\n\t\t\tresult = _Symbol('observable');\n\t\t\t_Symbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@reactivex/rxjs/~/symbol-observable/lib/ponyfill.js\n ** module id = 23\n ** module chunks = 0\n **/","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/ObjectUnsubscribedError.ts\n **/","import {Subject} from './Subject';\nimport {Observer} from './Observer';\nimport {Subscription} from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  isUnsubscribed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.isUnsubscribed) {\n      return;\n    }\n\n    this.isUnsubscribed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.isUnsubscribed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/SubjectSubscription.ts\n **/","import {Observable} from '../../Observable';\nimport {bindCallback as staticBindCallback} from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindCallback.ts\n **/","import { BoundCallbackObservable } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/bindCallback.ts\n **/","import {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {AsyncSubject} from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/BoundCallbackObservable.ts\n **/","import {Subject} from './Subject';\nimport {Subscriber} from './Subscriber';\nimport {Subscription} from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  value: T = null;\n\n  hasNext: boolean = false;\n\n  hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    this.value = value;\n    this.hasNext = true;\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/AsyncSubject.ts\n **/","import {Observable} from '../../Observable';\nimport {bindNodeCallback as staticBindNodeCallback} from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/bindNodeCallback.ts\n **/","import { BoundNodeCallbackObservable } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/bindNodeCallback.ts\n **/","import {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {AsyncSubject} from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\nfunction dispatch<T>(state: { source: BoundNodeCallbackObservable<T>, subscriber: Subscriber<T> }) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  const { callbackFunc, args, scheduler } = source;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/BoundNodeCallbackObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {combineLatest as combineLatestStatic} from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/combineLatest.ts\n **/","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from './ArrayObservable';\nimport { CombineLatestOperator } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: Scheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: Scheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | Scheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | Scheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | Scheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    Scheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: Scheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <Scheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/combineLatest.ts\n **/","import {Scheduler} from '../Scheduler';\nexport function isScheduler<T>(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isScheduler.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {ScalarObservable} from './ScalarObservable';\nimport {EmptyObservable} from './EmptyObservable';\nimport {Subscriber} from '../Subscriber';\nimport {isScheduler} from '../util/isScheduler';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: Scheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(...array: Array<T | Scheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` Scheduler, which means the `next`\n   * notifications are sent synchronously, although with a different Scheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | Scheduler>): Observable<T> {\n    let scheduler = <Scheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(public array: T[], public scheduler?: Scheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.isUnsubscribed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: Scheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: Scheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.isUnsubscribed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ScalarObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: Scheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/EmptyObservable.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {isArray} from '../util/isArray';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\nconst none = {};\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <any>observables[0];\n  }\n\n  observables.unshift(this);\n\n  return new ArrayObservable(observables).lift(new CombineLatestOperator(project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface CombineLatestSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<T>[]): Observable<Array<T>>;\n  <TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values);\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/combineLatest.ts\n **/","import {Subscriber} from './Subscriber';\nimport {InnerSubscriber} from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/OuterSubscriber.ts\n **/","import {root} from './root';\nimport {isArray} from './isArray';\nimport {isPromise} from './isPromise';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, ObservableInput} from '../Observable';\nimport {$$iterator} from '../symbol/iterator';\nimport {Subscription} from '../Subscription';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {OuterSubscriber} from '../OuterSubscriber';\n\nimport $$observable from 'symbol-observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.isUnsubscribed) {\n    return;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return;\n    } else {\n      return result.subscribe(destination);\n    }\n  }\n\n  if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.isUnsubscribed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.isUnsubscribed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.isUnsubscribed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (typeof result[$$iterator] === 'function') {\n    for (let item of <any>result) {\n      destination.next(<any>item);\n      if (destination.isUnsubscribed) {\n        break;\n      }\n    }\n    if (!destination.isUnsubscribed) {\n      destination.complete();\n    }\n  } else if (typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error('invalid observable');\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    destination.error(new TypeError('unknown type returned'));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/subscribeToResult.ts\n **/","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isPromise.ts\n **/","import {root} from '../util/root';\n\nexport let $$iterator: any;\n\nconst Symbol: any = root.Symbol;\n\nif (typeof Symbol === 'function') {\n  if (Symbol.iterator) {\n    $$iterator = Symbol.iterator;\n  } else if (typeof Symbol.for === 'function') {\n    $$iterator = Symbol.for('iterator');\n  }\n} else {\n    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {\n      // Bug for mozilla version\n      $$iterator = '@@iterator';\n    } else if (root.Map) {\n      // es6-shim specific logic\n      let keys = Object.getOwnPropertyNames(root.Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        if (key !== 'entries' && key !== 'size' && root.Map.prototype[key] === root.Map.prototype['entries']) {\n          $$iterator = key;\n          break;\n        }\n      }\n    } else {\n      $$iterator = '@@iterator';\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/symbol/iterator.ts\n **/","import {Subscriber} from './Subscriber';\nimport {OuterSubscriber} from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/InnerSubscriber.ts\n **/","import {Observable} from '../../Observable';\nimport {concat as concatStatic} from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/concat.ts\n **/","import { concatStatic } from '../operator/concat';\n\nexport const concat = concatStatic;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/concat.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {isScheduler} from '../util/isScheduler';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {MergeAllOperator} from './mergeAll';\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  return concatStatic<T, R>(this, ...observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ConcatSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | Scheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | Scheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  let scheduler: Scheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concat.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Observer} from '../Observer';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): T {\n  return this.lift(new MergeAllOperator<T>(concurrent));\n}\n\nexport interface MergeAllSignature<T> {\n  (concurrent?: number): T;\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeAll.ts\n **/","import {Observable} from '../../Observable';\nimport {defer as staticDefer} from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/defer.ts\n **/","import { DeferObservable } from './DeferObservable';\n\nexport const defer = DeferObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/defer.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/DeferObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {empty as staticEmpty} from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/empty.ts\n **/","import { EmptyObservable } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/empty.ts\n **/","import {Observable} from '../../Observable';\nimport {forkJoin as staticForkJoin} from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/forkJoin.ts\n **/","import { ForkJoinObservable } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/forkJoin.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {EmptyObservable} from './EmptyObservable';\nimport {isArray} from '../util/isArray';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ForkJoinObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {from as staticFrom} from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/from.ts\n **/","import { FromObservable } from './FromObservable';\n\nexport const from = FromObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/from.ts\n **/","import {isArray} from '../util/isArray';\nimport {isFunction} from '../util/isFunction';\nimport {isPromise} from '../util/isPromise';\nimport {isScheduler} from '../util/isScheduler';\nimport {PromiseObservable} from './PromiseObservable';\nimport {IteratorObservable} from'./IteratorObservable';\nimport {ArrayObservable} from './ArrayObservable';\nimport {ArrayLikeObservable} from './ArrayLikeObservable';\n\nimport {Scheduler} from '../Scheduler';\nimport {$$iterator} from '../symbol/iterator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {ObserveOnSubscriber} from '../operator/observeOn';\n\nimport $$observable from 'symbol-observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler: Scheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, mapFn: (x: any, y: number) => R, thisArg?: any, scheduler?: Scheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {function(x: any, i: number): T} [mapFn] A \"map\" function to call\n   * when converting array-like objects, where `x` is a value from the\n   * array-like and `i` is the index of that value in the sequence.\n   * @param {any} [thisArg] The context object to use when calling the `mapFn`,\n   * if provided.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>,\n                   mapFnOrScheduler?: Scheduler | ((x: any, y: number) => T),\n                   thisArg?: any,\n                   lastScheduler?: Scheduler): Observable<T> {\n    let scheduler: Scheduler = null;\n    let mapFn: (x: any, i: number) => T = null;\n    if (isFunction(mapFnOrScheduler)) {\n      scheduler = lastScheduler || null;\n      mapFn = <(x: any, i: number) => T> mapFnOrScheduler;\n    } else if (isScheduler(scheduler)) {\n      scheduler = <Scheduler> mapFnOrScheduler;\n    }\n\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(<any>ish, null, null, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, mapFn, thisArg, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/FromObservable.ts\n **/","import {root} from '../util/root';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler: Scheduler = null): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, public scheduler: Scheduler = null) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.isUnsubscribed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.isUnsubscribed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.isUnsubscribed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.isUnsubscribed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.isUnsubscribed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.isUnsubscribed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.isUnsubscribed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.isUnsubscribed) {\n    subscriber.error(err);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/PromiseObservable.ts\n **/","import {root} from '../util/root';\nimport {isObject} from '../util/isObject';\nimport {tryCatch} from '../util/tryCatch';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {isFunction} from '../util/isFunction';\nimport {$$iterator} from '../symbol/iterator';\nimport {errorObject} from '../util/errorObject';\nimport {TeardownLogic} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any,\n                   project?: ((x?: any, i?: number) => T) | any,\n                   thisArg?: any | Scheduler,\n                   scheduler?: Scheduler) {\n    return new IteratorObservable(iterator, project, thisArg, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, thisArg, project, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    if (project) {\n      result = tryCatch(project).call(thisArg, result.value, index);\n      if (result === errorObject) {\n        state.error = errorObject.e;\n        state.hasError = true;\n      } else {\n        subscriber.next(result);\n        state.index = index + 1;\n      }\n    } else {\n      subscriber.next(result.value);\n      state.index = index + 1;\n    }\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  private thisArg: any;\n  private project: (x?: any, i?: number) => T;\n  private scheduler: Scheduler;\n\n  constructor(iterator: any,\n              project?: ((x?: any, i?: number) => T) | any,\n              thisArg?: any | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    if (isObject(project)) {\n      this.thisArg = project;\n      this.scheduler = thisArg;\n    } else if (isFunction(project)) {\n      this.project = project;\n      this.thisArg = thisArg;\n      this.scheduler = scheduler;\n    } else if (project != null) {\n      throw new Error('When provided, `project` must be a function.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, project, thisArg, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, thisArg, project, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else if (project) {\n          result = tryCatch(project).call(thisArg, result.value, index++);\n          if (result === errorObject) {\n            subscriber.error(errorObject.e);\n            break;\n          }\n          subscriber.next(result);\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.isUnsubscribed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('Object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/IteratorObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {ScalarObservable} from './ScalarObservable';\nimport {EmptyObservable} from './EmptyObservable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  private mapFn: (x: T, y: number) => T;\n\n  static create<T>(arrayLike: ArrayLike<T>, mapFn: (x: T, y: number) => T, thisArg: any, scheduler?: Scheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1 && !mapFn) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, mapFn, thisArg, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, mapFn, subscriber } = state;\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    const result = mapFn ? mapFn(arrayLike[index], index) : arrayLike[index];\n    subscriber.next(result);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, mapFn: (x: T, y: number) => T, thisArg: any, private scheduler?: Scheduler) {\n    super();\n    if (!mapFn && !scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n    if (mapFn) {\n      this.mapFn = mapFn.bind(thisArg);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, mapFn, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, mapFn, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.isUnsubscribed; i++) {\n        const result = mapFn ? mapFn(arrayLike[i], i) : arrayLike[i];\n        subscriber.next(result);\n      }\n      subscriber.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ArrayLikeObservable.ts\n **/","import {Observable} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {Operator} from '../Operator';\nimport {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport interface ObserveOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: Scheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: Scheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n     this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch,\n                                      this.delay,\n                                      new ObserveOnMessage(notification, this.destination)));\n   }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/observeOn.ts\n **/","import {PartialObserver} from './Observer';\nimport {Observable} from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public exception?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.exception);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.exception);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.exception);\n      case 'C':\n        return Observable.empty<T>();\n    }\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` exception.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Notification.ts\n **/","import {Observable} from '../../Observable';\nimport {fromEvent as staticFromEvent} from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEvent.ts\n **/","import { FromEventObservable } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/fromEvent.ts\n **/","import {Observable} from '../Observable';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {Subscription} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\nexport type NodeStyleEventEmmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmmitter(sourceObj: any): sourceObj is NodeStyleEventEmmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T, R> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   selector?: (...args: Array<any>) => T): Observable<T> {\n    return new FromEventObservable(target, eventName, selector);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {fromEventPattern as staticFromEventPattern} from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromEventPattern.ts\n **/","import { FromEventPatternObservable } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/fromEventPattern.ts\n **/","import {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T, R> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function): void} removeHandler A function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler: (handler: Function) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler: (handler: Function) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    this._callAddHandler(handler, subscriber);\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler);\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): void {\n    try {\n      this.addHandler(handler);\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/FromEventPatternObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {fromPromise as staticFromPromise} from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/fromPromise.ts\n **/","import { PromiseObservable } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/fromPromise.ts\n **/","import {Observable} from '../../Observable';\nimport {GenerateObservable} from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/generate.ts\n **/","import {Observable} from '../Observable' ;\nimport {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Action} from '../scheduler/Action';\n\nimport {isScheduler} from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Inital state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * Scheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: Scheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: Scheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   * \n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   * \n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   * \n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: Scheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   * \n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   * \n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: Scheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition and scheduler.\n   * \n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition, result selector and scheduler.\n   * \n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | Scheduler,\n                      scheduler?: Scheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <Scheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <Scheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.isUnsubscribed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>) {\n    const { subscriber, condition } = state;\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.isUnsubscribed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/GenerateObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {_if} from '../../observable/if';\n\nObservable.if = _if;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/if.ts\n **/","import { IfObservable } from './IfObservable';\n\nexport const _if = IfObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/if.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {TeardownLogic} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/IfObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {interval as staticInterval} from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/interval.ts\n **/","import { IntervalObservable } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/interval.ts\n **/","import {Subscriber} from '../Subscriber';\nimport {isNumeric} from '../util/isNumeric';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {async} from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified Scheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` Scheduler to provide a notion of time, but you may pass any\n   * Scheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: Scheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: Scheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/IntervalObservable.ts\n **/","import {isArray} from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isNumeric.ts\n **/","import {AsyncScheduler} from './AsyncScheduler';\n\nexport const async = new AsyncScheduler();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/async.ts\n **/","import {Action} from './Action';\nimport {FutureAction} from './FutureAction';\nimport {Subscription} from '../Subscription';\nimport {QueueScheduler} from './QueueScheduler';\n\nexport class AsyncScheduler extends QueueScheduler {\n  scheduleNow<T>(work: (x?: T) => Subscription, state?: T): Action<T> {\n    return new FutureAction(this, work).schedule(state, 0);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsyncScheduler.ts\n **/","import {root} from '../util/root';\nimport {Action} from './Action';\nimport {Scheduler} from '../Scheduler';\nimport {Subscription} from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FutureAction<T> extends Subscription implements Action<T> {\n\n  public id: number;\n  public state: T;\n  public delay: number;\n  public error: any;\n\n  private pending: boolean = false;\n\n  constructor(public scheduler: Scheduler,\n              public work: (x?: T) => Subscription | void) {\n    super();\n  }\n\n  execute() {\n    if (this.isUnsubscribed) {\n      this.error = new Error('executing a cancelled action');\n    } else {\n      try {\n        this.work(this.state);\n      } catch (e) {\n        this.unsubscribe();\n        this.error = e;\n      }\n    }\n  }\n\n  schedule(state?: T, delay: number = 0): Action<T> {\n    if (this.isUnsubscribed) {\n      return this;\n    }\n    return this._schedule(state, delay);\n  }\n\n  protected _schedule(state?: T, delay: number = 0): Action<T> {\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    // If this action has an intervalID and the specified delay matches the\n    // delay we used to create the intervalID, don't call `setInterval` again.\n    if (id != null && this.delay === delay) {\n      return this;\n    }\n\n    this.delay = delay;\n\n    // If this action has an intervalID, but was rescheduled with a different\n    // `delay` time, cancel the current intervalID and call `setInterval` with\n    // the new `delay` time.\n    if (id != null) {\n      this.id = null;\n      root.clearInterval(id);\n    }\n\n    //\n    // Important implementation note:\n    //\n    // By default, FutureAction only executes once. However, Actions have the\n    // ability to be rescheduled from within the scheduled callback (mimicking\n    // recursion for asynchronous methods). This allows us to implement single\n    // and repeated actions with the same code path without adding API surface\n    // area, and implement tail-call optimization over asynchronous boundaries.\n    //\n    // However, JS runtimes make a distinction between intervals scheduled by\n    // repeatedly calling `setTimeout` vs. a single `setInterval` call, with\n    // the latter providing a better guarantee of precision.\n    //\n    // In order to accommodate both single and repeatedly rescheduled actions,\n    // use `setInterval` here for both cases. By default, the interval will be\n    // canceled after its first execution, or if the action schedules itself to\n    // run again with a different `delay` time.\n    //\n    // If the action recursively schedules itself to run again with the same\n    // `delay` time, the interval is not canceled, but allowed to loop again.\n    // The check of whether the interval should be canceled or not is run every\n    // time the interval is executed. The first time an action fails to\n    // reschedule itself, the interval is canceled.\n    //\n    this.id = root.setInterval(() => {\n\n      this.pending = false;\n      const {id, scheduler} = this;\n      scheduler.actions.push(this);\n      scheduler.flush();\n\n      //\n      // Terminate this interval if the action didn't reschedule itself.\n      // Don't call `this.unsubscribe()` here, because the action could be\n      // rescheduled later. For example:\n      //\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling this action again */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n\n      if (this.pending === false && id != null) {\n        this.id = null;\n        root.clearInterval(id);\n      }\n    }, delay);\n\n    return this;\n  }\n\n  protected _unsubscribe() {\n\n    this.pending = false;\n    const {id, scheduler} = this;\n    const {actions} = scheduler;\n    const index = actions.indexOf(this);\n\n    if (id != null) {\n      this.id = null;\n      root.clearInterval(id);\n    }\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    this.work = null;\n    this.state = null;\n    this.scheduler = null;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/FutureAction.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {QueueAction} from './QueueAction';\nimport {Subscription} from '../Subscription';\nimport {FutureAction} from './FutureAction';\nimport {Action} from './Action';\n\nexport class QueueScheduler implements Scheduler {\n  public active: boolean = false;\n  public actions: QueueAction<any>[] = []; // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n  public scheduledId: number = null;\n\n  now() {\n    return Date.now();\n  }\n\n  flush() {\n    if (this.active || this.scheduledId) {\n      return;\n    }\n    this.active = true;\n    const actions = this.actions;\n    // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n    for (let action: QueueAction<any> = null; action = actions.shift(); ) {\n      action.execute();\n      if (action.error) {\n        this.active = false;\n        throw action.error;\n      }\n    }\n    this.active = false;\n  }\n\n  schedule<T>(work: (x?: T) => Subscription | void, delay: number = 0, state?: T): Subscription {\n    return (delay <= 0) ?\n      this.scheduleNow(work, state) :\n      this.scheduleLater(work, delay, state);\n  }\n\n  scheduleNow<T>(work: (x?: T) => Subscription | void, state?: T): Action<T> {\n    return new QueueAction(this, work).schedule(state);\n  }\n\n  scheduleLater<T>(work: (x?: T) => Subscription | void, delay: number, state?: T): Action<T> {\n    return new FutureAction(this, work).schedule(state, delay);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueScheduler.ts\n **/","import {Action} from './Action';\nimport {FutureAction} from './FutureAction';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends FutureAction<T> {\n  protected _schedule(state?: T, delay: number = 0): Action<T> {\n    if (delay > 0) {\n      return super._schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    const scheduler = this.scheduler;\n    scheduler.actions.push(this);\n    scheduler.flush();\n    return this;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/QueueAction.ts\n **/","import {Observable} from '../../Observable';\nimport {merge as mergeStatic} from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/merge.ts\n **/","import { mergeStatic } from '../operator/merge';\n\nexport const merge = mergeStatic;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/merge.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {MergeAllOperator} from './mergeAll';\nimport {isScheduler} from '../util/isScheduler';\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n  observables.unshift(this);\n  return mergeStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface MergeSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  (concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler | number>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | Scheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | Scheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: Scheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <Scheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/merge.ts\n **/","import {Observable} from '../../Observable';\nimport {raceStatic} from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/race.ts\n **/","import {Observable} from '../Observable';\nimport {isArray} from '../util/isArray';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  observables.unshift(this);\n  return raceStatic.apply(this, observables);\n}\n\nexport interface RaceSignature<T> {\n  (...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\n  <R>(...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n          this.add(subscription);\n        }\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/race.ts\n **/","import {Observable} from '../../Observable';\nimport {never as staticNever} from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/never.ts\n **/","import { NeverObservable } from './NeverObservable';\n\nexport const never = NeverObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/never.ts\n **/","import {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {noop} from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/NeverObservable.ts\n **/","/* tslint:disable:no-empty */\nexport function noop() { }\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/noop.ts\n **/","import {Observable} from '../../Observable';\nimport {of as staticOf} from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/of.ts\n **/","import { ArrayObservable } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/of.ts\n **/","import {Observable} from '../../Observable';\r\nimport {onErrorResumeNextStatic} from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/onErrorResumeNext.ts\n **/","import {Observable, ObservableInput} from '../Observable';\r\nimport {FromObservable} from '../observable/FromObservable';\r\nimport {Operator} from '../Operator';\r\nimport {Subscriber} from '../Subscriber';\r\nimport {isArray} from '../util/isArray';\r\nimport {OuterSubscriber} from '../OuterSubscriber';\r\nimport {InnerSubscriber} from '../InnerSubscriber';\r\nimport {subscribeToResult} from '../util/subscribeToResult';\r\n\r\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                       Array<ObservableInput<any>> |\r\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<Observable<any>>>nextSources[0];\r\n  }\r\n\r\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\n/* tslint:disable:max-line-length */\r\nexport interface OnErrorResumeNextSignature<T> {\r\n  <R>(v: ObservableInput<R>): Observable<R>;\r\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\n  <R>(array: ObservableInput<any>[]): Observable<R>;\r\n}\r\n/* tslint:enable:max-line-length */\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\r\n/* tslint:enable:max-line-length */\r\n\r\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                              Array<ObservableInput<any>> |\r\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\r\n  let source: ObservableInput<any> = null;\r\n\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\r\n  }\r\n  source = nextSources.shift();\r\n\r\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\r\n  constructor(private nextSources: Array<ObservableInput<any>>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\r\n  }\r\n}\r\n\r\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\r\n  constructor(protected destination: Subscriber<T>,\r\n              private nextSources: Array<ObservableInput<any>>) {\r\n    super(destination);\r\n  }\r\n\r\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  private subscribeToNextSource(): void {\r\n    const next = this.nextSources.shift();\r\n    if (next) {\r\n      this.add(subscribeToResult(this, next));\r\n    } else {\r\n      this.destination.complete();\r\n    }\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/onErrorResumeNext.ts\n **/","import {Observable} from '../../Observable';\nimport {range as staticRange} from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/range.ts\n **/","import { RangeObservable } from './RangeObservable';\n\nexport const range = RangeObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/range.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * Scheduler and just delivers the notifications synchronously, but may use\n   * an optional Scheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: Scheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: Scheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: Scheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.isUnsubscribed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/RangeObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {using as staticUsing} from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/using.ts\n **/","import { UsingObservable } from './UsingObservable';\n\nexport const using = UsingObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/using.ts\n **/","import {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {AnonymousSubscription, TeardownLogic} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/UsingObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {_throw} from '../../observable/throw';\n\nObservable.throw = _throw;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/throw.ts\n **/","import { ErrorObservable } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/throw.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {TeardownLogic} from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: any, scheduler?: Scheduler) {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ErrorObservable.ts\n **/","import {Observable} from '../../Observable';\nimport {timer as staticTimer} from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/timer.ts\n **/","import { TimerObservable } from './TimerObservable';\n\nexport const timer = TimerObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/timer.ts\n **/","import {isNumeric} from '../util/isNumeric';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {async} from '../scheduler/async';\nimport {isScheduler} from '../util/isScheduler';\nimport {isDate} from '../util/isDate';\nimport {TeardownLogic} from '../Subscription';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` Scheduler to provide a notion of time, but you\n   * may pass any Scheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | Scheduler,\n                scheduler?: Scheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.isUnsubscribed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: Scheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <Scheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/TimerObservable.ts\n **/","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/isDate.ts\n **/","import {Observable} from '../../Observable';\nimport {zip as zipStatic} from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/zip.ts\n **/","import { zipStatic } from '../operator/zip';\n\nexport const zip = zipStatic;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/zip.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {isArray} from '../util/isArray';\nimport {Operator} from '../Operator';\nimport {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {$$iterator} from '../symbol/iterator';\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  observables.unshift(this);\n  return zipStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ZipSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: Array<ObservableInput<T>>): Observable<R>;\n  <TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private index = 0;\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    const index = this.index++;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>,\n              private index: number) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/zip.ts\n **/","import {Observable} from '../../../Observable';\nimport {ajax as staticAjax} from '../../../observable/dom/ajax';\nimport {AjaxCreationMethod} from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/ajax.ts\n **/","import { AjaxObservable, AjaxCreationMethod } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/ajax.ts\n **/","import {root} from '../../util/root';\nimport {tryCatch} from '../../util/tryCatch';\nimport {errorObject} from '../../util/errorObject';\nimport {Observable} from '../../Observable';\nimport {Subscriber} from '../../Subscriber';\nimport {TeardownLogic} from '../../Subscription';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  resultSelector?: <T>(response: AjaxResponse) => T;\n  responseType?: string;\n}\n\nfunction getCORSRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  <T>(urlOrRequest: string | AjaxRequest): Observable<T>;\n  get<T>(url: string, resultSelector?: (response: AjaxResponse) => T, headers?: Object): Observable<T>;\n  post<T>(url: string, body?: any, headers?: Object): Observable<T>;\n  put<T>(url: string, body?: any, headers?: Object): Observable<T>;\n  delete<T>(url: string, headers?: Object): Observable<T>;\n  getJSON<T, R>(url: string, resultSelector?: (data: T) => R, headers?: Object): Observable<R>;\n}\n\nfunction defaultGetResultSelector<T>(response: AjaxResponse): T {\n  return response.response;\n}\n\nexport function ajaxGet<T>(url: string, resultSelector: (response: AjaxResponse) => T = defaultGetResultSelector, headers: Object = null) {\n  return new AjaxObservable<T>({ method: 'GET', url, resultSelector, headers });\n};\n\nexport function ajaxPost<T>(url: string, body?: any, headers?: Object): Observable<T> {\n  return new AjaxObservable<T>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<T>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut<T>(url: string, body?: any, headers?: Object): Observable<T> {\n  return new AjaxObservable<T>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T, R>(url: string, resultSelector?: (data: T) => R, headers?: Object): Observable<R> {\n  const finalResultSelector = resultSelector ? (res: AjaxResponse) => resultSelector(res.response) : (res: AjaxResponse) => res.response;\n  return new AjaxObservable<R>({ method: 'GET', url, responseType: 'json', resultSelector: finalResultSelector, headers });\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function() {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private resultSelector: (response: AjaxResponse) => T;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData)) {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.resultSelector = request.resultSelector;\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { resultSelector, xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    if (resultSelector) {\n      const result = tryCatch(resultSelector)(response);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n      } else {\n        destination.next(result);\n      }\n    } else {\n      destination.next(response);\n    }\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // open XHR first\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // now set up the events\n      this.setupEvents(xhr, request);\n\n      // finally send the request\n      if (body) {\n        xhr.send(body);\n      } else {\n        xhr.send();\n      }\n    }\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    xhr.ontimeout = function xhrTimeout(e) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    (<any>xhr.ontimeout).request = request;\n    (<any>xhr.ontimeout).subscriber = this;\n    (<any>xhr.ontimeout).progressSubscriber = progressSubscriber;\n\n    if (xhr.upload && 'withCredentials' in xhr && root.XDomainRequest) {\n      if (progressSubscriber) {\n        xhr.onprogress = function xhrProgress(e) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        (<any>xhr.onprogress).progressSubscriber = progressSubscriber;\n      }\n\n      xhr.onerror = function xhrError(e) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      (<any>xhr.onerror).request = request;\n      (<any>xhr.onerror).subscriber = this;\n      (<any>xhr.onerror).progressSubscriber = progressSubscriber;\n    }\n\n    xhr.onreadystatechange = function xhrReadyStateChange(e) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    (<any>xhr.onreadystatechange).subscriber = this;\n    (<any>xhr.onreadystatechange).progressSubscriber = progressSubscriber;\n    (<any>xhr.onreadystatechange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4) {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || '');\n        } else {\n          this.response = JSON.parse(xhr.responseText || '');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/AjaxObservable.ts\n **/","import {Observable} from '../../../Observable';\nimport {webSocket as staticWebSocket} from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/observable/dom/webSocket.ts\n **/","import { WebSocketSubject } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/webSocket.ts\n **/","import {Subject, AnonymousSubject} from '../../Subject';\nimport {Subscriber} from '../../Subscriber';\nimport {Observable} from '../../Observable';\nimport {Subscription} from '../../Subscription';\nimport {Operator} from '../../Operator';\nimport {root} from '../../util/root';\nimport {ReplaySubject} from '../../ReplaySubject';\nimport {Observer, NextObserver} from '../../Observer';\nimport {tryCatch} from '../../util/tryCatch';\nimport {errorObject} from '../../util/errorObject';\nimport {assign} from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * @param urlConfigOrSource\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const socket = this.protocol ?\n      new WebSocketCtor(this.url, this.protocol) :\n      new WebSocketCtor(this.url);\n    this.socket = socket;\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    const observer = this._output;\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => observer.error(e);\n\n    socket.onclose = (e: CloseEvent) => {\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n        this.socket = null;\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this.socket = null;\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/dom/WebSocketSubject.ts\n **/","import {Subject} from './Subject';\nimport {Scheduler} from './Scheduler';\nimport {queue} from './scheduler/queue';\nimport {Subscriber} from './Subscriber';\nimport {Subscription} from './Subscription';\nimport {ObserveOnSubscriber} from './operator/observeOn';\n\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: Scheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.isUnsubscribed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/ReplaySubject.ts\n **/","import {QueueScheduler} from './QueueScheduler';\n\nexport const queue = new QueueScheduler();\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/queue.ts\n **/","import {root} from './root';\n\nconst Object = root.Object;\n\nif (typeof (<any>Object).assign != 'function') {\n  (function () {\n    (<any>Object).assign = function assignPolyfill(target: Object, ...sources: Array<Object>): Object {\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      const output = Object(target);\n      const len = sources.length;\n      for (let index = 0; index < len; index++) {\n        let source = sources[index];\n        if (source !== undefined && source !== null) {\n          for (let key in source) {\n            if (source.hasOwnProperty(key)) {\n              output[key] = source[key];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  })();\n}\n\nexport const assign: (target: Object, ...sources: Array<Object>) => Object = Object.assign;\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/assign.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {buffer, BufferSignature} from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: BufferSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/buffer.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nexport interface BufferSignature<T> {\n  (closingNotifier: Observable<any>): Observable<T[]>;\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/buffer.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferCount, BufferCountSignature} from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: BufferCountSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferCount.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nexport interface BufferCountSignature<T> {\n  (bufferSize: number, startBufferEvery?: number): Observable<T[]>;\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [[]];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = (this.count += 1);\n    const destination = this.destination;\n    const bufferSize = this.bufferSize;\n    const startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n    const buffers = this.buffers;\n    const len = buffers.length;\n    let remove = -1;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = 0; i < len; i++) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        remove = i;\n        destination.next(buffer);\n      }\n    }\n\n    if (remove !== -1) {\n      buffers.splice(remove, 1);\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferCount.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferTime, BufferTimeSignature} from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: BufferTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferTime.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {Action} from '../scheduler/Action';\nimport {async} from '../scheduler/async';\nimport {isScheduler} from '../util/isScheduler';\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: Scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nexport interface BufferTimeSignature<T> {\n  (bufferTimeSpan: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: Scheduler): Observable<T[]>;\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: Scheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.isUnsubscribed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = (<any>this).schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.isUnsubscribed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferToggle, BufferToggleSignature} from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: BufferToggleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferToggle.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscription} from '../Subscription';\n\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface BufferToggleSignature<T> {\n  <O>(openings: SubscribableOrPromise<O>, closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]>;\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.isUnsubscribed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferToggle.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {bufferWhen, BufferWhenSignature} from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: BufferWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/bufferWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nexport interface BufferWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<T[]>;\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/bufferWhen.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {cache, CacheSignature} from '../../operator/cache';\n\nObservable.prototype.cache = cache;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    cache: CacheSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/cache.ts\n **/","import {Observable} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {ReplaySubject} from '../ReplaySubject';\nimport {Observer} from '../Observer';\nimport {Subscription} from '../Subscription';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {Observable<any>}\n * @method cache\n * @owner Observable\n */\nexport function cache<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                         windowTime: number = Number.POSITIVE_INFINITY,\n                         scheduler?: Scheduler): Observable<T> {\n  let subject: ReplaySubject<T>;\n  let source = this;\n  let refs = 0;\n  let outerSub: Subscription;\n\n  const getSubject = () => {\n    subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n    return subject;\n  };\n\n  return new Observable<T>((observer: Observer<T>) => {\n    if (!subject) {\n      subject = getSubject();\n      outerSub = source.subscribe(\n        (value: T) => subject.next(value),\n        (err: any) => {\n          let s = subject;\n          subject = null;\n          s.error(err);\n        },\n        () => subject.complete()\n      );\n    }\n\n    refs++;\n\n    if (!subject) {\n      subject = getSubject();\n    }\n    let innerSub = subject.subscribe(observer);\n\n    return () => {\n      refs--;\n      if (innerSub) {\n        innerSub.unsubscribe();\n      }\n      if (refs === 0) {\n        outerSub.unsubscribe();\n      }\n    };\n  });\n}\n\nexport interface CacheSignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/cache.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {_catch, CatchSignature} from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: CatchSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/catch.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @owner Observable\n */\nexport function _catch<T, R>(selector: (err: any, caught: Observable<T>) => Observable<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nexport interface CatchSignature<T> {\n  (selector: (err: any, caught: Observable<T>) => Observable<T>): Observable<T>;\n  <R>(selector: (err: any, caught: Observable<T>) => Observable<R>): Observable<R>;\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<any>;\n\n  constructor(private selector: (err: any, caught: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<any>) => Observable<any>,\n              private caught: Observable<any>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this._innerSub(result);\n    }\n  }\n\n  private _innerSub(result: Observable<any>) {\n    this.unsubscribe();\n    (<any>this.destination).remove(this);\n    result.subscribe(this.destination);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/catch.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {combineAll, CombineAllSignature} from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: CombineAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineAll.ts\n **/","import {CombineLatestOperator} from './combineLatest';\nimport {Observable} from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n\nexport interface CombineAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/combineAll.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {combineLatest, CombineLatestSignature} from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: CombineLatestSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/combineLatest.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concat, ConcatSignature} from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: ConcatSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concat.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concatAll, ConcatAllSignature} from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: ConcatAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatAll.ts\n **/","import {Subscribable} from '../Observable';\nimport {MergeAllOperator} from './mergeAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): T {\n  return this.lift(new MergeAllOperator<T>(1));\n}\n\nexport interface ConcatAllSignature<T> {\n  (): T;\n  <R>(): Subscribable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concatAll.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concatMap, ConcatMapSignature} from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: ConcatMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMap.ts\n **/","import {MergeMapOperator} from './mergeMap';\nimport {Observable, ObservableInput} from '../Observable';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n\nexport interface ConcatMapSignature<T> {\n  <R>(project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concatMap.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source._subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {concatMapTo, ConcatMapToSignature} from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: ConcatMapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/concatMapTo.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {MergeMapToOperator} from './mergeMapTo';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n\nexport interface ConcatMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/concatMapTo.ts\n **/","import {Observable, ObservableInput} from '../Observable';\nimport {Operator} from '../Operator';\nimport {PartialObserver} from '../Observer';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapToSignature<T> {\n  <R>(observable: ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeMapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {count, CountSignature} from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: CountSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/count.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Observer} from '../Observer';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nexport interface CountSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number>;\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/count.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {dematerialize, DematerializeSignature} from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: DematerializeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/dematerialize.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nexport interface DematerializeSignature<T> {\n  <R>(): Observable<R>;\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source._subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/dematerialize.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {debounce, DebounceSignature} from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: DebounceSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounce.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nexport interface DebounceSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.isUnsubscribed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/debounce.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {debounceTime, DebounceTimeSignature} from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: DebounceTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/debounceTime.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {Subscription} from '../Subscription';\nimport {async} from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nexport interface DebounceTimeSignature<T> {\n  (dueTime: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/debounceTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {defaultIfEmpty, DefaultIfEmptySignature} from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: DefaultIfEmptySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/defaultIfEmpty.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nexport interface DefaultIfEmptySignature<T> {\n  (defaultValue?: T): Observable<T>;\n  <R>(defaultValue?: R): Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/defaultIfEmpty.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {delay, DelaySignature} from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: DelaySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/delay.ts\n **/","import {async} from '../scheduler/async';\nimport {isDate} from '../util/isDate';\nimport {Operator} from '../Operator';\nimport {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\nimport {Observable} from '../Observable';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The Scheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: Scheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nexport interface DelaySignature<T> {\n  (delay: number | Date, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: Scheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/delay.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {delayWhen, DelayWhenSignature} from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: DelayWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/delayWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nexport interface DelayWhenSignature<T> {\n  (delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): Observable<T>;\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/delayWhen.ts\n **/","import {Observable} from '../../Observable';\nimport {distinct, DistinctSignature} from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: DistinctSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinct.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T>(compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(compare, flushes));\n}\n\nexport interface DistinctSignature<T> {\n  (compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n\nclass DistinctOperator<T> implements Operator<T, T> {\n  constructor(private compare: (x: T, y: T) => boolean, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T> extends OuterSubscriber<T, T> {\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>, compare: (x: T, y: T) => boolean, flushes: Observable<any>) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.length = 0;\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    let found = false;\n    const values = this.values;\n    const len = values.length;\n    try {\n      for (let i = 0; i < len; i++) {\n        if (this.compare(values[i], value)) {\n          found = true;\n          return;\n        }\n      }\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.values.push(value);\n    this.destination.next(value);\n  }\n\n  private compare(x: T, y: T): boolean {\n    return x === y;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinct.ts\n **/","import {Observable} from '../../Observable';\nimport {distinctKey, DistinctKeySignature} from '../../operator/distinctKey';\n\nObservable.prototype.distinctKey = distinctKey;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctKey: DistinctKeySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctKey.ts\n **/","import {distinct} from './distinct';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctKey\n * @owner Observable\n */\nexport function distinctKey<T>(key: string, compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return distinct.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  }, flushes);\n}\n\nexport interface DistinctKeySignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinctKey.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {distinctUntilChanged, DistinctUntilChangedSignature} from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: DistinctUntilChangedSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilChanged.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nexport interface DistinctUntilChangedSignature<T> {\n (compare?: (x: T, y: T) => boolean): Observable<T>;\n <K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilChanged.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {distinctUntilKeyChanged, DistinctUntilKeyChangedSignature} from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: DistinctUntilKeyChangedSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/distinctUntilKeyChanged.ts\n **/","import {distinctUntilChanged} from './distinctUntilChanged';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n\nexport interface DistinctUntilKeyChangedSignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/distinctUntilKeyChanged.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {_do, DoSignature} from '../../operator/do';\n\nObservable.prototype.do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: DoSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/do.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {PartialObserver} from '../Observer';\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nexport interface DoSignature<T> {\n  (next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\n  (observer: PartialObserver<T>): Observable<T>;\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/do.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {exhaust, SwitchFirstSignature} from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: SwitchFirstSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaust.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nexport interface SwitchFirstSignature<T> {\n  (): T;\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/exhaust.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {exhaustMap, SwitchFirstMapSignature} from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: SwitchFirstMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/exhaustMap.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nexport interface SwitchFirstMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/exhaustMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {expand, ExpandSignature} from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: ExpandSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/expand.ts\n **/","import {Observable} from '../Observable';\nimport {Scheduler} from '../Scheduler';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable where for each item in the source Observable, the supplied function is applied to each item,\n * resulting in a new value to then be applied again with the function.\n * @param {function} project the function for projecting the next emitted item of the Observable.\n * @param {number} [concurrent] the max number of observables that can be created concurrently. defaults to infinity.\n * @param {Scheduler} [scheduler] The Scheduler to use for managing the expansions.\n * @return {Observable} an Observable containing the expansions of the source Observable.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: Scheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport interface ExpandSignature<T> {\n  (project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.isUnsubscribed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/expand.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {elementAt, ElementAtSignature} from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: ElementAtSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/elementAt.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {ArgumentOutOfRangeError} from '../util/ArgumentOutOfRangeError';\nimport {Observable} from '../Observable';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nexport interface ElementAtSignature<T> {\n  (index: number, defaultValue?: T): Observable<T>;\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/elementAt.ts\n **/","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/ArgumentOutOfRangeError.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {filter, FilterSignature} from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: FilterSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/filter.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctKey}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nexport interface FilterSignature<T> {\n  (predicate: (value: T, index: number) => boolean, thisArg?: any): Observable<T>;\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/filter.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {_finally, FinallySignature} from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: FinallySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/finally.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nexport interface FinallySignature<T> {\n  (callback: () => void): Observable<T>;\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/finally.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {find, FindSignature} from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: FindSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/find.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport interface FindSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<T>;\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/find.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {findIndex, FindIndexSignature} from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: FindIndexSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/findIndex.ts\n **/","import {Observable} from '../Observable';\nimport {FindValueOperator} from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return this.lift(new FindValueOperator(predicate, this, true, thisArg));\n}\n\nexport interface FindIndexSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<number>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/findIndex.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {first, FirstSignature} from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: FirstSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/first.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {EmptyError} from '../util/EmptyError';\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface FirstSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    destination.next(value);\n    destination.complete();\n    this.hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/first.ts\n **/","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/EmptyError.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {groupBy, GroupBySignature} from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: GroupBySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/groupBy.ts\n **/","import {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subject} from '../Subject';\nimport {Map} from '../util/Map';\nimport {FastMap} from '../util/FastMap';\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: (value: T) => R,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n}\n\n/* tslint:disable:max-line-length */\nexport interface GroupBySignature<T> {\n  <K>(keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\n  <K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\n  <K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\n}\n/* tslint:enable:max-line-length */\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  isUnsubscribed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(public source: Observable<T>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source._subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      groups.set(key, group = new Subject<R>());\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.isUnsubscribed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.isUnsubscribed && !this.attemptedToUnsubscribe) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.isUnsubscribed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.isUnsubscribed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.isUnsubscribed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.isUnsubscribed && !this.isUnsubscribed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/groupBy.ts\n **/","import {root} from './root';\nimport {MapPolyfill} from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/Map.ts\n **/","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/MapPolyfill.ts\n **/","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/FastMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {ignoreElements, IgnoreElementsSignature} from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: IgnoreElementsSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/ignoreElements.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {noop} from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nexport interface IgnoreElementsSignature<T> {\n  (): Observable<T>;\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/ignoreElements.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {isEmpty, IsEmptySignature} from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: IsEmptySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/isEmpty.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty(): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nexport interface IsEmptySignature<T> {\n  (): Observable<boolean>;\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/isEmpty.ts\n **/","import {Observable} from '../../Observable';\nimport {audit, AuditSignature} from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: AuditSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/audit.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscription} from '../Subscription';\n\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nexport interface AuditSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T>;\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/audit.ts\n **/","import {Observable} from '../../Observable';\nimport {auditTime, AuditTimeSignature} from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: AuditTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/auditTime.ts\n **/","import {async} from '../scheduler/async';\nimport {Operator} from '../Operator';\nimport {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nexport interface AuditTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/auditTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {last, LastSignature} from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: LastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/last.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {EmptyError} from '../util/EmptyError';\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface LastSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/last.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {letProto, LetSignature} from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: LetSignature<T>;\n    letBind: LetSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/let.ts\n **/","import {Observable} from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n\nexport interface LetSignature<T> {\n  <R>(func: (selector: Observable<T>) => Observable<R>): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/let.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {every, EverySignature} from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: EverySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/every.ts\n **/","import {Operator} from '../Operator';\nimport {Observer} from '../Observer';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nexport interface EverySignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<boolean>;\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/every.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {map, MapSignature} from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: MapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/map.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport interface MapSignature<T> {\n  <R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R>;\n}\n\nclass MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/map.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mapTo, MapToSignature} from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: MapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mapTo.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nexport interface MapToSignature<T> {\n  <R>(value: R): Observable<R>;\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {materialize, MaterializeSignature} from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: MaterializeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/materialize.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Notification} from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nexport interface MaterializeSignature<T> {\n  (): Observable<Notification<T>>;\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source._subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/materialize.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {max, MaxSignature} from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: MaxSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/max.ts\n **/","import {Observable} from '../Observable';\nimport {ReduceOperator} from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the largest number.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest number.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => T): Observable<T> {\n  const max: typeof comparer = (typeof comparer === 'function')\n    ? comparer\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n\nexport interface MaxSignature<T> {\n  (comparer?: (x: T, y: T) => T): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/max.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T) => R, seed?: R): Observable<R> {\n  return this.lift(new ReduceOperator(accumulator, seed));\n}\n\nexport interface ReduceSignature<T> {\n  <R>(accumulator: (acc: R, value: T) => R, seed?: R): Observable<R>;\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n\n  constructor(private accumulator: (acc: R, value: T) => R, private seed?: R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n\n  acc: T | R;\n  hasSeed: boolean;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => R,\n              seed?: R) {\n    super(destination);\n    this.acc = seed;\n    this.accumulator = accumulator;\n    this.hasSeed = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/reduce.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {merge, MergeSignature} from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: MergeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/merge.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeAll, MergeAllSignature} from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: MergeAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeAll.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeMap, MergeMapSignature} from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: MergeMapSignature<T>;\n    mergeMap: MergeMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeMapTo, MergeMapToSignature} from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: MergeMapToSignature<T>;\n    mergeMapTo: MergeMapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeMapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {mergeScan, MergeScanSignature} from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: MergeScanSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/mergeScan.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\n\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(project: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\n\nexport interface MergeScanSignature<T> {\n  <R>(project: (acc: R, value: T) => Observable<R>, seed: R, concurrent?: number): Observable<R>;\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeScanSubscriber(\n      subscriber, this.project, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.project)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/mergeScan.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {min, MinSignature} from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: MinSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/min.ts\n **/","import {Observable} from '../Observable';\nimport {ReduceOperator} from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => T): Observable<T> {\n  const min: typeof comparer = (typeof comparer === 'function')\n    ? comparer\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n\nexport interface MinSignature<T> {\n  (comparer?: (x: T, y: T) => T): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/min.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {multicast, MulticastSignature} from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: MulticastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/multicast.ts\n **/","import {Subject} from '../Subject';\nimport {Observable} from '../Observable';\nimport {MulticastObservable} from '../observable/MulticastObservable';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  return !selector ?\n    new ConnectableObservable(this, subjectFactory) :\n    new MulticastObservable(this, subjectFactory, selector);\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface MulticastSignature<T> {\n  (subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\n  (SubjectFactory: () => Subject<T>, selector?: selector<T>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/multicast.ts\n **/","import {Subject} from '../Subject';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\nexport class MulticastObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>,\n              private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { selector, source } = this;\n    const connectable = new ConnectableObservable(source, this.subjectFactory);\n    const subscription = selector(connectable).subscribe(subscriber);\n    subscription.add(connectable.connect());\n    return subscription;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/MulticastObservable.ts\n **/","import {Subject, SubjectSubscriber} from '../Subject';\nimport {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.isUnsubscribed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source._subscribe(refCounter);\n\n    if (!refCounter.isUnsubscribed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/ConnectableObservable.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {observeOn, ObserveOnSignature} from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: ObserveOnSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/observeOn.ts\n **/","import {Observable} from '../../Observable';\r\nimport {onErrorResumeNext, OnErrorResumeNextSignature} from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: OnErrorResumeNextSignature<T>;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/onErrorResumeNext.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {pairwise, PairwiseSignature} from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: PairwiseSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/pairwise.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nexport interface PairwiseSignature<T> {\n  (): Observable<[T, T]>;\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source._subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/pairwise.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {partition, PartitionSignature} from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: PartitionSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/partition.ts\n **/","import {not} from '../util/not';\nimport {filter} from './filter';\nimport {Observable} from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n\nexport interface PartitionSignature<T> {\n  (predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>];\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/partition.ts\n **/","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/not.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {pluck, PluckSignature} from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: PluckSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/pluck.ts\n **/","import {Observable} from '../Observable';\nimport {map} from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<R>(...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('List of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nexport interface PluckSignature<T> {\n  <R>(...properties: string[]): Observable<R>;\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/pluck.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publish, PublishSignature} from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: PublishSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publish.ts\n **/","import {Subject} from '../Subject';\nimport {Observable} from '../Observable';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface PublishSignature<T> {\n  (): ConnectableObservable<T>;\n  (selector: selector<T>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publish.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publishBehavior, PublishBehaviorSignature} from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: PublishBehaviorSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishBehavior.ts\n **/","import {BehaviorSubject} from '../BehaviorSubject';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n\nexport interface PublishBehaviorSignature<T> {\n  (value: T): ConnectableObservable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publishBehavior.ts\n **/","import {Subject} from './Subject';\nimport {Subscriber} from './Subscriber';\nimport {Subscription, ISubscription} from './Subscription';\nimport {throwError} from './util/throwError';\nimport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throwError(this.thrownError);\n    } else if (this.isUnsubscribed) {\n      throwError(new ObjectUnsubscribedError());\n    } else {\n      return this._value;\n    }\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription> subscription).isUnsubscribed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/BehaviorSubject.ts\n **/","export function throwError(e: any) { throw e; }\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/throwError.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publishReplay, PublishReplaySignature} from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: PublishReplaySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishReplay.ts\n **/","import {ReplaySubject} from '../ReplaySubject';\nimport {Scheduler} from '../Scheduler';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: Scheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n\nexport interface PublishReplaySignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): ConnectableObservable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publishReplay.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {publishLast, PublishLastSignature} from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: PublishLastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/publishLast.ts\n **/","import {AsyncSubject} from '../AsyncSubject';\nimport {multicast} from './multicast';\nimport {ConnectableObservable} from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n\nexport interface PublishLastSignature<T> {\n  (): ConnectableObservable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/publishLast.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {race, RaceSignature} from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: RaceSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/race.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {reduce, ReduceSignature} from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: ReduceSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/reduce.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {repeat, RepeatSignature} from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: RepeatSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/repeat.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {EmptyObservable} from '../observable/EmptyObservable';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular Scheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nexport interface RepeatSignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.isUnsubscribed = false;\n      source.subscribe(this);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/repeat.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {retry, RetrySignature} from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: RetrySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/retry.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nexport interface RetrySignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.isUnsubscribed = false;\n      source.subscribe(this);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/retry.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {retryWhen, RetryWhenSignature} from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: RetryWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/retryWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\nimport {Subscription} from '../Subscription';\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nexport interface RetryWhenSignature<T> {\n  (notifier: (errors: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.isUnsubscribed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.isUnsubscribed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/retryWhen.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {sample, SampleSignature} from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: SampleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/sample.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nexport interface SampleSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<any>, notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/sample.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {sampleTime, SampleTimeSignature} from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: SampleTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/sampleTime.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {async} from '../scheduler/async';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nexport interface SampleTimeSignature<T> {\n  (period: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  (<any>this).schedule(state, period);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/sampleTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {scan, ScanSignature} from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: ScanSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/scan.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  return this.lift(new ScanOperator(accumulator, seed));\n}\n\nexport interface ScanSignature<T> {\n  <R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R>;\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private accumulatorSet: boolean = false;\n  private _seed: T | R;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.accumulatorSet = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, seed?: T|R) {\n    super(destination);\n    this.seed = seed;\n    this.accumulatorSet = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T): void {\n    if (!this.accumulatorSet) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/scan.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {share, ShareSignature} from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: ShareSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/share.ts\n **/","import {Observable} from '../Observable';\nimport {multicast} from './multicast';\nimport {Subject} from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n\nexport interface ShareSignature<T> {\n  (): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/share.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {single, SingleSignature} from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: SingleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/single.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observer} from '../Observer';\nimport {EmptyError} from '../util/EmptyError';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nexport interface SingleSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/single.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {skip, SkipSignature} from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: SkipSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/skip.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nexport interface SkipSignature<T> {\n  (total: number): Observable<T>;\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/skip.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {skipUntil, SkipUntilSignature} from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: SkipUntilSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipUntil.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nexport interface SkipUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/skipUntil.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {skipWhile, SkipWhileSignature} from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: SkipWhileSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/skipWhile.ts\n **/","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nexport interface SkipWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/skipWhile.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {startWith, StartWithSignature} from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: StartWithSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/startWith.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {ArrayObservable} from '../observable/ArrayObservable';\nimport {ScalarObservable} from '../observable/ScalarObservable';\nimport {EmptyObservable} from '../observable/EmptyObservable';\nimport {concatStatic} from './concat';\nimport {isScheduler} from '../util/isScheduler';\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | Scheduler>): Observable<T> {\n  let scheduler = <Scheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n\nexport interface StartWithSignature<T> {\n  (v1: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: Scheduler): Observable<T>;\n  (...array: Array<T | Scheduler>): Observable<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/startWith.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {subscribeOn, SubscribeOnSignature} from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: SubscribeOnSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/subscribeOn.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\nimport {SubscribeOnObservable} from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the Scheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return new SubscribeOnObservable<T>(this, delay, scheduler);\n}\n\nexport interface SubscribeOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/subscribeOn.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\nimport {asap} from '../scheduler/asap';\nimport {isNumeric} from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: Scheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return source.subscribe(subscriber);\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: Scheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/observable/SubscribeOnObservable.ts\n **/","import {AsapScheduler} from './AsapScheduler';\n\nexport const asap = new AsapScheduler();\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/asap.ts\n **/","import {Action} from './Action';\nimport {AsapAction} from './AsapAction';\nimport {Subscription} from '../Subscription';\nimport {QueueScheduler} from './QueueScheduler';\n\nexport class AsapScheduler extends QueueScheduler {\n  scheduleNow<T>(work: (x?: T) => Subscription, state?: T): Action<T> {\n    return new AsapAction(this, work).schedule(state);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapScheduler.ts\n **/","import {Action} from './Action';\nimport {Immediate} from '../util/Immediate';\nimport {FutureAction} from './FutureAction';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends FutureAction<T> {\n\n  protected _schedule(state?: T, delay: number = 0): Action<T> {\n    if (delay > 0) {\n      return super._schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    const {scheduler} = this;\n    scheduler.actions.push(this);\n    if (!scheduler.scheduledId) {\n      scheduler.scheduledId = Immediate.setImmediate(() => {\n        scheduler.scheduledId = null;\n        scheduler.flush();\n      });\n    }\n    return this;\n  }\n\n  protected _unsubscribe(): void {\n\n    const {scheduler} = this;\n    const {scheduledId, actions} = scheduler;\n\n    super._unsubscribe();\n\n    if (actions.length === 0) {\n      scheduler.active = false;\n      if (scheduledId != null) {\n        scheduler.scheduledId = null;\n        Immediate.clearImmediate(scheduledId);\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AsapAction.ts\n **/","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport { root } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/Immediate.ts\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/timers-browserify/main.js\n ** module id = 287\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 288\n ** module chunks = 0\n **/","\nimport {Observable} from '../../Observable';\nimport {_switch, SwitchSignature} from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: SwitchSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/switch.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(): T {\n  return this.lift(new SwitchOperator());\n}\n\nexport interface SwitchSignature<T> {\n  (): T;\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/switch.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {switchMap, SwitchMapSignature} from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: SwitchMapSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMap.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nexport interface SwitchMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.isUnsubscribed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/switchMap.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {switchMapTo, SwitchMapToSignature} from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: SwitchMapToSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/switchMapTo.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, ObservableInput} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nexport interface SwitchMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.isUnsubscribed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/switchMapTo.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {take, TakeSignature} from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: TakeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/take.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {ArgumentOutOfRangeError} from '../util/ArgumentOutOfRangeError';\nimport {EmptyObservable} from '../observable/EmptyObservable';\nimport {Observable} from '../Observable';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nexport interface TakeSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    if (++this.count <= total) {\n      this.destination.next(value);\n      if (this.count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/take.ts\n **/","import {Observable} from '../../Observable';\nimport {takeLast, TakeLastSignature} from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: TakeLastSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeLast.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {ArgumentOutOfRangeError} from '../util/ArgumentOutOfRangeError';\nimport {EmptyObservable} from '../observable/EmptyObservable';\nimport {Observable} from '../Observable';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nexport interface TakeLastSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/takeLast.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {takeUntil, TakeUntilSignature} from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: TakeUntilSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeUntil.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nexport interface TakeUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/takeUntil.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {takeWhile, TakeWhileSignature} from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: TakeWhileSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/takeWhile.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nexport interface TakeWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/takeWhile.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {throttle, ThrottleSignature} from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: ThrottleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttle.ts\n **/","import {Operator} from '../Operator';\nimport {Observable, SubscribableOrPromise} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nexport interface ThrottleSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/throttle.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {throttleTime, ThrottleTimeSignature} from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: ThrottleTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/throttleTime.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {Subscription} from '../Subscription';\nimport {async} from '../scheduler/async';\nimport {Observable} from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nexport interface ThrottleTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/throttleTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {timeInterval, TimeIntervalSignature} from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: TimeIntervalSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeInterval.ts\n **/","import {Operator} from '../Operator';\nimport {Observable} from '../Observable';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {async} from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(scheduler: Scheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport interface TimeIntervalSignature<T> {\n  (scheduler?: Scheduler): Observable<TimeInterval<T>>;\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: Scheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: Scheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timeInterval.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {timeout, TimeoutSignature} from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: TimeoutSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeout.ts\n **/","import {async} from '../scheduler/async';\nimport {isDate} from '../util/isDate';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {Observable} from '../Observable';\n\n/**\n * @param due\n * @param errorToSend\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           errorToSend: any = null,\n                           scheduler: Scheduler = async): Observable<T> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n}\n\nexport interface TimeoutSignature<T> {\n  (due: number | Date, errorToSend?: any, scheduler?: Scheduler): Observable<T>;\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout() {\n    this.error(this.errorToSend || new Error('timeout'));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timeout.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {timeoutWith, TimeoutWithSignature} from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: TimeoutWithSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timeoutWith.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Scheduler} from '../Scheduler';\nimport {async} from '../scheduler/async';\nimport {Subscription} from '../Subscription';\nimport {Observable} from '../Observable';\nimport {isDate} from '../util/isDate';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: Observable<R>,\n                                  scheduler: Scheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nexport interface TimeoutWithSignature<T> {\n  (due: number | Date, withObservable: Observable<T>, scheduler?: Scheduler): Observable<T>;\n  <R>(due: number | Date, withObservable: Observable<R>, scheduler?: Scheduler): Observable<T | R>;\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: Observable<any>,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: Observable<any>,\n              private scheduler: Scheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.isUnsubscribed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timeoutWith.ts\n **/","import {Observable} from '../../Observable';\r\nimport {timestamp, TimestampSignature} from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: TimestampSignature<T>;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/timestamp.ts\n **/","import {Operator} from '../Operator';\r\nimport {Observable} from '../Observable';\r\nimport {Subscriber} from '../Subscriber';\r\nimport {Scheduler} from '../Scheduler';\r\nimport {async} from '../scheduler/async';\r\n\r\n/**\r\n * @param scheduler\r\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\r\n * @method timestamp\r\n * @owner Observable\r\n */\r\nexport function timestamp<T>(scheduler: Scheduler = async): Observable<Timestamp<T>> {\r\n  return this.lift(new TimestampOperator(scheduler));\r\n}\r\n\r\nexport interface TimestampSignature<T> {\r\n  (scheduler?: Scheduler): Observable<Timestamp<T>>;\r\n}\r\n\r\nexport class Timestamp<T> {\r\n  constructor(public value: T, public timestamp: number) {\r\n  }\r\n};\r\n\r\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\r\n  constructor(private scheduler: Scheduler) {\r\n  }\r\n\r\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\r\n    return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\r\n  }\r\n}\r\n\r\nclass TimestampSubscriber<T> extends Subscriber<T> {\r\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: Scheduler) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const now = this.scheduler.now();\r\n\r\n    this.destination.next(new Timestamp(value, now));\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/timestamp.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {toArray, ToArraySignature} from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: ToArraySignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/toArray.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nexport interface ToArraySignature<T> {\n  (): Observable<T[]>;\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/toArray.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {toPromise, ToPromiseSignature} from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: ToPromiseSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/toPromise.ts\n **/","import {root} from '../util/root';\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n\nexport interface ToPromiseSignature<T> {\n  (): Promise<T>;\n  (PromiseCtor: typeof Promise): Promise<T>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/toPromise.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {window, WindowSignature} from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: WindowSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/window.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nexport interface WindowSignature<T> {\n  (windowBoundaries: Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source._subscribe(windowSubscriber);\n    if (!sourceSubscription.isUnsubscribed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/window.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowCount, WindowCountSignature} from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: WindowCountSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowCount.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nexport interface WindowCountSignature<T> {\n  (windowSize: number, startWindowEvery?: number): Observable<Observable<T>>;\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.isUnsubscribed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.isUnsubscribed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.isUnsubscribed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.isUnsubscribed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.isUnsubscribed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowCount.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowTime, WindowTimeSignature} from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: WindowTimeSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowTime.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {Action} from '../scheduler/Action';\nimport {async} from '../scheduler/async';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: Scheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nexport interface WindowTimeSignature<T> {\n  (windowTimeSpan: number, windowCreationInterval?: number, scheduler?: Scheduler): Observable<Observable<T>>;\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: Scheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      let window = this.openWindow();\n      const closeState = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      let window = this.openWindow();\n      const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T) {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.isUnsubscribed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.isUnsubscribed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  closeWindow(window: Subject<T>) {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\ninterface TimeSpanOnlyState<T> {\n  window: Subject<any>;\n  windowTimeSpan: number;\n  subscriber: WindowTimeSubscriber<T>;\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(state: TimeSpanOnlyState<T>) {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    window.complete();\n  }\n  state.window = subscriber.openWindow();\n  (<any>this).schedule(state, windowTimeSpan);\n}\n\ninterface Context<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface DispatchArg<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: Context<T>;\n}\n\nfunction dispatchWindowCreation<T>(state: CreationState<T>) {\n  let { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  let window = subscriber.openWindow();\n  let action = <Action<CreationState<T>>>this;\n  let context: Context<T> = { action, subscription: <any>null };\n  const timeSpanState: DispatchArg<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, window, context } = arg;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowTime.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowToggle, WindowToggleSignature} from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: WindowToggleSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowToggle.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\nimport {Subscription} from '../Subscription';\n\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface WindowToggleSignature<T> {\n  <O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.isUnsubscribed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowToggle.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {windowWhen, WindowWhenSignature} from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: WindowWhenSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/windowWhen.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\nimport {Subject} from '../Subject';\nimport {Subscription} from '../Subscription';\n\nimport {tryCatch} from '../util/tryCatch';\nimport {errorObject} from '../util/errorObject';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nexport interface WindowWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/windowWhen.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {withLatestFrom, WithLatestFromSignature} from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: WithLatestFromSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/withLatestFrom.ts\n **/","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable, ObservableInput} from '../Observable';\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {InnerSubscriber} from '../InnerSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface WithLatestFromSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<any>[]): Observable<R>;\n  <R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/withLatestFrom.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {zipProto, ZipSignature} from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: ZipSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/zip.ts\n **/","\nimport {Observable} from '../../Observable';\nimport {zipAll, ZipAllSignature} from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: ZipAllSignature<T>;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/add/operator/zipAll.ts\n **/","import {ZipOperator} from './zip';\nimport {Observable} from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n\nexport interface ZipAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/operator/zipAll.ts\n **/","import {Subscriber} from './Subscriber';\n\nexport class Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new Subscriber<T>(subscriber));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/Operator.ts\n **/","import {Observable} from '../Observable';\nimport {VirtualTimeScheduler} from '../scheduler/VirtualTimeScheduler';\nimport {Notification} from '../Notification';\nimport {Subject} from '../Subject';\nimport {ColdObservable} from './ColdObservable';\nimport {HotObservable} from './HotObservable';\nimport {TestMessage} from './TestMessage';\nimport {SubscriptionLog} from './SubscriptionLog';\nimport {Subscription} from '../Subscription';\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super();\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('Marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('Cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('Cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('Hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('Found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('Found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('There can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('Conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/TestScheduler.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {Subscription} from '../Subscription';\nimport {Action} from './Action';\n\nexport class VirtualTimeScheduler implements Scheduler {\n  actions: Action<any>[] = []; // XXX: use `any` to remove type param `T` from `VirtualTimeScheduler`.\n  active: boolean = false;\n  scheduledId: number = null;\n  index: number = 0;\n  sorted: boolean = false;\n  frame: number = 0;\n  maxFrames: number = 750;\n\n  protected static frameTimeFactor: number = 10;\n\n  now() {\n    return this.frame;\n  }\n\n  flush() {\n    const actions = this.actions;\n    const maxFrames = this.maxFrames;\n    while (actions.length > 0) {\n      let action = actions.shift();\n      this.frame = action.delay;\n      if (this.frame <= maxFrames) {\n        action.execute();\n        if (action.error) {\n          actions.length = 0;\n          this.frame = 0;\n          throw action.error;\n        }\n      } else {\n        break;\n      }\n    }\n    actions.length = 0;\n    this.frame = 0;\n  }\n\n  addAction<T>(action: Action<T>): void {\n    const actions: Action<T>[] = this.actions;\n\n    actions.push(action);\n\n    actions.sort((a: VirtualAction<T>, b: VirtualAction<T>) => {\n      if (a.delay === b.delay) {\n        if (a.index === b.index) {\n          return 0;\n        } else if (a.index > b.index) {\n          return 1;\n        } else {\n          return -1;\n        }\n      } else if (a.delay > b.delay) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n  }\n\n  schedule<T>(work: (x?: T) => Subscription | void, delay: number = 0, state?: T): Subscription {\n    this.sorted = false;\n    return new VirtualAction(this, work, this.index++).schedule(state, delay);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass VirtualAction<T> extends Subscription implements Action<T> {\n  state: T;\n  delay: number;\n  calls = 0;\n  error: any;\n\n  constructor(public scheduler: VirtualTimeScheduler,\n              public work: (x?: T) => Subscription | void,\n              public index: number) {\n    super();\n  }\n\n  schedule(state?: T, delay: number = 0): VirtualAction<T> {\n    if (this.isUnsubscribed) {\n      return this;\n    }\n    const scheduler = this.scheduler;\n    let action: Action<T> = null;\n    if (this.calls++ === 0) {\n      // the action is not being rescheduled.\n      action = this;\n    } else {\n      // the action is being rescheduled, and we can't mutate the one in the actions list\n      // in the scheduler, so we'll create a new one.\n      action = new VirtualAction(scheduler, this.work, scheduler.index += 1);\n      this.add(action);\n    }\n    action.state = state;\n    action.delay = scheduler.frame + delay;\n    scheduler.addAction(action);\n    return this;\n  }\n\n  execute() {\n    if (this.isUnsubscribed) {\n      throw new Error('How did did we execute a canceled Action?');\n    }\n    this.work(this.state);\n  }\n\n  unsubscribe() {\n    const actions = this.scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work = void 0;\n    this.state = void 0;\n    this.scheduler = void 0;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    super.unsubscribe();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/VirtualTimeScheduler.ts\n **/","import {Observable} from '../Observable';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {TestMessage} from './TestMessage';\nimport {SubscriptionLog} from './SubscriptionLog';\nimport {SubscriptionLoggable} from './SubscriptionLoggable';\nimport {applyMixins} from '../util/applyMixins';\nimport {Subscriber} from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/ColdObservable.ts\n **/","import {Scheduler} from '../Scheduler';\nimport {SubscriptionLog} from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLoggable.ts\n **/","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/SubscriptionLog.ts\n **/","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/applyMixins.ts\n **/","import {Subject} from '../Subject';\nimport {Subscriber} from '../Subscriber';\nimport {Subscription} from '../Subscription';\nimport {Scheduler} from '../Scheduler';\nimport {TestMessage} from './TestMessage';\nimport {SubscriptionLog} from './SubscriptionLog';\nimport {SubscriptionLoggable} from './SubscriptionLoggable';\nimport {applyMixins} from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/testing/HotObservable.ts\n **/","import {AnimationFrameScheduler} from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/animationFrame.ts\n **/","import {Action} from './Action';\nimport {Subscription} from '../Subscription';\nimport {QueueScheduler} from './QueueScheduler';\nimport {AnimationFrameAction} from './AnimationFrameAction';\n\nexport class AnimationFrameScheduler extends QueueScheduler {\n  scheduleNow<T>(work: (x?: T) => Subscription, state?: T): Action<T> {\n    return new AnimationFrameAction(this, work).schedule(state);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameScheduler.ts\n **/","import {Action} from './Action';\nimport {FutureAction} from './FutureAction';\nimport {AnimationFrame} from '../util/AnimationFrame';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends FutureAction<T> {\n\n  protected _schedule(state?: T, delay: number = 0): Action<T> {\n    if (delay > 0) {\n      return super._schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    const {scheduler} = this;\n    scheduler.actions.push(this);\n    if (!scheduler.scheduledId) {\n      scheduler.scheduledId = AnimationFrame.requestAnimationFrame(() => {\n        scheduler.scheduledId = null;\n        scheduler.flush();\n      });\n    }\n    return this;\n  }\n\n  protected _unsubscribe(): void {\n\n    const {scheduler} = this;\n    const {scheduledId, actions} = scheduler;\n\n    super._unsubscribe();\n\n    if (actions.length === 0) {\n      scheduler.active = false;\n      if (scheduledId != null) {\n        scheduler.scheduledId = null;\n        AnimationFrame.cancelAnimationFrame(scheduledId);\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/scheduler/AnimationFrameAction.ts\n **/","import { root } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/@reactivex/rxjs/dist/cjs/src/util/AnimationFrame.ts\n **/","import { Observable, Subscriber, AjaxResponse, AjaxRequest } from '@reactivex/rxjs';\nimport { BotConversation, BotMessage, BotMessageGroup } from './directLineTypes'; \n\nexport const domain = \"https://ic-webchat-scratch.azurewebsites.net\";\nconst baseUrl = `${domain}/api/conversations`;\n\nexport const startConversation = (appSecret: string) =>\n    Observable\n        .ajax<AjaxResponse>({\n            method: \"POST\",\n            url: `${baseUrl}`,\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Authorization\": `BotConnector ${appSecret}` \n            }\n        })\n//        .do(ajaxResponse => console.log(\"conversation ajaxResponse\", ajaxResponse))\n        .map(ajaxResponse => ajaxResponse.response as BotConversation);\n\nexport const postMessage = (text: string, conversation: BotConversation) =>\n    Observable\n        .ajax<AjaxResponse>({\n            method: \"POST\",\n            url: `${baseUrl}/${conversation.conversationId}/messages`,\n            body: {\n                text: text,\n                from: null,\n                conversationId: conversation.conversationId\n            },\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `BotConnector ${conversation.token}`\n            }\n        })\n//        .do(ajaxResponse => console.log(\"post message ajaxResponse\", ajaxResponse))\n        .map(ajaxResponse => true);\n\nexport const postFile = (file: File, conversation: BotConversation) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return Observable\n        .ajax<AjaxResponse>({\n            method: \"POST\",\n            url: `${baseUrl}/${conversation.conversationId}/upload`,\n            body: formData,\n            headers: {\n                \"Authorization\": `BotConnector ${conversation.token}`\n            }\n        } as AjaxRequest)\n//        .do(ajaxResponse => console.log(\"post file ajaxResponse\", ajaxResponse))\n        .map(ajaxResponse => true)\n}\n\nexport const getMessages = (conversation: BotConversation) =>\n    new Observable<Observable<BotMessage>>((subscriber:Subscriber<Observable<BotMessage>>) =>\n        messageGroupGenerator(conversation, subscriber)\n    )\n    .concatAll();\n\nconst messageGroupGenerator = (conversation: BotConversation, subscriber: Subscriber<Observable<BotMessage>>, watermark=\"\") => {\n    getMessageGroup(conversation, watermark).subscribe(\n        messageGroup => {\n            const someMessages = messageGroup && messageGroup.messages && messageGroup.messages.length > 0;\n            if (someMessages)\n                subscriber.next(Observable.from(messageGroup.messages));\n\n            setTimeout(\n                () => messageGroupGenerator(conversation, subscriber, messageGroup && messageGroup.watermark),\n                someMessages && messageGroup.watermark ? 0 : 3000\n            );\n        },\n        result => subscriber.error(result)\n    );\n}\n\nconst getMessageGroup = (conversation: BotConversation, watermark?: string) =>\n    Observable\n        .ajax<AjaxResponse>({\n            method: \"GET\",\n            url: `${baseUrl}/${conversation.conversationId}/messages?watermark=${watermark}`,\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Authorization\": `BotConnector ${conversation.token}`\n            }\n        })\n//        .do(ajaxResponse => console.log(\"get messages ajaxResponse\", ajaxResponse))\n        .map(ajaxResponse => ajaxResponse.response as BotMessageGroup);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directLine.ts\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Message } from './App.tsx';\nimport { HistoryMessage } from './HistoryMessage.tsx';\n\nexport const History = (props: {\n    messages: Message[]\n}) => \n     <div id=\"historyFrame\">\n        { props.messages.map((message, index) => <HistoryMessage key={ index.toString() } message={ message }/>) }\n    </div>;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/History.tsx\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Message } from './App.tsx';\n\nexport const HistoryMessage = (props:{\n    message:Message\n}) => {\n    let inside;\n    if (props.message.images && props.message.images.length > 0)\n        inside = props.message.images.map(path => <img src= { path }/>);\n    else\n        inside = props.message.text;\n    return <p>{ props.message.from + \": \"}{ inside }</p>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/HistoryMessage.tsx\n **/","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nexport const Console = (props: {\n    actions: {\n        updateMessage(string): void,\n        sendMessage(): void,\n        sendFile(string): void\n    },\n    text: string,\n    enableSend: boolean\n}) =>\n    <div id=\"outgoingFrame\">\n        <input type=\"file\" id=\"imageUpload\" accept=\"image/*\" multiple onChange={ e => props.actions.sendFile(e.target.files) } />\n        <textarea id=\"outgoing\" value={ props.text } onChange={ e => props.actions.updateMessage(e.target.value) } disabled={ !props.enableSend } />\n        <button id=\"send\" onClick={ props.actions.sendMessage } disabled={ !props.text || props.text.length == 0 || !props.enableSend } >send</button>\n    </div>;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Console.tsx\n **/"],"sourceRoot":""}